within ThermofluidStream.Media;
package myMedia "Library of media property models"
extends Modelica.Icons.Package;
import SI = Modelica.SIunits;
import Cv = Modelica.SIunits.Conversions;

  package UsersGuide "User's Guide of Media Library"
    extends Modelica.Icons.Information;

    package MediumUsage "Medium usage"
      extends Modelica.Icons.Information;

      class BasicUsage "Basic usage"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<h4>Basic usage of medium model</h4>
<p>
Media models in Modelica.Media are provided by packages, inheriting from the
partial package Modelica.Media.Interfaces.PartialMedium. Every package defines:
</p>
<ul>
<li> Medium <strong>constants</strong> (such as the number of chemical substances,
     molecular data, critical properties, etc.).</li>
<li> A BaseProperties <strong>model</strong>, to compute the basic thermodynamic
     properties of the fluid;</li>
<li> <strong>setState_XXX</strong> functions to compute the thermodynamic state record from
     different input arguments (such as density, temperature, and composition which
     would be setState_dTX);</li>
<li> <strong>Functions</strong> to compute additional properties (such as saturation
     properties, viscosity, thermal conductivity, etc.).</li>
</ul>
<p>
There are - as stated above - two different basic ways of using the Media library which
will be described in more details in the following section. One way is to use the model BaseProperties.
Every instance of BaseProperties for any medium model provides <strong>3+nXi
equations</strong> for the following <strong>5+nXi variables</strong> that are declared in
the medium model (nXi is the number of independent mass fractions, see
explanation below):
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Variable</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>T</td>
      <td>K</td>
      <td>temperature</td></tr>
  <tr><td>p</td>
      <td>Pa</td>
      <td>absolute pressure</td></tr>
  <tr><td>d</td>
      <td>kg/m3</td>
      <td>density</td></tr>
  <tr><td>u</td>
      <td>J/kg</td>
      <td>specific internal energy</td></tr>
  <tr><td>h</td>
      <td>J/kg</td>
      <td>specific enthalpy (h = u + p/d)</td></tr>
  <tr><td>Xi[nXi]</td>
      <td>kg/kg</td>
      <td>independent mass fractions m_i/m</td></tr>
  <tr><td>X[nX]</td>
      <td>kg/kg</td>
      <td>All mass fractions m_i/m. X is defined in BaseProperties by:<br>
          X = <strong>if</strong> reducedX <strong>then</strong> vector([Xi; 1-<strong>sum</strong>(Xi)])
          <strong>else</strong> Xi </td></tr>
</table>
<p>
<strong>Two</strong> variables out of p, d, h, or u, as well as the
<strong>mass fractions</strong> Xi are the <strong>independent</strong> variables and the
medium model basically provides equations to compute
the remaining variables, including the full mass fraction vector X
(more details to Xi and X are given further below).
</p>
<p>
In a component, the most basic usage of a medium model is as follows
</p>
<pre>
  <strong>model</strong> Pump
    <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium
                         \"Medium model\" <strong>annotation</strong> (choicesAllMatching = <strong>true</strong>);
    Medium.BaseProperties medium_a \"Medium properties at location a (e.g., port_a)\";
    // Use medium variables (medium_a.p, medium_a.T, medium_a.h, ...)
     ...
  <strong>end</strong> Pump;
</pre>
<p>
The second way is to use the setState_XXX functions to compute the thermodynamic state
record from which all other thermodynamic state variables can be computed (see
<a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.BasicDefinition\">
Basic definition of medium</a> for further details on ThermodynamicState). The setState_XXX functions
accept either X or Xi (see explanation below) and will decide internally which of these two compositions
is provided by the user. The four fundamental setState_XXX functions are provided in PartialMedium
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Function</strong></td>
      <td><strong>Description</strong></td>
      <td><strong>Short-form for<br>single component medium</strong></td></tr>
  <tr><td>setState_dTX</td>
      <td>computes ThermodynamicState from density, temperature, and composition X or Xi</td>
      <td>setState_dT</td></tr>
  <tr><td>setState_phX</td>
      <td>computes ThermodynamicState from pressure, specific enthalpy, and composition X or Xi</td>
      <td>setState_ph</td></tr>
  <tr><td>setState_psX</td>
      <td>computes ThermodynamicState from pressure, specific entropy, and composition X or Xi</td>
      <td>setState_ps</td></tr>
  <tr><td>setState_pTX</td>
      <td>computes ThermodynamicState from pressure, temperature, and composition X or Xi</td>
      <td>setState_pT</td></tr>
</table>
<p>
The simple example that explained the basic usage of BaseProperties would then become
</p>
<pre>
  <strong>model</strong> Pump
    <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium
                         \"Medium model\" <strong>annotation</strong> (choicesAllMatching = <strong>true</strong>);
    Medium.ThermodynamicState state_a \"Thermodynamic state record at location a (e.g., port_a)\";
    // Compute medium variables from thermodynamic state record (pressure(state_a), temperature(state_a),
    // specificEnthalpy(state_a), ...)
    ...
  <strong>end</strong> Pump;
</pre>
<p>
All media models are directly or indirectly a subpackage of package
Modelica.Media.Interfaces.PartialMedium. Therefore,
a medium model in a component should inherit from this
partial package. Via the annotation \"choicesAllMatching = true\" it
is defined that the tool should display a selection box with
all loaded packages that inherit from PartialMedium. An example
is given in the next figure:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Media/UsersGuide/mediumMenu.png\" alt=\"medium selection menu\">
</p>

<p>
A selected medium model leads, e.g., to the following equation:
</p>
<pre>
  Pump pump(<strong>redeclare package</strong> Medium = Modelica.Media.Water.SimpleLiquidWater);
</pre>
<p>
Usually, a medium model is associated with the variables of a
fluid connector. Therefore, equations have to be defined in a model
that relate the variables in the connector with the variables
in the medium model:
</p>
<pre>
  <strong>model</strong> Pump
    <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium
                         \"Medium model\" <strong>annotation</strong> (choicesAllMatching = <strong>true</strong>);
    Medium.BaseProperties medium_a \"Medium properties of port_a\";
    // definition of the fluid port port_a
     ...
  <strong>equation</strong>
    medium.p = port_a.p;
    medium.h = port_a.h;
    medium.Xi = port_a.Xi;
     ...
  <strong>end</strong> Pump;
</pre>
in the case of using BaseProperties or
<pre>
  <strong>model</strong> Pump
    <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium
                         \"Medium model\" <strong>annotation</strong> (choicesAllMatching = <strong>true</strong>);
    Medium.ThermodynamicState state_a \"Thermodynamic state record of medium at port_a\";
    // definition of the fluid port port_a
     ...
  <strong>equation</strong>
    state_a = Medium.setState_phX(port_a.p, port_a.h, port_a.Xi) // if port_a contains the variables
                                                                 // p, h, and Xi
     ...
  <strong>end</strong> Pump;
</pre>
<p>
in the case of using ThermodynamicState.
</p>
<p>
If a component model shall treat both single and multiple
substance fluids, equations for the mass fractions have to be
present (above: medium.Xi = port_a.Xi) in the model. According
to the Modelica semantics, the equations of the mass fractions
are ignored, if the dimension of Xi is zero, i.e., for a single-component
medium. Note, by specific techniques sketched in section
\"Medium definition\", the independent variables in the medium model
need not to be the same as the variables in the connector and still
get the same efficiency, as if the same variables would be used.
</p>

<p>
If a fluid consists of a single
substance, <strong>nXi = 0</strong> and the vector of mass fractions Xi is not
present. If a fluid consists of nS substances,
the medium model may define the number of independent
mass fractions <strong>nXi</strong> to be <strong>nS</strong>, <strong>nS-1</strong>, or zero.
In all cases, balance equations for nXi substances have to be
given in the corresponding component (see discussion below).
Note, that if nXi = nS, the constraint \"sum(Xi)=1\" between the mass
fractions is <strong>not</strong> present in the model; in that case, it is necessary to
provide consistent start values for Xi such that sum(Xi) = 1.
</p>

<p>
The reason for this definition of Xi is that a fluid component library
can be implemented by using only the independent mass fractions Xi and
then via the medium it is defined how Xi is interpreted:
</p>

<ul>
<li> If Xi = nS, then the constraint equation sum(X) = 1 is neglected
     during simulation. By making sure that the initial conditions of X
     fulfill this constraint, it can usually be guaranteed that small
     errors in sum(X) = 1 remain small although this constraint equation is
     not explicitly used during the simulation. This approach is usually useful
     if components of the mixture can become very small. If such a small
     quantity is computed via the equation 1 - sum(X[1:nX-1]), there might
     be large numerical errors and it is better to compute it via
     the corresponding balance equation.</li>
<li> If Xi = nS-1, then the true independent mass fractions are used
     in the fluid component and the last component of X is computed via
     X[nX] = 1 - sum(Xi). This is useful for, e.g., MoistAir, where the
     number of states should be as small as possible without introducing
     numerical problems.</li>
<li> If Xi = 0, then the reference value of composition reference_X is
     assumed. This case is useful to avoid composition states in all
     the cases when the composition will always be constant, e.g., with
     circuits having fixed composition sources.</li>
</ul>

<p>
The full vector of mass fractions <strong>X[nX]</strong> is computed in
PartialMedium.BaseProperties based on Xi, reference_X, and the information whether Xi = nS or nS-1. For single-substance media, nX = 0, so there's also no X vector. For multiple-substance media, nX = nS, and X always contains the full vector of mass fractions. In order to reduce confusion for the user of a fluid component library, \"Xi\" has the annotation \"HideResult=true\", meaning, that this variable is not shown in the plot window. Only X is shown in the plot window and this vector always contains all mass fractions.
</p>
</html>"));
      end BasicUsage;

      class BalanceVolume "Balance volume"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
Fluid libraries usually have balance volume components with one fluid connector
port that fulfill the mass and energy balance and on a different grid components that
fulfill the momentum balance. A balance volume component, called junction
volume below, should be primarily implemented in the following way
(see also the implementation in
<a href=\"modelica://Modelica.Media.Examples.Utilities.PortVolume\">
Modelica.Media.Examples.Utilities.PortVolume</a>):
</p>
<pre>
  <strong>model</strong> JunctionVolume
    <strong>import</strong> SI=Modelica.SIunits;
    <strong>import</strong> Modelica.Media.Examples.Utilities.FluidPort_a;

    <strong>parameter</strong> SI.Volume V = 1e-6 \"Fixed size of junction volume\";
    <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium
                           \"Medium model\" <strong>annotation</strong> (choicesAllMatching = <strong>true</strong>);

    FluidPort_a port(<strong>redeclare package</strong> Medium = Medium);
    Medium.BaseProperties medium(preferredMediumStates = <strong>true</strong>);

    SI.Energy U               \"Internal energy of junction volume\";
    SI.Mass   M               \"Mass of junction volume\";
    SI.Mass   MX[Medium.nXi] \"Independent substance masses of junction volume\";
  <strong>equation</strong>
    medium.p   = port.p;
    medium.h   = port.h;
    medium.Xi = port.Xi;

    M  = V*medium.d;                  // mass of JunctionVolume
    MX = M*medium.Xi;                // mass fractions in JunctionVolume
    U  = M*medium.u;                  // internal energy in JunctionVolume

    <strong>der</strong>(M)  = port.m_flow;    // mass balance
    <strong>der</strong>(MX) = port.mX_flow;   // substance mass balance
    <strong>der</strong>(U)  = port.H_flow;    // energy balance
  <strong>end</strong> JunctionVolume;
</pre>
<p>
Assume the Modelica.Media.Air.SimpleAir medium model is used with
the JunctionVolume model above. This medium model uses pressure p
and temperature T as independent variables. If the flag
\"preferredMediumStates\" is set to <strong>true</strong> in the declaration
of \"medium\", then the independent variables of this medium model
get the attribute \"stateSelect = StateSelect.prefer\", i.e., the
Modelica translator should use these variables as states, if this
is possible. Basically, this means that
constraints between the
potential states p,T and the potential states U,M are present.
A Modelica tool will therefore <strong>automatically</strong>
differentiate medium equations and will use the following
equations for code generation (note the equations related to X are
removed, because SimpleAir consists of a single substance only):
</p>
<pre>
    M  = V*medium.d;
    U  = M*medium.u;

    // balance equations
    <strong>der</strong>(M)  = port.m_flow;
    <strong>der</strong>(U)  = port.H_flow;

    // abbreviations introduced to get simpler terms
    p = medium.p;
    T = medium.T;
    d = medium.d;
    u = medium.u;
    h = medium.h;

    // medium equations
    d = fd(p,T);
    h = fh(p,T);
    u = h - p/d;

    // equations derived <strong>automatically</strong> by a Modelica tool due to index reduction
    <strong>der</strong>(U) = <strong>der</strong>(M)*u + M*<strong>der</strong>(u);
    <strong>der</strong>(M) = V*<strong>der</strong>(d);
    <strong>der</strong>(u) = <strong>der</strong>(h) - <strong>der</strong>(p)/d - p/<strong>der</strong>(d);
    <strong>der</strong>(d) = <strong>der</strong>(fd,p)*<strong>der</strong>(p) + <strong>der</strong>(fd,T)*<strong>der</strong>(T);
    <strong>der</strong>(h) = <strong>der</strong>(fh,p)*<strong>der</strong>(p) + <strong>der</strong>(fd,T)*<strong>der</strong>(T);
</pre>
<p>
Note, that \"der(y,x)\" is an operator that characterizes
in the example above the partial derivative of y with respect to x
(this operator will be included in one of the next Modelica language
releases).
All media models in this library are written in such a way that
at least the partial derivatives of the medium variables with
respect to the independent variables are provided, either because
the equations are directly given (= symbolic differentiation is possible)
or because the derivative of the corresponding function (such as fd above)
is provided. A Modelica tool will transform the equations above
in differential equations with p and T as states, i.e., will
generate equations to compute <strong>der</strong>(p) and <strong>der</strong>(T) as function of p and T.
</p>

<p>
Note, when preferredMediumStates = <strong>false</strong>, no differentiation
will take place and the Modelica translator will use the variables
appearing differentiated as states, i.e., M and U. This has the
disadvantage that for many media non-linear systems of equations are
present to compute the intrinsic properties p, d, T, u, h from
M and U.
</p>
</html>"));
      end BalanceVolume;

      class ShortPipe "Short pipe"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
Fluid libraries have components with two ports that store
neither mass nor energy and fulfill the
momentum equation between their two ports, e.g., a short pipe. In most
cases this means that an equation is present relating the pressure
drop between the two ports and the mass flow rate from one to the
other port. Since no mass or energy is stored, no differential
equations for thermodynamic variables are present. A component model of this type
has therefore usually the following structure
(see also the implementation in
<a href=\"modelica://Modelica.Media.Examples.Utilities.ShortPipe\">
Modelica.Media.Examples.Utilities.ShortPipe</a>):
</p>
<pre>
  <strong>model</strong> ShortPipe
    <strong>import</strong> SI=Modelica.SIunits;
    <strong>import</strong> Modelica.Media.Examples.Utilities;

    // parameters defining the pressure drop equation

    <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium
                           \"Medium model\" <strong>annotation</strong> (choicesAllMatching = <strong>true</strong>);

    Utilities.FluidPort_a port_a (<strong>redeclare package</strong> Medium = Medium);
    Utilities.FluidPort_b port_b (<strong>redeclare package</strong> Medium = Medium);

    SI.Pressure dp = port_a.p - port_b.p \"Pressure drop\";
    Medium.BaseProperties medium_a \"Medium properties in port_a\";
    Medium.BaseProperties medium_b \"Medium properties in port_b\";
  <strong>equation</strong>
    // define media models of the ports
    medium_a.p   = port_a.p;
    medium_a.h   = port_a.h;
    medium_a.Xi = port_a.Xi;

    medium_b.p   = port_b.p;
    medium_b.h   = port_b.h;
    medium_b.Xi = port_b.Xi;

    // Handle reverse and zero flow (semiLinear is a built-in Modelica operator)
    port_a.H_flow   = <strong>semiLinear</strong>(port_a.m_flow, port_a.h, port_b.h);
    port_a.mXi_flow = <strong>semiLinear</strong>(port_a.m_flow, port_a.Xi, port_b.Xi);

    // Energy, mass and substance mass balance
    port_a.H_flow + port_b.H_flow = 0;
    port_a.m_flow + port_b.m_flow = 0;
    port_a.mXi_flow + port_b.mXi_flow = zeros(Medium.nXi);

    // Provide equation: port_a.m_flow = f(dp)
  <strong>end</strong> ShortPipe;
</pre>

<p>
The <strong>semiLinear</strong>(..) operator is basically defined as:
</p>
<pre>
    semiLinear(m_flow, ha, hb) = if m_flow &ge; 0 then m_flow*ha else m_flow*hb;
</pre>

<p>
that is, it computes the enthalpy flow rate either from the port_a or
from the port_b properties, depending on flow direction. The exact
details of this operator are given in
<a href=\"modelica://ModelicaReference.Operators.'semiLinear()'\">
ModelicaReference.Operators.'semiLinear()'</a>. Especially, rules
are defined in the Modelica specification that m_flow = 0 can be treated
in a \"meaningful way\". Especially, if n fluid components (such as pipes)
are connected together and the fluid connector from above is used,
a linear system of equations appear between
medium1.h, medium2.h, medium3.h, ..., port1.h, port2.h, port3.h, ...,
port1.H_flow, port2.H_flow, port3.H_flow, .... The rules for the
semiLinear(..) operator allow the following solution of this
linear system of equations:
</p>

<ul>
<li> n = 2 (two components are connected):<br>
     The linear system of equations can be analytically solved
     with the result
     <pre>
     medium1.h = medium2.h = port1.h = port2.h
     0 = port1.H_flow + port2.H_flow
     </pre>
     Therefore, no problems with zero mass flow rate are present.</li>

<li> n &gt; 2 (more than two components are connected together):<br>
     The linear system of equations is solved numerically during simulation.
     For m_flow = 0, the linear system becomes singular and has an
     infinite number of solutions. The simulator could use the solution t
     that is closest to the solution in the previous time step
     (\"least squares solution\"). Physically, the solution is determined
     by diffusion which is usually neglected. If diffusion is included,
     the linear system is regular.</li>
</ul>

</html>"));
      end ShortPipe;

      class OptionalProperties "Optional properties"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
In some cases additional medium properties are needed.
A component that needs these optional properties has to call
one of the functions listed in the following table. They are
defined as partial functions within package
<a href=\"modelica://Modelica.Media.Interfaces.PartialMedium\">PartialMedium</a>,
and then (optionally) implemented in actual medium packages.
If a component calls such an optional function and the
medium package does not provide a new implementation for this
function, an error message is printed at translation time,
since the function is \"partial\", i.e., incomplete.
The argument of all functions is the <strong>state</strong> record,
automatically defined by the BaseProperties model or specifically computed using the
setState_XXX functions, which contains the
minimum number of thermodynamic variables needed to compute all the additional
properties. In the table it is assumed that there is a declaration of the
form:
</p>
<pre>
   <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium;
   Medium.ThermodynamicState state;
</pre>

<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Function call</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>Medium.dynamicViscosity(state)</td>
      <td>Pa.s</td>
      <td>dynamic viscosity</td></tr>
  <tr><td>Medium.thermalConductivity(state)</td>
      <td>W/(m.K)</td>
      <td>thermal conductivity</td></tr>
  <tr><td>Medium.prandtlNumber(state)</td>
      <td>1</td>
      <td>Prandtl number</td></tr>
  <tr><td>Medium.specificEntropy(state)</td>
      <td>J/(kg.K)</td>
      <td>specific entropy</td></tr>
  <tr><td>Medium.specificHeatCapacityCp(state)</td>
      <td>J/(kg.K)</td>
      <td>specific heat capacity at constant pressure</td></tr>
  <tr><td>Medium.specificHeatCapacityCv(state)</td>
      <td>J/(kg.K)</td>
      <td>specific heat capacity at constant density</td></tr>
  <tr><td>Medium.isentropicExponent(state)</td>
      <td>1</td>
      <td>isentropic exponent</td></tr>
  <tr><td>Medium.isentropicEnthatlpy(pressure, state)</td>
      <td>J/kg</td>
      <td>isentropic enthalpy</td></tr>
  <tr><td>Medium.velocityOfSound(state)</td>
      <td>m/s</td>
      <td>velocity of sound</td></tr>
  <tr><td>Medium.isobaricExpansionCoefficient(state)</td>
      <td>1/K</td>
      <td>isobaric expansion coefficient</td></tr>
  <tr><td>Medium.isothermalCompressibility(state)</td>
      <td>1/Pa</td>
      <td>isothermal compressibility</td></tr>
  <tr><td>Medium.density_derp_h(state)</td>
      <td>kg/(m3.Pa)</td>
      <td>derivative of density by pressure at constant enthalpy</td></tr>
  <tr><td>Medium.density_derh_p(state)</td>
      <td>kg2/(m3.J)</td>
      <td>derivative of density by enthalpy at constant pressure</td></tr>
  <tr><td>Medium.density_derp_T(state)</td>
      <td>kg/(m3.Pa)</td>
      <td>derivative of density by pressure at constant temperature</td></tr>
  <tr><td>Medium.density_derT_p(state)</td>
      <td>kg/(m3.K)</td>
      <td>derivative of density by temperature at constant pressure</td></tr>
  <tr><td>Medium.density_derX(state)</td>
      <td>kg/m3</td>
      <td>derivative of density by mass fraction</td></tr>
  <tr><td>Medium.molarMass(state)</td>
      <td>kg/mol</td>
      <td>molar mass</td></tr>
</table>
<p>
There are also some short forms provided for user convenience that allow the computation of certain
thermodynamic state variables without using the ThermodynamicState record explicitly. Those short forms
are for example useful to compute consistent start values in the initial equation section. Let's
consider the function temperature_phX(p,h,X) as an example. This function computes the temperature
from pressure, specific enthalpy, and composition X (or Xi) and is a short form for writing
</p>
<pre>
  temperature(setState_phX(p,h,X))
</pre>
<p>
The following functions are predefined in PartialMedium (other functions can be added in the actual
medium implementation package if they are useful)
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td>Medium.specificEnthalpy_pTX(p,T,X)</td>
      <td>J/kg</td>
      <td>Specific enthalpy at p, T, X </td></tr>
  <tr><td>Medium.temperature_phX(p,h,X)</td>
      <td>K</td>
      <td>Temperature at p, h, X</td></tr>
  <tr><td>Medium.density_phX(p,h,X)</td>
      <td>kg/m3</td>
      <td>Density at p, h, X</td></tr>
  <tr><td>Medium.temperature_psX(p,s,X)</td>
      <td>K</td>
      <td>Temperature at p, s, X</td></tr>
  <tr><td>Medium.specificEnthalpy_psX(p,s,X)</td>
      <td>J/(kg.K)</td>
      <td>Specific entropy at p, s, X</td></tr>
</table>
<p>
Assume for example that the dynamic viscosity eta is needed in
the pressure drop equation of a short pipe. Then, the
model of a short pipe has to be changed to:
</p>
<pre>
  <strong>model</strong> ShortPipe
      ...
    Medium.BaseProperties medium_a \"Medium properties in port_a\";
    Medium.BaseProperties medium_b \"Medium properties in port_b\";
      ...
    Medium.DynamicViscosity eta;
      ...
    eta = <strong>if</strong> port_a.m_flow &gt; 0 <strong>then</strong>
               Medium.dynamicViscosity(medium_a.state)
          <strong>else</strong>
               Medium.dynamicViscosity(medium_b.state);
    // use eta in the pressure drop equation: port_a.m_flow = f(dp, eta)
  <strong>end</strong> ShortPipe;
</pre>

<p>
Note, \"Medium.DynamicViscosity\" is a type defined in Modelica.Interfaces.PartialMedium
as
</p>

<pre>
  <strong>import</strong> SI = Modelica.SIunits;
  <strong>type</strong> DynamicViscosity = SI.DynamicViscosity (
                                     min=0,
                                     max=1.e8,
                                     nominal=1.e-3,
                                     start=1.e-3);
</pre>

<p>
Every medium model may modify the attributes, to provide, e.g.,
min, max, nominal, and start values adapted to the medium.
Also, other types, such as AbsolutePressure, Density, MassFlowRate,
etc. are defined in PartialMedium. Whenever possible, these medium
specific types should be used in a model in order that medium information,
e.g., about nominal or start values, are automatically utilized.
</p>
</html>"));
      end OptionalProperties;

      class Constants "Constants"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
Every medium model provides the following <strong>constants</strong>. For example,
if a medium is declared as:
</p>
<pre>
   <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium;
</pre>
<p>
then constants \"Medium.mediumName\", \"Medium.nX\", etc. are defined:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Type</strong></td>
      <td><strong>Name</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>String</td><td>mediumName</td>
      <td>Unique name of the medium (is usually used to check whether
          the media in different components connected together
          are the same, by providing Medium.mediumName as quantity
          attribute of the mass flow rate in the connector)</td></tr>
  <tr><td>String</td><td>substanceNames[nS]</td>
      <td>Names of the substances that make up the medium.
          If only one substance is present, substanceNames = {mediumName}.</td></tr>
  <tr><td>String</td><td>extraPropertiesNames[nC]</td>
      <td>Names of the extra transported substances, outside of mass and
          energy balances.</td></tr>
  <tr><td>Boolean</td><td>singleState</td>
      <td>= <strong>true</strong>, if u and d are not a function of pressure, and thus only
          a function of a single thermal variable (temperature or enthalpy) and
          of Xi for a multiple substance medium. Usually, this flag is
          <strong>true</strong> for incompressible media. It is used in a model to determine
          whether 1+nXi (singleState=<strong>true</strong>) or 2+nXi (singleState=<strong>false</strong>)
          initial conditions have to be provided for a volume element that
          contains mass and energy balance.</td></tr>
  <tr><td>AbsolutePressure</td><td>reference_p</td>
      <td>Reference pressure for the medium</td></tr>
  <tr><td>MassFraction</td><td>reference_X[nX]</td>
      <td>Reference composition for the medium</td></tr>
  <tr><td>AbsolutePressure</td><td>p_default</td>
      <td>Default value for pressure of medium (for initialization)</td></tr>
  <tr><td>Temperature</td><td>T_default</td>
      <td>Default value for temperature of medium (for initialization)</td></tr>
  <tr><td>SpecificEnthalpy</td><td>h_default</td>
      <td>Default value for specific enthalpy of medium (for initialization)</td></tr>
  <tr><td>MassFraction</td><td>X_default[nX]</td>
      <td>Default value for mass fractions of medium (for initialization)</td></tr>
  <tr><td>Integer</td><td>nS</td>
      <td>number of substances contained in the medium.</td></tr>
  <tr><td>Integer</td><td>nX</td>
      <td>Size of the full mass fraction vector X nX=nS.</td></tr>
  <tr><td>Integer</td><td>nXi</td>
      <td>Number of independent mass fractions. If there is a single substance,
          then nXi = 0. </td></tr>
  <tr><td>Boolean</td><td>reducedX</td>
      <td>= <strong>true</strong>, if the medium has a single substance, or if the medium model
          has multiple substances and contains the equation sum(X) = 1.
          In both cases, nXi = nS - 1 (unless fixedX = true).<br>
          = <strong>false</strong>, if the medium has multiple substances and does not contain the
          equation sum(X)=1, i.e., nXi = nX = nS (unless fixedX = true).
       </td></tr>
  <tr><td>Boolean</td><td>fixedX</td>
      <td>= <strong>false</strong>: the composition of the medium can vary, and is
          determined by nXi independent mass fractions (see reducedX above).<br>
          = <strong>true</strong>: the composition of the medium is always reference_X,
          and nXi = 0.</td></tr>
  <tr><td>FluidConstants</td><td>fluidConstants[nS]</td>
      <td>Critical, triple, molecular and other
          standard data that are provided for
          every substance of a medium.</td></tr>
</table>

<p>
The record FluidConstants that is defined in PartialMedium contains the following elements
</p>

<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Type</strong></td>
      <td><strong>Name</strong></td>
      <td><strong>Description</strong></td></tr>

  <tr><td>String</td>
      <td>iupacName</td>
      <td>complete IUPAC name</td></tr>

  <tr><td>String</td>
      <td>casRegistryNumber</td>
      <td>chemical abstracts sequencing number</td></tr>

  <tr><td>String</td>
      <td>chemicalFormula</td>
      <td>Chemical formula, (brutto, nomenclature according to Hill)</td></tr>

  <tr><td>String</td>
      <td>structureFormula</td>
      <td>Chemical structure formula</td></tr>

  <tr><td>MolarMass</td>
      <td>molarMass</td>
      <td>molar mass</td></tr>
</table>

<p> This record is extended in the partial packages further down the hierarchy (such as
PartialTwoPhaseMedium or PartialMixtureMedium) and may contain some or all of the following
elements</p>

<table border=1 cellspacing=0 cellpadding=2>
  <tr><td>Temperature</td>
      <td>criticalTemperature</td>
      <td>critical temperature</td></tr>

  <tr><td>AbsolutePressure</td>
      <td>criticalPressure</td>
      <td>critical pressure</td></tr>

  <tr><td>MolarVolume</td>
      <td>criticalMolarVolume</td>
      <td>critical molar Volume</td></tr>

  <tr><td>Real</td>
      <td>acentricFactor</td>
      <td>Pitzer acentric factor</td></tr>

  <tr><td>Temperature</td>
      <td>triplePointTemperature</td>
      <td>triple point temperature</td></tr>

  <tr><td>AbsolutePressure</td>
      <td>triplePointPressure</td>
      <td>triple point pressure</td></tr>

  <tr><td>Temperature</td>
      <td>meltingPoint</td>
      <td>melting point at 101325 Pa</td></tr>

  <tr><td>Temperature</td>
      <td>normalBoilingPoint</td>
      <td>normal boiling point (at 101325 Pa)</td></tr>

  <tr><td>DipoleMoment</td>
      <td>dipoleMoment</td>
      <td>dipole moment of molecule in Debye (1 debye = 3.33564e10-30 C.m)</td></tr>

  <tr><td>Boolean</td>
      <td>hasIdealGasHeatCapacity</td>
      <td>true if ideal gas heat capacity is available</td></tr>

  <tr><td>Boolean</td>
      <td>hasCriticalData</td>
      <td>true if critical data are known</td></tr>

  <tr><td>Boolean</td>
      <td>hasDipoleMoment</td>
      <td>true if a dipole moment known</td></tr>

  <tr><td>Boolean</td>
      <td>hasFundamentalEquation</td>
      <td>true if a fundamental equation</td></tr>

  <tr><td>Boolean</td>
      <td>hasLiquidHeatCapacity</td>
      <td>true if liquid heat capacity is available</td></tr>

  <tr><td>Boolean</td>
      <td>hasSolidHeatCapacity</td>
      <td>true if solid heat capacity is available</td></tr>

  <tr><td>Boolean</td>
      <td>hasAccurateViscosityData</td>
      <td>true if accurate data for a viscosity function is available</td></tr>

  <tr><td>Boolean</td>
      <td>hasAccurateConductivityData</td>
      <td>true if accurate data for thermal conductivity is available</td></tr>

  <tr><td>Boolean</td>
      <td>hasVapourPressureCurve</td>
      <td>true if vapour pressure data, e.g., Antoine coefficients are known</td></tr>

  <tr><td>Boolean</td>
      <td>hasAcentricFactor</td>
      <td>true if Pitzer acentric factor is known</td></tr>

  <tr><td>SpecificEnthalpy</td>
      <td>HCRIT0</td>
      <td>Critical specific enthalpy of the fundamental equation</td></tr>

  <tr><td>SpecificEntropy</td>
      <td>SCRIT0</td>
      <td>Critical specific entropy of the fundamental equation</td></tr>

  <tr><td>SpecificEnthalpy</td>
      <td>deltah</td>
      <td>Difference between specific enthalpy model
          (h_m) and f.eq. (h_f) (h_m - h_f)</td></tr>

  <tr><td>SpecificEntropy</td>
      <td>deltas</td>
      <td>Difference between specific enthalpy model (s_m) and f.eq.
          (s_f) (s_m - s_f)</td></tr>

</table>

</html>"));
      end Constants;

      class TwoPhase "Two-phase media"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
Models for media which can exist in one-phase or two-phase conditions inherit
from <a href=\"modelica://Modelica.Media.Interfaces.PartialTwoPhaseMedium\">
Modelica.Media.Interfaces.PartialTwoPhaseMedium</a>
(which inherits from PartialMedium). The basic usage of these
media models is the same as described in the previous sections. However, additional
functionalities are provided, which apply only to potentially two-phase media.
</p>
<p>
The following additional medium <strong>constants</strong> are provided:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Type</strong></td>
      <td><strong>Name</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>Boolean</td>
      <td>smoothModel</td>
      <td>If this flag is false (default value), then events are triggered
          whenever the saturation boundary is crossed; otherwise, no events
      are generated.</td></tr>
  <tr><td>Boolean</td>
      <td>onePhase</td>
      <td>If this flag is true, then the medium model assumes it will be never
          called in the two-phase region. This can be useful to speed up
      the computations in a two-phase medium, when the user is sure it will
      always work in the one-phase region. Default value: false.</td></tr>
</table>
<p>
The setState_ph(), setState_ps(), setState_dT() and setState_pT() functions have
one extra input, named <em>phase</em>. If the phase input is not specified, or if
it is given a value of zero, then the setState function will determine the phase,
based on the other input values. An input phase = 1 will force the setState
function to return a state vector corresponding to a one-phase state, while
phase = 2 will force the setState value to return a state vector corresponding
to a two-phase state, as shown in the following example;
</p>
<pre>
   <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialTwoPhaseMedium;
   Medium.ThermodynamicState state, state1, state2;
 <strong>equation</strong>
   // Set the state, given the pressure and the specific enthalpy
   // the phase is determined by the (p, h) values, and can be retrieved
   // from the state record
   state = Medium.setState_ph(p, h);
   phase = state1.phase;

   // Force the computation of the state with one-phase
   // equations of state, irrespective of the (p, h) values
   state1 = Medium.setState_ph(p, h, 1);

   // Force the computation of the state with 2-phase
   // equations of state, irrespective of the (p, h) values
   state2 = Medium.setState_ph(p, h, 2);
</pre>
<p>
This feature can be used for the following purposes:
</p>
<ul>
<li> saving computational time, if one knows in advance the phase of the medium;</li>
<li> unambiguously determine the phase, when the two inputs correspond to a point on the saturation boundary (the derivative functions have substantially different values on either side);</li>
<li> get the properties of metastable states, like superheated water or subcooled vapour.</li>
</ul>
<p>
Many additional optional functions are defined to compute properties of
saturated media, either liquid (bubble point) or vapour (dew point).
The argument to such functions is a SaturationProperties record, which can be
set starting from either the saturation pressure or the saturation temperature,
as shown in the following example.
</p>
<pre>
   <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialTwoPhaseMedium;
   Medium.SaturationProperties sat_p;
   Medium.SaturationProperties sat_T;
 <strong>equation</strong>
   // Set sat_p to saturation properties at pressure p
   sat_p = Medium.setSat_p(p);

   // Compute saturation properties at pressure p
   saturationTemperature_p = Medium.saturationTemperature_sat(sat_p);
   bubble_density_p =        Medium.bubbleDensity(sat_p);
   dew_enthalpy_p   =        Medium.dewEnthalpy(sat_p);

   // Set sat_T to saturation properties at temperature T
   sat_T = Medium.setSat_T(T);

   // Compute saturation properties at temperature T
   saturationTemperature_T = Medium.saturationPressure_sat(sat_T);
   bubble_density_T =        Medium.bubbleDensity(sat_T);
   dew_enthalpy_T =          Medium.dewEnthalpy(sat_T);
</pre>
<p>With reference to a model defining a pressure p, a temperature T, and a
SaturationProperties record sat, the following functions are provided:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Function call</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>Medium.saturationPressure(T)</td>
      <td>Pa</td>
      <td>Saturation pressure at temperature T</td></tr>
  <tr><td>Medium.saturationTemperature(p)</td>
      <td>K</td>
      <td>Saturation temperature at pressure p</td></tr>
  <tr><td>Medium.saturationTemperature_derp(p)</td>
      <td>K/Pa</td>
      <td>Derivative of saturation temperature with respect to pressure</td></tr>
  <tr><td>Medium.saturationTemperature_sat(sat)</td>
      <td>K</td>
      <td>Saturation temperature</td></tr>
  <tr><td>Medium.saturationPressure_sat(sat)</td>
      <td>Pa</td>
      <td>Saturation pressure</td></tr>
  <tr><td>Medium.bubbleEnthalpy(sat)</td>
      <td>J/kg</td>
      <td>Specific enthalpy at bubble point</td></tr>
  <tr><td>Medium.dewEnthalpy(sat)</td>
      <td>J/kg</td>
      <td>Specific enthalpy at dew point</td></tr>
  <tr><td>Medium.bubbleEntropy(sat)</td>
      <td>J/(kg.K)</td>
      <td>Specific entropy at bubble point</td></tr>
  <tr><td>Medium.dewEntropy(sat)</td>
      <td>J/(kg.K)</td>
      <td>Specific entropy at dew point</td></tr>
  <tr><td>Medium.bubbleDensity(sat)</td>
      <td>kg/m3</td>
      <td>Density at bubble point</td></tr>
  <tr><td>Medium.dewDensity(sat)</td>
      <td>kg/m3</td>
      <td>Density at dew point</td></tr>
  <tr><td>Medium.saturationTemperature_derp_sat(sat)</td>
      <td>K/Pa</td>
      <td>Derivative of saturation temperature with respect to pressure</td></tr>
  <tr><td>Medium.dBubbleDensity_dPressure(sat)</td>
      <td>kg/(m3.Pa)</td>
      <td>Derivative of density at bubble point with respect to pressure</td></tr>
  <tr><td>Medium.dDewDensity_dPressure(sat)</td>
      <td>kg/(m3.Pa)</td>
      <td>Derivative of density at dew point with respect to pressure</td></tr>
  <tr><td>Medium.dBubbleEnthalpy_dPressure(sat)</td>
      <td>J/(kg.Pa)</td>
      <td>Derivative of specific enthalpy at bubble point with respect to pressure</td></tr>
  <tr><td>Medium.dDewEnthalpy_dPressure(sat)</td>
      <td>J/(kg.Pa)</td>
      <td>Derivative of specific enthalpy at dew point with respect to pressure</td></tr>
  <tr><td>Medium.surfaceTension(sat)</td>
      <td>N/m</td>
      <td>Surface tension between liquid and vapour phase</td></tr>
</table>
<p>
Sometimes it can be necessary to compute fluid properties in the thermodynamic
plane, just inside or outside the saturation dome. In this case, it is possible
to obtain an instance of a ThermodynamicState state vector, and then use it
to call the additional functions already defined for one-phase media.
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Function call</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>Medium.setBubbleState(sat, phase)</td>
      <td>Obtain the thermodynamic state vector
          corresponding to the bubble point. If phase==1 (default), the state is
      on the one-phase side; if phase==2, the state is on the two-phase
      side </td></tr>
  <tr><td>Medium.setDewState(sat, phase)</td>
      <td>Obtain the thermodynamic state vector
          corresponding to the dew point. If phase==1 (default), the state is
      on the one-phase side; if phase==2, the state is on the two-phase
      side </td></tr>
  </table>
<p>
Here are some examples:
</p>
<pre>
   <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialTwoPhaseMedium;
   Medium.SaturationProperties sat;
   Medium.ThermodynamicState   dew_1;    // dew point, one-phase side
   Medium.ThermodynamicState   bubble_2; // bubble point, two phase side
 <strong>equation</strong>
   // Set sat to saturation properties at pressure p
   sat = setSat_p(p);

   // Compute dew point properties, (default) one-phase side
   dew_1 = setDewState(sat);
   cpDew = Medium.specificHeatCapacityCp(dew_1);
   drho_dp_h_1 = Medium.density_derp_h(dew_1);

   // Compute bubble point properties, two-phase side
   bubble_2    = setBubbleState(sat, 2);
   drho_dp_h_2 = Medium.density_derp_h(bubble_2);
</pre>
</html>"));
      end TwoPhase;

      class Initialization "Initialization"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>

<p>
When a medium model is used in a balance volume, differential
equations for the independent medium variables are present and
therefore initial conditions have to be provided.
The following possibilities exist:
</p>

<h4>Steady state initialization</h4>
<p>
Modelica has currently no language element to define
steady state initialization. In the Modelica simulation
environment Dymola, the option
</p>
<pre>
   Advanced.DefaultSteadyStateInitialization = <strong>true</strong>
</pre>
<p>
can be set before translation. Then, missing initial
conditions are provided by automatically setting appropriate
state derivatives to zero.
</p>

<h4>Explicit start values or initial equations</h4>
<p>
Explicit start values can be defined with the \"start\" and
\"fixed\" attributes. The number of independent variables nx
need to be known which can be deduced from the medium
constants (nx = nXi + <strong>if</strong> singleState <strong>then</strong> 1 <strong>else</strong> 2).
Then, start values or initial equations can be defined
for nx variables (= p, T, d, u, h, Xi) from Medium.BaseProperties,
e.g., in the form:
</p>
<pre>
     <strong>replaceable</strong> package Medium = Medium.Interfaces.PartialMedium;
     Medium.BaseProperties medium1 (p(start=1e5, fixed=<strong>not</strong> Medium.singleState),
                                    T(start=300, fixed=<strong>true</strong>));
     Medium.BaseProperties medium2;
  <strong>initial equation</strong>
     <strong>if not</strong> Medium.singleState <strong>then</strong>
        medium2.p = 1e5;
     <strong>end if</strong>;
     medium2.T = 300;
  <strong>equation</strong>
  </pre>
<p>
If initial conditions are not provided for the independent
medium variables, non-linear systems of equations may
occur to compute the initial values of the independent
medium variables from the provided initial conditions.
</p>

<h4>Guess values</h4>
<p>
If non-linear systems of equations occur during initialization,
e.g., in case of steady state initialization, guess values
for the iteration variables of the non-linear system of equations
have to be provided via the \"start\" attribute (and fixed=false).
Unfortunately, it is usually not known in
advance which variables are selected as iteration variables of
a non-linear system of equations. One of the following possibilities
exist:
</p>
<ul>
<li> Do not supply start values and hope that the medium specific
     types have meaningful start values, such as in \"Medium.AbsolutePressure\"
     </li>
<li> Supply start values on all variables of the BaseProperties model,
     i.e., on p, T, d, u, h, Xi.</li>
<li> Determine the iteration variables of the non-linear systems of
     equations and provide start values for these variables.
     In the Modelica simulation environment Dymola, the iteration
     variables can be determined by setting the command
     <code>Advanced.OutputModelicaCode = <strong>true</strong></code>
     and by inspection of the file \"dsmodel.mof\" that is generated
     when this option is set (search for \"nonlinear\").</li>
</ul>
</html>"));
      end Initialization;

      annotation (DocumentationClass=true, Documentation(info="<html>
<p>
Content:
</p>
<ol>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.BasicUsage\">Basic usage of medium model</a></li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.BalanceVolume\">Medium model for a balance volume</a></li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.ShortPipe\">Medium model for a pressure loss</a></li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.OptionalProperties\">Optional medium properties</a></li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.Constants\">Constants provided by medium model</a></li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.TwoPhase\">Two-phase media</a></li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.Initialization\">Initialization</a></li>
</ol>

<p>
A good demonstration how to use the media from Modelica.Media is
given in package ModelicaTest.Media.TestsWithFluid. Under
<a href=\"modelica://Modelica.Media.Examples.Utilities\">
Modelica.Media.Examples.Utilities</a> the most basic components of a Fluid library
are defined. Additional media models with some very simple piping networks can be found in the
<a href=\"https://github.com/modelica/ModelicaStandardLibrary/tree/master/ModelicaTest\">ModelicaTest library</a> under
<code>ModelicaTest.Media.TestsWithFluid.MediaTestModels</code>.
</p>

</html>"));
    end MediumUsage;

    package MediumDefinition "Medium definition"
      extends Modelica.Icons.Information;

      class BasicStructure "Basic structure"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
A medium model of Modelica.Media is essentially a <strong>package</strong>
that contains the following definitions:
</p>
<ul>
<li>
Definition of <strong>constants</strong>, such as the medium name.</li>
<li>
A <strong>model</strong> in the package that contains the 3 basic
thermodynamic equations that relate the 5+nXi primary medium variables.</li>
<li><strong>Optional functions</strong> to compute medium properties that are
only needed in certain circumstances, such as dynamic viscosity. These optional
functions need not be provided by every medium model.</li>
<li>
<strong>Type</strong> definitions, which are adapted to the particular
medium. For example, a type <strong>Temperature</strong> is defined where the attributes
<strong>min</strong>
and <strong>max</strong> define the validity region of the medium, and a suitable default
start value is given. In a device model, it is advisable to use these type
definitions, e.g., for parameters, in order that medium limits are checked as
early as possible, and that iteration variables of non-linear
systems of equations get reasonable start values.</li>
</ul>
<p>
Note, although we use the term <strong>medium model</strong>, it
is actually a Modelica <strong>package</strong> that contains all the constants and
definitions required for a complete <strong>medium model</strong>. The basic interface to a
medium is defined by Modelica.Media.Interfaces.PartialMedium that has the
following structure:</p>
<pre>
<strong>partial package</strong> PartialMedium
  <strong>import</strong> SI = Modelica.SIunits;
  <strong>constant</strong> String           mediumName = \"\";
  <strong>constant</strong> String           substanceNames[:] = {mediumName};
  <strong>constant</strong> String           extraPropertiesNames[:] = fill(\"\",0);
  <strong>constant</strong> Boolean          singleState = <strong>false</strong>;
  <strong>constant</strong> Boolean          reducedX = <strong>true</strong>;
  <strong>constant</strong> Boolean          fixedX = <strong>false</strong>;
  <strong>constant</strong> AbsolutePressure reference_p = 101325;
  <strong>constant</strong> MassFraction     reference_X[nX]=fill(1/nX,nX);
  <strong>constant</strong> AbsolutePressure p_default = 101325;
  <strong>constant</strong> Temperature      T_default = Modelica.SIunits.Conversions.from_degC(20);
  <strong>constant</strong> SpecificEnthalpy h_default =
                            specificEnthalpy_pTX(p_default, T_default, X_default);
  <strong>constant</strong> MassFraction     X_default[nX]=reference_X;
  <strong>final constant</strong> Integer    nS  = size(substanceNames,1);
  <strong>final constant</strong> Integer    nX  = nS;
  <strong>final constant</strong> Integer    nXi = <strong>if</strong> fixedX <strong>then</strong> 0
                                  <strong>else if</strong> reducedX <strong>or</strong> nS == 1
                                  <strong>then</strong> nS-1 <strong>else</strong> nS;
  <strong>final constant</strong> Integer    nC  = size(extraPropertiesNames,1);
  <strong>constant</strong> FluidConstants[nS] fluidConstants;

  <strong>replaceable record</strong> BasePropertiesRecord
    AbsolutePressure p;
    Density d;
    Temperature T;
    SpecificEnthalpy h;
    SpecificInternalEnergy u;
    MassFraction[nX] X;
    MassFraction[nXi] Xi;
    SpecificHeatCapacity R;
    MolarMass MM;
  <strong>end</strong> BasePropertiesRecord;

  <strong>replaceable partial model</strong> BaseProperties
    <strong>extends</strong> BasePropertiesRecord;
    ThermodynamicState state;
    <strong>parameter</strong> Boolean preferredMediumStates=false;
    SI.Conversions.NonSIunits.Temperature_degC T_degC =
       Modelica.SIunits.Conversions.to_degC(T)
    SI.Conversions.NonSIunits.Pressure_bar p_bar =
       Modelica.SIunits.Conversions.to_bar(p)
  <strong>equation</strong>
    Xi = X[1:nXi];
    <strong>if</strong> nX > 1 <strong>then</strong>
       <strong>if</strong> fixedX <strong>then</strong>
          X = reference_X;
       <strong>elseif</strong> reducedX <strong>then</strong>
          X[nX] = 1 - sum(Xi);
       <strong>end if</strong>;
    <strong>end if</strong>;
    // equations such as
    //    d = d(p,T);
    //    u = u(p,T);
    //    h = u + p/d;
    //    state.p = p;
    //    state.T = T;
    // will go here in actual media implementations, but are not present
    // in the base class since the ThermodynamicState record is still empty
   <strong>end</strong> BaseProperties

  <strong>replaceable record</strong> ThermodynamicState
     // there are no \"standard\" thermodynamic variables in the base class
     // but they will be defined here in actual media extending PartialMedium
     // Example:
     //    AbsolutePressure p \"Absolute pressure of medium\";
     //    Temperature      T \"Temperature of medium\";
  <strong>end</strong> ThermodynamicState;

  // optional medium properties
  <strong>replaceable partial function</strong> dynamicViscosity
    <strong>input</strong>  ThermodynamicState state;
    <strong>output</strong> DynamicViscosity eta;
  <strong>end</strong> dynamicViscosity;

  // other optional functions

  // medium specific types
  <strong>type</strong> AbsolutePressure = SI.AbsolutePressure (
                               min     = 0,
                               max     = 1.e8,
                               nominal = 1.e5,
                               start   = 1.e5);
  <strong>type</strong> DynamicViscosity = ...;
  // other type definitions
<strong>end</strong> PartialMedium;
</pre>
<p>
We will discuss all parts of this package in the
following paragraphs. An actual medium model should extend from PartialMedium
and has to provide implementations of the various parts.
</p>

<p>
Some of the constants at the beginning of the package do not have a value yet
(this is valid in Modelica), but a value has to be provided when extending from
package PartialMedium. A given value can be modified until the model is
translated or the <strong>final</strong> prefix is set.
The reason to use constants instead of parameters in the model BaseProperties
is that some of these constants are used in a context where parameters
are not allowed. For example, in connector definitions the
number of independent mass fractions nXi is used as dimension
of a vector Xi. When defining the
connector, only <em>constants</em> in packages can be accessed, but not
<em>parameters</em> in a model, because a connector cannot contain an instance
of BaseProperties.
</p>

<p>The record BasePropertiesRecord contains the variables
primarily used in balance equations. Three equations for these variables have
to be provided by every medium in model BaseProperties, plus two equations
for the gas constant and the molar mass.
</p>

<p>Optional medium properties are defined by functions, such as the function
dynamicViscosity (see code Section above) to compute the dynamic viscosity.
The argument of those functions is the ThermodynamicState record, defined
in BaseProperties, which contains the minimum number of thermodynamic variables
needed as an input to compute all the optional properties.
This construction simplifies the usage
considerably as demonstrated in the following code fragment:
</p>

<pre>
  <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium;
  Medium.BaseProperties   medium;
  Medium.DynamicViscosity eta;
  ...
  U   = m*medium.u; //Internal energy
  eta = Medium.dynamicViscosity(medium.state);
</pre>

<p>Medium is the medium package that satisfies the
requirements of a PartialMedium (when using the model above, a value for
Medium has to be provided by a redeclaration). The medium component is an
instance of the model Medium.BaseProperties and contains the core medium
equations. Variables in this model can be accessed just by dot-notation, such
as medium.u or medium.T. If an optional medium variable has to be computed, the
corresponding function from the actual Medium package is called, such as
Medium.dynamicViscosity. The medium.state vector can be given as input argument
to this function, and its fields are kept consistent to those of BaseProperties
by suitable equations, contained in BaseProperties itself (see above).
</p>

<p>If a medium model does not provide implementations of all
optional functions and one of these functions is called in a model, an error
occurs during translation since the optional functions which have not been
redeclared have the <em>partial</em> attribute. For example, if function
dynamicViscosity is not provided in the medium model when it is used, only
simple pressure drop loss models without a reference to the viscosity can be
used and not the sophisticated ones.
</p>

<p>At the bottom of the PartialMedium package type declarations
are present, that are used in all other parts of the PartialMedium package and
that should be used in all models and connectors where a medium model is
accessed. The reason is that minimum, maximum, nominal, and start
values are defined and these values can be adapted to the particular medium at
hand. For example, the nominal value of AbsolutePressure is 10<sup>5</sup>
Pa. If a simple model of water steam is used that is only valid above 100 &deg;C,
then the minimum value in the Temperature type should be set to this value. The
minimum and maximum values are also important for parameters in order to get an
early message if data outside of the validity region is given. The nominal
attribute is important as a scaling value if the variable is used as a state in
a differential equation or as an iteration variable in a non-linear system of
equations. The start attribute can be very useful to provide a meaningful
default start or guess value if the variable is used, e.g., as iteration
variable in a non-linear system of equations. Note, that all these attributes
can be set specifically for a medium in the following way:
</p>

<pre>
<strong>package</strong> MyMedium
  <strong>extends</strong> Modelica.Media.Interfaces.PartialMedium(
     ...
     Temperature(min=373));
<strong>end</strong> MyMedium;
</pre>

<p>
The type PartialMedium.MassFlowRate is defined as
</p>

<pre>
<strong>type</strong> MassFlowRate = Modelica.SIunits.MassFlowRate
     (quantity = \"MassFlowRate.\" + mediumName);
</pre>

<p>Note that the constant mediumName, that has to be
defined in every medium model, is used in the quantity attribute. For example,
if mediumName = SimpleLiquidWater, then the quantity attribute has the value
MassFlowRate.SimpleLiquidWater. This type should be used in a connector
definition of a fluid library:
</p>

<pre>
<strong>connector</strong> FluidPort
  <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium;
  <strong>flow</strong> Medium.MassFlowRate m_flow;
  ...
<strong>end</strong> FluidPort;
</pre>

<p>In the model where this connector is used, the actual
Medium has to be defined. Connectors can only be connected together, if the
corresponding attributes are either not defined or have identical values. Since
mediumName is part of the quantity attribute of MassFlowRate, it is not
possible to connect connectors with different media models together.</p>
</html>"));
      end BasicStructure;

      class BasicDefinition "Basic definition"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
Let's now walk through the definition of a new medium model. Please refer to
<a href=\"modelica://Modelica.Media.Interfaces.TemplateMedium\">
Modelica.Media.Interfaces.TemplateMedium</a> to obtain a template of the new
medium model code. For the moment being, consider a single-substance medium
model.
</p>
<p>
The new medium model is obtained by extending Modelica.Media.Interfaces.PartialMedium, and
setting the following package constants:
</p>
<ul>
<li>mediumName is a String containing the name of the medium.</li>
<li>substanceNames is a vector of strings containing the names of the substances
    that make up the medium. In this case, it will contain only mediumName.</li>
<li>singleState can be set to true if u and d in BaseProperties do not depend
    on pressure. In other words, density does not depend on pressure
    (incompressible fluid), and it is assumed that also u does not depend on
    pressure. This setting can be useful for fluids having high density and
    low compressibility (e.g., liquids at moderate pressure); fast states
    resulting from the low compressibility effects are automatically avoided.</li>
<li>reducedX = true for single-substance media, which do not need mass
    fractions at all.</li>
</ul>
<p>
It is also possible to change the default min, max, nominal, and start
attributes of Medium-defined types (see TemplateMedium).</p>
<p>
All other package constants, such as nX, nXi, nS, are automatically set
by the declarations of the base package Interfaces.PartialMedium.</p>
<p>
The second step is to provide an implementation to the BaseProperties model,
partially defined in the base class Interfaces.PartialMedium. In the case of
single-substance media, two independent state variables must be selected among
p, T, d, u, h, and three equations must be written to provide the values of
the remaining variables. Two equations must then be added to compute the molar
mass MM and the gas constant R.</p>
<p>
The third step is to consider the optional functions that are going to be
implemented, among the partial functions defined by the base class PartialMedium.
A minimal set of state variables that could be provided as an input to
<em>all</em> those functions must be selected, and included in the redeclaration
of the ThermodynamicState record. Subsequently, equations must be added to
BaseProperties in order that the instance of that record inside BaseProperties
(named \"state\") is kept updated. For example, assume that all additional
properties can be computed as a function of p and T. Then, ThermodynamicState
should be redeclared as follows:</p>
<pre>
  <strong>redeclare replaceable record</strong> ThermodynamicState
    AbsolutePressure p \"Absolute pressure of medium\";
    Temperature T \"Temperature of medium\";
  <strong>end</strong> ThermodynamicState;
</pre>
<p>
and the following equations should be added to BaseProperties:
</p>
<pre>
  state.p = p;
  state.T = T;
</pre>
<p>
The additional functions can now be implemented by redeclaring the functions
defined in the base class and adding their algorithms, e.g.:
</p>
<pre>
    <strong>redeclare function extends</strong> dynamicViscosity \"Return dynamic viscosity\"
    <strong>algorithm</strong>
      eta := 10 - state.T*0.3 + state.p*0.2;
    <strong>end</strong> dynamicViscosity;
</pre>
</html>"));
      end BasicDefinition;

      class MultipleSubstances "Multiple Substances"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
When writing the model of a multiple-substance medium, a fundamental issue
concerns how to consider the mass fractions of the fluid. If there are nS
substances, there are also nS mass fractions; however, one of them is redundant,
as sum(X) = 1. Therefore there are basically two options, concerning the number
of independent mass fractions nXi:
</p>
<ul>
<li> <em>Reduced-state models</em>: reducedX = <strong>true</strong> and nXi = nS - 1. In this
case, the number of independent mass fractions nXi is the minimum possible.
The full state vector X is provided by equations declared in the base class
Interfaces.PartialMedium.BaseProperties: the first nXi elements are equal to
Xi, and the last one is 1 - sum(Xi).</li>
<li> <em>Full-state models</em>: reducedX = <strong>false</strong> and nXi = nS. In this case,
Xi = X, i.e., all the elements of the composition vector are considered as
independent variables, and the constraint sum(X) = 1 is never written explicitly.
Although this kind of model is heavier, as it provides one extra state variable,
it can be less prone to numerical and/or symbolic problems, which can be
caused by that constraint.</li>
<li> <em>Fixed-composition models</em>: fixedX = <strong>true</strong> and nXi = 0. In this case X = reference_X, i.e., all the elements of the composition vector are fixed.</li>
</ul>
<p> The medium implementer can declare the value reducedX as <strong>final</strong>. In
this way only one implementation must be given. For instance,
Modelica.Media.IdealGases models declare <strong>final</strong> reducedX = <strong>false</strong>, so that the
implementation can always assume nXi = nX. The same is true for Air.MoistAir,
which declares <strong>final</strong> reducedX = <strong>true</strong>, and always assumes nXi = nX - 1 = 1.</p>
<p>It is also possible to leave reducedX modifiable. In this case, the
BaseProperties model and all additional functions should check for the actual
value of reducedX, and provide the corresponding implementation.</p>

<p>If fixedX is left modifiable, then the implementation should also handle the
case fixedX = true properly.</p>
<p>Fluid connectors should always use composition vectors of size Xi, such as
in the Modelica_Fluid library:</p>
<pre>
<strong>connector</strong> FluidPort
  <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium;
  Medium.AbsolutePressure      p;
  <strong>flow</strong> Medium.MassFlowRate     m_flow;

  Medium.SpecificEnthalpy      h;
  <strong>flow</strong> Medium.EnthalpyFlowRate H_flow;

  Medium.MassFraction          Xi    [Medium.nXi];
  <strong>flow</strong> Medium.MassFlowRate     mX_flow[Medium.nXi];
<strong>end</strong> FluidPort;
</pre>
<p>
For further details, refer to the implementation of
<a href=\"modelica://Modelica.Media.IdealGases.Common.MixtureGasNasa\">
      MixtureGasNasa model</a> and
<a href=\"modelica://Modelica.Media.Air.MoistAir\">
      MoistAir model</a>.
</p>
</html>"));
      end MultipleSubstances;

      class SpecificEnthalpyAsFunction "Specific enthalpy as function"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
If pressure p and specific enthalpy h are <strong>not</strong> used as
independent medium variables, the specific enthalpy should
be computed by a Modelica function that has as input arguments
only the independent medium variables. It should <strong>not</strong> be
computed by an equation. For example, if p and T are used
as independent medium variables, a function h_pT(p,T) should
be defined that is called to compute h:
</p>

<pre>
    h = h_pT(p,T);
</pre>

<p>
The reason for this rule requires a longer explanation.
In short, if h is not a computed by a Modelica function and
this function is non-linear in the independent medium variables,
then non-linear systems of equations will occur at
every connection point, if the FluidPort connectors from the
Modelica_Fluid library are used (these are the same as in
Modelica.Media.Examples.Utilities.FluidPort).
Only, if the above rule is fulfilled, a tool is able to
remove these non-linear system of equations in most cases.
</p>

<p>
The basic idea of the FluidPort connector is that 2 or more
components can be connected together at a point and that
automatically the mass and energy balance is fulfilled
in the connection point, i.e., the ideal mixing equations
are generated. Note, the momentum balance is only correct for
straight line connections. If \"ideal mixing\" is not sufficient,
a special component to define the mixing equations must be introduced.
</p>

<p>
The mass and momentum balance equations in a component are
derived from the partial differential equations along the
flow direction of a pipe:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Media/UsersGuide/BalanceEquations1.png\">
</p>

<p>
Note, F<sub>F</sub> is the fanning friction factor.
The energy balance can be given in different forms.
Usually, it is given as:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Media/UsersGuide/EnergyBalance1.png\">
</p>

<p>
This form describes the change of the internal energy, kinetic
energy and potential energy of a volume as function of the
in and out flowing fluid. Multiplying the momentum balance
with the flow velocity v and subtracting it from the energy
balance above, results in the following alternative form
of the energy balance:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Media/UsersGuide/EnergyBalance2.png\">
</p>

<p>
This form has the advantage that the kinetic and potential
energy is no longer part of the energy balance and therefore
the energy balance is substantially simpler (e.g., additional non-linear
systems of equations occur in the first form since the velocity
is present in the energy balance; in the second form this is not
the case and it is still valid also for high speeds).
</p>

<p>
Assume now that the second form of the energy balance above
is used in all components and that the following FluidPort connector
is used in all components:
</p>

<pre>
<strong>connector</strong> FluidPort
  <strong>replaceable package</strong> Medium = Modelica.Media.Interfaces.PartialMedium;
  Medium.AbsolutePressure      p;
  <strong>flow</strong> Medium.MassFlowRate     m_flow;

  Medium.SpecificEnthalpy      h;
  <strong>flow</strong> Medium.EnthalpyFlowRate H_flow;

  Medium.MassFraction          Xi    [Medium.nXi];
  <strong>flow</strong> Medium.MassFlowRate     mX_flow[Medium.nXi];
<strong>end</strong> FluidPort;
</pre>

<p>
As an example, assume that 3 components
are connected together and that the medium is a single substance
fluid. This will result in the following
connection equations:
</p>

<pre>
    p1=p2=p3;
    h1=h2=h3;
    0 = m_flow1 + m_flow2 + m_flow3;
    0 = H_flow1 + H_flow2 + H_flow3;
</pre>

<p>
These are the mass balance and the
energy balance (form 2) of an infinitesimal volume
in the connection point under the assumption that no
mass or energy is stored in this volume. In other words,
the connection equations are the equations that describe
ideal mixing. Under the assumption that the velocity
vectors of the 3 flows are identical (especially, they are
parallel), also the momentum balance is fulfilled:
</p>

<pre>
   0 = m_flow1*v1 + m_flow2*v2 + m_flow3*v3;
     = v*(m_flow1 + m_flow2 + m_flow3);
     = 0;
</pre>

<p>
With the above connector it is therefore possible to
connect components together in a nearly arbitrary fashion,
because every connection fulfills automatically the
balance equations. This approach has, however, one drawback:
If two components are connected together, then the medium
variables on both sides of the connector are identical.
However, due to the connector, only the two equations
</p>

<pre>
   p1 = p2;
   h1 = h2;
</pre>

<p>
are present. Assume, that p,T are the independent medium variables
and that the medium properties are computed at one side of the
connections. This means, the following equations are basically
present:
</p>

<pre>
    h1 = h(p1,T1);
    h2 = h(p2,T2);
    p1 = p2;
    h1 = h2;
</pre>

<p>
These equations can be solved in the following way:
</p>

<pre>
    h1 := h(p1,T1)
    p2 := p1;
    h2 := h1;
    0  := h2 - h(p2,T2);   // non-linear system of equations for T2
</pre>

<p>
This means that T2 is computed by solving a non-linear system
of equations. If h1 and h2 are provided as Modelica functions,
a Modelica translator can replace
this non-linear system of equations by the equation:
</p>

<pre>
   T2 := T1;
</pre>

<p>
because after alias substitution there are two function calls
</p>

<pre>
    h1 := h(p1,T1);
    h1 := h(p1,T2);
</pre>

<p>
Since the left hand side of the function call and the first
argument are the same, the second arguments T1 and T2 must also be
identical and therefore T2 := T1. This type of analysis seems
to be only possible, if the specific enthalpy is defined as a function
of the independent medium variables.
</p>

</html>"));
      end SpecificEnthalpyAsFunction;

      class StaticStateSelection "Static State Selection"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
Without pre-caution when implementing a medium model,
it is very easy that non-linear algebraic
systems of equations occur when using the medium model.
In this section it is explained how to avoid non-linear
systems of equations that result from unnecessary
dynamic state selections.
</p>
<p>
A medium model should be implemented in such a way that
a tool is able to select states of a medium in a balance volume
statically (during translation). This is only possible if the
medium equations are written in a specific way. Otherwise,
a tool has to dynamically select states during simulation.
Since medium equations are usually non-linear, this means that
non-linear algebraic systems of equations would occur in every
balance volume.
</p>
<p>
It is assumed that medium equations in a balance volume
are defined in the following way:
</p>
<pre>
    <strong>package</strong> Medium = Modelica.Media.Interfaces.PartialMedium;
    Medium.BaseProperties medium;
  <strong>equation</strong>
     // mass balance
       <strong>der</strong>(M)  = port_a.m_flow + port_b.m_flow;
       <strong>der</strong>(MX) = port_a_mX_flow + port_b_mX_flow;
             M = V*medium.d;
            MX = M*medium.X;

     // Energy balance
     U = M*medium.u;
     <strong>der</strong>(U) = port_a.H_flow+port_b.H_flow;
</pre>
<p>
<strong>Single Substance Media</strong>
</p>
<p>
A medium consisting of a single substance
has to define two of \"p,T,d,u,h\" with
stateSelect=StateSelect.prefer if BaseProperties.preferredMediumstates = <strong>true</strong>
and has to provide the other three variables as function of these
states. This results in:
</p>
<ul>
<li> static state selection (no dynamic choices).</li>
<li> a linear system of equations in the two
     state derivatives.</li>
</ul>
<p>
<strong>Example for a single substance medium</strong>
</p>
<p>
p, T are preferred states (i.e., StateSelect.prefer is set)
and there are three equations written in the form:
</p>
<pre>
   d = fd(p,T)
   u = fu(p,T)
   h = fh(p,T)
</pre>
<p>
Index reduction leads to the equations:
</p>
<pre>
   <strong>der</strong>(M) = V*<strong>der</strong>(d)
   <strong>der</strong>(U) = <strong>der</strong>(M)*u + M*<strong>der</strong>(u)
   <strong>der</strong>(d) = <strong>der</strong>(fd,p)*<strong>der</strong>(p) + <strong>der</strong>(fd,T)*<strong>der</strong>(T)
   <strong>der</strong>(u) = <strong>der</strong>(fu,p)*<strong>der</strong>(p) + <strong>der</strong>(fu,T)*<strong>der</strong>(T)
</pre>
<p>
Note, that <strong>der</strong>(y,x) is the partial derivative of y with respect to x
and that this operator will be introduced in a future version
of the Modelica language.
The above equations imply, that if p,T are provided from the
integrator as states, all functions, such as fd(p,T)
or <strong>der</strong>(fd,p) can be evaluated as function of the states.
The overall system results in a linear system
of equations in <strong>der</strong>(p) and <strong>der</strong>(T) after eliminating
<strong>der</strong>(M), <strong>der</strong>(U), <strong>der</strong>(d), <strong>der</strong>(u) via tearing.
</p>
<p>
<strong>Counter Example for a single substance medium</strong>
</p>
<p>
An ideal gas with one substance is written in the form
</p>
<pre>
  <strong>redeclare model extends</strong> BaseProperties(
     T(stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default),
     p(stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default)
  <strong>equation</strong>
     h = h(T);
     u = h - R*T;
     p = d*R*T;
      ...
  <strong>end</strong> BaseProperties;
</pre>
<p>
If p, T are preferred states, these equations are <strong>not</strong>
written in the recommended form, because d is not a
function of p and T. If p,T would be states, it would be
necessary to solve for the density:
</p>
<pre>
   d = p/(R*T)
</pre>
<p>
If T or R are zero, this results in a division by zero.
A tool does not know that R or T cannot become zero.
Therefore, a tool must assume that p, T <strong>cannot</strong> always be
selected as states and has to either use another static
state selection or use dynamic state selection. The only
other choice for static state selection is d,T, because
h,u,p are given as functions of d,T.
However, as potential states only variables appearing differentiated and variables
declared with StateSelect.prefer or StateSelect.always
are used. Since \"d\" does not appear differentiated and has
StateSelect.default, it cannot be selected as a state.
As a result, the tool has to select states dynamically
during simulation. Since the equations above are non-linear
and they are utilized in the dynamic state
selection, a non-linear system of equations is present
in every balance volume.
</p>
<p>
To summarize, for single substance ideal gas media there
are the following two possibilities to get static
state selection and linear systems of equations:
</p>
<ol>
<li> Use p,T as preferred states and write the equation
     for d in the form: d = p/(T*R)</li>
<li> Use d,T as preferred states and write the equation
     for p in the form: p = d*T*R</li>
</ol>
<p>
All other settings (other/no preferred states etc.) lead
to dynamic state selection and non-linear systems of
equations for a balance volume.
</p>
<p>
<strong>Multiple Substance Media</strong>
</p>
<p>
A medium consisting of multiple substance
has to define two of \"p,T,d,u,h\" as well
as the mass fractions Xi with
stateSelect=StateSelect.prefer (if BaseProperties.preferredMediumStates = <strong>true</strong>)
and has to provide
the other three variables as functions of these
states. Only then, static selection is possible
for a tool.
</p>
<p>
<strong>Example for a multiple substance medium:</strong>
</p>
<p>
p, T and Xi are defined as preferred states and
the equations are written in the form:
</p>
<pre>
   d = fp(p,T,Xi);
   u = fu(p,T,Xi);
   h = fh(p,T,Xi);
</pre>
<p>
Since the balance equations are written in the form:
</p>
<pre>
              M = V*medium.d;
            MXi = M*medium.Xi;
</pre>
<p>
The variables M and MXi appearing differentiated in the
balance equations are provided as functions of d and Xi
and since d is given as a function of p, T and Xi, it
is possible to compute M and MXi directly from the desired
states. This means that static state selection is possible.
</p>
</html>"));
      end StaticStateSelection;

      class TestOfMedium "Test of medium"
        extends Modelica.Icons.Information;

        annotation (Documentation(info="<html>
<p>
After implementation of a new medium model, it should
be tested. A basic test is already provided with model
Modelica.Media.Examples.Utilities.PartialTestModel
which might be used in the following way:
</p>

<pre>
  <strong>model</strong> TestOfMyMedium
     <strong>extends</strong> Modelica.Media.Examples.Utilities.PartialTestModel(
              <strong>redeclare package</strong> Medium = MyMedium);
  <strong>end</strong> TestOfMyMedium;
</pre>

<p>
It might be necessary to adapt or change initial values
depending on the validity range of the medium.
The model above should translate and simulate.
If the medium model is written according to the
suggestions given in the previous sections (and the Modelica
translator has appropriate algorithms implemented),
there should be only static state selection everywhere
and no non-linear system of equations, provided h is an independent
medium variable or is only a function of T. If h is a function
of, say h=h(p,T), one non-linear system of equations occurs that
cannot be avoided.
</p>

<p>
The test model above can be used to test the most basic
properties. Of course, more tests should be performed.
</p>

</html>"));
      end TestOfMedium;
      annotation (DocumentationClass=true, Documentation(info="<html>
<p>
If a new medium model shall be introduced, copy package
<a href=\"modelica://Modelica.Media.Interfaces.TemplateMedium\">
Modelica.Media.Interfaces.TemplateMedium</a> to the desired
location, remove the
\"partial\" keyword from the package and provide
the information that is requested in the comments of the
Modelica source.
A more detailed description for the different parts of the
TemplateMedium package is given here:
</p>
<ol>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.BasicStructure\">
      Basic structure of medium interface</a></li>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.BasicDefinition\">
      Basic definition of medium model</a></li>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.MultipleSubstances\">
      Multiple Substances</a></li>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.SpecificEnthalpyAsFunction\">
      Specific enthalpy as function</a></li>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.StaticStateSelection\">
      Static State Selection</a></li>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.TestOfMedium\">
      Test of medium model</a></li>
</ol>
</html>"));
    end MediumDefinition;

    class ReleaseNotes "Release notes"
      extends Modelica.Icons.ReleaseNotes;
      annotation (Documentation(info="<html>
<h4>Version included in Modelica 3.0</h4>
<p> See top-level release notes for MSL.</p>
<h4>Version 1.0, 2005-03-01</h4>
<p>
Many improvements in the library, e.g., providing mixtures
of the ideal gases, table based media, test suite for all media, improved and
updated User's Guide.
</p>
<h4>Version 0.9, 2004-10-18</h4>
<ul>
<li> Changed the redeclaration/extends within packages from the
     experimental feature to the language keywords introduced
     in Modelica 2.1.</li>
<li> Re-introduced package \"Water.SaltWater\" in order to test
     substance mixtures (this medium model does not describe
     real mixing of water and salt).</li>
<li> Started to improve the documentation in
     Modelica.Media.UsersGuide.MediumDefinition.BasicStructure</li>
</ul>
<h4>Version 0.792, 2003-10-28</h4>
<p>
This is the first version made available for the public
for the Modelica'2003 conference (for evaluation).
</p>
</html>"));
    end ReleaseNotes;

    class Contact "Contact"
      extends Modelica.Icons.Contact;
      annotation (Documentation(info="<html>
<h4>Library officer and main author</h4>

<p>
<strong>Hubertus Tummescheit</strong><br>
Modelon AB<br>
Ideon Science Park<br>
SE-22730 Lund, Sweden<br>
email: <a href=\"mailto:Hubertus.Tummescheit@Modelon.se\">Hubertus.Tummescheit@Modelon.se</a>
</p>

<h4>Acknowledgements</h4>

<p>
The development of this library has been a collaborative effort
and many have contributed:
</p>
<ul>
<li> The essential parts of the media models have been implemented
     in the ThermoFluid library by Hubertus Tummescheit with
     help from Jonas Eborn and Falko Jens Wagner. These media models
     have been converted to the Modelica.Media interface definition
     and have been improved by Hubertus Tummescheit.</li>
<li> The effort for the development of the Modelica.Media library has been
     organized by Martin Otter who also contributed to the design,
     implemented part of the generic models, contributed to the User's Guide
     and provided the generic test suite Modelica.Media.Examples.Tests.</li>
<li> The basic idea for the medium model interface based on packages
     is from Michael Tiller who also contributed to the design.</li>
<li> The first design of the medium model interface is from
     Hilding Elmqvist. The design and the implementation has been further
     improved at the Modelica design meetings in<br>
     Dearborn, Nov. 20-22, 2002<br>
     Dearborn, Sept. 2-4, 2003<br>
     Lund Jan. 28-30, 2004<br>
     Munich, May 26-28, 2004<br>
     Lund, Aug. 30-31, 2004<br>
     Dearborn, Nov. 15-17, 2004<br>
     Cremona Jan. 31 - Feb. 2, 2005.</li>
<li> Hans Olsson, Sven Erik Mattsson and Hilding Elmqvist developed
     symbolic transformation algorithms and implemented them in Dymola
     to improve the efficiency considerably (e.g., to avoid non-linear
        systems of equations).</li>
<li>Katrin Pr&ouml;&szlig; implemented the moist air model</li>
<li> R&uuml;diger Franke performed the first realistic tests of the Modelica.Media
        and Modelica_Fluid libraries and gave valuable feedback.</li>
<li> Francesco Casella has been the most relentless bug-hunter and tester of the
     water and ideal gas properties. He also contributed to the User's Guide.</li>
<li> John Batteh, Daniel Bouskela, Jonas Eborn, Andreas Idebrant, Charles Newman,
     Gerhart Schmitz, and the users of the ThermoFluid library provided
     many useful comments and feedback.</li>
</ul>
</html>"));
    end Contact;
    annotation (DocumentationClass=true, Documentation(info="<html>
<p>
Library <strong>Modelica.Media</strong> is a <strong>free</strong> Modelica package providing
a standardized interface to fluid media models and specific
media models based on this interface.
A fluid medium model defines <strong>algebraic</strong> equations
for the intensive thermodynamic variables used in the <strong>mass</strong>
and <strong>energy</strong> balance of component models. Optionally, additional
medium properties can be computed such as dynamic viscosity or thermal
conductivity. Medium models are defined for <strong>single</strong> and
<strong>multiple substance</strong> fluids with <strong>one</strong> and
<strong>multiple phases</strong>.
</p>
<p>
A large part of the library provides specific medium models
that can be directly utilized. This library can be used in
all types of Modelica fluid libraries that may have different connectors
and design philosophies. It is particularly utilized
in the Modelica_Fluid library (the Modelica_Fluid library is currently
under development to provide 1D therm-fluid flow components for
single and multiple substance flow with one and multiple phases).
The Modelica.Media library has the following
main features:
</p>
<ul>
<li> Balance equations and media model equations
     are decoupled.
     This means that the used medium model does usually not have an
     influence on how the balance equations are formulated.
     For example, the same balance equations are used for media
     that use pressure and temperature, or pressure and specific
     enthalpy as independent variables, as well as for
     incompressible and compressible media models.
     A Modelica tool will have enough information to
     generate as efficient code as a traditional
     (coupled) definition. This feature is described in more
     detail in section
     <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.StaticStateSelection\">Static State Selection</a>.</li>
<li> Optional variables, such as dynamic viscosity, are only computed if
     needed in the corresponding component.</li>
<li> The independent variables of a medium model do not
     influence the definition of a fluid connector port.
     Especially, the media models are implemented in such a way
     that a connector may have the minimum number of independent
     medium variables in a connector and still get the same
     efficiency as if all medium variables are passed by the
     connector from one component to the next one (the latter
     approach has the restriction that a fluid port can only
     connect two components and not more). Note, the Modelica_Fluid
     library uses the first approach, i.e., having a set of
     independent medium variables in a connector.</li>
<li> The medium models are implemented with regards to
     efficient dynamic simulation. For example, two phase
     medium models trigger state events at phase boundaries
     (because the medium variables are not differentiable
     at this point).</li>
</ul>
<p>
This User's Guide has the following main parts:
</p>
<ul>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage\">Medium usage</a>
     describes how to use a medium model from
     this library in a component model.</li>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition\">Medium definition</a>
     describes how a new fluid medium
     model has to be implemented.</li>
<li> <a href=\"modelica://Modelica.Media.UsersGuide.ReleaseNotes\">ReleaseNotes</a>
     summarizes the changes of the library releases.</li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.Contact\">Contact</a>
    provides information about the authors of the library as well as
    acknowledgements.</li>
</ul>
</html>"));
  end UsersGuide;

  package Examples
    "Demonstrate usage of property models"

    extends Modelica.Icons.ExamplesPackage;

    model SimpleLiquidWater "Example for Water.SimpleLiquidWater medium model"
      extends Modelica.Icons.Example;

      parameter SI.Volume V=1 "Volume";
      parameter SI.EnthalpyFlowRate H_flow_ext=1.e6
        "Constant enthalpy flow rate into the volume";

      package Medium = Water.ConstantPropertyLiquidWater (SpecificEnthalpy(max=
                1e6)) "Medium model";
      Medium.BaseProperties medium(T(start=300, fixed=true));

      Medium.BaseProperties medium2;
      Medium.ThermodynamicState state;
      Real m_flow_ext2;
      Real der_p;
      Real der_T;

      SI.Mass m(start=1.0);
      SI.InternalEnergy U;

      // Use type declarations from the Medium
      Medium.MassFlowRate m_flow_ext;
      Medium.DynamicViscosity eta=Medium.dynamicViscosity(state);
      Medium.SpecificHeatCapacity cv=Medium.specificHeatCapacityCv(state);
    equation
      medium.p = 1.0e5;
      m = medium.d*V;
      U = m*medium.u;

      // Mass balance
      der(m) = m_flow_ext;

      // Energy balance
      der(U) = H_flow_ext;

      // Smooth state
      medium2.p = 1e5*time/10;
      medium2.T = 330;
      m_flow_ext2 = time - 30;
      state = Medium.setSmoothState(
            m_flow_ext2,
            medium.state,
            medium2.state,
            10);
      der_p = der(state.p);
      der_T = der(state.T);
      annotation (experiment_X(StopTime=100), Documentation(info="<html>

</html>"));
    end SimpleLiquidWater;

    model IdealGasH2O "IdealGas H20 medium model"
      extends Modelica.Icons.Example;
      package Medium = IdealGases.SingleGases.H2O "Medium model";
      Medium.ThermodynamicState state "Thermodynamic state record";
      Medium.ThermodynamicState state2;
      Medium.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(state);
      Medium.SpecificHeatCapacity cv=Medium.specificHeatCapacityCv(state);
      Medium.IsentropicExponent k=Medium.isentropicExponent(state);
      Medium.SpecificEntropy s=Medium.specificEntropy(state);
      //  Medium.SpecificEntropy s2=Medium.specificEntropy(state2);
      Medium.VelocityOfSound a=Medium.velocityOfSound(state);
      Real beta=Medium.isobaricExpansionCoefficient(state);
      Real gamma=Medium.isothermalCompressibility(state);
      Medium.SpecificEnthalpy h_is=Medium.isentropicEnthalpyApproximation(2.0,
          state);

      Medium.ThermodynamicState smoothState;
      Real m_flow_ext;
      Real der_p;
      Real der_T;

    equation
      state.p = 100000.0;
      state.T = 200 + 1000*time;
      state2.p = 2.0e5;
      state2.T = 500.0;
      //  s2 = s;

      // Smooth state
      m_flow_ext = time - 0.5;
      smoothState = Medium.setSmoothState(
            m_flow_ext,
            state,
            state2,
            0.1);
      der_p = der(smoothState.p);
      der_T = der(smoothState.T);

      annotation (Documentation(info="<html>
<p>An example for using ideal gas properties and how to compute
  isentropic enthalpy changes.
  The function that is implemented is approximate, but usually
   very good: the second medium record medium2
   is given to compare the approximation.
</p>
</html>"),   experiment_X(StopTime=1));
    end IdealGasH2O;

    model WaterIF97 "WaterIF97 medium model"
      extends Modelica.Icons.Example;
      package Medium = Water.StandardWater "Medium model";
      Medium.BaseProperties medium(
        p(start=1.e5,
          fixed=true,
          stateSelect=StateSelect.prefer),
        h(start=1.0e5,
          fixed=true,
          stateSelect=StateSelect.prefer),
        T(start=275.0),
        d(start=999.0));
      Modelica.SIunits.Volume V(start=0.1, fixed=true);
      parameter Modelica.SIunits.VolumeFlowRate dV=0.0
        "Fixed time derivative of volume";
      parameter Medium.MassFlowRate m_flow_ext=0
        "Fixed mass flow rate into volume";
      parameter Medium.EnthalpyFlowRate H_flow_ext=10000
        "Fixed enthalpy flow rate into volume";
      Modelica.SIunits.Mass m "Mass of volume";
      Modelica.SIunits.InternalEnergy U "Internal energy of volume";

      Medium.ThermodynamicState state2;
      Medium.ThermodynamicState state;
      Real m_flow_ext2;
      Real der_p;
      Real der_T;

    equation
      der(V) = dV;
      m = medium.d*V;
      U = m*medium.u;

      // Mass balance
      der(m) = m_flow_ext;

      // Energy balance
      der(U) = H_flow_ext;

      // smooth states
      m_flow_ext2 = time - 0.5;
      state2 = Medium.setState_pT(1e5*(1 + time), 300 + 200*time);
      state = Medium.setSmoothState(
            m_flow_ext2,
            medium.state,
            state2,
            0.05);
      der_p = der(state.p);
      der_T = der(state.T);
      annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1));
    end WaterIF97;

    model MixtureGases "Test gas mixtures"
      extends Modelica.Icons.Example;

      parameter Modelica.SIunits.Volume V=1 "Fixed size of volume 1 and volume 2";
      parameter Modelica.SIunits.MassFlowRate m_flow_ext=0.01
        "Fixed mass flow rate in to volume 1 and in to volume 2";
      parameter Modelica.SIunits.EnthalpyFlowRate H_flow_ext=5000
        "Fixed enthalpy flow rate in to volume and in to volume 2";

      package Medium1 = myMedia.IdealGases.MixtureGases.CombustionAir
        "Medium model";
      Medium1.BaseProperties medium1(
        p(start=1.e5,
          fixed=true,
          stateSelect=StateSelect.prefer),
        T(start=300,
          fixed=true,
          stateSelect=StateSelect.prefer),
        X(start={0.8,0.2}));
      Real m1(quantity=Medium1.mediumName, start=1.0);
      SI.InternalEnergy U1;
      Medium1.SpecificHeatCapacity cp1=Medium1.specificHeatCapacityCp(medium1.state);
      Medium1.DynamicViscosity eta1=Medium1.dynamicViscosity(medium1.state);
      Medium1.ThermalConductivity lambda1=Medium1.thermalConductivity(medium1.state);

      package Medium2 = myMedia.IdealGases.MixtureGases.SimpleNaturalGas
        "Medium model";
      Medium2.BaseProperties medium2(
        p(start=1.e5,
          fixed=true,
          stateSelect=StateSelect.prefer),
        T(start=300,
          fixed=true,
          stateSelect=StateSelect.prefer),
        X(start={0.1,0.1,0.1,0.2,0.2,0.3}));
      Real m2(quantity=Medium2.mediumName, start=1.0);
      SI.InternalEnergy U2;
      Medium2.SpecificHeatCapacity cp2=Medium2.specificHeatCapacityCp(medium2.state);
      Medium2.DynamicViscosity eta2=Medium2.dynamicViscosity(medium2.state);
      Medium2.ThermalConductivity lambda2=Medium2.thermalConductivity(medium2.state);

      Medium2.ThermodynamicState state2=Medium2.setState_pTX(
              1.005e5,
              302,
              {0.3,0.2,0.2,0.1,0.1,0.1});
      Medium2.ThermodynamicState smoothState;
      Real m_flow_ext2;
      Real der_p;
      Real der_T;

    equation
      medium1.X = {0.8,0.2};
      m1 = medium1.d*V;
      U1 = m1*medium1.u;
      der(m1) = m_flow_ext;
      der(U1) = H_flow_ext;

      medium2.X = {0.1,0.1,0.1,0.2,0.2,0.3};
      m2 = medium2.d*V;
      U2 = m2*medium2.u;
      der(m2) = m_flow_ext;
      der(U2) = H_flow_ext;

      // Smooth state
      m_flow_ext2 = time - 0.5;
      smoothState = Medium2.setSmoothState(
            m_flow_ext2,
            medium2.state,
            state2,
            0.2);
      der_p = der(smoothState.p);
      der_T = der(smoothState.T);
      annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1));
    end MixtureGases;

    model MoistAir "Example for moist air"
      extends Modelica.Icons.Example;
      package Medium = Air.MoistAir "Medium model";
      Medium.BaseProperties medium(
        T(start=274.0, fixed=true),
        X(start={0.95,0.05}),
        p(start=1.0e5, fixed=true));
      //  Medium.SpecificEntropy s=Medium.specificEntropy(medium);
      //  Medium.SpecificEnthalpy h_is = Medium.isentropicEnthalpyApproximation(medium, 2.0e5);
      parameter Medium.MolarMass[2] MMx={Medium.dryair.MM,Medium.steam.MM}
        "Vector of molar masses (consisting of dry air and of steam)";
      Medium.MolarMass MM=1/((1 - medium.X[1])/MMx[1] + medium.X[1]/MMx[2])
        "Molar mass of gas part of mixture";
      //  Real[4] dddX=Medium.density_derX(medium,MM);

      Medium.ThermodynamicState state1;
      Medium.ThermodynamicState state2;
      Medium.ThermodynamicState smoothState;
      Real m_flow_ext;
      Real der_p;
      Real der_T;
    protected
      constant Modelica.SIunits.Time unitTime=1;
    equation
      der(medium.p) = 0.0;
      der(medium.T) = 90;
      medium.X[Medium.Air] = 0.95;
      //    medium.X[Medium.Water] = 0.05;
      // one simple assumption only for quick testing:
      //  medium.X_liquidWater = if medium.X_sat < medium.X[2] then medium.X[2] - medium.X_sat else 0.0;

      // Smooth state
      m_flow_ext = time - 0.5;
      state1.p = 1.e5*(1 + time);
      state1.T = 300 + 10*time;
      state1.X = {time,1 - time}/unitTime;
      state2.p = 1.e5*(1 + time/2);
      state2.T = 340 - 20*time;
      state2.X = {0.5*time,1 - 0.5*time}/unitTime;
      smoothState = Medium.setSmoothState(
            m_flow_ext,
            state1,
            state2,
            0.2);
      der_p = der(smoothState.p);
      der_T = der(smoothState.T);
      annotation (Documentation(info="<html>
<p>An example for using ideal gas properties and how to compute isentropic enthalpy changes.
The function that is implemented is approximate, but usually very good: the second medium record medium2
is given to compare the approximation.
</p>
</html>"),   experiment_X(StopTime=1.0, Tolerance=1e-005));
    end MoistAir;

    model PsychrometricData "Produces plot data for psychrometric charts"
      extends Modelica.Icons.Example;
      package Medium = myMedia.Air.MoistAir        "Used medium package";
      parameter SI.Pressure p_const=1e5 "Pressure";
      parameter Integer n_T=11 "Number of isotherms";
      parameter SI.Temperature T_min=253.15 "Lowest isotherm";
      parameter SI.Temperature T_step=10 "Temperature step between two isotherms";
      parameter Integer n_h=16 "Number of lines with constant specific enthalpy";
      parameter SI.SpecificEnthalpy h_min=-20e3
        "Lowest line of constant enthalpy";
      parameter SI.SpecificEnthalpy h_step=1e4
        "Enthalpy step between two lines of constant enthalpy";
      parameter Integer n_phi=10
        "Number of lines with constant relative humidity";
      parameter Real phi_min=0.1 "Lowest line of constant humidity";
      parameter Real phi_step=0.1 "Step between two lines of constant humidity";
      parameter SI.MassFraction x_min=0.00 "Minimum diagram absolute humidity";
      parameter SI.MassFraction x_max=0.03 "Maximum diagram absolute humidity";
      parameter SI.Time t=1 "Simulation time";

      final parameter SI.Temperature[n_T] T_const={T_min - T_step + i*T_step for
          i in 1:n_T} "Constant temperatures";
      final parameter SI.SpecificEnthalpy[n_h] h_const={(i - 1)*h_step + h_min
          for i in 1:n_h} "Constant enthalpies";
      final parameter Real[n_phi] phi_const={(i - 1)*phi_step + phi_min for i in
              1:n_phi} "Constant relative humidities";
      final parameter Real diagSlope=Medium.enthalpyOfVaporization(273.15)
        "Rotation of diagram that zero degrees isotherm becomes horizontal outside the fog region";
      final parameter SI.MassFraction x_start=x_min
        "Initial absolute humidity in kg water/kg dry air";

      SI.MassFraction x(start=x_start) "Absolute humidity in kg water/kg dry air";
      SI.SpecificEnthalpy[n_T] hx_T "h_1+x for const T";
      SI.SpecificEnthalpy[n_h] hx_h(start=h_const, each fixed=true) "Const h_1+x";
      SI.SpecificEnthalpy[n_phi] hx_phi "h_1+x for const phi";
      SI.SpecificEnthalpy[n_T] y_T "Chart enthalpy for const T";
      SI.SpecificEnthalpy[n_h] y_h "Chart enthalpy for const h";
      SI.SpecificEnthalpy[n_phi] y_phi "Chart enthalpy for const phi";
      Medium.BaseProperties[n_T] medium_T "Medium properties for const T";
      Medium.BaseProperties[n_phi] medium_phi "Medium properties for const phi";

    protected
      SI.Pressure[n_phi] ps_phi "Saturation pressure for constant-phi-lines";
      SI.Temperature[n_phi] T_phi(each start=290);
      Boolean[n_T] fog(start=fill(false, n_T))
        "Triggers events at intersection of isotherms with phi=1";
      SI.Pressure[n_T] pd "Steam partial pressure along isotherms";
    initial equation
      x = x_min;
    equation

      der(x) = (x_max - x_min)/t;

      for i in 1:n_T loop
        medium_T[i].T = T_const[i];
        medium_T[i].p = p_const;
        medium_T[i].Xi = {x/(1 + x)};
        hx_T[i] = medium_T[i].h*(medium_T[i].x_water + 1);
        y_T[i] = hx_T[i] - diagSlope*x;

        //trigger events
        pd[i] = medium_T[i].Xi[1]*medium_T[i].MM/Medium.MMX[1]*p_const;
        fog[i] = pd[i] >= Medium.saturationPressure(T_const[i]);
      end for;
      for i in 1:n_h loop
        der(hx_h[i]) = 0.0;
        y_h[i] = hx_h[i] - diagSlope*x;
      end for;
      for i in 1:n_phi loop
        medium_phi[i].p = p_const;
        ps_phi[i] = p_const*x/phi_const[i]/(Medium.k_mair + x);
        T_phi[i] = if x < 5e-6 then 200 else Medium.saturationTemperature(
          ps_phi[i]);
        medium_phi[i].T = T_phi[i];
        medium_phi[i].Xi = {x/(1 + x)};
        hx_phi[i] = medium_phi[i].h*(medium_phi[i].x_water + 1);
        y_phi[i] = hx_phi[i] - diagSlope*x;
      end for;

      annotation (Documentation(info="<html>
<p>This model produces psychrometric data from the moist air model in this library to be plotted in charts. The two most common chart varieties are the Mollier Diagram and the Psychrometric Chart. The first is widely used in some European countries while the second is more common in the Anglo-American world. Specific enthalpy is plotted over absolute humidity in the Mollier Diagram, it is the other way round in the Psychrometric Chart.<br>
It must be noted that the relationship of both axis variables is not right-angled, the absolute humidity follows a slope which equals the enthalpy of vaporization at 0 &deg;C. For better reading and in order to reduce the fog region the humidity axis is rotated to obtain a right-angled plot. Both charts usually contain additional information as isochores or auxiliary scales for e.g., heat ratios. Those information are omitted in this model and the charts below. Other important features of psychrometric chart data are that all mass specific variables (like absolute humidity, specific enthalpy etc.) are expressed in terms of kg dry air and that their baseline of 0 enthalpy is found at 0 &deg;C and zero humidity.</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Media/Air/Mollier.png\"><br>
<img src=\"modelica://Modelica/Resources/Images/Media/Air/PsycroChart.png\">
</p>

<p>
<strong>Legend:</strong> blue - constant specific enthalpy, red - constant temperature, black - constant relative humidity</p>

<p>The model provides data for lines of constant specific enthalpy, temperature and relative humidity in a Mollier Diagram or Psychrometric Chart as they were used for the figures above. For limitations and ranges of validity please refer to the <a href=\"modelica://Modelica.Media.Air.MoistAir\">MoistAir package description</a>. Absolute humidity <strong>x</strong> is increased with time in this model. The specific enthalpies adjusted for plotting are then obtained from:</p>
<ul>
<li><strong>y_h</strong>: constant specific enthalpy</li>
<li><strong>y_T</strong>: constant temperature</li>
<li><strong>y_phi</strong>: constant relative humidity</li>
</ul>
</html>"),   experiment_X(StopTime=1.0, Interval=0.001));
    end PsychrometricData;

    package TwoPhaseWater "Extension of the StandardWater package"
      extends myMedia.Water.StandardWater;
      redeclare model extends BaseProperties
        "Make StandardWater.BaseProperties non replaceable in order that inheritance is possible in model ExtendedProperties"
      end BaseProperties;

      model ExtendedProperties "Plenty of two-phase properties"
        extends BaseProperties;
        ThermodynamicState dew "Dew line Properties";
        ThermodynamicState bubble "Bubble line Properties";
        ThermodynamicState bubble2 "Bubble line Properties, on the 2-phase side";
        DynamicViscosity eta "Viscosity (McAdams mixture rules if in 2-phase)";
        DynamicViscosity eta_d "Dew line viscosity";
        DynamicViscosity eta_b "Bubble line viscosity";
        ThermalConductivity lambda_d "Dew line thermal conductivity";
        ThermalConductivity lambda_b "Bubble line thermal conductivity";
        SpecificHeatCapacity cp_d "Dew line Specific heat capacity";
        SpecificHeatCapacity cp_b "Bubble line Specific heat capacity";
        Real ddhp;
        Real ddhp_d;
        Real ddhp_b "Derivatives";
        Real ddph;
        Real ddph_d;
        Real ddph_b "Derivatives";
        Real ddhp_b2;
        Real ddph_b2 "Derivatives";
        // no derivatives yet, ... sat should be temporary
        MassFraction x "Steam mass fraction";
        Real dTp;
        Real dTp2;
        SpecificEntropy s_b;
        SpecificEntropy s_d;
      equation
        eta = if phase == 1 then dynamicViscosity(state) else 1/(x/eta_d + (1 - x)
          /eta_b);
        dew = setDewState(sat);
        bubble = setBubbleState(sat);
        bubble2 = setBubbleState(sat, 2);
        x = (h - bubble.h)/max(dew.h - bubble.h, 1e-6);
        eta_d = dynamicViscosity(dew);
        eta_b = dynamicViscosity(bubble);
        lambda_d = thermalConductivity(dew);
        lambda_b = thermalConductivity(bubble);
        cp_d = specificHeatCapacityCp(dew);
        cp_b = specificHeatCapacityCp(bubble);
        s_d = specificEntropy(dew);
        s_b = specificEntropy(bubble);
        ddph = density_derp_h(state);
        ddph_d = density_derp_h(dew);
        ddph_b = density_derp_h(bubble);
        ddhp = density_derh_p(state);
        ddhp_d = density_derh_p(dew);
        ddhp_b = density_derh_p(bubble);
        ddhp_b2 = density_derh_p(bubble2);
        ddph_b2 = density_derp_h(bubble2);
        dTp = saturationTemperature_derp(p);
        dTp2 = (1/dew.d - 1/bubble.d)/max(s_d - s_b, 1e-6);
        annotation (Documentation(info=""));
      end ExtendedProperties;

      model TestTwoPhaseStates "Test the above model"
        extends Modelica.Icons.Example;
        ExtendedProperties medium(p(start=2000.0, fixed=true), h(start=8.0e5,
              fixed=true));
        parameter Real dh=80000.0 "80 kJ/second";
        parameter Real dp=1.0e6 "10 bars per second";
      equation
        der(medium.p) = dp;
        der(medium.h) = dh;
        annotation (experiment_X(StopTime=22, Interval=0.01), Documentation(info="<html>
<p> For details see the documentation of the example package TwoPhaseWater</p>
</html>"));
      end TestTwoPhaseStates;
      annotation (Documentation(info="<html>
<h4>Example: TwoPhaseWater</h4>
The TwoPhaseWater package demonstrates how to extend the parsimonious
BaseProperties with a minimal set of properties from the standard water
package with most properties that are needed in two-phase situations.
The model also demonstrates how to compute additional&nbsp; properties
for the medium model. In this scenario, that builds a new medium model
with many more properties than the default, the standard BaseProperties
is used as a basis. For additional properties, a user has to:<br>
<ol>
<li>Declare a new variable of the wanted type, e.g., \"<span style=\"color: rgb(51, 51, 255);\">DynamicViscosity
eta</span>\".</li>
<li>Compute that variable by calling the function form the package,
e.g., <span style=\"color: rgb(51, 51, 255);\">eta =
dynamicViscosity(state)</span>. Note that the instance of
ThermodynamicState is used as an input to the function. This instance
\"state\" is declared in PartialMedium and thus available in every medium
model. A user does not have to know what actual variables are required
to compute the dynamic viscosity, because the state instance is
guaranteed to contain what is needed.</li>
<li><span style=\"color: rgb(255, 0, 0);\">Attention</span>: Many
properties are not well defined in the two phase region and the
functions might return undesired values if called there. It is the
user's responsibility&nbsp; to take care of such situations. The example
uses one of several possible models to compute an averaged viscosity
for two-phase flows.</li>
</ol>
In two phase models, properties are often needed on the phase boundary
just outside the two phase dome, right on the border.. To compute the
thermodynamic state there, two auxiliary functions are provided: <strong>setDewState(sat)</strong> and <strong>setBubbleState(sat)</strong>. They take an
instance of SaturationProperties as input. By default they are in
one-phase, but with the optional phase argument set to 2, the output is
forced to be just inside the phase boundary. This is only needed when
derivatives like cv are computed with are different on both sides of
the boundaries. The usual steps to compute properties on the phase
boundary are:<br>
<ol>
<li>Declare an instance of ThermodynamicState, e.g., \"ThermodynamicState&nbsp; dew\".</li>
<li>Compute the state, using an instance of SaturationProperties,
e.g., dew = setDewState(sat)</li>
<li>Compute properties on the phase boundary to your full desire,
e.g., \"cp_d = specificHeatCapacityCp(dew)\".<br>
</li>
</ol>
<p>The sample model TestTwoPhaseStates test the extended properties</p>

<p>
The same procedure can be used to compute properties at other state
points, e.g., when an isentropic reference state is computed.
</p>
</html>"));
    end TwoPhaseWater;

    package ReferenceAir
      "Examples for detailed dry air and moist air medium models"
      extends Modelica.Icons.ExamplesPackage;

      model DryAir1 "Example 1 for dry air"
        extends Modelica.Icons.Example;
        extends myMedia.Examples.Utilities.PartialTestModel(redeclare package
            Medium =
              myMedia.Air.ReferenceAir.Air_pT);
        annotation (experiment_X(StopTime=1.01));
      end DryAir1;

      model DryAir2 "Example 2 for dry air"
        extends Modelica.Icons.Example;
        extends myMedia.Examples.Utilities.PartialTestModel2(redeclare package
            Medium =
              myMedia.Air.ReferenceAir.Air_pT);
        annotation (experiment_X(StopTime=1.01));
      end DryAir2;

      model MoistAir "Example for moist air"
        extends Modelica.Icons.Example;
        parameter Modelica.SIunits.Temperature T_start=274
          "Initial guess value for temperature";
        parameter Modelica.SIunits.Pressure p_start=1e5
          "Initial guess value for pressure";
        package Medium = myMedia.Air.ReferenceMoistAir        "Medium model";
        Medium.BaseProperties medium(
          T(start=T_start, fixed=true),
          X(start={0.95,0.05}),
          p(start=p_start, fixed=true));
        parameter Medium.MolarMass[2] MMx={Medium.dryair.MM,Medium.steam.MM}
          "Vector of molar masses (consisting of dry air and of steam)";
        Medium.MolarMass MM=1/((1 - medium.X[1])/MMx[1] + medium.X[1]/MMx[2])
          "Molar mass of gas part of mixture";
        Medium.ThermodynamicState state1;
        Medium.ThermodynamicState state2;
        Medium.ThermodynamicState smoothState(T(start=T_start), p(start=p_start));
        Real m_flow_ext;
        Real der_p;
        Real der_T;
      protected
        constant Modelica.SIunits.Time unitTime=1;
      equation
        der(medium.p) = 0.0;
        der(medium.T) = 90;
        medium.X[Medium.Air] = 0.95;
        m_flow_ext = time - 0.5;
        state1.p = 1.e5*(1 + time);
        state1.T = 300 + 10*time;
        state1.X = {time,1 - time}/unitTime;
        state2.p = 1.e5*(1 + time/2);
        state2.T = 340 - 20*time;
        state2.X = {0.5*time,1 - 0.5*time}/unitTime;
        smoothState = Medium.setSmoothState(
                m_flow_ext,
                state1,
                state2,
                0.2);
        der_p = der(smoothState.p);
        der_T = der(smoothState.T);
        annotation (experiment_X(StopTime=1.0, Tolerance=1e-005));
      end MoistAir;

      model MoistAir1 "Example 1 for moist air"
        extends Modelica.Icons.Example;
        extends myMedia.Examples.Utilities.PartialTestModel(redeclare package
            Medium =
              myMedia.Air.ReferenceMoistAir);
        annotation (experiment_X(StopTime=1.01));
      end MoistAir1;

      model MoistAir2 "Example 2 for moist air"
        extends Modelica.Icons.Example;
        extends myMedia.Examples.Utilities.PartialTestModel2(redeclare package
            Medium =
              myMedia.Air.ReferenceMoistAir);
        annotation (experiment_X(StopTime=1.01));
      end MoistAir2;

      model Inverse_sh_T
        "Solve h = h_pT(p, T), s = s_pT(p, T) for T, if h or s is given"
        extends Modelica.Icons.Example;

        import Medium = ThermofluidStream.Media.myMedia.Air.ReferenceAir.Air_pT
                                                               "Medium model";

        parameter Modelica.SIunits.Temperature T_min=300
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter Modelica.SIunits.Temperature T_max=500
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter Modelica.SIunits.Pressure p=1.0e5 "Fixed pressure in model";
        final parameter Modelica.SIunits.SpecificEnthalpy h_min=
            Medium.specificEnthalpy(Medium.setState_pT(p, T_min))
          "Specific enthalpy at T_min";
        final parameter Modelica.SIunits.SpecificEnthalpy h_max=
            Medium.specificEnthalpy(Medium.setState_pT(p, T_max))
          "Specific enthalpy at T_max";
        final parameter Modelica.SIunits.SpecificEntropy s_min=
            Medium.specificEntropy(Medium.setState_pT(p, T_min))
          "Specific entropy at T_min";
        final parameter Modelica.SIunits.SpecificEntropy s_max=
            Medium.specificEntropy(Medium.setState_pT(p, T_max))
          "Specific entropy at T_max";
        Modelica.SIunits.SpecificEnthalpy h1 "Pre-defined specific enthalpy";
        Modelica.SIunits.SpecificEnthalpy h2
          "Specific enthalpy computed from T (= h1 required)";
        Modelica.SIunits.SpecificEntropy s1 "Pre-defined specific entropy";
        Modelica.SIunits.SpecificEntropy s2
          "Specific entropy computed from T (= h1 required)";
        Modelica.SIunits.Temperature Th "Temperature computed from h1";
        Modelica.SIunits.Temperature Ts "Temperature computed from s1";

      protected
        constant Modelica.SIunits.Time timeUnit=1.0;

      equation
        // Define specific enthalpy and specific entropy
        h1 = if time < 0 then h_min else if time >= 1 then h_max else h_min + time
          /timeUnit*(h_max - h_min);
        s1 = if time < 0 then s_min else if time >= 1 then s_max else s_min + time
          /timeUnit*(s_max - s_min);

        // Solve for temperature
        Th = Medium.temperature_phX(
                p,
                h1,
                fill(0.0, 0));
        Ts = Medium.temperature_psX(
                p,
                s1,
                fill(0.0, 0));

        // Check (h2 must be identical to h1)
        h2 = Medium.specificEnthalpy_pTX(
                p,
                Th,
                fill(0.0, 0));
        s2 = Medium.specificEntropy_pTX(
                p,
                Ts,
                fill(0, 0));
        assert(abs(h1 - h2) < 1e-3, "Inverse for h not correctly computed");
        assert(abs(s1 - s2) < 1e-3, "Inverse for s not correctly computed");
        annotation (experiment_X(StopTime=1));
      end Inverse_sh_T;

      model Inverse_sh_TX
        "Solve h = h_pTX(p, T, X), s = s_pTX(p, T, X) for T, if h or s is given"
        extends Modelica.Icons.Example;

        import Medium = ThermofluidStream.Media.myMedia.Air.ReferenceMoistAir
                                                             "Medium model";

        parameter Modelica.SIunits.Temperature T_min=300
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter Modelica.SIunits.Temperature T_max=500
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter Modelica.SIunits.Pressure p=1.0e5 "Fixed pressure in model";
        parameter Modelica.SIunits.MassFraction[:] X=myMedia.Air.ReferenceMoistAir.reference_X
          "Mass fraction vector";
        final parameter Modelica.SIunits.SpecificEnthalpy h_min=
            myMedia.Air.ReferenceMoistAir.specificEnthalpy(
            myMedia.Air.ReferenceMoistAir.setState_pTX(
                  p,
                  T_min,
                  X)) "Specific enthalpy at T_min";
        final parameter Modelica.SIunits.SpecificEnthalpy h_max=
            myMedia.Air.ReferenceMoistAir.specificEnthalpy(
            myMedia.Air.ReferenceMoistAir.setState_pTX(
                  p,
                  T_max,
                  X)) "Specific enthalpy at T_max";
        final parameter Modelica.SIunits.SpecificEntropy s_min=
            myMedia.Air.ReferenceMoistAir.specificEntropy(
            myMedia.Air.ReferenceMoistAir.setState_pTX(
                  p,
                  T_min,
                  X)) "Specific entropy at T_min";
        final parameter Modelica.SIunits.SpecificEntropy s_max=
            myMedia.Air.ReferenceMoistAir.specificEntropy(
            myMedia.Air.ReferenceMoistAir.setState_pTX(
                  p,
                  T_max,
                  X)) "Specific entropy at T_max";
        Modelica.SIunits.SpecificEnthalpy h1 "Pre-defined specific enthalpy";
        Modelica.SIunits.SpecificEnthalpy h2
          "Specific enthalpy computed from T (= h1 required)";
        Modelica.SIunits.SpecificEntropy s1 "Pre-defined specific entropy";
        Modelica.SIunits.SpecificEntropy s2
          "Specific entropy computed from T (= h1 required)";
        Modelica.SIunits.Temperature Th "Temperature computed from h1";
        Modelica.SIunits.Temperature Ts "Temperature computed from s1";

      protected
        constant Modelica.SIunits.Time timeUnit=1.0;

      equation
        // Define specific enthalpy
        h1 = if time < 0 then h_min else if time >= 1 then h_max else h_min + time
          /timeUnit*(h_max - h_min);
        s1 = if time < 0 then s_min else if time >= 1 then s_max else s_min + time
          /timeUnit*(s_max - s_min);

        // Solve for temperature
        Th = Medium.temperature_phX(
                p,
                h1,
                X);
        Ts = Medium.temperature_psX(
                p,
                s1,
                X);

        // Check (h2 must be identical to h1)
        h2 = Medium.specificEnthalpy_pTX(
                p,
                Th,
                X);
        s2 = Medium.specificEntropy_pTX(
                p,
                Ts,
                X);
        assert(abs(h1 - h2) < 1e-3, "Inverse for h not correctly computed");
        assert(abs(s1 - s2) < 1e-3, "Inverse for s not correctly computed");

        annotation (experiment_X(StopTime=1), Documentation(info="<html>

</html>"));
      end Inverse_sh_TX;
    end ReferenceAir;

    package R134a "Examples for R134a"
      extends Modelica.Icons.ExamplesPackage;

      model R134a1 "Example 1 for R134a"
        extends Modelica.Icons.Example;
        extends myMedia.Examples.Utilities.PartialTestModel(
          redeclare package Medium = myMedia.R134a.R134a_ph,
          h_start=107390,
          fixedMassFlowRate(use_T_ambient=false),
          volume(use_T_start=false),
          ambient(use_T_ambient=false));
        annotation (experiment_X(StopTime=1.01));
      end R134a1;

      model R134a2 "Example 2 for R134a"
        extends Modelica.Icons.Example;
        extends myMedia.Examples.Utilities.PartialTestModel2(
          redeclare package Medium = myMedia.R134a.R134a_ph,
          h_start=107390,
          fixedMassFlowRate(use_T_ambient=false),
          volume(use_T_start=false),
          ambient(use_T_ambient=false));
        annotation (experiment_X(StopTime=1.01));
      end R134a2;
    end R134a;

    package SolveOneNonlinearEquation
      "Demonstrate how to solve one non-linear algebraic equation in one unknown"
      extends Modelica.Icons.ExamplesPackage;

      model Inverse_sine "Solve y = A*sin(w*x) for x, given y"
        import Modelica.Utilities.Streams.print;
        extends Modelica.Icons.Example;

        parameter Real y_zero=0.5 "Desired value of A*sin(w*x)";
        parameter Real x_min=-1.7 "Minimum value of x_zero";
        parameter Real x_max=1.7 "Maximum value of x_zero";
        parameter Real A=1;
        parameter Real w=1;
        parameter Inverse_sine_definition.f_nonlinear_Data data=
            Inverse_sine_definition.f_nonlinear_Data(A=A, w=w);
        Real x_zero "y_zero = A*sin(w*x_zero)";

        encapsulated package Inverse_sine_definition
          "Define sine as non-linear equation to be solved"
          import Modelica;
          extends Modelica.Media.Common.OneNonLinearEquation;

          redeclare record extends f_nonlinear_Data "Data for nonlinear equation"
            Real A;
            Real w;
            annotation (Documentation(info="<html>

</html>"));
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
            "Non-linear equation to be solved"
          algorithm
            y := f_nonlinear_data.A*Modelica.Math.sin(f_nonlinear_data.w*x);
          end f_nonlinear;

          // Dummy definition has to be added for current Dymola (advice from Hans)
          redeclare function extends solve
            "Solution algorithm of non-linear equation"
          end solve;
          annotation (Documentation(info="<html>

</html>"));
        end Inverse_sine_definition;

      equation
        x_zero = Inverse_sine_definition.solve(
                y_zero,
                x_min,
                x_max,
                f_nonlinear_data=data);

        print("x_zero = " + String(x_zero) + ", y_zero = " + String(y_zero) +
          ", A*sin(w*x_zero) = " + String(data.A*Modelica.Math.sin(data.w*x_zero)));
        annotation (experiment_X(StopTime=0), Documentation(info="<html>
<p>
This models solves the following non-linear equation
</p>

<pre>
   y = A*sin(w*x); -> determine x for given y
</pre>

<p>
Translate model \"Inverse_sine\"
and simulate for 0 sec. The result is printed to the
output window.
</p>

</html>"));
      end Inverse_sine;

      model Inverse_sh_T
        "Solve h = h_T(T), s = s_T(T) for T, if h or s is given for ideal gas NASA"
        extends Modelica.Icons.Example;

        replaceable package Medium = myMedia.Air.DryAirNasa constrainedby
          myMedia.IdealGases.Common.SingleGasNasa
          "Medium model"
          annotation (choicesAllMatching=true);

        parameter SI.Temperature T_min=300
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter SI.Temperature T_max=500
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter SI.Pressure p=1.0e5 "Fixed pressure in model";
        final parameter SI.SpecificEnthalpy h_min=Medium.specificEnthalpy(
            Medium.setState_pT(p, T_min)) "Specific enthalpy at T_min";
        final parameter SI.SpecificEnthalpy h_max=Medium.specificEnthalpy(
            Medium.setState_pT(p, T_max)) "Specific enthalpy at T_max";
        final parameter SI.SpecificEntropy s_min=Medium.specificEntropy(
            Medium.setState_pT(p, T_min)) "Specific entropy at T_min";
        final parameter SI.SpecificEntropy s_max=Medium.specificEntropy(
            Medium.setState_pT(p, T_max)) "Specific entropy at T_max";
        SI.SpecificEnthalpy h1(start=h_min, fixed=true)
          "Pre-defined specific enthalpy";
        SI.SpecificEnthalpy h2
          "Specific enthalpy computed from T (= h1 required)";
        SI.SpecificEntropy s1(start=s_min, fixed=true)
          "Pre-defined specific entropy";
        SI.SpecificEntropy s2 "Specific entropy computed from T (= h1 required)";
        SI.Temperature Th "Temperature computed from h1";
        SI.Temperature Ts "Temperature computed from s1";

      protected
        constant SI.Time timeUnit=1.0;

      equation
        // Define specific enthalpy and specific entropy
        der(h1) = if time < 1.0 then 1/timeUnit*(h_max - h_min) else 0.0;
        der(s1) = if time < 1.0 then 1/timeUnit*(s_max - s_min) else 0.0;

        // Solve for temperature
        Th = Medium.temperature_phX(
                p,
                h1,
                fill(0.0, 0));
        Ts = Medium.temperature_psX(
                p,
                s1,
                fill(0.0, 0));

        // Check (h2 must be identical to h1)
        h2 = Medium.specificEnthalpy_pTX(
                p,
                Th,
                fill(0.0, 0));
        s2 = Medium.specificEntropy(Medium.setState_pT(p, Ts));
        annotation (experiment_X(StopTime=1), Documentation(info="<html>
                               </html>"));
      end Inverse_sh_T;

      model InverseIncompressible_sh_T
        "Inverse computation for incompressible media"
        extends Modelica.Icons.Example;

        replaceable package Medium =
            myMedia.Incompressible.Examples.Glycol47        "Medium model"
          annotation (choicesAllMatching=true);

        parameter SI.Temperature T_min=Medium.T_min
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter SI.Temperature T_max=Medium.T_max
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter SI.Pressure p=1.0e5 "Fixed pressure in model";
        final parameter SI.SpecificEnthalpy h_min=Medium.h_T(Medium.T_min)
          "Specific enthalpy at T_min";
        final parameter SI.SpecificEnthalpy h_max=Medium.h_T(Medium.T_max)
          "Specific enthalpy at T_max";
        final parameter SI.SpecificEntropy s_min=Medium.specificEntropy(
            Medium.setState_pT(p, T_min)) "Specific entropy at T_min";
        final parameter SI.SpecificEntropy s_max=Medium.specificEntropy(
            Medium.setState_pT(p, T_max)) "Specific entropy at T_max";

        SI.SpecificEnthalpy h1(start=h_min, fixed=true)
          "Pre-defined specific enthalpy";
        SI.SpecificEnthalpy h2
          "Specific enthalpy computed from T (= h1 required)";
        SI.SpecificEntropy s1(start=s_min, fixed=true)
          "Pre-defined specific entropy";
        SI.SpecificEntropy s2 "Specific entropy computed from T (= h1 required)";
        SI.Temperature Th "Temperature computed from h1";
        SI.Temperature Ts "Temperature computed from s1";

      protected
        constant SI.Time timeUnit=1.0;

      equation
        // Define specific enthalpy
        der(h1) = if time < 1.0 then 1/timeUnit*(h_max - h_min) else 0.0;
        der(s1) = if time < 1.0 then 1/timeUnit*(s_max - s_min) else 0.0;

        // Solve for temperature
        Th = Medium.temperature_phX(
                p,
                h1,
                fill(0.0, 0));
        Ts = Medium.temperature_psX(
                p,
                s1,
                fill(0.0, 0));

        // Check (h2 must be identical to h1)
        h2 = Medium.specificEnthalpy_pTX(
                p,
                Th,
                fill(0.0, 0));
        s2 = Medium.specificEntropy(Medium.setState_pT(p, Ts));
        annotation (experiment_X(StopTime=1), Documentation(info="<html>

                               </html>"));
      end InverseIncompressible_sh_T;

      model Inverse_sh_TX
        "Solve h = h_TX(TX) for T, if h is given for ideal gas NASA"
        extends Modelica.Icons.Example;

        replaceable package Medium =
            myMedia.IdealGases.MixtureGases.FlueGasLambdaOnePlus constrainedby
          myMedia.IdealGases.Common.MixtureGasNasa
          "Medium model" annotation (choicesAllMatching=true);

        parameter SI.Temperature T_min=300
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter SI.Temperature T_max=500
          "Vary temperature linearly from T_min (time=0) up to T_max (time=1)";
        parameter SI.Pressure p=1.0e5 "Fixed pressure in model";
        final parameter SI.SpecificEnthalpy h_min=Medium.h_TX(T_min, X)
          "Specific enthalpy at T_min";
        final parameter SI.SpecificEnthalpy h_max=Medium.h_TX(T_max, X)
          "Specific enthalpy at T_max";
        final parameter SI.SpecificEntropy s_min=Medium.specificEntropy(
            Medium.setState_pTX(
                  p,
                  T_min,
                  Medium.reference_X)) "Specific entropy at T_min";
        final parameter SI.SpecificEntropy s_max=Medium.specificEntropy(
            Medium.setState_pTX(
                  p,
                  T_max,
                  Medium.reference_X)) "Specific entropy at T_max";
        SI.SpecificEnthalpy h1(start=h_min, fixed=true)
          "Pre-defined specific enthalpy";
        SI.SpecificEnthalpy h2
          "Specific enthalpy computed from T (= h1 required)";
        SI.SpecificEntropy s1(start=s_min, fixed=true)
          "Pre-defined specific entropy";
        SI.SpecificEntropy s2 "Specific entropy computed from T (= h1 required)";
        SI.Temperature Th "Temperature computed from h1";
        SI.Temperature Ts "Temperature computed from s1";
        parameter SI.MassFraction[4] X=Medium.reference_X "Mass fraction vector";

      protected
        constant SI.Time timeUnit=1.0;

      equation
        // Define specific enthalpy
        der(h1) = if time < 1.0 then 1/timeUnit*(h_max - h_min) else 0.0;
        der(s1) = if time < 1.0 then 1/timeUnit*(s_max - s_min) else 0.0;

        // Solve for temperature
        Th = Medium.temperature_phX(
                p,
                h1,
                X);
        Ts = Medium.temperature_psX(
                p,
                s1,
                X);

        // Check (h2 must be identical to h1)
        h2 = Medium.specificEnthalpy_pTX(
                p,
                Th,
                X);
        s2 = Medium.specificEntropy(Medium.setState_pTX(
                p,
                Ts,
                X));
        annotation (experiment_X(StopTime=1), Documentation(info="<html>

</html>"));
      end Inverse_sh_TX;

      annotation (Documentation(info="<html>
<p>
This package demonstrates how to solve one non-linear algebraic
equation in one unknown with function
Modelica.Media.Common.OneNonLinearEquation.
</p>

</html>"));
    end SolveOneNonlinearEquation;

      package Utilities
        "Functions, connectors and models needed for the media model tests"

        extends Modelica.Icons.UtilitiesPackage;

        connector FluidPort
          "Interface for quasi one-dimensional fluid flow in a piping network (incompressible or compressible, one or more phases, one or more substances)"
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          Medium.AbsolutePressure p "Pressure in the connection point";
          flow Medium.MassFlowRate m_flow
            "Mass flow rate from the connection point into the component";

          Medium.SpecificEnthalpy h
            "Specific mixture enthalpy in the connection point";
          flow Medium.EnthalpyFlowRate H_flow
            "Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)";

          Medium.MassFraction Xi[Medium.nXi]
            "Independent mixture mass fractions m_i/m in the connection point";
          flow Medium.MassFlowRate mXi_flow[Medium.nXi]
            "Mass flow rates of the independent substances from the connection point into the component (if m_flow > 0, mX_flow = m_flow*X)";

          Medium.ExtraProperty C[Medium.nC]
            "Properties c_i/m in the connection point";
          flow Medium.ExtraPropertyFlowRate mC_flow[Medium.nC]
            "Flow rates of auxiliary properties from the connection point into the component (if m_flow > 0, mC_flow = m_flow*C)";

          annotation (Documentation(info="<html>

</html>"));
        end FluidPort;

        connector FluidPort_a "Fluid connector with filled icon"
          extends FluidPort;
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{-88,206},{112,112}},
                          textString="%name",
                          lineColor={0,0,255})}),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid)}),
            Documentation(info="<html>Modelica.Media.Examples.Tests.Components.FluidPort_a
</html>"));
        end FluidPort_a;

        connector FluidPort_b "Fluid connector with outlined icon"
          extends FluidPort;
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-80,80},{80,-80}},
                          lineColor={0,127,255},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{-88,192},{112,98}},
                          textString="%name",
                          lineColor={0,0,255})}),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-80,80},{80,-80}},
                          lineColor={0,127,255},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid)}),
            Documentation(info="<html>

</html>"));
        end FluidPort_b;

        model PortVolume
          "Fixed volume associated with a port by the finite volume method"
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          parameter SI.Volume V=1e-6 "Fixed size of junction volume";

          parameter Boolean use_p_start=true "Select p_start or d_start"
            annotation (Evaluate=true, Dialog(group=
                  "Initial pressure or initial density"));
          parameter Medium.AbsolutePressure p_start=101325 "Initial pressure"
            annotation (Dialog(group="Initial pressure or initial density",
                enable=use_p_start));
          parameter Medium.Density d_start=1 "Initial density" annotation (Dialog(
                group="Initial pressure or initial density", enable=not
                  use_p_start));
          parameter Boolean use_T_start=true "Select T_start or h_start"
            annotation (Evaluate=true, Dialog(group=
                  "Initial temperature or initial specific enthalpy"));
          parameter Medium.Temperature T_start=
              Modelica.SIunits.Conversions.from_degC(20) "Initial temperature"
            annotation (Dialog(group=
                  "Initial temperature or initial specific enthalpy", enable=
                  use_T_start));
          parameter Medium.SpecificEnthalpy h_start=1.e4
            "Initial specific enthalpy" annotation (Dialog(group=
                  "Initial temperature or initial specific enthalpy", enable=not
                  use_T_start));
          parameter Medium.MassFraction X_start[Medium.nX]
            "Initial mass fractions m_i/m" annotation (Dialog(group=
                  "Only for multi-substance flow", enable=Medium.nX > 0));

          FluidPort_a port(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{-10,-10},{10,10}})));
          Medium.BaseProperties medium(preferredMediumStates=true);
          SI.Energy U "Internal energy of port volume";
          SI.Mass m "Mass of junction volume";
          SI.Mass mXi[Medium.nXi]
            "Independent substance masses of junction volume";

        initial equation
          if not Medium.singleState then
            if use_p_start then
              medium.p = p_start;
            else
              medium.d = d_start;
            end if;
          end if;

          if use_T_start then
            medium.T = T_start;
          else
            medium.h = h_start;
          end if;

          medium.Xi = X_start[1:Medium.nXi];
        equation
          // Connect port to medium variables
          medium.p = port.p;
          medium.h = port.h;
          medium.Xi = port.Xi;

          // Total quantities
          m = V*medium.d;
          mXi = m*medium.Xi;
          U = m*medium.u;

          // Mass and energy balance
          der(m) = port.m_flow;
          der(mXi) = port.mXi_flow;
          der(U) = port.H_flow;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                    -100},{100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillPattern=FillPattern.Sphere,
                          fillColor={170,213,255}),Text(
                          extent={{-150,150},{150,110}},
                          textString="%name",
                          lineColor={0,0,255}), Text(
                          extent={{-150,-110},{150,-150}},
                          textString="V=%V")}), Documentation(info="<html>
<p>
This component models the <strong>volume</strong> of <strong>fixed size</strong> that is
associated with the <strong>fluid port</strong> to which it is connected.
This means that all medium properties inside the volume, are identical
to the port medium properties. In particular, the specific enthalpy
inside the volume (= medium.h) is always identical to the specific enthalpy
in the port (port.h = medium.h). Usually, this model is used when
discretizing a component according to the finite volume method into
volumes in internal ports that only store energy and mass and into
transport elements that just transport energy, mass and momentum
between the internal ports without storing these quantities during the
transport.
</p>
</html>"));
        end PortVolume;

        model FixedMassFlowRate
          "Ideal pump that produces a constant mass flow rate from a large reservoir at fixed temperature and mass fraction"
          parameter Medium.MassFlowRate m_flow
            "Fixed mass flow rate from an infinite reservoir to the fluid port";

          parameter Boolean use_T_ambient=true "Select T_ambient or h_ambient"
            annotation (Evaluate=true, Dialog(group=
                  "Ambient temperature or ambient specific enthalpy"));
          parameter Medium.Temperature T_ambient=
              Modelica.SIunits.Conversions.from_degC(20) "Ambient temperature"
            annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=
                  use_T_ambient));
          parameter Medium.SpecificEnthalpy h_ambient=1.e4
            "Ambient specific enthalpy" annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=not
                  use_T_ambient));
          parameter Medium.MassFraction X_ambient[Medium.nX]
            "Ambient mass fractions m_i/m of reservoir";

          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          Medium.BaseProperties medium "Medium in the source";
          FluidPort_b port(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{100,-10},{120,10}})));
        equation
          if use_T_ambient then
            medium.T = T_ambient;
          else
            medium.h = h_ambient;
          end if;

          medium.Xi = X_ambient[1:Medium.nXi];
          medium.p = port.p;
          port.m_flow = -m_flow;
          port.mXi_flow = semiLinear(
                    port.m_flow,
                    port.Xi,
                    medium.Xi);
          port.H_flow = semiLinear(
                    port.m_flow,
                    port.h,
                    medium.h);
          annotation (Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}}), graphics={Rectangle(
                          extent={{20,60},{100,-60}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={192,192,192}),Rectangle(
                          extent={{38,40},{100,-40}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={0,127,255}),Ellipse(
                          extent={{-100,80},{60,-80}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          lineColor={0,0,255}),Polygon(
                          points={{-60,70},{60,0},{-60,-68},{-60,70}},
                          lineColor={0,0,255},
                          fillColor={0,0,255},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{-54,32},{16,-30}},
                          lineColor={255,0,0},
                          textString="m"),Text(
                          extent={{-150,150},{150,110}},
                          textString="%name",
                          lineColor={0,0,255}), Text(
                          extent={{-150,-110},{150,-150}},
                          textString="%m_flow"), Ellipse(
                          extent={{-26,30},{-18,22}},
                          lineColor={255,0,0},
                          fillColor={255,0,0},
                          fillPattern=FillPattern.Solid)}), Documentation(info="<html>

</html>"));
        end FixedMassFlowRate;

        model FixedAmbient
          "Ambient pressure, temperature and mass fraction source"
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          parameter Boolean use_p_ambient=true "Select p_ambient or d_ambient"
            annotation (Evaluate=true, Dialog(group=
                  "Ambient pressure or ambient density"));
          parameter Medium.AbsolutePressure p_ambient=101325 "Ambient pressure"
            annotation (Dialog(group="Ambient pressure or ambient density",
                enable=use_p_ambient));
          parameter Medium.Density d_ambient=1 "Ambient density" annotation (
              Dialog(group="Ambient pressure or ambient density", enable=not
                  use_p_ambient));
          parameter Boolean use_T_ambient=true "Select T_ambient or h_ambient"
            annotation (Evaluate=true, Dialog(group=
                  "Ambient temperature or ambient specific enthalpy"));
          parameter Medium.Temperature T_ambient=
              Modelica.SIunits.Conversions.from_degC(20) "Ambient temperature"
            annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=
                  use_T_ambient));
          parameter Medium.SpecificEnthalpy h_ambient=1.e4
            "Ambient specific enthalpy" annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=not
                  use_T_ambient));
          parameter Medium.MassFraction X_ambient[Medium.nX]
            "Ambient mass fractions m_i/m" annotation (Dialog(group=
                  "Only for multi-substance flow", enable=Medium.nX > 0));

          Medium.BaseProperties medium "Medium in the source";
          FluidPort_b port(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{100,-10},{120,10}})));

        equation
          if use_p_ambient or Medium.singleState then
            medium.p = p_ambient;
          else
            medium.d = d_ambient;
          end if;

          if use_T_ambient then
            medium.T = T_ambient;
          else
            medium.h = h_ambient;
          end if;

          medium.Xi = X_ambient[1:Medium.nXi];

          port.p = medium.p;
          port.H_flow = semiLinear(
                    port.m_flow,
                    port.h,
                    medium.h);
          port.mXi_flow = semiLinear(
                    port.m_flow,
                    port.Xi,
                    medium.Xi);
          annotation (Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillPattern=FillPattern.Sphere,
                          fillColor={0,127,255}), Text(
                          extent={{-150,150},{150,110}},
                          textString="%name",
                          lineColor={0,0,255})}), Documentation(info="<html>
<p>
Model <strong>FixedAmbient_pt</strong> defines constant values for ambient conditions:
</p>
<ul>
<li> Ambient pressure.</li>
<li> Ambient temperature.</li>
<li> Ambient mass fractions (only for multi-substance flow).</li>
</ul>
<p>
Note, that ambient temperature
and mass fractions have only an effect if the mass flow
is from the ambient into the port. If mass is flowing from
the port into the ambient, the ambient definitions,
with exception of ambient pressure, do not have an effect.
</p>
</html>"));
        end FixedAmbient;

        model ShortPipe "Simple pressure loss in pipe"
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          parameter Medium.AbsolutePressure dp_nominal(min=1e-10)
            "Nominal pressure drop";
          parameter Medium.MassFlowRate m_flow_nominal(min=1e-10)
            "Nominal mass flow rate at nominal pressure drop";

          FluidPort_a port_a(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{-120,-10},{-100,10}})));
          FluidPort_b port_b(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{120,-10},{100,10}})));
          // Medium.BaseProperties medium_a(p=port_a.p, h=port_a.h, Xi=port_a.Xi)
          //   "Medium properties in port_a";
          // Medium.BaseProperties medium_b(p=port_b.p, h=port_b.h, Xi=port_b.Xi)
          //   "Medium properties in port_b";
          Medium.MassFlowRate m_flow
            "Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)";
          Modelica.SIunits.Pressure dp "Pressure drop from port_a to port_b";
        equation
          /* Handle reverse and zero flow */
          port_a.H_flow = semiLinear(
                    port_a.m_flow,
                    port_a.h,
                    port_b.h);
          port_a.mXi_flow = semiLinear(
                    port_a.m_flow,
                    port_a.Xi,
                    port_b.Xi);

          /* Energy, mass and substance mass balance */
          port_a.H_flow + port_b.H_flow = 0;
          port_a.m_flow + port_b.m_flow = 0;
          port_a.mXi_flow + port_b.mXi_flow = zeros(Medium.nXi);

          // Design direction of mass flow rate
          m_flow = port_a.m_flow;

          // Pressure drop
          dp = port_a.p - port_b.p;
          m_flow = (m_flow_nominal/dp_nominal)*dp;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                    -100},{100,100}}), graphics={Rectangle(
                          extent={{-100,60},{100,-60}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={192,192,192}),Rectangle(
                          extent={{-100,34},{100,-36}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={0,127,255}),Text(
                          extent={{-150,110},{150,70}},
                          textString="%name", lineColor={0,0,255}), Text(
                          extent={{-150,-70},{150,-110}},
                          textString="k=%m_flow_nominal/%dp_nominal")}),
              Documentation(info="<html>
<p>
Model <strong>ShortPipe</strong> defines a simple pipe model
with pressure loss due to friction. It is assumed that
no mass or energy is stored in the pipe.
</p>
</html>"));
        end ShortPipe;

        partial model PartialTestModel "Basic test model to test a medium"
          import SI = Modelica.SIunits;

          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);
          parameter SI.AbsolutePressure p_start=Medium.p_default
            "Initial value of pressure";
          parameter SI.Temperature T_start=Medium.T_default
            "Initial value of temperature";
          parameter SI.SpecificEnthalpy h_start=Medium.h_default
            "Initial value of specific enthalpy";
          parameter Real X_start[Medium.nX]=Medium.X_default
            "Initial value of mass fractions";

          /*
  parameter SI.AbsolutePressure p_start = 1.0e5 "Initial value of pressure";
  parameter SI.Temperature T_start = 300 "Initial value of temperature";
  parameter SI.Density h_start = 1 "Initial value of specific enthalpy";
  parameter Real X_start[Medium.nX] = Medium.reference_X
    "Initial value of mass fractions";
*/
          PortVolume volume(
            redeclare package Medium = Medium,
            p_start=p_start,
            T_start=T_start,
            h_start=h_start,
            X_start=X_start,
            V=0.1) annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
          FixedMassFlowRate fixedMassFlowRate(
            redeclare package Medium = Medium,
            T_ambient=1.2*T_start,
            h_ambient=1.2*h_start,
            m_flow=1,
            X_ambient=0.5*X_start) annotation (Placement(transformation(extent={{
                    -80,0},{-60,20}})));
          FixedAmbient ambient(
            redeclare package Medium = Medium,
            T_ambient=T_start,
            h_ambient=h_start,
            X_ambient=X_start,
            p_ambient=p_start) annotation (Placement(transformation(extent={{60,0},
                    {40,20}})));
          ShortPipe shortPipe(
            redeclare package Medium = Medium,
            m_flow_nominal=1,
            dp_nominal=0.1e5) annotation (Placement(transformation(extent={{0,0},
                    {20,20}})));
        equation
          connect(fixedMassFlowRate.port, volume.port)
            annotation (Line(points={{-59,10},{-30,10}}, color={0,127,255}));
          connect(volume.port, shortPipe.port_a)
            annotation (Line(points={{-30,10},{-1,10}}, color={0,127,255}));
          connect(shortPipe.port_b, ambient.port)
            annotation (Line(points={{21,10},{39,10}}, color={0,127,255}));
          annotation (Documentation(info="<html>

</html>"));
        end PartialTestModel;

        partial model PartialTestModel2
          "Slightly larger test model to test a medium"
          import SI = Modelica.SIunits;
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);
          parameter SI.AbsolutePressure p_start=1.0e5 "Initial value of pressure";
          parameter SI.Temperature T_start=300 "Initial value of temperature";
          parameter SI.SpecificEnthalpy h_start=1
            "Initial value of specific enthalpy";
          parameter Real X_start[Medium.nX]=Medium.reference_X
            "Initial value of mass fractions";
          PortVolume volume(
            redeclare package Medium = Medium,
            p_start=p_start,
            T_start=T_start,
            h_start=h_start,
            X_start=X_start,
            V=0.1) annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
          FixedMassFlowRate fixedMassFlowRate(
            redeclare package Medium = Medium,
            T_ambient=1.2*T_start,
            h_ambient=1.2*h_start,
            m_flow=1,
            X_ambient=0.5*X_start) annotation (Placement(transformation(extent={{
                    -100,0},{-80,20}})));
          FixedAmbient ambient(
            redeclare package Medium = Medium,
            T_ambient=T_start,
            h_ambient=h_start,
            X_ambient=X_start,
            p_ambient=p_start) annotation (Placement(transformation(extent={{92,0},
                    {72,20}})));
          ShortPipe shortPipe(
            redeclare package Medium = Medium,
            m_flow_nominal=1,
            dp_nominal=0.1e5) annotation (Placement(transformation(extent={{-30,0},
                    {-10,20}})));
          PortVolume volume1(
            redeclare package Medium = Medium,
            p_start=p_start,
            T_start=T_start,
            h_start=h_start,
            X_start=X_start,
            V=0.1) annotation (Placement(transformation(extent={{0,0},{20,20}})));
          ShortPipe shortPipe1(
            redeclare package Medium = Medium,
            m_flow_nominal=1,
            dp_nominal=0.1e5) annotation (Placement(transformation(extent={{36,0},
                    {56,20}})));
        equation
          connect(fixedMassFlowRate.port, volume.port)
            annotation (Line(points={{-79,10},{-50,10}}, color={0,127,255}));
          connect(volume.port, shortPipe.port_a)
            annotation (Line(points={{-50,10},{-31,10}}, color={0,127,255}));
          connect(volume1.port, shortPipe1.port_a)
            annotation (Line(points={{10,10},{35,10}}, color={0,127,255}));
          connect(shortPipe.port_b, volume1.port)
            annotation (Line(points={{-9,10},{10,10}}, color={0,127,255}));
          connect(shortPipe1.port_b, ambient.port)
            annotation (Line(points={{57,10},{71,10}}, color={0,127,255}));
          annotation (Documentation(info="<html>

</html>"));
        end PartialTestModel2;
        annotation (Documentation(info="<html>

</html>"));
      end Utilities;

    package TestOnly "Examples to show the testing of media"
      extends Modelica.Icons.ExamplesPackage;
      extends Modelica.Icons.ObsoleteModel;
      model MixIdealGasAir "Ideal gas air medium model"
        extends Modelica.Icons.Example;
        extends Modelica.Icons.ObsoleteModel;
        package Medium = IdealGases.MixtureGases.CombustionAir "Medium model";
        Medium.BaseProperties medium(
          T(start=200.0, fixed=true),
          X(start={0.2,0.8}),
          p(start=1.0e5, fixed=true));
        Medium.BaseProperties medium2(
          T(start=300.0, fixed=true),
          X(start={0.2,0.8}, each fixed=true),
          p(start=2.0e5, fixed=true));
        Medium.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(medium.state);
        Medium.SpecificHeatCapacity cv=Medium.specificHeatCapacityCv(medium.state);
        Medium.IsentropicExponent gamma=Medium.isentropicExponent(medium.state);
        Medium.SpecificEntropy s=Medium.specificEntropy(medium.state);
        Medium.SpecificEntropy s2=Medium.specificEntropy(medium2.state);
        Medium.VelocityOfSound a=Medium.velocityOfSound(medium.state);
        Medium.DynamicViscosity eta=Medium.dynamicViscosity(medium.state);
        Medium.ThermalConductivity lambda=Medium.thermalConductivity(medium.state);
        Real beta=Medium.isobaricExpansionCoefficient(medium.state);
        Real gamma2=Medium.isothermalCompressibility(medium2.state);
        Medium.SpecificEnthalpy h_is=Medium.isentropicEnthalpyApproximation(2.0e5,
            medium.state);
      equation
        der(medium.p) = 1000.0;
        der(medium.T) = 1000;
        medium.X = {0.2,0.8};
        der(medium2.p) = 1.0e3;
        der(medium2.T) = 0.0;
        der(medium2.X) = {0.0,0.0};
        //  s2 = s;
        annotation (Documentation(info="<html>
<p>An example for using ideal gas properties and how to compute isentropic enthalpy changes.
The function that is implemented is approximate, but usually very good: the second medium record medium2
is given to compare the approximation.
</p>
</html>"),   experiment_X(StopTime=1),
        obsolete = "Obsolete test model - use ModelicaTest.Media.TestOnly.MixIdealGasAir instead");
      end MixIdealGasAir;

      model FlueGas "Ideal gas flue gas model"
        extends Modelica.Icons.Example;
        extends Modelica.Icons.ObsoleteModel;
        package Medium = IdealGases.MixtureGases.FlueGasLambdaOnePlus
          "Medium model";
        Medium.ThermodynamicState state(
          T(start=200.0, fixed=true),
          X(start={0.2,0.3,0.4,0.1}),
          p(start=1.0e5, fixed=true));
        Medium.BaseProperties medium2(
          T(start=300.0, fixed=true),
          X(start={0.2,0.1,0.3,0.4}, each fixed=true),
          p(start=2.0e5, fixed=true));
        Medium.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(state);
        Medium.SpecificHeatCapacity cv=Medium.specificHeatCapacityCv(state);
        Medium.IsentropicExponent gamma=Medium.isentropicExponent(state);
        Medium.SpecificEntropy s=Medium.specificEntropy(state);
        Medium.SpecificEntropy s2=Medium.specificEntropy(medium2.state);
        Medium.VelocityOfSound a=Medium.velocityOfSound(state);
        Real beta=Medium.isobaricExpansionCoefficient(state);
        Real gamma2=Medium.isothermalCompressibility(medium2.state);
        Medium.SpecificEnthalpy h_is=Medium.isentropicEnthalpyApproximation(2.0e5,
            medium2.state);
        parameter Medium.MolarMass[4] MMx=Medium.data.MM
          "Molar masses of flue gas";
        Medium.MolarMass MM=1/sum(state.X[j]/MMx[j] for j in 1:4) "Molar mass";
        Real[4] dddX=Medium.density_derX(medium2.state);
      equation
        der(state.p) = 1000.0;
        der(state.T) = 1000;
        state.X = {0.2,0.2,0.4,0.2};
        der(medium2.p) = 1.0e3;
        der(medium2.T) = 0.0;
        der(medium2.X[1:Medium.nX]) = {0.0,0.0,0.0,0.0};
        annotation (Documentation(info="<html>
<p>An example for using ideal gas properties and how to compute isentropic enthalpy changes.
The function that is implemented is approximate, but usually very good: the second medium record medium2
is given to compare the approximation.
</p>
</html>"),   experiment_X(StopTime=1),
        obsolete = "Obsolete test model - use ModelicaTest.Media.TestOnly.FlueGas instead");
      end FlueGas;

      package N2AsMix "Air and steam mixture (no condensation!, pseudo-mixture)"
        extends IdealGases.Common.MixtureGasNasa(
          mediumName="Nitrogen",
          data={IdealGases.Common.SingleGasesData.N2},
          fluidConstants={IdealGases.Common.FluidData.N2},
          substanceNames={"Nitrogen"},
          reference_X={1.0});
        extends Modelica.Icons.ObsoleteModel;
        annotation (Documentation(info="<html>

</html>"),
        obsolete = "Obsolete package - use ModelicaTest.Media.TestOnly.N2AsMix instead");
      end N2AsMix;

      model IdealGasN2 "Test IdealGas.SingleMedia.N2 medium model"
        extends Modelica.Icons.Example;
        extends Modelica.Icons.ObsoleteModel;

        parameter Modelica.SIunits.Volume V=1 "Size of fixed volume";
        parameter Medium.MassFlowRate m_flow_ext=0.01
          "Mass flow rate into volume";
        parameter Medium.EnthalpyFlowRate H_flow_ext=5000
          "Enthalpy flow rate into volume";

        package Medium = IdealGases.SingleGases.N2 "Medium model";
        // initType=Medium.Choices.Init.SteadyState,

        Medium.BaseProperties medium(
          preferredMediumStates=true,
          p(start=1.e5, fixed=true),
          T(start=300, fixed=true));

        Real m(quantity=Medium.mediumName, start=1.0);
        SI.InternalEnergy U;

        Medium.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(medium.state);
        Medium.SpecificHeatCapacity cv=Medium.specificHeatCapacityCv(medium.state);
        Medium.IsentropicExponent gamma=Medium.isentropicExponent(medium.state);
        Medium.SpecificEntropy s=Medium.specificEntropy(medium.state);
        Medium.VelocityOfSound a=Medium.velocityOfSound(medium.state);
      equation

        m = medium.d*V;
        U = m*medium.u;

        // Mass balance
        der(m) = m_flow_ext;

        // Energy balance
        der(U) = H_flow_ext;
        annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1),
        obsolete = "Obsolete test model - use ModelicaTest.Media.TestOnly.IdealGasN2 instead");
      end IdealGasN2;

      model IdealGasN2Mix "Test IdealGas.SingleMedia.N2 medium model"
        extends Modelica.Icons.Example;
        extends Modelica.Icons.ObsoleteModel;

        parameter Modelica.SIunits.Volume V=1 "Size of volume";
        parameter Medium.MassFlowRate m_flow_ext=0.01
          "Mass flow rate flowing into volume";
        parameter Medium.EnthalpyFlowRate H_flow_ext=5000
          "Enthalpy flow rate flowing into volume";

        package Medium = N2AsMix "Medium model";
        // initType=Medium.Choices.Init.SteadyState,

        Medium.BaseProperties medium(
          preferredMediumStates=true,
          p(start=1.e5, fixed=true),
          T(start=300, fixed=true));

        Real m(quantity=Medium.mediumName, start=1.0);
        SI.InternalEnergy U;

        Medium.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(medium.state);
        Medium.SpecificHeatCapacity cv=Medium.specificHeatCapacityCv(medium.state);
        Medium.IsentropicExponent gamma=Medium.isentropicExponent(medium.state);
        Medium.SpecificEntropy s=Medium.specificEntropy(medium.state);
        Medium.VelocityOfSound a=Medium.velocityOfSound(medium.state);
      equation

        m = medium.d*V;
        U = m*medium.u;
        medium.X = {1.0};
        // Mass balance
        der(m) = m_flow_ext;

        // Energy balance
        der(U) = H_flow_ext;
        annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1),
        obsolete = "Obsolete test model - use ModelicaTest.Media.TestOnly.IdealGasN2Mix instead");
      end IdealGasN2Mix;
      annotation (Documentation(info="<html>

</html>"),
        obsolete = "Obsolete package - use ModelicaTest.Media.TestOnly instead");
    end TestOnly;

    package Tests
      "Library to test that all media models simulate and fulfill the expected structural properties"

      extends Modelica.Icons.ExamplesPackage;
      extends Modelica.Icons.ObsoleteModel;

      package Components
        "Functions, connectors and models needed for the media model tests"

        extends Modelica.Icons.Package;
        extends Modelica.Icons.ObsoleteModel;

        connector FluidPort
          "Interface for quasi one-dimensional fluid flow in a piping network (incompressible or compressible, one or more phases, one or more substances)"
          extends Modelica.Icons.ObsoleteModel;
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          Medium.AbsolutePressure p "Pressure in the connection point";
          flow Medium.MassFlowRate m_flow
            "Mass flow rate from the connection point into the component";

          Medium.SpecificEnthalpy h
            "Specific mixture enthalpy in the connection point";
          flow Medium.EnthalpyFlowRate H_flow
            "Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)";

          Medium.MassFraction Xi[Medium.nXi]
            "Independent mixture mass fractions m_i/m in the connection point";
          flow Medium.MassFlowRate mXi_flow[Medium.nXi]
            "Mass flow rates of the independent substances from the connection point into the component (if m_flow > 0, mX_flow = m_flow*X)";

          Medium.ExtraProperty C[Medium.nC]
            "Properties c_i/m in the connection point";
          flow Medium.ExtraPropertyFlowRate mC_flow[Medium.nC]
            "Flow rates of auxiliary properties from the connection point into the component (if m_flow > 0, mC_flow = m_flow*C)";

          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete connector - use Modelica.Media.Examples.Utilities.FluidPort instead");
        end FluidPort;

        connector FluidPort_a "Fluid connector with filled icon"
          extends FluidPort;
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{-88,206},{112,112}},
                          textString="%name",
                          lineColor={0,0,255})}),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid)}),
            Documentation(info="<html>Modelica.Media.Examples.Tests.Components.FluidPort_a
</html>"),obsolete = "Obsolete connector - use Modelica.Media.Examples.Utilities.FluidPort_a instead");
        end FluidPort_a;

        connector FluidPort_b "Fluid connector with outlined icon"
          extends FluidPort;
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-80,80},{80,-80}},
                          lineColor={0,127,255},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{-88,192},{112,98}},
                          textString="%name",
                          lineColor={0,0,255})}),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          lineColor={0,127,255},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillColor={0,127,255},
                          fillPattern=FillPattern.Solid),Ellipse(
                          extent={{-80,80},{80,-80}},
                          lineColor={0,127,255},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid)}),
            Documentation(info="<html>

</html>"),obsolete = "Obsolete connector - use Modelica.Media.Examples.Utilities.FluidPort_b instead");
        end FluidPort_b;

        model PortVolume
          "Fixed volume associated with a port by the finite volume method"
          extends Modelica.Icons.ObsoleteModel;
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          parameter SI.Volume V=1e-6 "Fixed size of junction volume";

          parameter Boolean use_p_start=true "Select p_start or d_start"
            annotation (Evaluate=true, Dialog(group=
                  "Initial pressure or initial density"));
          parameter Medium.AbsolutePressure p_start=101325 "Initial pressure"
            annotation (Dialog(group="Initial pressure or initial density",
                enable=use_p_start));
          parameter Medium.Density d_start=1 "Initial density" annotation (Dialog(
                group="Initial pressure or initial density", enable=not
                  use_p_start));
          parameter Boolean use_T_start=true "Select T_start or h_start"
            annotation (Evaluate=true, Dialog(group=
                  "Initial temperature or initial specific enthalpy"));
          parameter Medium.Temperature T_start=
              Modelica.SIunits.Conversions.from_degC(20) "Initial temperature"
            annotation (Dialog(group=
                  "Initial temperature or initial specific enthalpy", enable=
                  use_T_start));
          parameter Medium.SpecificEnthalpy h_start=1.e4
            "Initial specific enthalpy" annotation (Dialog(group=
                  "Initial temperature or initial specific enthalpy", enable=not
                  use_T_start));
          parameter Medium.MassFraction X_start[Medium.nX]
            "Initial mass fractions m_i/m" annotation (Dialog(group=
                  "Only for multi-substance flow", enable=Medium.nX > 0));

          FluidPort_a port(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{-10,-10},{10,10}})));
          Medium.BaseProperties medium(preferredMediumStates=true);
          SI.Energy U "Internal energy of port volume";
          SI.Mass m "Mass of junction volume";
          SI.Mass mXi[Medium.nXi]
            "Independent substance masses of junction volume";

        initial equation
          if not Medium.singleState then
            if use_p_start then
              medium.p = p_start;
            else
              medium.d = d_start;
            end if;
          end if;

          if use_T_start then
            medium.T = T_start;
          else
            medium.h = h_start;
          end if;

          medium.Xi = X_start[1:Medium.nXi];
        equation
          // Connect port to medium variables
          medium.p = port.p;
          medium.h = port.h;
          medium.Xi = port.Xi;

          // Total quantities
          m = V*medium.d;
          mXi = m*medium.Xi;
          U = m*medium.u;

          // Mass and energy balance
          der(m) = port.m_flow;
          der(mXi) = port.mXi_flow;
          der(U) = port.H_flow;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                    -100},{100,100}}), graphics={Ellipse(
                          extent={{-100,100},{100,-100}},
                          fillPattern=FillPattern.Sphere,
                          fillColor={170,213,255}),Text(
                          extent={{-144,178},{146,116}},
                          textString="%name",
                          lineColor={0,0,255}),Text(
                          extent={{-130,-108},{144,-150}},
                          textString="V=%V")}), Documentation(info="<html>
<p>
This component models the <strong>volume</strong> of <strong>fixed size</strong> that is
associated with the <strong>fluid port</strong> to which it is connected.
This means that all medium properties inside the volume, are identical
to the port medium properties. In particular, the specific enthalpy
inside the volume (= medium.h) is always identical to the specific enthalpy
in the port (port.h = medium.h). Usually, this model is used when
discretizing a component according to the finite volume method into
volumes in internal ports that only store energy and mass and into
transport elements that just transport energy, mass and momentum
between the internal ports without storing these quantities during the
transport.
</p>
</html>"),obsolete = "Obsolete model - use Modelica.Media.Examples.Utilities.PortVolume instead");
        end PortVolume;

        model FixedMassFlowRate
          "Ideal pump that produces a constant mass flow rate from a large reservoir at fixed temperature and mass fraction"
          extends Modelica.Icons.ObsoleteModel;
          parameter Medium.MassFlowRate m_flow
            "Fixed mass flow rate from an infinite reservoir to the fluid port";

          parameter Boolean use_T_ambient=true "Select T_ambient or h_ambient"
            annotation (Evaluate=true, Dialog(group=
                  "Ambient temperature or ambient specific enthalpy"));
          parameter Medium.Temperature T_ambient=
              Modelica.SIunits.Conversions.from_degC(20) "Ambient temperature"
            annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=
                  use_T_ambient));
          parameter Medium.SpecificEnthalpy h_ambient=1.e4
            "Ambient specific enthalpy" annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=not
                  use_T_ambient));
          parameter Medium.MassFraction X_ambient[Medium.nX]
            "Ambient mass fractions m_i/m of reservoir";

          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          Medium.BaseProperties medium "Medium in the source";
          FluidPort_b port(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{100,-10},{120,10}})));
        equation
          if use_T_ambient then
            medium.T = T_ambient;
          else
            medium.h = h_ambient;
          end if;

          medium.Xi = X_ambient[1:Medium.nXi];
          medium.p = port.p;
          port.m_flow = -m_flow;
          port.mXi_flow = semiLinear(
                    port.m_flow,
                    port.Xi,
                    medium.Xi);
          port.H_flow = semiLinear(
                    port.m_flow,
                    port.h,
                    medium.h);
          annotation (Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}}), graphics={Rectangle(
                          extent={{20,60},{100,-60}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={192,192,192}),Rectangle(
                          extent={{38,40},{100,-40}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={0,127,255}),Ellipse(
                          extent={{-100,80},{60,-80}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          lineColor={0,0,255}),Polygon(
                          points={{-60,70},{60,0},{-60,-68},{-60,70}},
                          lineColor={0,0,255},
                          fillColor={0,0,255},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{-54,32},{16,-30}},
                          lineColor={255,0,0},
                          textString="m"),Text(
                          extent={{-142,142},{156,88}},
                          textString="%name",
                          lineColor={0,0,255}),Text(
                          extent={{-154,-88},{150,-132}},
                          textString="%m_flow"),Ellipse(
                          extent={{-26,30},{-18,22}},
                          lineColor={255,0,0},
                          fillColor={255,0,0},
                          fillPattern=FillPattern.Solid)}), Documentation(info="<html>

</html>"),obsolete = "Obsolete model - use Modelica.Media.Examples.Utilities.FixedMassFlowRate instead");
        end FixedMassFlowRate;

        model FixedAmbient
          "Ambient pressure, temperature and mass fraction source"
          extends Modelica.Icons.ObsoleteModel;
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          parameter Boolean use_p_ambient=true "Select p_ambient or d_ambient"
            annotation (Evaluate=true, Dialog(group=
                  "Ambient pressure or ambient density"));
          parameter Medium.AbsolutePressure p_ambient=101325 "Ambient pressure"
            annotation (Dialog(group="Ambient pressure or ambient density",
                enable=use_p_ambient));
          parameter Medium.Density d_ambient=1 "Ambient density" annotation (
              Dialog(group="Ambient pressure or ambient density", enable=not
                  use_p_ambient));
          parameter Boolean use_T_ambient=true "Select T_ambient or h_ambient"
            annotation (Evaluate=true, Dialog(group=
                  "Ambient temperature or ambient specific enthalpy"));
          parameter Medium.Temperature T_ambient=
              Modelica.SIunits.Conversions.from_degC(20) "Ambient temperature"
            annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=
                  use_T_ambient));
          parameter Medium.SpecificEnthalpy h_ambient=1.e4
            "Ambient specific enthalpy" annotation (Dialog(group=
                  "Ambient temperature or ambient specific enthalpy", enable=not
                  use_T_ambient));
          parameter Medium.MassFraction X_ambient[Medium.nX]
            "Ambient mass fractions m_i/m" annotation (Dialog(group=
                  "Only for multi-substance flow", enable=Medium.nX > 0));

          Medium.BaseProperties medium "Medium in the source";
          FluidPort_b port(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{100,-10},{120,10}})));

        equation
          if use_p_ambient or Medium.singleState then
            medium.p = p_ambient;
          else
            medium.d = d_ambient;
          end if;

          if use_T_ambient then
            medium.T = T_ambient;
          else
            medium.h = h_ambient;
          end if;

          medium.Xi = X_ambient[1:Medium.nXi];

          port.p = medium.p;
          port.H_flow = semiLinear(
                    port.m_flow,
                    port.h,
                    medium.h);
          port.mXi_flow = semiLinear(
                    port.m_flow,
                    port.Xi,
                    medium.Xi);
          annotation (Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}}), graphics={Ellipse(
                          extent={{-100,80},{100,-80}},
                          fillPattern=FillPattern.Sphere,
                          fillColor={0,127,255}),Text(
                          extent={{-136,144},{132,82}},
                          textString="%name",
                          lineColor={0,0,255})}), Documentation(info="<html>
<p>
Model <strong>FixedAmbient_pt</strong> defines constant values for ambient conditions:
</p>
<ul>
<li> Ambient pressure.</li>
<li> Ambient temperature.</li>
<li> Ambient mass fractions (only for multi-substance flow).</li>
</ul>
<p>
Note, that ambient temperature
and mass fractions have only an effect if the mass flow
is from the ambient into the port. If mass is flowing from
the port into the ambient, the ambient definitions,
with exception of ambient pressure, do not have an effect.
</p>
</html>"),obsolete = "Obsolete model - use Modelica.Media.Examples.Utilities.FixedAmbient instead");
        end FixedAmbient;

        model ShortPipe "Simple pressure loss in pipe"
          extends Modelica.Icons.ObsoleteModel;
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);

          parameter Medium.AbsolutePressure dp_nominal(min=1e-10)
            "Nominal pressure drop";
          parameter Medium.MassFlowRate m_flow_nominal(min=1e-10)
            "Nominal mass flow rate at nominal pressure drop";

          FluidPort_a port_a(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{-120,-10},{-100,10}})));
          FluidPort_b port_b(redeclare package Medium = Medium) annotation (
              Placement(transformation(extent={{120,-10},{100,10}})));
          // Medium.BaseProperties medium_a(p=port_a.p, h=port_a.h, Xi=port_a.Xi)
          //   "Medium properties in port_a";
          // Medium.BaseProperties medium_b(p=port_b.p, h=port_b.h, Xi=port_b.Xi)
          //   "Medium properties in port_b";
          Medium.MassFlowRate m_flow
            "Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)";
          Modelica.SIunits.Pressure dp "Pressure drop from port_a to port_b";
        equation
          /* Handle reverse and zero flow */
          port_a.H_flow = semiLinear(
                    port_a.m_flow,
                    port_a.h,
                    port_b.h);
          port_a.mXi_flow = semiLinear(
                    port_a.m_flow,
                    port_a.Xi,
                    port_b.Xi);

          /* Energy, mass and substance mass balance */
          port_a.H_flow + port_b.H_flow = 0;
          port_a.m_flow + port_b.m_flow = 0;
          port_a.mXi_flow + port_b.mXi_flow = zeros(Medium.nXi);

          // Design direction of mass flow rate
          m_flow = port_a.m_flow;

          // Pressure drop
          dp = port_a.p - port_b.p;
          m_flow = (m_flow_nominal/dp_nominal)*dp;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                    -100},{100,100}}), graphics={Rectangle(
                          extent={{-100,60},{100,-60}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={192,192,192}),Rectangle(
                          extent={{-100,34},{100,-36}},
                          fillPattern=FillPattern.HorizontalCylinder,
                          fillColor={0,127,255}),Text(
                          extent={{-150,140},{150,80}},
                          textString="%name"),Text(
                          extent={{-136,-62},{122,-108}},
                          textString="k=%m_flow_nominal/%dp_nominal")}),
              Documentation(info="<html>
<p>
Model <strong>ShortPipe</strong> defines a simple pipe model
with pressure loss due to friction. It is assumed that
no mass or energy is stored in the pipe.
</p>
</html>"),obsolete = "Obsolete model - use Modelica.Media.Examples.Utilities.ShortPipe instead");
        end ShortPipe;

        partial model PartialTestModel "Basic test model to test a medium"
          import SI = Modelica.SIunits;
          extends Modelica.Icons.ObsoleteModel;

          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);
          parameter SI.AbsolutePressure p_start=Medium.p_default
            "Initial value of pressure";
          parameter SI.Temperature T_start=Medium.T_default
            "Initial value of temperature";
          parameter SI.SpecificEnthalpy h_start=Medium.h_default
            "Initial value of specific enthalpy";
          parameter Real X_start[Medium.nX]=Medium.X_default
            "Initial value of mass fractions";

          PortVolume volume(
            redeclare package Medium = Medium,
            p_start=p_start,
            T_start=T_start,
            h_start=h_start,
            X_start=X_start,
            V=0.1) annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
          FixedMassFlowRate fixedMassFlowRate(
            redeclare package Medium = Medium,
            T_ambient=1.2*T_start,
            h_ambient=1.2*h_start,
            m_flow=1,
            X_ambient=0.5*X_start) annotation (Placement(transformation(extent={{
                    -80,0},{-60,20}})));
          FixedAmbient ambient(
            redeclare package Medium = Medium,
            T_ambient=T_start,
            h_ambient=h_start,
            X_ambient=X_start,
            p_ambient=p_start) annotation (Placement(transformation(extent={{60,0},
                    {40,20}})));
          ShortPipe shortPipe(
            redeclare package Medium = Medium,
            m_flow_nominal=1,
            dp_nominal=0.1e5) annotation (Placement(transformation(extent={{0,0},
                    {20,20}})));
        equation
          connect(fixedMassFlowRate.port, volume.port)
            annotation (Line(points={{-59,10},{-30,10}}, color={0,127,255}));
          connect(volume.port, shortPipe.port_a)
            annotation (Line(points={{-30,10},{-1,10}}, color={0,127,255}));
          connect(shortPipe.port_b, ambient.port)
            annotation (Line(points={{21,10},{39,10}}, color={0,127,255}));
          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete model - use Modelica.Media.Examples.Utilities.PartialTestModel instead");
        end PartialTestModel;

        partial model PartialTestModel2
          "Slightly larger test model to test a medium"
          import SI = Modelica.SIunits;
          extends Modelica.Icons.ObsoleteModel;
          replaceable package Medium = myMedia.Interfaces.PartialMedium
            "Medium model" annotation (choicesAllMatching=true);
          parameter SI.AbsolutePressure p_start=1.0e5 "Initial value of pressure";
          parameter SI.Temperature T_start=300 "Initial value of temperature";
          parameter SI.SpecificEnthalpy h_start=1
            "Initial value of specific enthalpy";
          parameter Real X_start[Medium.nX]=Medium.reference_X
            "Initial value of mass fractions";
          PortVolume volume(
            redeclare package Medium = Medium,
            p_start=p_start,
            T_start=T_start,
            h_start=h_start,
            X_start=X_start,
            V=0.1) annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
          FixedMassFlowRate fixedMassFlowRate(
            redeclare package Medium = Medium,
            T_ambient=1.2*T_start,
            h_ambient=1.2*h_start,
            m_flow=1,
            X_ambient=0.5*X_start) annotation (Placement(transformation(extent={{
                    -100,0},{-80,20}})));
          FixedAmbient ambient(
            redeclare package Medium = Medium,
            T_ambient=T_start,
            h_ambient=h_start,
            X_ambient=X_start,
            p_ambient=p_start) annotation (Placement(transformation(extent={{92,0},
                    {72,20}})));
          ShortPipe shortPipe(
            redeclare package Medium = Medium,
            m_flow_nominal=1,
            dp_nominal=0.1e5) annotation (Placement(transformation(extent={{-30,0},
                    {-10,20}})));
          PortVolume volume1(
            redeclare package Medium = Medium,
            p_start=p_start,
            T_start=T_start,
            h_start=h_start,
            X_start=X_start,
            V=0.1) annotation (Placement(transformation(extent={{0,0},{20,20}})));
          ShortPipe shortPipe1(
            redeclare package Medium = Medium,
            m_flow_nominal=1,
            dp_nominal=0.1e5) annotation (Placement(transformation(extent={{36,0},
                    {56,20}})));
        equation
          connect(fixedMassFlowRate.port, volume.port)
            annotation (Line(points={{-79,10},{-50,10}}, color={0,127,255}));
          connect(volume.port, shortPipe.port_a)
            annotation (Line(points={{-50,10},{-31,10}}, color={0,127,255}));
          connect(volume1.port, shortPipe1.port_a)
            annotation (Line(points={{10,10},{35,10}}, color={0,127,255}));
          connect(shortPipe.port_b, volume1.port)
            annotation (Line(points={{-9,10},{10,10}}, color={0,127,255}));
          connect(shortPipe1.port_b, ambient.port)
            annotation (Line(points={{57,10},{71,10}}, color={0,127,255}));
          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete model - use Modelica.Media.Examples.Utilities.PartialTestModel2 instead");
        end PartialTestModel2;
        annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete package - use Modelica.Media.Examples.Utilities instead");
      end Components;

      package MediaTestModels "Test models to test all media"
        extends Modelica.Icons.ExamplesPackage;
        extends Modelica.Icons.ObsoleteModel;
        package Air "Test models of library Modelica.Media.Air"
          extends Modelica.Icons.ExamplesPackage;
          extends Modelica.Icons.ObsoleteModel;
          model SimpleAir "Test Modelica.Media.Air.SimpleAir"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Air.SimpleAir);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Air.SimpleAir instead");
          end SimpleAir;

          model DryAirNasa "Test Modelica.Media.Air.DryAirNasa"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Air.DryAirNasa);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Air.DryAirNasa instead");
          end DryAirNasa;

          model MoistAir "Test Modelica.Media.Air.MoistAir"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Air.MoistAir);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Air.MoistAir instead");
          end MoistAir;
          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete package - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Air instead");
        end Air;

        package IdealGases "Test models of library Modelica.Media.IdealGases"
          extends Modelica.Icons.ExamplesPackage;
          extends Modelica.Icons.ObsoleteModel;

          model Air "Test single gas Modelica.Media.IdealGases.SingleGases.Air"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Air.DryAirNasa);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.IdealGases.Air instead");
          end Air;

          model Nitrogen
            "Test single gas Modelica.Media.IdealGases.SingleGases.N2"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.IdealGases.SingleGases.N2);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.IdealGases.Nitrogen instead");
          end Nitrogen;

          model SimpleNaturalGas
            "Test mixture gas Modelica.Media.IdealGases.MixtureGases.SimpleNaturalGas"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.IdealGases.MixtureGases.SimpleNaturalGas);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.IdealGases.SimpleNaturalGas instead");
          end SimpleNaturalGas;

          model SimpleNaturalGasFixedComposition
            "Test mixture gas Modelica.Media.IdealGases.MixtureGases.SimpleNaturalGas"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.IdealGases.MixtureGases.SimpleNaturalGasFixedComposition);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.IdealGases.SimpleNaturalGasFixedComposition instead");
          end SimpleNaturalGasFixedComposition;
          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete package - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.IdealGases instead");
        end IdealGases;

        package Incompressible
          "Test models of library Modelica.Media.Incompressible"
          extends Modelica.Icons.ExamplesPackage;
          extends Modelica.Icons.ObsoleteModel;
          model Glycol47 "Test Modelica.Media.Incompressible.Examples.Glycol47"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Incompressible.Examples.Glycol47 (                                                                         final
                    singleState=true, final enthalpyOfT=true));
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Incompressible.Glycol47 instead");
          end Glycol47;

          model Essotherm650
            "Test Modelica.Media.Incompressible.Examples.Essotherm65"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Incompressible.Examples.Essotherm650);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Incompressible.Essotherm650 instead");
          end Essotherm650;
          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete package - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Incompressible instead");
        end Incompressible;

        package Water "Test models of library Modelica.Media.Water"
          extends Modelica.Icons.ExamplesPackage;
          extends Modelica.Icons.ObsoleteModel;
          model ConstantPropertyLiquidWater
            "Test Modelica.Media.Water.ConstantPropertyLiquidWater"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Water.ConstantPropertyLiquidWater);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Water.ConstantPropertyLiquidWater instead");
          end ConstantPropertyLiquidWater;

          model IdealSteam "Test Modelica.Media.Water.IdealSteam"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Water.IdealSteam);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Water.IdealSteam instead");
          end IdealSteam;

          model WaterIF97OnePhase_ph
            "Test Modelica.Media.Water.WaterIF97OnePhase_ph"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(
              redeclare package Medium = myMedia.Water.WaterIF97OnePhase_ph,
              fixedMassFlowRate(use_T_ambient=false, h_ambient=363755),
              ambient(use_T_ambient=false, h_ambient=112570));
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Water.WaterIF97OnePhase_ph instead");
          end WaterIF97OnePhase_ph;

          model WaterIF97_pT "Test Modelica.Media.Water.WaterIF97_pT"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.Water.WaterIF97_pT);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Water.WaterIF97_pT instead");
          end WaterIF97_pT;

          model WaterIF97_ph "Test Modelica.Media.Water.WaterIF97_ph"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(
              redeclare package Medium = myMedia.Water.WaterIF97_ph,
              ambient(use_T_ambient=false, h_ambient=112570),
              fixedMassFlowRate(use_T_ambient=false, h_ambient=363755));
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Water.WaterIF97_ph instead");
          end WaterIF97_ph;
          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete package - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.Water instead");
        end Water;

        package LinearFluid
          "Test models of library Modelica.Media.Incompressible"
          extends Modelica.Icons.ExamplesPackage;
          extends Modelica.Icons.ObsoleteModel;
          model LinearColdWater
            "Test Modelica.Media.Incompressible.Examples.Glycol47"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.CompressibleLiquids.LinearColdWater);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.LinearFluid.LinearColdWater instead");
          end LinearColdWater;

          model LinearWater_pT
            "Test Modelica.Media.Incompressible.Examples.Essotherm65"
            extends Modelica.Icons.Example;
            extends myMedia.Examples.Utilities.PartialTestModel(redeclare
                package Medium =
                  myMedia.CompressibleLiquids.LinearWater_pT_Ambient);
            extends Modelica.Icons.ObsoleteModel;
            annotation (Documentation(info="<html>

</html>"),   experiment_X(StopTime=1.01),
            obsolete = "Obsolete test model - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.LinearFluid.LinearWater_pT instead");
          end LinearWater_pT;
          annotation (Documentation(info="<html>

</html>"),obsolete = "Obsolete package - use ModelicaTest.Media.TestsWithFluid.MediaTestModels.LinearFluid instead");
        end LinearFluid;
        annotation (Documentation(info="<html>

</html>"),
        obsolete = "Obsolete package - use ModelicaTest.Media.TestsWithFluid.MediaTestModels instead");
      end MediaTestModels;
      annotation (Documentation(info="<html>

</html>"),
      obsolete = "Obsolete package - use ModelicaTest.Media.TestsWithFluid instead");
    end Tests;
    annotation (Documentation(info="<html>
<h4>Examples</h4>
Physical properties for fluids are needed in so many different variants
that a library can only provide models for the most common situations.
With the following examples we are going to demonstrate how to use the
existing packages and functions in Modelica.Media to customize these
models for advanced applications. The high level functions try to
abstract as much as possible form the fact that different media are
based on different variables, e.g., ideal gases need pressure and
temperature, while many refrigerants are based on Helmholtz functions
of density and temperature, and many water properties are based on
pressure and specific enthalpy. Medium properties are needed in control
volumes in the dynamic state equations and in many thermodynamic state
locations that are independent of the dynamic states of a control
volume, e.g., at a wall temperature, an isentropic reference state or at
a phase boundary. The general structure of the library is such that:<br>
<ul>
<li>Each medium has a model called BaseProperties. BaseProperties
contains the minimum set of medium properties needed in a dynamic
control volume model.</li>
<li>Each instance of BaseProperties contains a \"state\" record that is
an input to all the functions to compute properties. If these functions
need further inputs, like e.g., the molarMass, these are accessible as
constants in the package.</li>
<li>The simplest way to compute properties at any other reference
point is to declare an instance of ThermodynamicState and use that as
input to arbitrary property functions.<br>
</li>
</ul>

<p>
A small library of generic volume, pipe, pump and ambient models
is provided in Modelica.Media.Examples.Tests.Components to demonstrate
how fluid components should be implemented that are using Modelica.Media
models. This library is also used to test all media models in
Modelica.Media.Examples.Tests.MediaTestModels.
</p>
</html>"));
  end Examples;

  package Interfaces "Interfaces for media models"
    extends Modelica.Icons.InterfacesPackage;

    partial package TemplateMedium "Template for media models"
      /* For a new medium, make a copy of this package and remove
     the "partial" keyword from the package definition above.
     The statement below extends from PartialMedium and sets some
     package constants. Provide values for these constants
     that are appropriate for your medium model. Note that other
     constants (such as nX, nXi) are automatically defined by
     definitions given in the base class Interfaces.PartialMedium"
  */
      extends myMedia.Interfaces.PartialMedium(
        final mediumName="NameOfMedium",
        final substanceNames={mediumName},
        final singleState=false,
        final reducedX=true,
        final fixedX=true,
        Temperature(
          min=273,
          max=450,
          start=323));

      // Provide medium constants here
      constant SpecificHeatCapacity cp_const=123456
        "Constant specific heat capacity at constant pressure";

      /* The vector substanceNames is mandatory, as the number of
         substances is determined based on its size. Here we assume
         a single-component medium.
         singleState is true if u and d do not depend on pressure, but only
         on a thermal variable (temperature or enthalpy). Otherwise, set it
         to false.
         For a single-substance medium, just set reducedX and fixedX to true, and there's
         no need to bother about medium compositions at all. Otherwise, set
         final reducedX = true if the medium model has nS-1 independent mass
         fraction, or reducedX = false if the medium model has nS independent
         mass fractions (nS = number of substances).
         If a mixture has a fixed composition set fixedX=true, otherwise false.
         The modifiers for reducedX and fixedX should normally be final
         since the other equations are based on these values.

         It is also possible to redeclare the min, max, and start attributes of
         Medium types, defined in the base class Interfaces.PartialMedium
         (the example of Temperature is shown here). Min and max attributes
         should be set in accordance to the limits of validity of the medium
         model, while the start attribute should be a reasonable default value
         for the initialization of nonlinear solver iterations */

      /* Provide an implementation of model BaseProperties,
     that is defined in PartialMedium. Select two independent
     variables from p, T, d, u, h. The other independent
     variables are the mass fractions "Xi", if there is more
     than one substance. Provide 3 equations to obtain the remaining
     variables as functions of the independent variables.
     It is also necessary to provide two additional equations to set
     the gas constant R and the molar mass MM of the medium.
     Finally, the thermodynamic state vector, defined in the base class
     Interfaces.PartialMedium.BaseProperties, should be set, according to
     its definition (see ThermodynamicState below).
     The computation of vector X[nX] from Xi[nXi] is already included in
     the base class Interfaces.PartialMedium.BaseProperties, so it should not
     be repeated here.
     The code fragment below is for a single-substance medium with
     p,T as independent variables.
  */

      redeclare model extends BaseProperties(final standardOrderComponents=true)
        "Base properties of medium"

      equation
        d = 1;
        h = cp_const*T;
        u = h - p/d;
        MM = 0.024;
        R = 8.3144/MM;
        state.p = p;
        state.T = T;
      end BaseProperties;

      /* Provide implementations of the following optional properties.
     If not available, delete the corresponding function.
     The record "ThermodynamicState" contains the input arguments
     of all the function and is defined together with the used
     type definitions in PartialMedium. The record most often contains two of the
     variables "p, T, d, h" (e.g., medium.T)
  */
      redeclare replaceable record ThermodynamicState
        "A selection of variables that uniquely defines the thermodynamic state"
        extends Modelica.Icons.Record;
        AbsolutePressure p "Absolute pressure of medium";
        Temperature T "Temperature of medium";
        annotation (Documentation(info="<html>

</html>"));
      end ThermodynamicState;

      redeclare function extends dynamicViscosity "Return dynamic viscosity"
      algorithm
        eta := 10 - state.T*0.3 + state.p*0.2;
        annotation (Documentation(info="<html>

</html>"));
      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Return thermal conductivity"
      algorithm
        lambda := 0;
        annotation (Documentation(info="<html>

</html>"));
      end thermalConductivity;

      redeclare function extends specificEntropy "Return specific entropy"
      algorithm
        s := 0;
        annotation (Documentation(info="<html>

</html>"));
      end specificEntropy;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant pressure"
      algorithm
        cp := 0;
        annotation (Documentation(info="<html>

</html>"));
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Return specific heat capacity at constant volume"
      algorithm
        cv := 0;
        annotation (Documentation(info="<html>

</html>"));
      end specificHeatCapacityCv;

      redeclare function extends isentropicExponent "Return isentropic exponent"
        extends Modelica.Icons.Function;
      algorithm
        gamma := 1;
        annotation (Documentation(info="<html>

</html>"));
      end isentropicExponent;

      redeclare function extends velocityOfSound "Return velocity of sound"
        extends Modelica.Icons.Function;
      algorithm
        a := 0;
        annotation (Documentation(info="<html>

</html>"));
      end velocityOfSound;

      annotation (Documentation(info="<html>
<p>
This package is a <strong>template</strong> for <strong>new medium</strong> models. For a new
medium model just make a copy of this package, remove the
\"partial\" keyword from the package and provide
the information that is requested in the comments of the
Modelica source.
</p>
</html>"));
    end TemplateMedium;

    partial package PartialMedium
      "Partial medium properties (base package of all media packages)"
      extends myMedia.Interfaces.Types;
      extends Modelica.Icons.MaterialPropertiesPackage;

      // Constants to be set in Medium
      constant myMedia.Interfaces.Choices.IndependentVariables ThermoStates "Enumeration type for independent variables";
      constant String mediumName="unusablePartialMedium" "Name of the medium";
      constant String substanceNames[:]={mediumName}
        "Names of the mixture substances. Set substanceNames={mediumName} if only one substance.";
      constant String extraPropertiesNames[:]=fill("", 0)
        "Names of the additional (extra) transported properties. Set extraPropertiesNames=fill(\"\",0) if unused";
      constant Boolean singleState
        "= true, if u and d are not a function of pressure";
      constant Boolean reducedX=true
        "= true if medium contains the equation sum(X) = 1.0; set reducedX=true if only one substance (see docu for details)";
      constant Boolean fixedX=false
        "= true if medium contains the equation X = reference_X";
      constant AbsolutePressure reference_p=101325
        "Reference pressure of Medium: default 1 atmosphere";
      constant Temperature reference_T=298.15
        "Reference temperature of Medium: default 25 deg Celsius";
      constant MassFraction reference_X[nX]=fill(1/nX, nX)
        "Default mass fractions of medium";
      constant AbsolutePressure p_default=101325
        "Default value for pressure of medium (for initialization)";
      constant Temperature T_default=Modelica.SIunits.Conversions.from_degC(20)
        "Default value for temperature of medium (for initialization)";
      constant SpecificEnthalpy h_default=specificEnthalpy_pTX(
              p_default,
              T_default,
              X_default)
        "Default value for specific enthalpy of medium (for initialization)";
      constant MassFraction X_default[nX]=reference_X
        "Default value for mass fractions of medium (for initialization)";
      constant ExtraProperty C_default[nC]=fill(0, nC)
        "Default value for trace substances of medium (for initialization)";

      final constant Integer nS=size(substanceNames, 1) "Number of substances";
      constant Integer nX=nS "Number of mass fractions";
      constant Integer nXi=if fixedX then 0 else if reducedX then nS - 1 else nS
        "Number of structurally independent mass fractions (see docu for details)";

      final constant Integer nC=size(extraPropertiesNames, 1)
        "Number of extra (outside of standard mass-balance) transported properties";
      constant Real C_nominal[nC](min=fill(Modelica.Constants.eps, nC)) = 1.0e-6*
        ones(nC) "Default for the nominal values for the extra properties";
      replaceable record FluidConstants =
          myMedia.Interfaces.Types.Basic.FluidConstants
        "Critical, triple, molecular and other standard data of fluid";

      replaceable record ThermodynamicState
        "Minimal variable set that is available as input argument to every medium function"
        extends Modelica.Icons.Record;
      end ThermodynamicState;

      replaceable partial model BaseProperties
        "Base properties (p, d, T, h, u, R, MM and, if applicable, X and Xi) of a medium"
        InputAbsolutePressure p "Absolute pressure of medium";
        InputMassFraction[nXi] Xi(start=reference_X[1:nXi])
          "Structurally independent mass fractions";
        InputSpecificEnthalpy h "Specific enthalpy of medium";
        Density d "Density of medium";
        Temperature T "Temperature of medium";
        MassFraction[nX] X(start=reference_X)
          "Mass fractions (= (component mass)/total mass  m_i/m)";
        SpecificInternalEnergy u "Specific internal energy of medium";
        SpecificHeatCapacity R "Gas constant (of mixture if applicable)";
        MolarMass MM "Molar mass (of mixture or single fluid)";
        ThermodynamicState state
          "Thermodynamic state record for optional functions";
        parameter Boolean preferredMediumStates=false
          "= true if StateSelect.prefer shall be used for the independent property variables of the medium"
          annotation (Evaluate=true, Dialog(tab="Advanced"));
        parameter Boolean standardOrderComponents=true
          "If true, and reducedX = true, the last element of X will be computed from the other ones";
        SI.Conversions.NonSIunits.Temperature_degC T_degC=
            Modelica.SIunits.Conversions.to_degC(T)
          "Temperature of medium in [degC]";
        SI.Conversions.NonSIunits.Pressure_bar p_bar=
            Modelica.SIunits.Conversions.to_bar(p)
          "Absolute pressure of medium in [bar]";

        // Local connector definition, used for equation balancing check
        connector InputAbsolutePressure = input SI.AbsolutePressure
          "Pressure as input signal connector";
        connector InputSpecificEnthalpy = input SI.SpecificEnthalpy
          "Specific enthalpy as input signal connector";
        connector InputMassFraction = input SI.MassFraction
          "Mass fraction as input signal connector";

      equation
        if standardOrderComponents then
          Xi = X[1:nXi];

          if fixedX then
            X = reference_X;
          end if;
          if reducedX and not fixedX then
            X[nX] = 1 - sum(Xi);
          end if;
          for i in 1:nX loop
            assert(X[i] >= -1.e-5 and X[i] <= 1 + 1.e-5, "Mass fraction X[" +
              String(i) + "] = " + String(X[i]) + "of substance " +
              substanceNames[i] + "\nof medium " + mediumName +
              " is not in the range 0..1");
          end for;

        end if;

        assert(p >= 0.0, "Pressure (= " + String(p) + " Pa) of medium \"" +
          mediumName + "\" is negative\n(Temperature = " + String(T) + " K)");
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,255}), Text(
                extent={{-152,164},{152,102}},
                textString="%name",
                lineColor={0,0,255})}), Documentation(info="<html>
<p>
Model <strong>BaseProperties</strong> is a model within package <strong>PartialMedium</strong>
and contains the <strong>declarations</strong> of the minimum number of
variables that every medium model is supposed to support.
A specific medium inherits from model <strong>BaseProperties</strong> and provides
the equations for the basic properties.</p>
<p>
The BaseProperties model contains the following <strong>7+nXi variables</strong>
(nXi is the number of independent mass fractions defined in package
PartialMedium):
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Variable</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>T</td>
      <td>K</td>
      <td>temperature</td></tr>
  <tr><td>p</td>
      <td>Pa</td>
      <td>absolute pressure</td></tr>
  <tr><td>d</td>
      <td>kg/m3</td>
      <td>density</td></tr>
  <tr><td>h</td>
      <td>J/kg</td>
      <td>specific enthalpy</td></tr>
  <tr><td>u</td>
      <td>J/kg</td>
      <td>specific internal energy</td></tr>
  <tr><td>Xi[nXi]</td>
      <td>kg/kg</td>
      <td>independent mass fractions m_i/m</td></tr>
  <tr><td>R</td>
      <td>J/kg.K</td>
      <td>gas constant</td></tr>
  <tr><td>M</td>
      <td>kg/mol</td>
      <td>molar mass</td></tr>
</table>
<p>
In order to implement an actual medium model, one can extend from this
base model and add <strong>5 equations</strong> that provide relations among
these variables. Equations will also have to be added in order to
set all the variables within the ThermodynamicState record state.</p>
<p>
If standardOrderComponents=true, the full composition vector X[nX]
is determined by the equations contained in this base class, depending
on the independent mass fraction vector Xi[nXi].</p>
<p>Additional <strong>2 + nXi</strong> equations will have to be provided
when using the BaseProperties model, in order to fully specify the
thermodynamic conditions. The input connector qualifier applied to
p, h, and nXi indirectly declares the number of missing equations,
permitting advanced equation balance checking by Modelica tools.
Please note that this doesn't mean that the additional equations
should be connection equations, nor that exactly those variables
should be supplied, in order to complete the model.
For further information, see the Modelica.Media User's guide, and
Section 4.7 (Balanced Models) of the Modelica 3.0 specification.</p>
</html>"));
      end BaseProperties;

      replaceable partial function setState_pTX
        "Return thermodynamic state as function of p, T and composition X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      end setState_pTX;

      replaceable partial function setState_phX
        "Return thermodynamic state as function of p, h and composition X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      end setState_phX;

      replaceable partial function setState_psX
        "Return thermodynamic state as function of p, s and composition X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      end setState_psX;

      replaceable partial function setState_dTX
        "Return thermodynamic state as function of d, T and composition X or Xi"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      end setState_dTX;

      replaceable partial function setSmoothState
        "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
        extends Modelica.Icons.Function;
        input Real x "m_flow or dp";
        input ThermodynamicState state_a "Thermodynamic state if x > 0";
        input ThermodynamicState state_b "Thermodynamic state if x < 0";
        input Real x_small(min=0)
          "Smooth transition in the region -x_small < x < x_small";
        output ThermodynamicState state
          "Smooth thermodynamic state for all x (continuous and differentiable)";
        annotation (Documentation(info="<html>
<p>
This function is used to approximate the equation
</p>
<pre>
    state = <strong>if</strong> x &gt; 0 <strong>then</strong> state_a <strong>else</strong> state_b;
</pre>

<p>
by a smooth characteristic, so that the expression is continuous and differentiable:
</p>

<pre>
   state := <strong>smooth</strong>(1, <strong>if</strong> x &gt;  x_small <strong>then</strong> state_a <strong>else</strong>
                      <strong>if</strong> x &lt; -x_small <strong>then</strong> state_b <strong>else</strong> f(state_a, state_b));
</pre>

<p>
This is performed by applying function <strong>Media.Common.smoothStep</strong>(..)
on every element of the thermodynamic state record.
</p>

<p>
If <strong>mass fractions</strong> X[:] are approximated with this function then this can be performed
for all <strong>nX</strong> mass fractions, instead of applying it for nX-1 mass fractions and computing
the last one by the mass fraction constraint sum(X)=1. The reason is that the approximating function has the
property that sum(state.X) = 1, provided sum(state_a.X) = sum(state_b.X) = 1.
This can be shown by evaluating the approximating function in the abs(x) &lt; x_small
region (otherwise state.X is either state_a.X or state_b.X):
</p>

<pre>
    X[1]  = smoothStep(x, X_a[1] , X_b[1] , x_small);
    X[2]  = smoothStep(x, X_a[2] , X_b[2] , x_small);
       ...
    X[nX] = smoothStep(x, X_a[nX], X_b[nX], x_small);
</pre>

<p>
or
</p>

<pre>
    X[1]  = c*(X_a[1]  - X_b[1])  + (X_a[1]  + X_b[1])/2
    X[2]  = c*(X_a[2]  - X_b[2])  + (X_a[2]  + X_b[2])/2;
       ...
    X[nX] = c*(X_a[nX] - X_b[nX]) + (X_a[nX] + X_b[nX])/2;
    c     = (x/x_small)*((x/x_small)^2 - 3)/4
</pre>

<p>
Summing all mass fractions together results in
</p>

<pre>
    sum(X) = c*(sum(X_a) - sum(X_b)) + (sum(X_a) + sum(X_b))/2
           = c*(1 - 1) + (1 + 1)/2
           = 1
</pre>

</html>"));
      end setSmoothState;

      replaceable partial function dynamicViscosity "Return dynamic viscosity"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output DynamicViscosity eta "Dynamic viscosity";
      end dynamicViscosity;

      replaceable partial function thermalConductivity
        "Return thermal conductivity"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output ThermalConductivity lambda "Thermal conductivity";
      end thermalConductivity;

      replaceable function prandtlNumber "Return the Prandtl number"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output PrandtlNumber Pr "Prandtl number";
      algorithm
        Pr := dynamicViscosity(state)*specificHeatCapacityCp(state)/
          thermalConductivity(state);
      end prandtlNumber;

      replaceable partial function massFraction "Return independent mass Fraction"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction Xi[nXi] "(independent) Mass Fraction";
      end massFraction;

      replaceable partial function pressure "Return pressure"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output AbsolutePressure p "Pressure";
      end pressure;

      replaceable partial function temperature "Return temperature"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output Temperature T "Temperature";
      end temperature;

      replaceable partial function density "Return density"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output Density d "Density";
      end density;

      replaceable partial function specificEnthalpy "Return specific enthalpy"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnthalpy h "Specific enthalpy";
      end specificEnthalpy;

      replaceable partial function specificInternalEnergy
        "Return specific internal energy"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnergy u "Specific internal energy";
      end specificInternalEnergy;

      replaceable partial function specificEntropy "Return specific entropy"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEntropy s "Specific entropy";
      end specificEntropy;

      replaceable partial function specificGibbsEnergy
        "Return specific Gibbs energy"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnergy g "Specific Gibbs energy";
      end specificGibbsEnergy;

      replaceable partial function specificHelmholtzEnergy
        "Return specific Helmholtz energy"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnergy f "Specific Helmholtz energy";
      end specificHelmholtzEnergy;

      replaceable partial function specificHeatCapacityCp
        "Return specific heat capacity at constant pressure"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificHeatCapacity cp
          "Specific heat capacity at constant pressure";
      end specificHeatCapacityCp;

      function heatCapacity_cp = specificHeatCapacityCp
        "Alias for deprecated name";

      replaceable partial function specificHeatCapacityCv
        "Return specific heat capacity at constant volume"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificHeatCapacity cv
          "Specific heat capacity at constant volume";
      end specificHeatCapacityCv;

      function heatCapacity_cv = specificHeatCapacityCv
        "Alias for deprecated name";

      replaceable partial function isentropicExponent
        "Return isentropic exponent"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output IsentropicExponent gamma "Isentropic exponent";
      end isentropicExponent;

      replaceable partial function isentropicEnthalpy
        "Return isentropic enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p_downstream "Downstream pressure";
        input ThermodynamicState refState "Reference state for entropy";
        output SpecificEnthalpy h_is "Isentropic enthalpy";
        annotation (Documentation(info="<html>
<p>
This function computes an isentropic state transformation:
</p>
<ol>
<li> A medium is in a particular state, refState.</li>
<li> The enthalpy at another state (h_is) shall be computed
     under the assumption that the state transformation from refState to h_is
     is performed with a change of specific entropy ds = 0 and the pressure of state h_is
     is p_downstream and the composition X upstream and downstream is assumed to be the same.</li>
</ol>

</html>"));
      end isentropicEnthalpy;

      replaceable partial function velocityOfSound "Return velocity of sound"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output VelocityOfSound a "Velocity of sound";
      end velocityOfSound;

      replaceable partial function isobaricExpansionCoefficient
        "Return overall the isobaric expansion coefficient beta"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output IsobaricExpansionCoefficient beta "Isobaric expansion coefficient";
        annotation (Documentation(info="<html>
<pre>
beta is defined as  1/v * der(v,T), with v = 1/d, at constant pressure p.
</pre>
</html>"));
      end isobaricExpansionCoefficient;

      function beta = isobaricExpansionCoefficient
        "Alias for isobaricExpansionCoefficient for user convenience";

      replaceable partial function isothermalCompressibility
        "Return overall the isothermal compressibility factor"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SI.IsothermalCompressibility kappa "Isothermal compressibility";
        annotation (Documentation(info="<html>
<pre>

kappa is defined as - 1/v * der(v,p), with v = 1/d at constant temperature T.

</pre>
</html>"));
      end isothermalCompressibility;

      function kappa = isothermalCompressibility
        "Alias of isothermalCompressibility for user convenience";

      // explicit derivative functions for finite element models
      replaceable partial function density_derp_h
        "Return density derivative w.r.t. pressure at const specific enthalpy"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output DerDensityByPressure ddph "Density derivative w.r.t. pressure";
      end density_derp_h;

      replaceable partial function density_derh_p
        "Return density derivative w.r.t. specific enthalpy at constant pressure"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output DerDensityByEnthalpy ddhp
          "Density derivative w.r.t. specific enthalpy";
      end density_derh_p;

      replaceable partial function density_derp_T
        "Return density derivative w.r.t. pressure at const temperature"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output DerDensityByPressure ddpT "Density derivative w.r.t. pressure";
      end density_derp_T;

      replaceable partial function density_derT_p
        "Return density derivative w.r.t. temperature at constant pressure"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output DerDensityByTemperature ddTp
          "Density derivative w.r.t. temperature";
      end density_derT_p;

      replaceable partial function density_derX
        "Return density derivative w.r.t. mass fraction"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output Density[nX] dddX "Derivative of density w.r.t. mass fraction";
      end density_derX;

      replaceable partial function molarMass
        "Return the molar mass of the medium"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MolarMass MM "Mixture molar mass";
      end molarMass;

      replaceable function specificEnthalpy_pTX
        "Return specific enthalpy from p, T, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy(setState_pTX(
                p,
                T,
                X));
        annotation (inverse(T=temperature_phX(
                      p,
                      h,
                      X)));
      end specificEnthalpy_pTX;

      replaceable function specificEntropy_pTX
        "Return specific enthalpy from p, T, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output SpecificEntropy s "Specific entropy";
      algorithm
        s := specificEntropy(setState_pTX(
                p,
                T,
                X));

        annotation (inverse(T=temperature_psX(
                      p,
                      s,
                      X)));
      end specificEntropy_pTX;

      replaceable function density_pTX "Return density from p, T, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:] "Mass fractions";
        output Density d "Density";
      algorithm
        d := density(setState_pTX(
                p,
                T,
                X));
      end density_pTX;

      replaceable function temperature_phX
        "Return temperature from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output Temperature T "Temperature";
      algorithm
        T := temperature(setState_phX(
                p,
                h,
                X));
      end temperature_phX;

      replaceable function density_phX "Return density from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output Density d "Density";
      algorithm
        d := density(setState_phX(
                p,
                h,
                X));
      end density_phX;

      replaceable function temperature_psX
        "Return temperature from p,s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output Temperature T "Temperature";
      algorithm
        T := temperature(setState_psX(
                p,
                s,
                X));
        annotation (inverse(s=specificEntropy_pTX(
                      p,
                      T,
                      X)));
      end temperature_psX;

      replaceable function density_psX "Return density from p, s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output Density d "Density";
      algorithm
        d := density(setState_psX(
                p,
                s,
                X));
      end density_psX;

      replaceable function specificEnthalpy_psX
        "Return specific enthalpy from p, s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy(setState_psX(
                p,
                s,
                X));
      end specificEnthalpy_psX;

      type MassFlowRate = SI.MassFlowRate (
          quantity="MassFlowRate." + mediumName,
          min=-1.0e5,
          max=1.e5) "Type for mass flow rate with medium specific attributes";

      // Only for backwards compatibility to version 3.2 (
      // (do not use these definitions in new models, but use Modelica.Media.Interfaces.Choices instead)
      package Choices = myMedia.Interfaces.Choices        annotation (obsolete=
            "Use Modelica.Media.Interfaces.Choices");

      annotation (Documentation(info="<html>
<p>
<strong>PartialMedium</strong> is a package and contains all <strong>declarations</strong> for
a medium. This means that constants, models, and functions
are defined that every medium is supposed to support
(some of them are optional). A medium package
inherits from <strong>PartialMedium</strong> and provides the
equations for the medium. The details of this package
are described in
<a href=\"modelica://Modelica.Media.UsersGuide\">Modelica.Media.UsersGuide</a>.
</p>
</html>",   revisions="<html>

</html>"));
    end PartialMedium;

    partial package PartialPureSubstance
      "Base class for pure substances of one chemical substance"
      extends PartialMedium(final reducedX=true, final fixedX=true);

      redeclare replaceable function massFraction "Return independent mass Fraction"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction Xi[nXi] "(independent) Mass Fraction";
      algorithm
        Xi := fill(0,0);
      end massFraction;

      replaceable function setState_pT "Return thermodynamic state from p and T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_pTX(
                p,
                T,
                fill(0, 0));
      end setState_pT;

      replaceable function setState_ph "Return thermodynamic state from p and h"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_phX(
                p,
                h,
                fill(0, 0));
      end setState_ph;

      replaceable function setState_ps "Return thermodynamic state from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_psX(
                p,
                s,
                fill(0, 0));
      end setState_ps;

      replaceable function setState_dT "Return thermodynamic state from d and T"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_dTX(
                d,
                T,
                fill(0, 0));
      end setState_dT;

      replaceable function density_ph "Return density from p and h"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        output Density d "Density";
      algorithm
        d := density_phX(
                p,
                h,
                fill(0, 0));
      end density_ph;

      replaceable function temperature_ph "Return temperature from p and h"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        output Temperature T "Temperature";
      algorithm
        T := temperature_phX(
                p,
                h,
                fill(0, 0));
      end temperature_ph;

      replaceable function pressure_dT "Return pressure from d and T"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        output AbsolutePressure p "Pressure";
      algorithm
        p := pressure(setState_dTX(
                d,
                T,
                fill(0, 0)));
      end pressure_dT;

      replaceable function specificEnthalpy_dT
        "Return specific enthalpy from d and T"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy(setState_dTX(
                d,
                T,
                fill(0, 0)));
      end specificEnthalpy_dT;

      replaceable function specificEnthalpy_ps
        "Return specific enthalpy from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy_psX(
                p,
                s,
                fill(0, 0));
      end specificEnthalpy_ps;

      replaceable function temperature_ps "Return temperature from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output Temperature T "Temperature";
      algorithm
        T := temperature_psX(
                p,
                s,
                fill(0, 0));
      end temperature_ps;

      replaceable function density_ps "Return density from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output Density d "Density";
      algorithm
        d := density_psX(
                p,
                s,
                fill(0, 0));
      end density_ps;

      replaceable function specificEnthalpy_pT
        "Return specific enthalpy from p and T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy_pTX(
                p,
                T,
                fill(0, 0));
      end specificEnthalpy_pT;

      replaceable function density_pT "Return density from p and T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        output Density d "Density";
      algorithm
        d := density(setState_pTX(
                p,
                T,
                fill(0, 0)));
      end density_pT;

      redeclare replaceable partial model extends BaseProperties(final
          standardOrderComponents=true)
      end BaseProperties;
    end PartialPureSubstance;

    partial package PartialLinearFluid
      "Generic pure liquid model with constant cp, compressibility and thermal expansion coefficients"

      extends Interfaces.PartialPureSubstance(ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pTX,
          singleState=false);
      constant SpecificHeatCapacity cp_const
        "Specific heat capacity at constant pressure";
      constant IsobaricExpansionCoefficient beta_const
        "Thermal expansion coefficient at constant pressure";
      constant SI.IsothermalCompressibility kappa_const
        "Isothermal compressibility";
      constant MolarMass MM_const "Molar mass";
      constant Density reference_d "Density in reference conditions";
      constant SpecificEnthalpy reference_h
        "Specific enthalpy in reference conditions";
      constant SpecificEntropy reference_s
        "Specific entropy in reference conditions";
      constant Boolean constantJacobian
        "If true, entries in thermodynamic Jacobian are constant, taken at reference conditions";

      redeclare record ThermodynamicState
        "A selection of variables that uniquely defines the thermodynamic state"
        extends Modelica.Icons.Record;
        AbsolutePressure p "Absolute pressure of medium";
        Temperature T "Temperature of medium";
      end ThermodynamicState;

      redeclare model extends BaseProperties(T(stateSelect=if
              preferredMediumStates then StateSelect.prefer else StateSelect.default),
          p(stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default)) "Base properties of medium"
      equation
        d = (1 + (p - reference_p)*kappa_const - (T - reference_T)*beta_const)*
          reference_d;
        h = reference_h + (T - reference_T)*cp_const + (p - reference_p)*(1 -
          beta_const*reference_T)/reference_d;
        u = h - p/d;
        p = state.p;
        T = state.T;
        MM = MM_const;
        R = 8.3144/MM;
      end BaseProperties;

      redeclare function extends setState_pTX
        "Set the thermodynamic state record from p and T (X not needed)"
      algorithm
        state := ThermodynamicState(p=p, T=T);
      end setState_pTX;

      redeclare function extends setState_phX
        "Set the thermodynamic state record from p and h (X not needed)"
      algorithm
        state := ThermodynamicState(p=p, T=(h - reference_h - (p - reference_p)*(
          (1 - beta_const*reference_T)/reference_d))/cp_const + reference_T);
      end setState_phX;

      redeclare function extends setState_psX
        "Set the thermodynamic state record from p and s (X not needed)"
      algorithm
        state := ThermodynamicState(p=p, T=reference_T*cp_const/(cp_const - s +
          reference_s + (p - reference_p)*(-beta_const/reference_d)));
      end setState_psX;

      redeclare function extends setState_dTX
        "Set the thermodynamic state record from d and T (X not needed)"
      algorithm
        state := ThermodynamicState(p=((d - reference_d) + (T - reference_T)
          *beta_const*reference_d)/(reference_d*kappa_const) + reference_p, T=T);
      end setState_dTX;

      redeclare function extends setSmoothState
        "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
      algorithm
        state := ThermodynamicState(p=myMedia.Common.smoothStep(
                x,
                state_a.p,
                state_b.p,
                x_small), T=myMedia.Common.smoothStep(
                x,
                state_a.T,
                state_b.T,
                x_small));
      end setSmoothState;

      redeclare function extends pressure
        "Return the pressure from the thermodynamic state"
      algorithm
        p := state.p;
      end pressure;

      redeclare function extends temperature
        "Return the temperature from the thermodynamic state"
      algorithm
        T := state.T;
      end temperature;

      redeclare function extends density
        "Return the density from the thermodynamic state"
      algorithm
        d := (1 + (state.p - reference_p)*kappa_const - (state.T - reference_T)*
          beta_const)*reference_d;
      end density;

      redeclare function extends specificEnthalpy
        "Return the specific enthalpy from the thermodynamic state"
      algorithm
        h := reference_h + (state.T - reference_T)*cp_const + (state.p -
          reference_p)*(1 - beta_const*reference_T)/reference_d;
      end specificEnthalpy;

      redeclare function extends specificEntropy
        "Return the specific entropy from the thermodynamic state"
      algorithm
        s := reference_s + (state.T - reference_T)*cp_const/state.T + (state.p -
          reference_p)*(-beta_const/reference_d);
      end specificEntropy;

      redeclare function extends specificInternalEnergy
        "Return the specific internal energy from the thermodynamic state"
      algorithm
        u := specificEnthalpy(state) - state.p/reference_d;
      end specificInternalEnergy;

      redeclare function extends specificGibbsEnergy
        "Return specific Gibbs energy from the thermodynamic state"
        extends Modelica.Icons.Function;
      algorithm
        g := specificEnthalpy(state) - state.T*specificEntropy(state);
      end specificGibbsEnergy;

      redeclare function extends specificHelmholtzEnergy
        "Return specific Helmholtz energy from the thermodynamic state"
        extends Modelica.Icons.Function;
      algorithm
        f := specificInternalEnergy(state) - state.T*specificEntropy(state);
      end specificHelmholtzEnergy;

      redeclare function extends velocityOfSound
        "Return velocity of sound from the thermodynamic state"
        extends Modelica.Icons.Function;
      algorithm
        a := sqrt(max(0, 1/(kappa_const*density(state) - beta_const*beta_const*
          state.T/cp_const)));
      end velocityOfSound;

      redeclare function extends isentropicExponent
        "Return isentropic exponent from the thermodynamic state"
        extends Modelica.Icons.Function;
      algorithm
        gamma := 1/(state.p*kappa_const)*cp_const/specificHeatCapacityCv(state);
      end isentropicExponent;

      redeclare function extends isentropicEnthalpy "Return isentropic enthalpy"

        /* Previous wrong equation:

protected
  SpecificEntropy s_upstream = specificEntropy(refState)
    "Specific entropy at component inlet";
  ThermodynamicState downstreamState "State at downstream location";
algorithm
  downstreamState.p := p_downstream;
  downstreamState.T := reference_T*cp_const/
    (s_upstream -reference_s -(p_downstream-reference_p)*(-beta_const/reference_d) - cp_const);
  h_is := specificEnthalpy(downstreamState);
*/
      algorithm
        /* s := reference_s + (refState.T-reference_T)*cp_const/refState.T +
                        (refState.p-reference_p)*(-beta_const/reference_d)
        = reference_s + (state.T-reference_T)*cp_const/state.T +
                        (p_downstream-reference_p)*(-beta_const/reference_d);

      (state.T-reference_T)*cp_const/state.T
     = (refState.T-reference_T)*cp_const/refState.T + (refState.p-reference_p)*(-beta_const/reference_d)
       - (p_downstream-reference_p)*(-beta_const/reference_d)
     = (refState.T-reference_T)*cp_const/refState.T + (refState.p-p_downstream)*(-beta_const/reference_d)

     (x - reference_T)/x = k
     x - reference_T = k*x
     (1-k)*x = reference_T
     x = reference_T/(1-k);

     state.T = reference_T/(1 - ((refState.T-reference_T)*cp_const/refState.T + (refState.p-p_downstream)*(-beta_const/reference_d))/cp_const)
  */

        h_is := specificEnthalpy(setState_pTX(
                p_downstream,
                reference_T/(1 - ((refState.T - reference_T)/refState.T + (
            refState.p - p_downstream)*(-beta_const/(reference_d*cp_const)))),
                reference_X));
        annotation (Documentation(info="<html>
<p>
A minor approximation is used: the reference density is used instead of the real
one, which would require a numeric solution.
</p>
</html>"));
      end isentropicEnthalpy;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant volume"
      algorithm
        cp := cp_const;
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Return specific heat capacity at constant volume from the thermodynamic state"
      algorithm
        cv := if constantJacobian then cp_const - reference_T*beta_const*
          beta_const/(kappa_const*reference_d) else state.T*beta_const*beta_const
          /(kappa_const*reference_d);
      end specificHeatCapacityCv;

      redeclare function extends isothermalCompressibility
        "Return the isothermal compressibility kappa"
      algorithm
        kappa := kappa_const;
      end isothermalCompressibility;

      redeclare function extends isobaricExpansionCoefficient
        "Return the isobaric expansion coefficient"
      algorithm
        beta := beta_const;
      end isobaricExpansionCoefficient;

      redeclare function extends density_derp_h
        "Return density derivative w.r.t. pressure at const specific enthalpy"
      algorithm
        ddph := if constantJacobian then kappa_const*reference_d + (beta_const*(1
           - reference_T*beta_const))/cp_const else kappa_const*density(state) +
          (beta_const*(1 - temperature(state)*beta_const))/cp_const;
      end density_derp_h;

      redeclare function extends density_derh_p
        "Return density derivative w.r.t. specific enthalpy at constant pressure"
      algorithm
        ddhp := if constantJacobian then -beta_const*reference_d/cp_const else -
          beta_const*density(state)/cp_const;
      end density_derh_p;

      redeclare function extends density_derp_T
        "Return density derivative w.r.t. pressure at const temperature"
      algorithm
        ddpT := if constantJacobian then kappa_const*reference_d else kappa_const
          *density(state);
      end density_derp_T;

      redeclare function extends density_derT_p
        "Return density derivative w.r.t. temperature at constant pressure"
      algorithm
        ddTp := if constantJacobian then -beta_const*reference_d else -beta_const
          *density(state);
      end density_derT_p;

      redeclare function extends density_derX
        "Returns the partial derivative of density with respect to mass fractions at constant pressure and temperature"
      algorithm
        dddX := fill(0, nX);
      end density_derX;

      redeclare function extends molarMass "Return molar mass"
      algorithm
        MM := MM_const;
      end molarMass;

      function T_ph "Return temperature from pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SpecificEnthalpy h "Specific enthalpy";
        input AbsolutePressure p "Pressure";
        output Temperature T "Temperature";
      algorithm
        T := (h - reference_h - (p - reference_p)*((1 - beta_const*reference_T)/
          reference_d))/cp_const + reference_T;
      end T_ph;

      function T_ps "Return temperature from pressure and specific entropy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output Temperature T "Temperature";
      algorithm
        T := reference_T*cp_const/(s - reference_s - (p - reference_p)*(-
          beta_const/reference_d) - cp_const);
      end T_ps;

      annotation (Documentation(info="<html>
<h4>Linear Compressibility Fluid Model</h4>
<p>This linear compressibility fluid model is based on the assumptions that:
</p>
<ul>
<li>The specific heat capacity at constant pressure (cp) is constant</li>
<li>The isobaric expansion coefficient (beta) is constant</li>
<li>The isothermal compressibility (kappa) is constant</li>
<li>Pressure and temperature are used as states</li>
<li>The influence of density on specific enthalpy (h), entropy (s), inner energy (u) and heat capacity (cv) at constant volume is neglected.</li>
</ul>
<p>
That means that the density is a linear function in temperature and in pressure.
In order to define the complete model, a number of constant reference values are needed which
are computed at the reference values of the states pressure p and temperature T. The model can
be interpreted as a linearization of a full non-linear fluid model (but it is not linear in all
thermodynamic coordinates). Reference values are needed for
</p>
<ol>
<li>the density (reference_d),</li>
<li>the specific enthalpy (reference_h),</li>
<li>the specific entropy (reference_s).</li>
</ol>
<p>
Apart from that, a user needs to define the molar mass, MM_const.
Note that it is possible to define a fluid by computing the reference
values from a full non-linear fluid model by computing the package constants
using the standard functions defined in a fluid package (see example in liquids package).
</p>
<p>
In order to avoid numerical inversion of the temperature in the T_ph and T_ps functions, the density
is always taken to be the reference density in the computation of h, s, u and cv. For liquids (and this
model is intended only for liquids) the relative error of doing so is 1e-3 to 1e-4 at most. The model would
be more \"correct\" based on the other assumptions, if occurrences of reference_d in the computations of h,s,u
and cv would be replaced by a call to density(state). That would require a numerical solution for T_ps, while T_ph can be solved symbolically from a quadratic function. Errors from this approximation are small because liquid density varies little.</p>
<h4>Efficiency considerations</h4>
<p>One of the main reasons to use a simple, linear fluid model is to achieve high performance
in simulations. There are a number of possible compromises and possibilities to improve performance.
Some of them can be influenced by a flag. The following rules where used in this model:</p>
<ul>
<li>All forward evaluations (using the ThermodynamicState record as input) are exactly following
the assumptions above.</li>
<li>If the flag <strong>constantJacobian</strong> is set to true in the package, all functions that
typically appear in thermodynamic Jacobians (specificHeatCapacityCv, density_derp_h, density_derh_p,
density_derp_T, density_derT_p) are evaluated at reference conditions (that means using the reference
density) instead of the density of the current pressure and temperature. This makes it possible to evaluate
the thermodynamic Jacobian at compile time.</li>
<li>For inverse functions using other inputs than the states (e.g pressure p and specific enthalpy h),
the inversion is using the reference state whenever that is necessary to achieve a symbolic inversion.</li>
<li>If <strong>constantJacobian</strong> is set to false, the above list of functions is computed exactly according
to the above list of assumptions</li>
</ul>
<dl>
<dt><strong>Authors:</strong></dt>
<dd>Francesco Casella<br>
    Dipartimento di Elettronica e Informazione<br>
    Politecnico di Milano<br>
    Via Ponzio 34/5<br>
    I-20133 Milano, Italy<br>
    email: <a href=\"mailto:casella@elet.polimi.it\">casella@elet.polimi.it</a><br>
    and<br>
    Hubertus Tummescheit<br>
    Modelon AB<br>
    Ideon Science Park<br>
    SE-22730 Lund, Sweden<br>
    email: <a href=\"mailto:Hubertus.Tummescheit@Modelon.se\">Hubertus.Tummescheit@Modelon.se</a>
</dd>
</dl>
</html>"));
    end PartialLinearFluid;

    partial package PartialMixtureMedium
      "Base class for pure substances of several chemical substances"
      extends PartialMedium(redeclare replaceable record FluidConstants =
            myMedia.Interfaces.Types.IdealGas.FluidConstants);

      redeclare replaceable record extends ThermodynamicState
        "Thermodynamic state variables"
        AbsolutePressure p "Absolute pressure of medium";
        Temperature T "Temperature of medium";
        MassFraction[nX] X(start=reference_X)
          "Mass fractions (= (component mass)/total mass  m_i/m)";
      end ThermodynamicState;

      redeclare replaceable function massFraction "Return independent mass Fraction"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction Xi[nXi] "(independent) Mass Fraction";
      algorithm
        Xi := state.X[1:nXi];
      end massFraction;

      constant FluidConstants[nS] fluidConstants "Constant data for the fluid";

      replaceable function gasConstant
        "Return the gas constant of the mixture (also for liquids)"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state";
        output SI.SpecificHeatCapacity R "Mixture gas constant";
      end gasConstant;

      function moleToMassFractions "Return mass fractions X from mole fractions"
        extends Modelica.Icons.Function;
        input SI.MoleFraction moleFractions[:] "Mole fractions of mixture";
        input MolarMass[:] MMX "Molar masses of components";
        output SI.MassFraction X[size(moleFractions, 1)]
          "Mass fractions of gas mixture";
      protected
        MolarMass Mmix=moleFractions*MMX "Molar mass of mixture";
      algorithm
        for i in 1:size(moleFractions, 1) loop
          X[i] := moleFractions[i]*MMX[i]/Mmix;
        end for;
        annotation (smoothOrder=5);
      end moleToMassFractions;

      function massToMoleFractions "Return mole fractions from mass fractions X"
        extends Modelica.Icons.Function;
        input SI.MassFraction X[:] "Mass fractions of mixture";
        input SI.MolarMass[:] MMX "Molar masses of components";
        output SI.MoleFraction moleFractions[size(X, 1)]
          "Mole fractions of gas mixture";
      protected
        Real invMMX[size(X, 1)] "Inverses of molar weights";
        SI.MolarMass Mmix "Molar mass of mixture";
      algorithm
        for i in 1:size(X, 1) loop
          invMMX[i] := 1/MMX[i];
        end for;
        Mmix := 1/(X*invMMX);
        for i in 1:size(X, 1) loop
          moleFractions[i] := Mmix*X[i]/MMX[i];
        end for;
        annotation (smoothOrder=5);
      end massToMoleFractions;

    end PartialMixtureMedium;

    partial package PartialCondensingGases
      "Base class for mixtures of condensing and non-condensing gases"
      extends PartialMixtureMedium(ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pTX);

      replaceable partial function saturationPressure
        "Return saturation pressure of condensing fluid"
        extends Modelica.Icons.Function;
        input Temperature Tsat "Saturation temperature";
        output AbsolutePressure psat "Saturation pressure";
      end saturationPressure;

      replaceable partial function enthalpyOfVaporization
        "Return vaporization enthalpy of condensing fluid"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificEnthalpy r0 "Vaporization enthalpy";
      end enthalpyOfVaporization;

      replaceable partial function enthalpyOfLiquid
        "Return liquid enthalpy of condensing fluid"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificEnthalpy h "Liquid enthalpy";
      end enthalpyOfLiquid;

      replaceable partial function enthalpyOfGas
        "Return enthalpy of non-condensing gas mixture"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        input MassFraction[:] X "Vector of mass fractions";
        output SpecificEnthalpy h "Specific enthalpy";
      end enthalpyOfGas;

      replaceable partial function enthalpyOfCondensingGas
        "Return enthalpy of condensing gas (most often steam)"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificEnthalpy h "Specific enthalpy";
      end enthalpyOfCondensingGas;

      replaceable partial function enthalpyOfNonCondensingGas
        "Return enthalpy of the non-condensing species"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificEnthalpy h "Specific enthalpy";
      end enthalpyOfNonCondensingGas;
    end PartialCondensingGases;

    partial package PartialRealCondensingGases
      "Base class for mixtures of real condensing and non-condensing gases"
      extends myMedia.Interfaces.PartialMixtureMedium(redeclare replaceable
          record FluidConstants =
            myMedia.Interfaces.Types.TwoPhase.FluidConstants);

      replaceable partial function saturationPressure
        "Return saturation pressure of condensing fluid"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output AbsolutePressure psat "Saturation pressure";
      end saturationPressure;

      replaceable partial function saturationTemperature
        "Return saturation temperature of condensing fluid"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output Temperature Tsat "Saturation temperature";
      end saturationTemperature;

      replaceable partial function massFractionSaturation
        "Return saturation mass fractions"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction[:] Xsat "Saturation mass fractions";
      end massFractionSaturation;

      replaceable partial function massFraction_pTphi
        "Return mass fractions as a function of pressure, temperature and relative humidity"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input Real phi "Relative humidity";
        output MassFraction[:] X "Mass fractions";
      end massFraction_pTphi;

      replaceable partial function relativeHumidity "Return relative humidity"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output Real phi "Relative humidity";
      end relativeHumidity;

      replaceable partial function enthalpyOfVaporization
        "Return vaporization enthalpy of condensing fluid"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnthalpy r0 "Vaporization enthalpy";
      end enthalpyOfVaporization;

      replaceable partial function enthalpyOfLiquid
        "Return liquid enthalpy of condensing fluid"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnthalpy h "Liquid enthalpy";
      end enthalpyOfLiquid;

      replaceable partial function enthalpyOfGas
        "Return enthalpy of non-condensing gas mixture"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnthalpy h "Specific enthalpy";
      end enthalpyOfGas;

      replaceable partial function enthalpyOfCondensingGas
        "Return enthalpy of condensing gas (most often steam)"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnthalpy h "Specific enthalpy";
      end enthalpyOfCondensingGas;

      replaceable partial function enthalpyOfNonCondensingGas
        "Return enthalpy of the non-condensing species"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SpecificEnthalpy h "Specific enthalpy";
      end enthalpyOfNonCondensingGas;

      replaceable partial function specificEntropy_phX
        "Return specific entropy as a function of pressure, specific enthalpy and mass fractions"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output SpecificEntropy s "Specific entropy";
      algorithm
        s := specificEntropy(setState_phX(
                p,
                h,
                X));
      end specificEntropy_phX;

    end PartialRealCondensingGases;

    partial package PartialTwoPhaseMedium
      "Base class for two phase medium of one substance"
      extends PartialPureSubstance(redeclare replaceable record FluidConstants
          = myMedia.Interfaces.Types.TwoPhase.FluidConstants);
      constant Boolean smoothModel=false
        "True if the (derived) model should not generate state events";
      constant Boolean onePhase=false
        "True if the (derived) model should never be called with two-phase inputs";

      constant FluidConstants[nS] fluidConstants "Constant data for the fluid";

      redeclare replaceable record extends ThermodynamicState
        "Thermodynamic state of two phase medium"
        FixedPhase phase(min=0, max=2)
          "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
      end ThermodynamicState;

      redeclare replaceable partial model extends BaseProperties
        "Base properties (p, d, T, h, u, R, MM, sat) of two phase medium"
        SaturationProperties sat "Saturation properties at the medium pressure";
      end BaseProperties;

      replaceable partial function setDewState
        "Return the thermodynamic state on the dew line"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation point";
        input FixedPhase phase(
          min=1,
          max=2) = 1 "Phase: default is one phase";
        output ThermodynamicState state "Complete thermodynamic state info";
      end setDewState;

      replaceable partial function setBubbleState
        "Return the thermodynamic state on the bubble line"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation point";
        input FixedPhase phase(
          min=1,
          max=2) = 1 "Phase: default is one phase";
        output ThermodynamicState state "Complete thermodynamic state info";
      end setBubbleState;

      redeclare replaceable partial function extends setState_dTX
        "Return thermodynamic state as function of d, T and composition X or Xi"
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
      end setState_dTX;

      redeclare replaceable partial function extends setState_phX
        "Return thermodynamic state as function of p, h and composition X or Xi"
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
      end setState_phX;

      redeclare replaceable partial function extends setState_psX
        "Return thermodynamic state as function of p, s and composition X or Xi"
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
      end setState_psX;

      redeclare replaceable partial function extends setState_pTX
        "Return thermodynamic state as function of p, T and composition X or Xi"
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
      end setState_pTX;

      replaceable function setSat_T
        "Return saturation property record from temperature"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SaturationProperties sat "Saturation property record";
      algorithm
        sat.Tsat := T;
        sat.psat := saturationPressure(T);
      end setSat_T;

      replaceable function setSat_p
        "Return saturation property record from pressure"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        output SaturationProperties sat "Saturation property record";
      algorithm
        sat.psat := p;
        sat.Tsat := saturationTemperature(p);
      end setSat_p;

      replaceable partial function bubbleEnthalpy
        "Return bubble point specific enthalpy"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output SI.SpecificEnthalpy hl "Boiling curve specific enthalpy";
      end bubbleEnthalpy;

      replaceable partial function dewEnthalpy
        "Return dew point specific enthalpy"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output SI.SpecificEnthalpy hv "Dew curve specific enthalpy";
      end dewEnthalpy;

      replaceable partial function bubbleEntropy
        "Return bubble point specific entropy"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output SI.SpecificEntropy sl "Boiling curve specific entropy";
      end bubbleEntropy;

      replaceable partial function dewEntropy "Return dew point specific entropy"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output SI.SpecificEntropy sv "Dew curve specific entropy";
      end dewEntropy;

      replaceable partial function bubbleDensity "Return bubble point density"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output Density dl "Boiling curve density";
      end bubbleDensity;

      replaceable partial function dewDensity "Return dew point density"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output Density dv "Dew curve density";
      end dewDensity;

      replaceable partial function saturationPressure
        "Return saturation pressure"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output AbsolutePressure p "Saturation pressure";
      end saturationPressure;

      replaceable partial function saturationTemperature
        "Return saturation temperature"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        output Temperature T "Saturation temperature";
      end saturationTemperature;

      replaceable function saturationPressure_sat "Return saturation temperature"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output AbsolutePressure p "Saturation pressure";
      algorithm
        p := sat.psat;
      end saturationPressure_sat;

      replaceable function saturationTemperature_sat
        "Return saturation temperature"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output Temperature T "Saturation temperature";
      algorithm
        T := sat.Tsat;
      end saturationTemperature_sat;

      replaceable partial function saturationTemperature_derp
        "Return derivative of saturation temperature w.r.t. pressure"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        output DerTemperatureByPressure dTp
          "Derivative of saturation temperature w.r.t. pressure";
      end saturationTemperature_derp;

      replaceable function saturationTemperature_derp_sat
        "Return derivative of saturation temperature w.r.t. pressure"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output DerTemperatureByPressure dTp
          "Derivative of saturation temperature w.r.t. pressure";
      algorithm
        dTp := saturationTemperature_derp(sat.psat);
      end saturationTemperature_derp_sat;

      replaceable partial function surfaceTension
        "Return surface tension sigma in the two phase region"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output SurfaceTension sigma
          "Surface tension sigma in the two phase region";
      end surfaceTension;

      redeclare replaceable function extends molarMass
        "Return the molar mass of the medium"
      algorithm
        MM := fluidConstants[1].molarMass;
      end molarMass;

      replaceable partial function dBubbleDensity_dPressure
        "Return bubble point density derivative"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output DerDensityByPressure ddldp "Boiling curve density derivative";
      end dBubbleDensity_dPressure;

      replaceable partial function dDewDensity_dPressure
        "Return dew point density derivative"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output DerDensityByPressure ddvdp "Saturated steam density derivative";
      end dDewDensity_dPressure;

      replaceable partial function dBubbleEnthalpy_dPressure
        "Return bubble point specific enthalpy derivative"
        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output DerEnthalpyByPressure dhldp
          "Boiling curve specific enthalpy derivative";
      end dBubbleEnthalpy_dPressure;

      replaceable partial function dDewEnthalpy_dPressure
        "Return dew point specific enthalpy derivative"
        extends Modelica.Icons.Function;

        input SaturationProperties sat "Saturation property record";
        output DerEnthalpyByPressure dhvdp
          "Saturated steam specific enthalpy derivative";
      end dDewEnthalpy_dPressure;

      redeclare replaceable function specificEnthalpy_pTX
        "Return specific enthalpy from pressure, temperature and mass fraction"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:] "Mass fractions";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output SpecificEnthalpy h "Specific enthalpy at p, T, X";
      algorithm
        h := specificEnthalpy(setState_pTX(
                p,
                T,
                X,
                phase));
      end specificEnthalpy_pTX;

      redeclare replaceable function temperature_phX
        "Return temperature from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:] "Mass fractions";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Temperature T "Temperature";
      algorithm
        T := temperature(setState_phX(
                p,
                h,
                X,
                phase));
      end temperature_phX;

      redeclare replaceable function density_phX
        "Return density from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:] "Mass fractions";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Density d "Density";
      algorithm
        d := density(setState_phX(
                p,
                h,
                X,
                phase));
      end density_phX;

      redeclare replaceable function temperature_psX
        "Return temperature from p, s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:] "Mass fractions";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Temperature T "Temperature";
      algorithm
        T := temperature(setState_psX(
                p,
                s,
                X,
                phase));
      end temperature_psX;

      redeclare replaceable function density_psX
        "Return density from p, s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:] "Mass fractions";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Density d "Density";
      algorithm
        d := density(setState_psX(
                p,
                s,
                X,
                phase));
      end density_psX;

      redeclare replaceable function specificEnthalpy_psX
        "Return specific enthalpy from p, s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:] "Mass fractions";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy(setState_psX(
                p,
                s,
                X,
                phase));
      end specificEnthalpy_psX;

      redeclare replaceable function setState_pT
        "Return thermodynamic state from p and T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_pTX(
                p,
                T,
                fill(0, 0),
                phase);
      end setState_pT;

      redeclare replaceable function setState_ph
        "Return thermodynamic state from p and h"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_phX(
                p,
                h,
                fill(0, 0),
                phase);
      end setState_ph;

      redeclare replaceable function setState_ps
        "Return thermodynamic state from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_psX(
                p,
                s,
                fill(0, 0),
                phase);
      end setState_ps;

      redeclare replaceable function setState_dT
        "Return thermodynamic state from d and T"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_dTX(
                d,
                T,
                fill(0, 0),
                phase);
      end setState_dT;

      replaceable function setState_px
        "Return thermodynamic state from pressure and vapour quality"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input MassFraction x "Vapour quality";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_ph(
                p,
                (1 - x)*bubbleEnthalpy(setSat_p(p)) + x*dewEnthalpy(setSat_p(p)),
                2);
      end setState_px;

      replaceable function setState_Tx
        "Return thermodynamic state from temperature and vapour quality"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        input MassFraction x "Vapour quality";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := setState_ph(
                saturationPressure_sat(setSat_T(T)),
                (1 - x)*bubbleEnthalpy(setSat_T(T)) + x*dewEnthalpy(setSat_T(T)),
                2);
      end setState_Tx;

      replaceable function vapourQuality "Return vapour quality"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction x "Vapour quality";
      protected
        constant SpecificEnthalpy eps=1e-8;
      algorithm
        x := min(max((specificEnthalpy(state) - bubbleEnthalpy(setSat_p(pressure(
          state))))/(dewEnthalpy(setSat_p(pressure(state))) - bubbleEnthalpy(
          setSat_p(pressure(state))) + eps), 0), 1);
      end vapourQuality;

      redeclare replaceable function density_ph "Return density from p and h"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Density d "Density";
      algorithm
        d := density_phX(
                p,
                h,
                fill(0, 0),
                phase);
      end density_ph;

      redeclare replaceable function temperature_ph
        "Return temperature from p and h"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Temperature T "Temperature";
      algorithm
        T := temperature_phX(
                p,
                h,
                fill(0, 0),
                phase);
      end temperature_ph;

      redeclare replaceable function pressure_dT "Return pressure from d and T"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output AbsolutePressure p "Pressure";
      algorithm
        p := pressure(setState_dTX(
                d,
                T,
                fill(0, 0),
                phase));
      end pressure_dT;

      redeclare replaceable function specificEnthalpy_dT
        "Return specific enthalpy from d and T"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy(setState_dTX(
                d,
                T,
                fill(0, 0),
                phase));
      end specificEnthalpy_dT;

      redeclare replaceable function specificEnthalpy_ps
        "Return specific enthalpy from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy_psX(
                p,
                s,
                fill(0, 0));
      end specificEnthalpy_ps;

      redeclare replaceable function temperature_ps
        "Return temperature from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Temperature T "Temperature";
      algorithm
        T := temperature_psX(
                p,
                s,
                fill(0, 0),
                phase);
      end temperature_ps;

      redeclare replaceable function density_ps "Return density from p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Density d "Density";
      algorithm
        d := density_psX(
                p,
                s,
                fill(0, 0),
                phase);
      end density_ps;

      redeclare replaceable function specificEnthalpy_pT
        "Return specific enthalpy from p and T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := specificEnthalpy_pTX(
                p,
                T,
                fill(0, 0),
                phase);
      end specificEnthalpy_pT;

      redeclare replaceable function density_pT "Return density from p and T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input FixedPhase phase=0
          "2 for two-phase, 1 for one-phase, 0 if not known";
        output Density d "Density";
      algorithm
        d := density(setState_pTX(
                p,
                T,
                fill(0, 0),
                phase));
      end density_pT;
    end PartialTwoPhaseMedium;

    partial package PartialSimpleMedium
      "Medium model with linear dependency of u, h from temperature. All other quantities, especially density, are constant."

      extends Interfaces.PartialPureSubstance(final ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pT,
          final singleState=true);

      constant SpecificHeatCapacity cp_const
        "Constant specific heat capacity at constant pressure";
      constant SpecificHeatCapacity cv_const
        "Constant specific heat capacity at constant volume";
      constant Density d_const "Constant density";
      constant DynamicViscosity eta_const "Constant dynamic viscosity";
      constant ThermalConductivity lambda_const "Constant thermal conductivity";
      constant VelocityOfSound a_const "Constant velocity of sound";
      constant Temperature T_min "Minimum temperature valid for medium model";
      constant Temperature T_max "Maximum temperature valid for medium model";
      constant Temperature T0=reference_T "Zero enthalpy temperature";
      constant MolarMass MM_const "Molar mass";

      constant FluidConstants[nS] fluidConstants "Fluid constants";

      redeclare record extends ThermodynamicState "Thermodynamic state"
        AbsolutePressure p "Absolute pressure of medium";
        Temperature T "Temperature of medium";
      end ThermodynamicState;

      redeclare replaceable model extends BaseProperties(T(stateSelect=if
              preferredMediumStates then StateSelect.prefer else StateSelect.default),
          p(stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default)) "Base properties"
      equation
        assert(T >= T_min and T <= T_max, "
Temperature T (= "   + String(T) + " K) is not
in the allowed range ("   + String(T_min) + " K <= T <= " + String(T_max) + " K)
required from medium model \""   + mediumName + "\".
");

        // h = cp_const*(T-T0);
        h = specificEnthalpy_pTX(
                p,
                T,
                X);
        u = cv_const*(T - T0);
        d = d_const;
        R = 0;
        MM = MM_const;
        state.T = T;
        state.p = p;
        annotation (Documentation(info="<html>
<p>
This is the most simple incompressible medium model, where
specific enthalpy h and specific internal energy u are only
a function of temperature T and all other provided medium
quantities are assumed to be constant.
Note that the (small) influence of the pressure term p/d is neglected.
</p>
</html>"));
      end BaseProperties;

      redeclare function setState_pTX
        "Return thermodynamic state from p, T, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := ThermodynamicState(p=p, T=T);
      end setState_pTX;

      redeclare function setState_phX
        "Return thermodynamic state from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := ThermodynamicState(p=p, T=T0 + h/cp_const);
      end setState_phX;

      redeclare replaceable function setState_psX
        "Return thermodynamic state from p, s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := ThermodynamicState(p=p, T=Modelica.Math.exp(s/cp_const +
          Modelica.Math.log(reference_T)))
          "Here the incompressible limit is used, with cp as heat capacity";
      end setState_psX;

      redeclare function setState_dTX
        "Return thermodynamic state from d, T, and X or Xi"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        assert(false,
          "Pressure can not be computed from temperature and density for an incompressible fluid!");
      end setState_dTX;

      redeclare function extends setSmoothState
        "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
      algorithm
        state := ThermodynamicState(p=myMedia.Common.smoothStep(
                x,
                state_a.p,
                state_b.p,
                x_small), T=myMedia.Common.smoothStep(
                x,
                state_a.T,
                state_b.T,
                x_small));
      end setSmoothState;

      redeclare function extends dynamicViscosity "Return dynamic viscosity"

      algorithm
        eta := eta_const;
      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Return thermal conductivity"

      algorithm
        lambda := lambda_const;
      end thermalConductivity;

      redeclare function extends pressure "Return pressure"

      algorithm
        p := state.p;
      end pressure;

      redeclare function extends temperature "Return temperature"

      algorithm
        T := state.T;
      end temperature;

      redeclare function extends density "Return density"

      algorithm
        d := d_const;
      end density;

      redeclare function extends specificEnthalpy "Return specific enthalpy"

      algorithm
        h := cp_const*(state.T - T0);
      end specificEnthalpy;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant pressure"

      algorithm
        cp := cp_const;
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Return specific heat capacity at constant volume"

      algorithm
        cv := cv_const;
      end specificHeatCapacityCv;

      redeclare function extends isentropicExponent "Return isentropic exponent"

      algorithm
        gamma := cp_const/cv_const;
      end isentropicExponent;

      redeclare function extends velocityOfSound "Return velocity of sound"

      algorithm
        a := a_const;
      end velocityOfSound;

      redeclare function specificEnthalpy_pTX
        "Return specific enthalpy from p, T, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[nX] "Mass fractions";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := cp_const*(T - T0);
        annotation (Documentation(info="<html>
<p>
This function computes the specific enthalpy of the fluid, but neglects the (small) influence of the pressure term p/d.
</p>
</html>"));
      end specificEnthalpy_pTX;

      redeclare function temperature_phX
        "Return temperature from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[nX] "Mass fractions";
        output Temperature T "Temperature";
      algorithm
        T := T0 + h/cp_const;
      end temperature_phX;

      redeclare function density_phX "Return density from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[nX] "Mass fractions";
        output Density d "Density";
      algorithm
        d := density(setState_phX(
                p,
                h,
                X));
      end density_phX;

      redeclare function extends specificInternalEnergy
        "Return specific internal energy"
        extends Modelica.Icons.Function;
      algorithm
        //  u := cv_const*(state.T - T0) - reference_p/d_const;
        u := cv_const*(state.T - T0);
        annotation (Documentation(info="<html>
<p>
This function computes the specific internal energy of the fluid, but neglects the (small) influence of the pressure term p/d.
</p>
</html>"));
      end specificInternalEnergy;

      redeclare function extends specificEntropy "Return specific entropy"
        extends Modelica.Icons.Function;
      algorithm
        s := cv_const*Modelica.Math.log(state.T/T0);
      end specificEntropy;

      redeclare function extends specificGibbsEnergy
        "Return specific Gibbs energy"
        extends Modelica.Icons.Function;
      algorithm
        g := specificEnthalpy(state) - state.T*specificEntropy(state);
      end specificGibbsEnergy;

      redeclare function extends specificHelmholtzEnergy
        "Return specific Helmholtz energy"
        extends Modelica.Icons.Function;
      algorithm
        f := specificInternalEnergy(state) - state.T*specificEntropy(state);
      end specificHelmholtzEnergy;

      redeclare function extends isentropicEnthalpy "Return isentropic enthalpy"
      algorithm
        h_is := cp_const*(temperature(refState) - T0);
      end isentropicEnthalpy;

      redeclare function extends isobaricExpansionCoefficient
        "Returns overall the isobaric expansion coefficient beta"
      algorithm
        beta := 0.0;
      end isobaricExpansionCoefficient;

      redeclare function extends isothermalCompressibility
        "Returns overall the isothermal compressibility factor"
      algorithm
        kappa := 0;
      end isothermalCompressibility;

      redeclare function extends density_derp_T
        "Returns the partial derivative of density with respect to pressure at constant temperature"
      algorithm
        ddpT := 0;
      end density_derp_T;

      redeclare function extends density_derp_h
        "Returns the partial derivative of density with respect to pressure at constant specific enthalpy"
      algorithm
        ddph := 0;
      end density_derp_h;

      redeclare function extends density_derT_p
        "Returns the partial derivative of density with respect to temperature at constant pressure"
      algorithm
        ddTp := 0;
      end density_derT_p;

      redeclare function extends density_derX
        "Returns the partial derivative of density with respect to mass fractions at constant pressure and temperature"
      algorithm
        dddX := fill(0, nX);
      end density_derX;

      redeclare function extends molarMass "Return the molar mass of the medium"
      algorithm
        MM := MM_const;
      end molarMass;
    end PartialSimpleMedium;

    partial package PartialSimpleIdealGasMedium
      "Medium model of Ideal gas with constant cp and cv. All other quantities, e.g., transport properties, are constant."

      extends Interfaces.PartialPureSubstance(
        redeclare replaceable record FluidConstants =
            myMedia.Interfaces.Types.Basic.FluidConstants,
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pT,
        final singleState=false);

      constant SpecificHeatCapacity cp_const
        "Constant specific heat capacity at constant pressure";
      constant SpecificHeatCapacity cv_const=cp_const - R_gas
        "Constant specific heat capacity at constant volume";
      constant SpecificHeatCapacity R_gas "Medium specific gas constant";
      constant MolarMass MM_const "Molar mass";
      constant DynamicViscosity eta_const "Constant dynamic viscosity";
      constant ThermalConductivity lambda_const "Constant thermal conductivity";
      constant Temperature T_min "Minimum temperature valid for medium model";
      constant Temperature T_max "Maximum temperature valid for medium model";
      constant Temperature T0=reference_T "Zero enthalpy temperature";
      constant FluidConstants[nS] fluidConstants "Fluid constants";

      redeclare record extends ThermodynamicState
        "Thermodynamic state of ideal gas"
        AbsolutePressure p "Absolute pressure of medium";
        Temperature T "Temperature of medium";
      end ThermodynamicState;

      redeclare replaceable model extends BaseProperties(T(stateSelect=if
              preferredMediumStates then StateSelect.prefer else StateSelect.default),
          p(stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default)) "Base properties of ideal gas"
      equation
        assert(T >= T_min and T <= T_max, "
Temperature T (= "   + String(T) + " K) is not
in the allowed range ("   + String(T_min) + " K <= T <= " + String(T_max) + " K)
required from medium model \""   + mediumName + "\".
");     h = specificEnthalpy_pTX(
                p,
                T,
                X);
        u = h - R*T;
        R = R_gas;
        d = p/(R*T);
        MM = MM_const;
        state.T = T;
        state.p = p;
        annotation (Documentation(info="<html>
<p>
This is the most simple incompressible medium model, where
specific enthalpy h and specific internal energy u are only
a function of temperature T and all other provided medium
quantities are assumed to be constant.
</p>
</html>"));
      end BaseProperties;

      redeclare function setState_pTX
        "Return thermodynamic state from p, T, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := ThermodynamicState(p=p, T=T);
      end setState_pTX;

      redeclare function setState_phX
        "Return thermodynamic state from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := ThermodynamicState(p=p, T=T0 + h/cp_const);
      end setState_phX;

      redeclare replaceable function setState_psX
        "Return thermodynamic state from p, s, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := ThermodynamicState(p=p, T=Modelica.Math.exp(s/cp_const +
          Modelica.Math.log(reference_T) + R_gas*Modelica.Math.log(p/reference_p)));
      end setState_psX;

      redeclare function setState_dTX
        "Return thermodynamic state from d, T, and X or Xi"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state record";
      algorithm
        state := ThermodynamicState(p=d*R_gas*T, T=T);
      end setState_dTX;

      redeclare function extends setSmoothState
        "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
      algorithm
        state := ThermodynamicState(p=myMedia.Common.smoothStep(
                x,
                state_a.p,
                state_b.p,
                x_small), T=myMedia.Common.smoothStep(
                x,
                state_a.T,
                state_b.T,
                x_small));
      end setSmoothState;

      redeclare function extends pressure "Return pressure of ideal gas"

      algorithm
        p := state.p;
      end pressure;

      redeclare function extends temperature "Return temperature of ideal gas"

      algorithm
        T := state.T;
      end temperature;

      redeclare function extends density "Return density of ideal gas"
      algorithm
        d := state.p/(R_gas*state.T);
      end density;

      redeclare function extends specificEnthalpy "Return specific enthalpy"
        extends Modelica.Icons.Function;
      algorithm
        h := cp_const*(state.T - T0);
      end specificEnthalpy;

      redeclare function extends specificInternalEnergy
        "Return specific internal energy"
        extends Modelica.Icons.Function;
      algorithm
        u := cp_const*(state.T - T0) - R_gas*state.T;
      end specificInternalEnergy;

      redeclare function extends specificEntropy "Return specific entropy"
        extends Modelica.Icons.Function;
      algorithm
        s := cp_const*Modelica.Math.log(state.T/T0) - R_gas*Modelica.Math.log(
          state.p/reference_p);
      end specificEntropy;

      redeclare function extends specificGibbsEnergy
        "Return specific Gibbs energy"
        extends Modelica.Icons.Function;
      algorithm
        g := cp_const*(state.T - T0) - state.T*specificEntropy(state);
      end specificGibbsEnergy;

      redeclare function extends specificHelmholtzEnergy
        "Return specific Helmholtz energy"
        extends Modelica.Icons.Function;
      algorithm
        f := specificInternalEnergy(state) - state.T*specificEntropy(state);
      end specificHelmholtzEnergy;

      redeclare function extends dynamicViscosity "Return dynamic viscosity"

      algorithm
        eta := eta_const;
      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Return thermal conductivity"

      algorithm
        lambda := lambda_const;
      end thermalConductivity;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant pressure"

      algorithm
        cp := cp_const;
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Return specific heat capacity at constant volume"

      algorithm
        cv := cv_const;
      end specificHeatCapacityCv;

      redeclare function extends isentropicExponent "Return isentropic exponent"

      algorithm
        gamma := cp_const/cv_const;
      end isentropicExponent;

      redeclare function extends velocityOfSound "Return velocity of sound"

      algorithm
        a := sqrt(cp_const/cv_const*R_gas*state.T);
      end velocityOfSound;

      redeclare function specificEnthalpy_pTX
        "Return specific enthalpy from p, T, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[nX] "Mass fractions";
        output SpecificEnthalpy h "Specific enthalpy at p, T, X";
      algorithm
        h := cp_const*(T - T0);
      end specificEnthalpy_pTX;

      redeclare function temperature_phX
        "Return temperature from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[nX] "Mass fractions";
        output Temperature T "Temperature";
      algorithm
        T := h/cp_const + T0;
      end temperature_phX;

      redeclare function density_phX "Return density from p, h, and X or Xi"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[nX] "Mass fractions";
        output Density d "Density";
      algorithm
        d := density(setState_phX(
                p,
                h,
                X));
      end density_phX;

      redeclare function extends isentropicEnthalpy "Return isentropic enthalpy"
      algorithm
        /*  s = cp_const*log(refState.T/T0) - R_gas*log(refState.p/reference_p)
          = cp_const*log(state.T/T0) - R_gas*log(p_downstream/reference_p)

        log(state.T) = log(refState.T) +
                       (R_gas/cp_const)*(log(p_downstream/reference_p) - log(refState.p/reference_p))
                     = log(refState.T) + (R_gas/cp_const)*log(p_downstream/refState.p)
                     = log(refState.T) + log( (p_downstream/refState.p)^(R_gas/cp_const) )
                     = log( refState.T*(p_downstream/refState.p)^(R_gas/cp_const) )
        state.T = refstate.T*(p_downstream/refstate.p)^(R_gas/cp_const)
    */
        h_is := cp_const*(refState.T*(p_downstream/refState.p)^(R_gas/cp_const)
           - T0);
      end isentropicEnthalpy;

      redeclare function extends isobaricExpansionCoefficient
        "Returns overall the isobaric expansion coefficient beta"
      algorithm
        /* beta = 1/v * der(v,T), with v = 1/d, at constant pressure p:
       v = R*T/p
       der(v,T) = R/p
       beta = p/(R*T)*R/p
            = 1/T
    */

        beta := 1/state.T;
      end isobaricExpansionCoefficient;

      redeclare function extends isothermalCompressibility
        "Returns overall the isothermal compressibility factor"
      algorithm
        /* kappa = - 1/v * der(v,p), with v = 1/d at constant temperature T.
       v = R*T/p
       der(v,T) = -R*T/p^2
       kappa = p/(R*T)*R*T/p^2
             = 1/p
    */
        kappa := 1/state.p;
      end isothermalCompressibility;

      redeclare function extends density_derp_T
        "Returns the partial derivative of density with respect to pressure at constant temperature"
      algorithm
        /*  d = p/(R*T)
        ddpT = 1/(R*T)
    */
        ddpT := 1/(R_gas*state.T);
      end density_derp_T;

      redeclare function extends density_derp_h
        "Returns the partial derivative of density with respect to pressure at constant enthalpy"
      algorithm
       // h = f(T) -> h=const -> T = const
        ddph := 1/(R_gas*state.T);
      end density_derp_h;

      redeclare function extends density_derT_p
        "Returns the partial derivative of density with respect to temperature at constant pressure"
      algorithm
        /*  d = p/(R*T)
        ddpT = -p/(R*T^2)
    */
        ddTp := -state.p/(R_gas*state.T*state.T);
      end density_derT_p;

      redeclare function extends density_derX
        "Returns the partial derivative of density with respect to mass fractions at constant pressure and temperature"
      algorithm
        dddX := fill(0, nX);
      end density_derX;

      redeclare function extends molarMass "Returns the molar mass of the medium"
      algorithm
        MM := MM_const;
      end molarMass;
    end PartialSimpleIdealGasMedium;

    package Choices "Types, constants to define menu choices"
      extends Modelica.Icons.Package;

      type IndependentVariables = enumeration(
          T "Temperature",
          pT "Pressure, Temperature",
          ph "Pressure, Specific Enthalpy",
          phX "Pressure, Specific Enthalpy, Mass Fraction",
          pTX "Pressure, Temperature, Mass Fractions",
          dTX "Density, Temperature, Mass Fractions")
        "Enumeration defining the independent variables of a medium";

      type Init = enumeration(
          NoInit "NoInit (no initialization)",
          InitialStates "InitialStates (initialize medium states)",
          SteadyState "SteadyState (initialize in steady state)",
          SteadyMass
            "SteadyMass (initialize density or pressure in steady state)")
        "Enumeration defining initialization for fluid flow" annotation (Evaluate=
           true);

      type ReferenceEnthalpy = enumeration(
          ZeroAt0K
            "The enthalpy is 0 at 0 K (default), if the enthalpy of formation is excluded",
          ZeroAt25C
            "The enthalpy is 0 at 25 degC, if the enthalpy of formation is excluded",
          UserDefined
            "The user-defined reference enthalpy is used at 293.15 K (25 degC)")
        "Enumeration defining the reference enthalpy of a medium" annotation (
          Evaluate=true);

      type ReferenceEntropy = enumeration(
          ZeroAt0K "The entropy is 0 at 0 K (default)",
          ZeroAt0C "The entropy is 0 at 0 degC",
          UserDefined
            "The user-defined reference entropy is used at 293.15 K (25 degC)")
        "Enumeration defining the reference entropy of a medium" annotation (
          Evaluate=true);

      type pd = enumeration(
          default "Default (no boundary condition for p or d)",
          p_known "p_known (pressure p is known)",
          d_known "d_known (density d is known)")
        "Enumeration defining whether p or d are known for the boundary condition"
        annotation (Evaluate=true);

      type Th = enumeration(
          default "Default (no boundary condition for T or h)",
          T_known "T_known (temperature T is known)",
          h_known "h_known (specific enthalpy h is known)")
        "Enumeration defining whether T or h are known as boundary condition"
        annotation (Evaluate=true);

      annotation (Documentation(info="<html>
<p>
Enumerations and data types for all types of fluids
</p>

<p>
Note: Reference enthalpy might have to be extended with enthalpy of formation.
</p>
</html>"));
    end Choices;

    package Types "Types to be used in fluid models"
      extends Modelica.Icons.Package;

      type AbsolutePressure = SI.AbsolutePressure (
          min=0,
          max=1.e8,
          nominal=1.e5,
          start=1.e5)
        "Type for absolute pressure with medium specific attributes";

      type Density = SI.Density (
          min=0,
          max=1.e5,
          nominal=1,
          start=1) "Type for density with medium specific attributes";
      type DynamicViscosity = SI.DynamicViscosity (
          min=0,
          max=1.e8,
          nominal=1.e-3,
          start=1.e-3)
        "Type for dynamic viscosity with medium specific attributes";
      type EnthalpyFlowRate = SI.EnthalpyFlowRate (
          nominal=1000.0,
          min=-1.0e8,
          max=1.e8) "Type for enthalpy flow rate with medium specific attributes";
      type MassFraction = Real (
          quantity="MassFraction",
          final unit="kg/kg",
          min=0,
          max=1,
          nominal=0.1) "Type for mass fraction with medium specific attributes";
      type MoleFraction = Real (
          quantity="MoleFraction",
          final unit="mol/mol",
          min=0,
          max=1,
          nominal=0.1) "Type for mole fraction with medium specific attributes";
      type MolarMass = SI.MolarMass (
          min=0.001,
          max=0.25,
          nominal=0.032) "Type for molar mass with medium specific attributes";
      type MolarVolume = SI.MolarVolume (
          min=1e-6,
          max=1.0e6,
          nominal=1.0) "Type for molar volume with medium specific attributes";
      type IsentropicExponent = SI.RatioOfSpecificHeatCapacities (
          min=1,
          max=500000,
          nominal=1.2,
          start=1.2)
        "Type for isentropic exponent with medium specific attributes";
      type SpecificEnergy = SI.SpecificEnergy (
          min=-1.0e8,
          max=1.e8,
          nominal=1.e6)
        "Type for specific energy with medium specific attributes";
      type SpecificInternalEnergy = SpecificEnergy
        "Type for specific internal energy with medium specific attributes";
      type SpecificEnthalpy = SI.SpecificEnthalpy (
          min=-1.0e10,
          max=1.e10,
          nominal=1.e6)
        "Type for specific enthalpy with medium specific attributes";
      type SpecificEntropy = SI.SpecificEntropy (
          min=-1.e7,
          max=1.e7,
          nominal=1.e3)
        "Type for specific entropy with medium specific attributes";
      type SpecificHeatCapacity = SI.SpecificHeatCapacity (
          min=0,
          max=1.e7,
          nominal=1.e3,
          start=1.e3)
        "Type for specific heat capacity with medium specific attributes";
      type SurfaceTension = SI.SurfaceTension
        "Type for surface tension with medium specific attributes";
      type Temperature = SI.Temperature (
          min=1,
          max=1.e4,
          nominal=300,
          start=288.15) "Type for temperature with medium specific attributes";
      type ThermalConductivity = SI.ThermalConductivity (
          min=0,
          max=500,
          nominal=1,
          start=1)
        "Type for thermal conductivity with medium specific attributes";
      type PrandtlNumber = SI.PrandtlNumber (
          min=1e-3,
          max=1e5,
          nominal=1.0) "Type for Prandtl number with medium specific attributes";
      type VelocityOfSound = SI.Velocity (
          min=0,
          max=1.e5,
          nominal=1000,
          start=1000)
        "Type for velocity of sound with medium specific attributes";
      type ExtraProperty = Real (min=0.0, start=1.0)
        "Type for unspecified, mass-specific property transported by flow";
      type CumulativeExtraProperty = Real (min=0.0, start=1.0)
        "Type for conserved integral of unspecified, mass specific property";
      type ExtraPropertyFlowRate = Real (unit="kg/s")
        "Type for flow rate of unspecified, mass-specific property";
      type IsobaricExpansionCoefficient = Real (
          min=0,
          max=1.0e8,
          unit="1/K")
        "Type for isobaric expansion coefficient with medium specific attributes";
      type DipoleMoment = Real (
          min=0.0,
          max=2.0,
          unit="debye",
          quantity="ElectricDipoleMoment")
        "Type for dipole moment with medium specific attributes";

      type DerDensityByPressure = SI.DerDensityByPressure
        "Type for partial derivative of density with respect to pressure with medium specific attributes";
      type DerDensityByEnthalpy = SI.DerDensityByEnthalpy
        "Type for partial derivative of density with respect to enthalpy with medium specific attributes";
      type DerEnthalpyByPressure = SI.DerEnthalpyByPressure
        "Type for partial derivative of enthalpy with respect to pressure with medium specific attributes";
      type DerDensityByTemperature = SI.DerDensityByTemperature
        "Type for partial derivative of density with respect to temperature with medium specific attributes";
      type DerTemperatureByPressure = Real (final unit="K/Pa")
        "Type for partial derivative of temperature with respect to pressure with medium specific attributes";

      replaceable record SaturationProperties
        "Saturation properties of two phase medium"
        extends Modelica.Icons.Record;
        AbsolutePressure psat "Saturation pressure";
        Temperature Tsat "Saturation temperature";
      end SaturationProperties;

      record FluidLimits "Validity limits for fluid model"
        extends Modelica.Icons.Record;
        Temperature TMIN "Minimum temperature";
        Temperature TMAX "Maximum temperature";
        Density DMIN "Minimum density";
        Density DMAX "Maximum density";
        AbsolutePressure PMIN "Minimum pressure";
        AbsolutePressure PMAX "Maximum pressure";
        SpecificEnthalpy HMIN "Minimum enthalpy";
        SpecificEnthalpy HMAX "Maximum enthalpy";
        SpecificEntropy SMIN "Minimum entropy";
        SpecificEntropy SMAX "Maximum entropy";
        annotation (Documentation(info="<html>
          <p>The minimum pressure mostly applies to the liquid state only.
          The minimum density is also arbitrary, but is reasonable for technical
          applications to limit iterations in non-linear systems. The limits in
          enthalpy and entropy are used as safeguards in inverse iterations.</p>
          </html>"));
      end FluidLimits;

      type FixedPhase = Integer (min=0, max=2)
        "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
      package Basic
        "The most basic version of a record used in several degrees of detail"
        extends Modelica.Icons.Package;

        record FluidConstants
          "Critical, triple, molecular and other standard data of fluid"
          extends Modelica.Icons.Record;
          String iupacName
            "Complete IUPAC name (or common name, if non-existent)";
          String casRegistryNumber
            "Chemical abstracts sequencing number (if it exists)";
          String chemicalFormula
            "Chemical formula, (brutto, nomenclature according to Hill";
          String structureFormula "Chemical structure formula";
          MolarMass molarMass "Molar mass";
        end FluidConstants;

      end Basic;

      package IdealGas
        "The ideal gas version of a record used in several degrees of detail"
        extends Modelica.Icons.Package;

        record FluidConstants "Extended fluid constants"
          extends myMedia.Interfaces.Types.Basic.FluidConstants;
          Temperature criticalTemperature "Critical temperature";
          AbsolutePressure criticalPressure "Critical pressure";
          MolarVolume criticalMolarVolume "Critical molar Volume";
          Real acentricFactor "Pitzer acentric factor";
          //   Temperature triplePointTemperature "Triple point temperature";
          //   AbsolutePressure triplePointPressure "Triple point pressure";
          Temperature meltingPoint "Melting point at 101325 Pa";
          Temperature normalBoilingPoint "Normal boiling point (at 101325 Pa)";
          DipoleMoment dipoleMoment
            "Dipole moment of molecule in Debye (1 debye = 3.33564e10-30 C.m)";
          Boolean hasIdealGasHeatCapacity=false
            "True if ideal gas heat capacity is available";
          Boolean hasCriticalData=false "True if critical data are known";
          Boolean hasDipoleMoment=false "True if a dipole moment known";
          Boolean hasFundamentalEquation=false "True if a fundamental equation";
          Boolean hasLiquidHeatCapacity=false
            "True if liquid heat capacity is available";
          Boolean hasSolidHeatCapacity=false
            "True if solid heat capacity is available";
          Boolean hasAccurateViscosityData=false
            "True if accurate data for a viscosity function is available";
          Boolean hasAccurateConductivityData=false
            "True if accurate data for thermal conductivity is available";
          Boolean hasVapourPressureCurve=false
            "True if vapour pressure data, e.g., Antoine coefficients are known";
          Boolean hasAcentricFactor=false
            "True if Pitzer acentric factor is known";
          SpecificEnthalpy HCRIT0=0.0
            "Critical specific enthalpy of the fundamental equation";
          SpecificEntropy SCRIT0=0.0
            "Critical specific entropy of the fundamental equation";
          SpecificEnthalpy deltah=0.0
            "Difference between specific enthalpy model (h_m) and f.eq. (h_f) (h_m - h_f)";
          SpecificEntropy deltas=0.0
            "Difference between specific enthalpy model (s_m) and f.eq. (s_f) (s_m - s_f)";
        end FluidConstants;
      end IdealGas;

      package TwoPhase
        "The two phase fluid version of a record used in several degrees of detail"
        extends Modelica.Icons.Package;

        record FluidConstants "Extended fluid constants"
          extends myMedia.Interfaces.Types.Basic.FluidConstants;
          Temperature criticalTemperature "Critical temperature";
          AbsolutePressure criticalPressure "Critical pressure";
          MolarVolume criticalMolarVolume "Critical molar Volume";
          Real acentricFactor "Pitzer acentric factor";
          Temperature triplePointTemperature "Triple point temperature";
          AbsolutePressure triplePointPressure "Triple point pressure";
          Temperature meltingPoint "Melting point at 101325 Pa";
          Temperature normalBoilingPoint "Normal boiling point (at 101325 Pa)";
          DipoleMoment dipoleMoment
            "Dipole moment of molecule in Debye (1 debye = 3.33564e10-30 C.m)";
          Boolean hasIdealGasHeatCapacity=false
            "True if ideal gas heat capacity is available";
          Boolean hasCriticalData=false "True if critical data are known";
          Boolean hasDipoleMoment=false "True if a dipole moment known";
          Boolean hasFundamentalEquation=false "True if a fundamental equation";
          Boolean hasLiquidHeatCapacity=false
            "True if liquid heat capacity is available";
          Boolean hasSolidHeatCapacity=false
            "True if solid heat capacity is available";
          Boolean hasAccurateViscosityData=false
            "True if accurate data for a viscosity function is available";
          Boolean hasAccurateConductivityData=false
            "True if accurate data for thermal conductivity is available";
          Boolean hasVapourPressureCurve=false
            "True if vapour pressure data, e.g., Antoine coefficients are known";
          Boolean hasAcentricFactor=false
            "True if Pitzer acentric factor is known";
          SpecificEnthalpy HCRIT0=0.0
            "Critical specific enthalpy of the fundamental equation";
          SpecificEntropy SCRIT0=0.0
            "Critical specific entropy of the fundamental equation";
          SpecificEnthalpy deltah=0.0
            "Difference between specific enthalpy model (h_m) and f.eq. (h_f) (h_m - h_f)";
          SpecificEntropy deltas=0.0
            "Difference between specific enthalpy model (s_m) and f.eq. (s_f) (s_m - s_f)";
        end FluidConstants;
      end TwoPhase;

    end Types;
    annotation (Documentation(info="<html>
<p>
This package provides basic interfaces definitions of media models for different
kind of media.
</p>
</html>"));
  end Interfaces;

  package Common "Data structures and fundamental functions for fluid properties"

    extends Modelica.Icons.Package;
    type Rate = Real (final quantity="Rate", final unit="s-1");
    type MolarFlowRate = Real (final quantity="MolarFlowRate", final unit="mol/s");
    type MolarReactionRate = Real (final quantity="MolarReactionRate", final unit=
           "mol/(m3.s)");
    type MolarEnthalpy = Real (final quantity="MolarEnthalpy", final unit="J/mol");
    type DerDensityByEntropy = Real (final quantity="DerDensityByEntropy", final
          unit="kg2.K/(m3.J)");
    type DerEnergyByPressure = Real (final quantity="DerEnergyByPressure", final
          unit="J/Pa");
    type DerEnergyByMoles = Real (final quantity="DerEnergyByMoles", final unit=
            "J/mol");
    type DerEntropyByTemperature = Real (final quantity="DerEntropyByTemperature",
          final unit="J/K2");
    type DerEntropyByPressure = Real (final quantity="DerEntropyByPressure",
          final unit="J/(K.Pa)");
    type DerEntropyByMoles = Real (final quantity="DerEntropyByMoles", final unit=
           "J/(mol.K)");
    type DerPressureByDensity = Real (final quantity="DerPressureByDensity",
          final unit="Pa.m3/kg");
    type DerPressureBySpecificVolume = Real (final quantity=
            "DerPressureBySpecificVolume", final unit="Pa.kg/m3");
    type DerPressureByTemperature = Real (final quantity=
            "DerPressureByTemperature", final unit="Pa/K");
    type DerVolumeByTemperature = Real (final quantity="DerVolumeByTemperature",
          final unit="m3/K");
    type DerVolumeByPressure = Real (final quantity="DerVolumeByPressure", final
          unit="m3/Pa");
    type DerVolumeByMoles = Real (final quantity="DerVolumeByMoles", final unit=
            "m3/mol");
    type IsenthalpicExponent = Real (final quantity="IsenthalpicExponent", unit=
            "1");
    type IsentropicExponent = Real (final quantity="IsentropicExponent", unit="1");
    type IsobaricVolumeExpansionCoefficient = Real (final quantity=
            "IsobaricVolumeExpansionCoefficient", unit="1/K");
    type IsochoricPressureCoefficient = Real (final quantity=
            "IsochoricPressureCoefficient", unit="1/K");
    type IsothermalCompressibility = Real (final quantity=
            "IsothermalCompressibility", unit="1/Pa");
    type JouleThomsonCoefficient = Real (final quantity="JouleThomsonCoefficient",
          unit="K/Pa");
    // introduce min-manx-nominal values
    constant Real MINPOS=1.0e-9
      "Minimal value for physical variables which are always > 0.0";

    constant SI.Area AMIN=MINPOS "Minimal init area";
    constant SI.Area AMAX=1.0e5 "Maximal init area";
    constant SI.Area ANOM=1.0 "Nominal init area";
    constant SI.AmountOfSubstance MOLMIN=-1.0*MINPOS "Minimal Mole Number";
    constant SI.AmountOfSubstance MOLMAX=1.0e8 "Maximal Mole Number";
    constant SI.AmountOfSubstance MOLNOM=1.0 "Nominal Mole Number";
    constant SI.Density DMIN=1e-6 "Minimal init density";
    constant SI.Density DMAX=30.0e3 "Maximal init density";
    constant SI.Density DNOM=1.0 "Nominal init density";
    constant SI.ThermalConductivity LAMMIN=MINPOS "Minimal thermal conductivity";
    constant SI.ThermalConductivity LAMNOM=1.0 "Nominal thermal conductivity";
    constant SI.ThermalConductivity LAMMAX=1000.0 "Maximal thermal conductivity";
    constant SI.DynamicViscosity ETAMIN=MINPOS "Minimal init dynamic viscosity";
    constant SI.DynamicViscosity ETAMAX=1.0e8 "Maximal init dynamic viscosity";
    constant SI.DynamicViscosity ETANOM=100.0 "Nominal init dynamic viscosity";
    constant SI.Energy EMIN=-1.0e10 "Minimal init energy";
    constant SI.Energy EMAX=1.0e10 "Maximal init energy";
    constant SI.Energy ENOM=1.0e3 "Nominal init energy";
    constant SI.Entropy SMIN=-1.0e6 "Minimal init entropy";
    constant SI.Entropy SMAX=1.0e6 "Maximal init entropy";
    constant SI.Entropy SNOM=1.0e3 "Nominal init entropy";
    constant SI.MassFlowRate MDOTMIN=-1.0e5 "Minimal init mass flow rate";
    constant SI.MassFlowRate MDOTMAX=1.0e5 "Maximal init mass flow rate";
    constant SI.MassFlowRate MDOTNOM=1.0 "Nominal init mass flow rate";
    constant SI.MassFraction MASSXMIN=-1.0*MINPOS "Minimal init mass fraction";
    constant SI.MassFraction MASSXMAX=1.0 "Maximal init mass fraction";
    constant SI.MassFraction MASSXNOM=0.1 "Nominal init mass fraction";
    constant SI.Mass MMIN=-1.0*MINPOS "Minimal init mass";
    constant SI.Mass MMAX=1.0e8 "Maximal init mass";
    constant SI.Mass MNOM=1.0 "Nominal init mass";
    constant SI.MolarMass MMMIN=0.001 "Minimal initial molar mass";
    constant SI.MolarMass MMMAX=250.0 "Maximal initial molar mass";
    constant SI.MolarMass MMNOM=0.2 "Nominal initial molar mass";
    constant SI.MoleFraction MOLEYMIN=-1.0*MINPOS "Minimal init mole fraction";
    constant SI.MoleFraction MOLEYMAX=1.0 "Maximal init mole fraction";
    constant SI.MoleFraction MOLEYNOM=0.1 "Nominal init mole fraction";
    constant SI.MomentumFlux GMIN=-1.0e8 "Minimal init momentum flux";
    constant SI.MomentumFlux GMAX=1.0e8 "Maximal init momentum flux";
    constant SI.MomentumFlux GNOM=1.0 "Nominal init momentum flux";
    constant SI.Power POWMIN=-1.0e8 "Minimal init power or heat";
    constant SI.Power POWMAX=1.0e8 "Maximal init power or heat";
    constant SI.Power POWNOM=1.0e3 "Nominal init power or heat";
    constant SI.Pressure PMIN=1.0e4 "Minimal init pressure";
    constant SI.Pressure PMAX=1.0e8 "Maximal init pressure";
    constant SI.Pressure PNOM=1.0e5 "Nominal init pressure";
    constant SI.Pressure COMPPMIN=-1.0*MINPOS "Minimal init pressure";
    constant SI.Pressure COMPPMAX=1.0e8 "Maximal init pressure";
    constant SI.Pressure COMPPNOM=1.0e5 "Nominal init pressure";
    constant SI.RatioOfSpecificHeatCapacities KAPPAMIN=1.0
      "Minimal init isentropic exponent";
    constant SI.RatioOfSpecificHeatCapacities KAPPAMAX=1.7
      "Maximal init isentropic exponent";
    constant SI.RatioOfSpecificHeatCapacities KAPPANOM=1.2
      "Nominal init isentropic exponent";
    constant SI.SpecificEnergy SEMIN=-1.0e8 "Minimal init specific energy";
    constant SI.SpecificEnergy SEMAX=1.0e8 "Maximal init specific energy";
    constant SI.SpecificEnergy SENOM=1.0e6 "Nominal init specific energy";
    constant SI.SpecificEnthalpy SHMIN=-1.0e8 "Minimal init specific enthalpy";
    constant SI.SpecificEnthalpy SHMAX=1.0e8 "Maximal init specific enthalpy";
    constant SI.SpecificEnthalpy SHNOM=1.0e6 "Nominal init specific enthalpy";
    constant SI.SpecificEntropy SSMIN=-1.0e6 "Minimal init specific entropy";
    constant SI.SpecificEntropy SSMAX=1.0e6 "Maximal init specific entropy";
    constant SI.SpecificEntropy SSNOM=1.0e3 "Nominal init specific entropy";
    constant SI.SpecificHeatCapacity CPMIN=MINPOS
      "Minimal init specific heat capacity";
    constant SI.SpecificHeatCapacity CPMAX=1.0e6
      "Maximal init specific heat capacity";
    constant SI.SpecificHeatCapacity CPNOM=1.0e3
      "Nominal init specific heat capacity";
    constant SI.Temperature TMIN=1.0 "Minimal init temperature";
    constant SI.Temperature TMAX=6000.0 "Maximal init temperature";
    constant SI.Temperature TNOM=320.0 "Nominal init temperature";
    constant SI.ThermalConductivity LMIN=MINPOS
      "Minimal init thermal conductivity";
    constant SI.ThermalConductivity LMAX=500.0
      "Maximal init thermal conductivity";
    constant SI.ThermalConductivity LNOM=1.0 "Nominal init thermal conductivity";
    constant SI.Velocity VELMIN=-1.0e5 "Minimal init speed";
    constant SI.Velocity VELMAX=1.0e5 "Maximal init speed";
    constant SI.Velocity VELNOM=1.0 "Nominal init speed";
    constant SI.Volume VMIN=0.0 "Minimal init volume";
    constant SI.Volume VMAX=1.0e5 "Maximal init volume";
    constant SI.Volume VNOM=1.0e-3 "Nominal init volume";

    package ThermoFluidSpecial "Property records used by the ThermoFluid library"
      extends Modelica.Icons.Package;
      record FixedIGProperties "Constant properties for ideal gases"
        extends Modelica.Icons.Record;
        parameter Integer nspecies(min=1) "Number of components";
        SI.MolarMass[nspecies] MM "Molar mass of components";
        Real[nspecies] invMM "Inverse of molar mass of components";
        SI.SpecificHeatCapacity[nspecies] R "Gas constant";
        SI.SpecificEnthalpy[nspecies] Hf "Enthalpy of formation at 298.15K";
        SI.SpecificEnthalpy[nspecies] H0 "H0(298.15K) - H0(0K)";
      end FixedIGProperties;

      record ThermoBaseVars
        extends Modelica.Icons.Record;
        parameter Integer n(min=1) "Discretization number";
        parameter Integer nspecies(min=1) "Number of species";
        SI.Pressure[n] p(
          min=PMIN,
          max=PMAX,
          nominal=PNOM,
          start=fill(1.0e5, n)) "Pressure";
        SI.Temperature[n] T(
          min=TMIN,
          max=TMAX,
          nominal=TNOM) "Temperature";
        SI.Density[n] d(
          min=DMIN,
          max=DMAX,
          nominal=DNOM) "Density";
        SI.SpecificEnthalpy[n] h(
          min=SHMIN,
          max=SHMAX,
          nominal=SHNOM) "Specific enthalpy";
        SI.SpecificEntropy[n] s(
          min=SSMIN,
          max=SSMAX,
          nominal=SSNOM) "Specific entropy";
        SI.RatioOfSpecificHeatCapacities[n] kappa "Ratio of cp/cv";
        SI.Mass[n] M(
          min=MMIN,
          max=MMAX,
          nominal=MNOM) "Total mass";
        SI.Energy[n] U(
          min=EMIN,
          max=EMAX,
          nominal=ENOM) "Inner energy";
        SI.MassFlowRate[n] dM(
          min=MDOTMIN,
          max=MDOTMAX,
          nominal=MDOTNOM) "Change in total mass";
        SI.Power[n] dU(
          min=POWMIN,
          max=POWMAX,
          nominal=POWNOM) "Change in inner energy";
        SI.Volume[n] V(
          min=VMIN,
          max=VMAX,
          nominal=VNOM) "Volume";
        SI.MassFraction[n, nspecies] mass_x(
          min=MASSXMIN,
          max=MASSXMAX,
          nominal=MASSXNOM) "Mass fraction";
        SI.MoleFraction[n, nspecies] mole_y(
          min=MOLEYMIN,
          max=MOLEYMAX,
          nominal=MOLEYNOM) "Mole fraction";
        SI.Mass[n, nspecies] M_x(
          min=MMIN,
          max=MMAX,
          nominal=MNOM) "Component mass";
        SI.MassFlowRate[n, nspecies] dM_x(
          min=MDOTMIN,
          max=MDOTMAX,
          nominal=MDOTNOM) "Rate of change in component mass";
        MolarFlowRate[n, nspecies] dZ(
          min=-1.0e6,
          max=1.0e6,
          nominal=0.0) "Rate of change in component moles";
        MolarFlowRate[n, nspecies] rZ(
          min=-1.0e6,
          max=1.0e6,
          nominal=0.0) "Reaction(source) mole rates";
        SI.MolarMass[n] MM(
          min=MMMIN,
          max=MMMAX,
          nominal=MMNOM) "Molar mass of mixture";
        SI.AmountOfSubstance[n] Moles(
          min=MOLMIN,
          max=MOLMAX,
          nominal=MOLNOM) "Total moles";
        SI.AmountOfSubstance[n, nspecies] Moles_z(
          min=MOLMIN,
          max=MOLMAX,
          nominal=MOLNOM) "Mole vector";
        annotation (Documentation(info="<html>
                         <h4>Model description</h4>
                              <p>
                              <strong>ThermoBaseVars</strong> is inherited by all medium property models
                              and by all models defining the dynamic states for the conservation
                              of mass and energy. Thus it is a good choice as a restricting class
                              for any medium model or dynamic state model.
                           </p>
                              </html>"));
      end ThermoBaseVars;

      record ThermoProperties
        "Thermodynamic base property data for all state models"
        extends Modelica.Icons.Record;
        parameter Integer nspecies(min=1) "Number of species";
        SI.Temperature T(
          min=TMIN,
          max=TMAX,
          nominal=TNOM) "Temperature";
        SI.Density d(
          min=DMIN,
          max=DMAX,
          nominal=DNOM) "Density";
        SI.Pressure p(
          min=PMIN,
          max=PMAX,
          nominal=PNOM) "Pressure";
        SI.Volume V(
          min=VMIN,
          max=VMAX,
          nominal=VNOM) "Volume";
        SI.SpecificEnthalpy h(
          min=SHMIN,
          max=SHMAX,
          nominal=SHNOM) "Specific enthalpy";
        SI.SpecificEnergy u(
          min=SEMIN,
          max=SEMAX,
          nominal=SENOM) "Specific inner energy";
        SI.SpecificEntropy s(
          min=SSMIN,
          max=SSMAX,
          nominal=SSNOM) "Specific entropy";
        SI.SpecificGibbsFreeEnergy g(
          min=SHMIN,
          max=SHMAX,
          nominal=SHNOM) "Specific Gibbs free energy";
        SI.SpecificHeatCapacity cp(
          min=CPMIN,
          max=CPMAX,
          nominal=CPNOM) "Heat capacity at constant pressure";
        SI.SpecificHeatCapacity cv(
          min=CPMIN,
          max=CPMAX,
          nominal=CPNOM) "Heat capacity at constant volume";
        SI.SpecificHeatCapacity R(
          min=CPMIN,
          max=CPMAX,
          nominal=CPNOM) "Gas constant";
        SI.MolarMass MM(
          min=MMMIN,
          max=MMMAX,
          nominal=MMNOM) "Molar mass of mixture";
        SI.MassFraction[nspecies] mass_x(
          min=MASSXMIN,
          max=MASSXMAX,
          nominal=MASSXNOM) "Mass fraction";
        SI.MoleFraction[nspecies] mole_y(
          min=MOLEYMIN,
          max=MOLEYMAX,
          nominal=MOLEYNOM) "Mole fraction";
        SI.RatioOfSpecificHeatCapacities kappa "Ratio of cp/cv";
        SI.DerDensityByTemperature ddTp
          "Derivative of density by temperature at constant pressure";
        SI.DerDensityByPressure ddpT
          "Derivative of density by pressure at constant temperature";
        Real dupT(unit="m3.kg-1")
          "Derivative of inner energy by pressure at constant T";
        Real dudT(unit="(J.m3)/(kg2)")
          "Derivative of inner energy by density at constant T";
        SI.SpecificHeatCapacity duTp
          "Derivative of inner energy by temperature at constant p";
        SI.SpecificEnergy ddx[nspecies]
          "Derivative vector of density by change in mass composition";
        SI.SpecificEnergy[nspecies] compu(
          min=SEMIN,
          max=SEMAX,
          nominal=SENOM) "Inner energy of the components";
        SI.Pressure[nspecies] compp(
          min=COMPPMIN,
          max=COMPPMAX,
          nominal=COMPPNOM) "partial pressures of the components";
        SI.Velocity a(
          min=VELMIN,
          max=VELMAX,
          nominal=VELNOM) "Speed of sound";
        SI.HeatCapacity dUTZ
          "Derivative of inner energy by temperature at constant moles";
        SI.MolarInternalEnergy[nspecies] dUZT
          "Derivative of inner energy by moles at constant temperature";
        SI.SpecificEnthalpy[nspecies] dHMxT(
          min=SEMIN,
          max=SEMAX,
          nominal=SENOM)
          "Derivative of total enthalpy w.r.t. component mass at constant T";
        Real dpT "Derivative of pressure w.r.t. temperature";
        Real dpZ[nspecies] "Derivative of pressure w.r.t. moles";
        annotation (Documentation(info="<html>
        <h4>Model description</h4>
        <p>
        A base class for medium property models which work with most of the
        versions of dynamic states that are available in the ThermoFluid
        library. Currently used by all ideal gas models.
     </p>
        </html>"));
      end ThermoProperties;

      record ThermoProperties_ph
        "Thermodynamic property data for pressure p and specific enthalpy h as dynamic states"

        extends Modelica.Icons.Record;
        SI.Temperature T(
          min=1.0e-9,
          max=10000.0,
          nominal=298.15) "Temperature";
        SI.Density d(
          min=1.0e-9,
          max=10000.0,
          nominal=10.0) "Density";
        SI.SpecificEnergy u(
          min=-1.0e8,
          max=1.0e8,
          nominal=1.0e6) "Specific inner energy";
        SI.SpecificEntropy s(
          min=-1.0e6,
          max=1.0e6,
          nominal=1.0e3) "Specific entropy";
        SI.SpecificHeatCapacity cp(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Heat capacity at constant pressure";
        SI.SpecificHeatCapacity cv(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Heat capacity at constant volume";
        SI.SpecificHeatCapacity R(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Gas constant";
        SI.RatioOfSpecificHeatCapacities kappa "Ratio of cp/cv";
        SI.Velocity a(
          min=1.0,
          max=10000.0,
          nominal=300.0) "Speed of sound";
        SI.DerDensityByEnthalpy ddhp
          "Derivative of density by enthalpy at constant pressure";
        SI.DerDensityByPressure ddph
          "Derivative of density by pressure at constant enthalpy";
        Real duph(unit="m3/kg")
          "Derivative of inner energy by pressure at constant enthalpy";
        Real duhp(unit="1")
          "Derivative of inner energy by enthalpy at constant pressure";
        annotation (Documentation(info="<html>
<h4>Model description</h4>
<p>
A base class for medium property models which
use pressure and enthalpy as dynamic states.
This is the preferred model for fluids that can also be in the
two phase and liquid regions.
</p>
</html>"));
      end ThermoProperties_ph;

      record ThermoProperties_pT
        "Thermodynamic property data for pressure p and temperature T as dynamic states"

        extends Modelica.Icons.Record;
        SI.Density d(
          min=1.0e-9,
          max=10000.0,
          nominal=10.0) "Density";
        SI.SpecificEnthalpy h(
          min=-1.0e8,
          max=1.0e8,
          nominal=1.0e6) "Specific enthalpy";
        SI.SpecificEnergy u(
          min=-1.0e8,
          max=1.0e8,
          nominal=1.0e6) "Specific inner energy";
        SI.SpecificEntropy s(
          min=-1.0e6,
          max=1.0e6,
          nominal=1.0e3) "Specific entropy";
        SI.SpecificHeatCapacity cp(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Heat capacity at constant pressure";
        SI.SpecificHeatCapacity cv(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Heat capacity at constant volume";
        SI.SpecificHeatCapacity R(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Gas constant";
        SI.RatioOfSpecificHeatCapacities kappa "Ratio of cp/cv";
        SI.Velocity a(
          min=1.0,
          max=10000.0,
          nominal=300.0) "Speed of sound";
        SI.DerDensityByTemperature ddTp
          "Derivative of density by temperature at constant pressure";
        SI.DerDensityByPressure ddpT
          "Derivative of density by pressure at constant temperature";
        Real dupT(unit="m3.kg-1")
          "Derivative of inner energy by pressure at constant T";
        SI.SpecificHeatCapacity duTp
          "Derivative of inner energy by temperature at constant p";
        annotation (Documentation(info="<html>
<h4>Model description</h4>
<p>
A base class for medium property models which use pressure and temperature as dynamic states.
This is a reasonable model for fluids that can also be in the gas and
liquid regions, but never in the two-phase region.
</p>
</html>"));
      end ThermoProperties_pT;

      record ThermoProperties_dT
        "Thermodynamic property data for density d and temperature T as dynamic states"

        extends Modelica.Icons.Record;
        SI.Pressure p(
          min=1.0,
          max=1.0e9,
          nominal=1.0e5) "Pressure";
        SI.SpecificEnthalpy h(
          min=-1.0e8,
          max=1.0e8,
          nominal=1.0e6) "Specific enthalpy";
        SI.SpecificEnergy u(
          min=-1.0e8,
          max=1.0e8,
          nominal=1.0e6) "Specific inner energy";
        SI.SpecificEntropy s(
          min=-1.0e6,
          max=1.0e6,
          nominal=1.0e3) "Specific entropy";
        SI.SpecificHeatCapacity cp(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Heat capacity at constant pressure";
        SI.SpecificHeatCapacity cv(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Heat capacity at constant volume";
        SI.SpecificHeatCapacity R(
          min=1.0,
          max=1.0e6,
          nominal=1000.0) "Gas constant";
        SI.RatioOfSpecificHeatCapacities kappa "Ratio of cp/cv";
        SI.Velocity a(
          min=1.0,
          max=10000.0,
          nominal=300.0) "Speed of sound";
        Real dudT(unit="m5/(kg.s2)")
          "Derivative of inner energy by density at constant T";
        annotation (Documentation(info="<html>
<h4>Model description</h4>
<p>
A base class for medium property models which use density and temperature as dynamic states.
This is a reasonable model for fluids that can be in the gas, liquid
and two-phase region. The model is numerically not well suited for
liquids except if the pressure is always above approx. 80% of the
critical pressure.
</p>
</html>"));
      end ThermoProperties_dT;

      //   record GibbsDerivs

      //     "Derivatives of dimensionless Gibbs-function w.r.t. dimensionless pressure and temperature"
      //     extends Modelica.Icons.Record;
      //     Real pi "Dimensionless pressure";
      //     Real tau "Dimensionless temperature";
      //     Real g "Dimensionless Gibbs-function";
      //     Real gpi "Derivative of g w.r.t. pi";
      //     Real gpipi "2nd derivative of g w.r.t. pi";
      //     Real gtau "Derivative of g w.r.t. tau";
      //     Real gtautau "2nd derivative of g w.r.t. tau";
      //     Real gtaupi "Mixed derivative of g w.r.t. pi and tau";
      //   end GibbsDerivs;

      //   record HelmholtzDerivs

      //     "Derivatives of dimensionless Helmholtz-function w.r.t. dimensionless pressure, density and temperature"
      //     extends Modelica.Icons.Record;
      //     Real delta "Dimensionless density";
      //     Real tau "Dimensionless temperature";
      //     Real f "Dimensionless Helmholtz-function";
      //     Real fdelta "Derivative of f w.r.t. delta";
      //     Real fdeltadelta "2nd derivative of f w.r.t. delta";
      //     Real ftau "Derivative of f w.r.t. tau";
      //     Real ftautau "2nd derivative of f w.r.t. tau";
      //     Real fdeltatau "Mixed derivative of f w.r.t. delta and tau";
      //   end HelmholtzDerivs;

      record TransportProps "Record with transport properties"
        extends Modelica.Icons.Record;
        SI.DynamicViscosity eta;
        SI.ThermalConductivity lam;
      end TransportProps;

      function gibbsToProps_ph
        "Calculate property record for pressure and specific enthalpy as states from dimensionless Gibbs function"

        extends Modelica.Icons.Function;
        input GibbsDerivs g "Dimensionless derivatives of Gibbs function";
        output ThermoProperties_ph pro
          "Property record for pressure and specific enthalpy as dynamic states";
      protected
        Real vt(unit="m3.kg-1.K-1")
          "Derivative of specific volume w.r.t. temperature";
        Real vp(unit="m4.kg-2.s2")
          "Derivative of specific volume w.r.t. pressure";
      algorithm
        pro.T := g.T;
        pro.R := g.R;
        pro.d := g.p/(pro.R*pro.T*g.pi*g.gpi);
        pro.u := g.T*g.R*(g.tau*g.gtau - g.pi*g.gpi);
        pro.s := pro.R*(g.tau*g.gtau - g.g);
        pro.cp := -pro.R*g.tau*g.tau*g.gtautau;
        pro.cv := pro.R*(-g.tau*g.tau*g.gtautau + (g.gpi - g.tau*g.gtaupi)*(g.gpi
           - g.tau*g.gtaupi)/(g.gpipi));
        pro.a := abs(g.R*g.T*(g.gpi*g.gpi/((g.gpi - g.tau*g.gtaupi)*(g.gpi - g.tau
          *g.gtaupi)/(g.tau*g.tau*g.gtautau) - g.gpipi)))^0.5;
        vt := g.R/g.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
        vp := g.R*g.T/(g.p*g.p)*g.pi*g.pi*g.gpipi;
        pro.kappa := -1/(pro.d*g.p)*pro.cp/(vp*pro.cp + vt*vt*g.T);
        pro.ddhp := -pro.d*pro.d*vt/(pro.cp);
        pro.ddph := -pro.d*pro.d*(vp*pro.cp - vt/pro.d + g.T*vt*vt)/pro.cp;
        pro.duph := -1/pro.d + g.p/(pro.d*pro.d)*pro.ddph;
        pro.duhp := 1 + g.p/(pro.d*pro.d)*pro.ddhp;
      end gibbsToProps_ph;

      function gibbsToBoundaryProps
        "Calculate phase boundary property record from dimensionless Gibbs function"

        extends Modelica.Icons.Function;
        input GibbsDerivs g "Dimensionless derivatives of Gibbs function";
        output PhaseBoundaryProperties sat "Phase boundary properties";
      protected
        Real vt(unit="m3.kg-1.K-1")
          "Derivative of specific volume w.r.t. temperature";
        Real vp(unit="m4.kg-2.s2")
          "Derivative of specific volume w.r.t. pressure";
      algorithm
        sat.d := g.p/(g.R*g.T*g.pi*g.gpi);
        sat.h := g.R*g.T*g.tau*g.gtau;
        sat.u := g.T*g.R*(g.tau*g.gtau - g.pi*g.gpi);
        sat.s := g.R*(g.tau*g.gtau - g.g);
        sat.cp := -g.R*g.tau*g.tau*g.gtautau;
        sat.cv := g.R*(-g.tau*g.tau*g.gtautau + (g.gpi - g.tau*g.gtaupi)*(g.gpi
           - g.tau*g.gtaupi)/(g.gpipi));
        vt := g.R/g.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
        vp := g.R*g.T/(g.p*g.p)*g.pi*g.pi*g.gpipi;
        // sat.kappa := -1/(sat.d*g.p)*sat.cp/(vp*sat.cp + vt*vt*g.T);
        sat.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
        sat.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
      end gibbsToBoundaryProps;

      function gibbsToProps_dT
        "Calculate property record for density and temperature as states from dimensionless Gibbs function"

        extends Modelica.Icons.Function;
        input GibbsDerivs g "Dimensionless derivatives of Gibbs function";
        output ThermoProperties_dT pro
          "Property record for density and temperature as dynamic states";
      protected
        Real vt(unit="m3.kg-1.K-1")
          "Derivative of specific volume w.r.t. temperature";
        Real vp(unit="m4.kg-2.s2")
          "Derivative of specific volume w.r.t. pressure";
        Modelica.SIunits.Density d;
      algorithm
        pro.R := g.R;
        pro.p := g.p;
        pro.u := g.T*g.R*(g.tau*g.gtau - g.pi*g.gpi);
        pro.h := g.R*g.T*g.tau*g.gtau;
        pro.s := pro.R*(g.tau*g.gtau - g.g);
        pro.cp := -pro.R*g.tau*g.tau*g.gtautau;
        pro.cv := pro.R*(-g.tau*g.tau*g.gtautau + (g.gpi - g.tau*g.gtaupi)*(g.gpi
           - g.tau*g.gtaupi)/g.gpipi);
        vt := g.R/g.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
        vp := g.R*g.T/(g.p*g.p)*g.pi*g.pi*g.gpipi;
        pro.kappa := -1/((g.p/(pro.R*g.T*g.pi*g.gpi))*g.p)*pro.cp/(vp*pro.cp + vt
          *vt*g.T);
        pro.a := abs(g.R*g.T*(g.gpi*g.gpi/((g.gpi - g.tau*g.gtaupi)*(g.gpi - g.tau
          *g.gtaupi)/(g.tau*g.tau*g.gtautau) - g.gpipi)))^0.5;

        d := g.p/(pro.R*g.T*g.pi*g.gpi);
        pro.dudT := (pro.p - g.T*vt/vp)/(d*d);
      end gibbsToProps_dT;

      function gibbsToProps_pT
        "Calculate property record for pressure and temperature as states from dimensionless Gibbs function"

        extends Modelica.Icons.Function;
        input GibbsDerivs g "Dimensionless derivatives of Gibbs function";
        output ThermoProperties_pT pro
          "Property record for pressure and temperature as dynamic states";
      protected
        Real vt(unit="m3.kg-1.K-1")
          "Derivative of specific volume w.r.t. temperature";
        Real vp(unit="m4.kg-2.s2")
          "Derivative of specific volume w.r.t. pressure";
      algorithm
        pro.R := g.R;
        pro.d := g.p/(pro.R*g.T*g.pi*g.gpi);
        pro.u := g.T*g.R*(g.tau*g.gtau - g.pi*g.gpi);
        pro.h := g.R*g.T*g.tau*g.gtau;
        pro.s := pro.R*(g.tau*g.gtau - g.g);
        pro.cp := -pro.R*g.tau*g.tau*g.gtautau;
        pro.cv := pro.R*(-g.tau*g.tau*g.gtautau + (g.gpi - g.tau*g.gtaupi)*(g.gpi
           - g.tau*g.gtaupi)/g.gpipi);
        vt := g.R/g.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
        vp := g.R*g.T/(g.p*g.p)*g.pi*g.pi*g.gpipi;
        pro.kappa := -1/(pro.d*g.p)*pro.cp/(vp*pro.cp + vt*vt*g.T);
        pro.a := abs(g.R*g.T*(g.gpi*g.gpi/((g.gpi - g.tau*g.gtaupi)*(g.gpi - g.tau
          *g.gtaupi)/(g.tau*g.tau*g.gtautau) - g.gpipi)))^0.5;
        pro.ddpT := -(pro.d*pro.d)*vp;
        pro.ddTp := -(pro.d*pro.d)*vt;
        pro.duTp := pro.cp - g.p*vt;
        pro.dupT := -g.T*vt - g.p*vp;
      end gibbsToProps_pT;

      function helmholtzToProps_ph
        "Calculate property record for pressure and specific enthalpy as states from dimensionless Helmholtz function"

        extends Modelica.Icons.Function;
        input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
        output ThermoProperties_ph pro
          "Property record for pressure and specific enthalpy as dynamic states";
      protected
        SI.Pressure p "Pressure";
        DerPressureByDensity pd "Derivative of pressure w.r.t. density";
        DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
        DerPressureBySpecificVolume pv
          "Derivative of pressure w.r.t. specific volume";
      algorithm
        pro.d := f.d;
        pro.T := f.T;
        pro.R := f.R;
        pro.s := f.R*(f.tau*f.ftau - f.f);
        pro.u := f.R*f.T*f.tau*f.ftau;
        p := pro.d*pro.R*pro.T*f.delta*f.fdelta;
        pd := f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
        pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
        pv := -pd*f.d*f.d;

        // calculating cp near the critical point may be troublesome (cp -> inf).
        pro.cp := f.R*(-f.tau*f.tau*f.ftautau + (f.delta*f.fdelta - f.delta*f.tau
          *f.fdeltatau)^2/(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));
        pro.cv := f.R*(-f.tau*f.tau*f.ftautau);
        pro.kappa := 1/(f.d*f.R*f.d*f.T*f.delta*f.fdelta)*((-pv*pro.cv + pt*pt*f.T)
          /(pro.cv));
        pro.a := abs(f.R*f.T*(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta
           - ((f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)*(f.delta*f.fdelta -
          f.delta*f.tau*f.fdeltatau))/(f.tau*f.tau*f.ftautau)))^0.5;
        pro.ddph := (f.d*(pro.cv*f.d + pt))/(f.d*f.d*pd*pro.cv + f.T*pt*pt);
        pro.ddhp := -f.d*f.d*pt/(f.d*f.d*pd*pro.cv + f.T*pt*pt);
        pro.duph := -1/pro.d + p/(pro.d*pro.d)*pro.ddph;
        pro.duhp := 1 + p/(pro.d*pro.d)*pro.ddhp;
      end helmholtzToProps_ph;

      function helmholtzToProps_pT
        "Calculate property record for pressure and temperature as states from dimensionless Helmholtz function"

        extends Modelica.Icons.Function;
        input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
        output ThermoProperties_pT pro
          "Property record for pressure and temperature as dynamic states";
      protected
        DerPressureByDensity pd "Derivative of pressure w.r.t. density";
        DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
        DerPressureBySpecificVolume pv
          "Derivative of pressure w.r.t. specific volume";
        IsobaricVolumeExpansionCoefficient alpha
          "Isobaric volume expansion coefficient";
        // beta in Bejan
        IsothermalCompressibility gamma "Isothermal compressibility";
        // kappa in Bejan
        SI.Pressure p "Pressure";
      algorithm
        pro.d := f.d;
        pro.R := f.R;
        pro.s := f.R*(f.tau*f.ftau - f.f);
        pro.h := f.R*f.T*(f.tau*f.ftau + f.delta*f.fdelta);
        pro.u := f.R*f.T*f.tau*f.ftau;
        pd := f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
        pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
        pv := -(f.d*f.d)*pd;
        alpha := -f.d*pt/pv;
        gamma := -f.d/pv;
        p := f.R*f.d*f.T*f.delta*f.fdelta;
        // calculating cp near the critical point may be troublesome (cp -> inf).
        pro.cp := f.R*(-f.tau*f.tau*f.ftautau + (f.delta*f.fdelta - f.delta*f.tau
          *f.fdeltatau)^2/(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));
        pro.cv := f.R*(-f.tau*f.tau*f.ftautau);
        pro.kappa := 1/(f.d*f.R*f.d*f.T*f.delta*f.fdelta)*((-pv*pro.cv + pt*pt*f.T)
          /(pro.cv));
        pro.a := abs(f.R*f.T*(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta
           - ((f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)*(f.delta*f.fdelta -
          f.delta*f.tau*f.fdeltatau))/(f.tau*f.tau*f.ftautau)))^0.5;
        pro.ddTp := -pt/pd;
        pro.ddpT := 1/pd;
        //problem with units in last two lines
        pro.dupT := gamma*p/f.d - alpha*f.T/f.d;
        pro.duTp := pro.cp - alpha*p/f.d;
      end helmholtzToProps_pT;

      function helmholtzToProps_dT
        "Calculate property record for density and temperature as states from dimensionless Helmholtz function"

        extends Modelica.Icons.Function;
        input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
        output ThermoProperties_dT pro
          "Property record for density and temperature as dynamic states";
      protected
        DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
        DerPressureBySpecificVolume pv "Derivative of pressure w.r.t. pressure";
      algorithm
        pro.p := f.R*f.d*f.T*f.delta*f.fdelta;
        pro.R := f.R;
        pro.s := f.R*(f.tau*f.ftau - f.f);
        pro.h := f.R*f.T*(f.tau*f.ftau + f.delta*f.fdelta);
        pro.u := f.R*f.T*f.tau*f.ftau;
        pv := -(f.d*f.d)*f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
        pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);

        // calculating cp near the critical point may be troublesome (cp -> inf).
        pro.cp := f.R*(-f.tau*f.tau*f.ftautau + (f.delta*f.fdelta - f.delta*f.tau
          *f.fdeltatau)^2/(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));
        pro.cv := f.R*(-f.tau*f.tau*f.ftautau);
        pro.kappa := 1/(f.d*pro.p)*((-pv*pro.cv + pt*pt*f.T)/(pro.cv));
        pro.a := abs(f.R*f.T*(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta
           - ((f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)*(f.delta*f.fdelta -
          f.delta*f.tau*f.fdeltatau))/(f.tau*f.tau*f.ftautau)))^0.5;
        pro.dudT := (pro.p - f.T*pt)/(f.d*f.d);
      end helmholtzToProps_dT;

      function TwoPhaseToProps_ph
        "Compute property record for pressure and specific enthalpy as states from saturation properties"

        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation property record";
        output ThermoProperties_ph pro
          "Property record for pressure and specific enthalpy as dynamic states";
      protected
        Real dht(unit="(J/kg)/K")
          "Derivative of specific enthalpy w.r.t. temperature";
        Real dhd(unit="(J/kg)/(kg/m3)")
          "Derivative of specific enthalpy w.r.t. density";
        Real detph(unit="m4.s4/(K.s8)") "Thermodynamic determinant";
      algorithm
        pro.d := sat.d;
        pro.T := sat.T;
        pro.u := sat.u;
        pro.s := sat.s;
        pro.cv := sat.cv;
        pro.R := sat.R;
        pro.cp := Modelica.Constants.inf;
        pro.kappa := -1/(sat.d*sat.p)*sat.dpT*sat.dpT*sat.T/sat.cv;
        pro.a := Modelica.Constants.inf;
        dht := sat.cv + sat.dpT/sat.d;
        dhd := -sat.T*sat.dpT/(sat.d*sat.d);
        detph := -sat.dpT*dhd;
        pro.ddph := dht/detph;
        pro.ddhp := -sat.dpT/detph;
      end TwoPhaseToProps_ph;

      function TwoPhaseToProps_dT
        "Compute property record for density and temperature as states from saturation properties"

        extends Modelica.Icons.Function;
        input SaturationProperties sat "Saturation properties";
        output ThermoProperties_dT pro
          "Property record for density and temperature as dynamic states";
      algorithm
        pro.p := sat.p;
        pro.h := sat.h;
        pro.u := sat.u;
        pro.s := sat.s;
        pro.cv := sat.cv;
        pro.cp := Modelica.Constants.inf;
        pro.R := sat.R;
        pro.kappa := -1/(sat.d*sat.p)*sat.dpT*sat.dpT*sat.T/sat.cv;
        pro.a := Modelica.Constants.inf;
        pro.dudT := (sat.p - sat.T*sat.dpT)/(sat.d*sat.d);
      end TwoPhaseToProps_dT;

    end ThermoFluidSpecial;

  public
    record SaturationProperties "Properties in the two phase region"
      extends Modelica.Icons.Record;
      SI.Temp_K T "Temperature";
      SI.Density d "Density";
      SI.Pressure p "Pressure";
      SI.SpecificEnergy u "Specific inner energy";
      SI.SpecificEnthalpy h "Specific enthalpy";
      SI.SpecificEntropy s "Specific entropy";
      SI.SpecificHeatCapacity cp "Heat capacity at constant pressure";
      SI.SpecificHeatCapacity cv "Heat capacity at constant volume";
      SI.SpecificHeatCapacity R "Gas constant";
      SI.RatioOfSpecificHeatCapacities kappa "Isentropic expansion coefficient";
      PhaseBoundaryProperties liq
        "Thermodynamic base properties on the boiling curve";
      PhaseBoundaryProperties vap
        "Thermodynamic base properties on the dew curve";
      Real dpT(unit="Pa/K")
        "Derivative of saturation pressure w.r.t. temperature";
      SI.MassFraction x "Vapour mass fraction";
    end SaturationProperties;

    record SaturationBoundaryProperties
      "Properties on both phase boundaries, including some derivatives"

      extends Modelica.Icons.Record;
      SI.Temp_K T "Saturation temperature";
      SI.Density dl "Liquid density";
      SI.Density dv "Vapour density";
      SI.SpecificEnthalpy hl "Liquid specific enthalpy";
      SI.SpecificEnthalpy hv "Vapour specific enthalpy";
      Real dTp "Derivative of temperature w.r.t. saturation pressure";
      Real ddldp "Derivative of density along boiling curve";
      Real ddvdp "Derivative of density along dew curve";
      Real dhldp "Derivative of specific enthalpy along boiling curve";
      Real dhvdp "Derivative of specific enthalpy along dew curve";
      SI.MassFraction x "Vapour mass fraction";
    end SaturationBoundaryProperties;

    record IF97BaseTwoPhase "Intermediate property data record for IF 97"
      extends Modelica.Icons.Record;
      Integer phase(start=0)
        "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
      Integer region(min=1, max=5) "IF 97 region";
      SI.Pressure p "Pressure";
      SI.Temperature T "Temperature";
      SI.SpecificEnthalpy h "Specific enthalpy";
      SI.SpecificHeatCapacity R "Gas constant";
      SI.SpecificHeatCapacity cp "Specific heat capacity";
      SI.SpecificHeatCapacity cv "Specific heat capacity";
      SI.Density rho "Density";
      SI.SpecificEntropy s "Specific entropy";
      DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      DerPressureByDensity pd "Derivative of pressure w.r.t. density";
      Real vt "Derivative of specific volume w.r.t. temperature";
      Real vp "Derivative of specific volume w.r.t. pressure";
      Real x "Dryness fraction";
      Real dpT "dp/dT derivative of saturation curve";
    end IF97BaseTwoPhase;

    record IF97PhaseBoundaryProperties
      "Thermodynamic base properties on the phase boundary for IF97 steam tables"

      extends Modelica.Icons.Record;
      Boolean region3boundary "True if boundary between 2-phase and region 3";
      SI.SpecificHeatCapacity R "Specific heat capacity";
      SI.Temperature T "Temperature";
      SI.Density d "Density";
      SI.SpecificEnthalpy h "Specific enthalpy";
      SI.SpecificEntropy s "Specific entropy";
      SI.SpecificHeatCapacity cp "Heat capacity at constant pressure";
      SI.SpecificHeatCapacity cv "Heat capacity at constant volume";
      DerPressureByTemperature dpT "dp/dT derivative of saturation curve";
      DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      DerPressureByDensity pd "Derivative of pressure w.r.t. density";
      Real vt(unit="m3/(kg.K)")
        "Derivative of specific volume w.r.t. temperature";
      Real vp(unit="m3/(kg.Pa)") "Derivative of specific volume w.r.t. pressure";
    end IF97PhaseBoundaryProperties;

    record GibbsDerivs
      "Derivatives of dimensionless Gibbs-function w.r.t. dimensionless pressure and temperature"

      extends Modelica.Icons.Record;
      SI.Pressure p "Pressure";
      SI.Temperature T "Temperature";
      SI.SpecificHeatCapacity R "Specific heat capacity";
      Real pi(unit="1") "Dimensionless pressure";
      Real tau(unit="1") "Dimensionless temperature";
      Real g(unit="1") "Dimensionless Gibbs-function";
      Real gpi(unit="1") "Derivative of g w.r.t. pi";
      Real gpipi(unit="1") "2nd derivative of g w.r.t. pi";
      Real gtau(unit="1") "Derivative of g w.r.t. tau";
      Real gtautau(unit="1") "2nd derivative of g w.r.t. tau";
      Real gtaupi(unit="1") "Mixed derivative of g w.r.t. pi and tau";
    end GibbsDerivs;

    record HelmholtzDerivs
      "Derivatives of dimensionless Helmholtz-function w.r.t. dimensionless pressure, density and temperature"
      extends Modelica.Icons.Record;
      SI.Density d "Density";
      SI.Temperature T "Temperature";
      SI.SpecificHeatCapacity R "Specific heat capacity";
      Real delta(unit="1") "Dimensionless density";
      Real tau(unit="1") "Dimensionless temperature";
      Real f(unit="1") "Dimensionless Helmholtz-function";
      Real fdelta(unit="1") "Derivative of f w.r.t. delta";
      Real fdeltadelta(unit="1") "2nd derivative of f w.r.t. delta";
      Real ftau(unit="1") "Derivative of f w.r.t. tau";
      Real ftautau(unit="1") "2nd derivative of f w.r.t. tau";
      Real fdeltatau(unit="1") "Mixed derivative of f w.r.t. delta and tau";
    end HelmholtzDerivs;

    record TwoPhaseTransportProps
      "Defines properties on both phase boundaries, needed in the two phase region"
      extends Modelica.Icons.Record;
      SI.Density d_vap "Density on the dew line";
      SI.Density d_liq "Density on the bubble line";
      SI.DynamicViscosity eta_vap "Dynamic viscosity on the dew line";
      SI.DynamicViscosity eta_liq "Dynamic viscosity on the bubble line";
      SI.ThermalConductivity lam_vap "Thermal conductivity on the dew line";
      SI.ThermalConductivity lam_liq "Thermal conductivity on the bubble line";
      SI.SpecificHeatCapacity cp_vap "Cp on the dew line";
      SI.SpecificHeatCapacity cp_liq "Cp on the bubble line";
      SI.MassFraction x "Steam quality";
    end TwoPhaseTransportProps;

    record PhaseBoundaryProperties
      "Thermodynamic base properties on the phase boundary"
      extends Modelica.Icons.Record;
      SI.Density d "Density";
      SI.SpecificEnthalpy h "Specific enthalpy";
      SI.SpecificEnergy u "Inner energy";
      SI.SpecificEntropy s "Specific entropy";
      SI.SpecificHeatCapacity cp "Heat capacity at constant pressure";
      SI.SpecificHeatCapacity cv "Heat capacity at constant volume";
      DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      DerPressureByDensity pd "Derivative of pressure w.r.t. density";
    end PhaseBoundaryProperties;

    record NewtonDerivatives_ph
      "Derivatives for fast inverse calculations of Helmholtz functions: p & h"

      extends Modelica.Icons.Record;
      SI.Pressure p "Pressure";
      SI.SpecificEnthalpy h "Specific enthalpy";
      DerPressureByDensity pd "Derivative of pressure w.r.t. density";
      DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      Real hd "Derivative of specific enthalpy w.r.t. density";
      Real ht "Derivative of specific enthalpy w.r.t. temperature";
    end NewtonDerivatives_ph;

    record NewtonDerivatives_ps
      "Derivatives for fast inverse calculation of Helmholtz functions: p & s"

      extends Modelica.Icons.Record;
      SI.Pressure p "Pressure";
      SI.SpecificEntropy s "Specific entropy";
      DerPressureByDensity pd "Derivative of pressure w.r.t. density";
      DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      Real sd "Derivative of specific entropy w.r.t. density";
      Real st "Derivative of specific entropy w.r.t. temperature";
    end NewtonDerivatives_ps;

    record NewtonDerivatives_pT
      "Derivatives for fast inverse calculations of Helmholtz functions:p & T"

      extends Modelica.Icons.Record;
      SI.Pressure p "Pressure";
      DerPressureByDensity pd "Derivative of pressure w.r.t. density";
    end NewtonDerivatives_pT;

    record ExtraDerivatives "Additional thermodynamic derivatives"
      extends Modelica.Icons.Record;
      IsentropicExponent kappa "Isentropic expansion coefficient";
      // k in Bejan
      IsenthalpicExponent theta "Isenthalpic exponent";
      // same as kappa, except derivative at const h
      IsobaricVolumeExpansionCoefficient alpha
        "Isobaric volume expansion coefficient";
      // beta in Bejan
      IsochoricPressureCoefficient beta "Isochoric pressure coefficient";
      // kT in Bejan
      IsothermalCompressibility gamma "Isothermal compressibility";
      // kappa in Bejan
      JouleThomsonCoefficient mu "Joule-Thomson coefficient";
      // mu_J in Bejan
    end ExtraDerivatives;

    record BridgmansTables
      "Calculates all entries in Bridgmans tables if first seven variables given"
      extends Modelica.Icons.Record;
      // the first 7 need to calculated in a function!
      SI.SpecificVolume v "Specific volume";
      SI.Pressure p "Pressure";
      SI.Temperature T "Temperature";
      SI.SpecificEntropy s "Specific entropy";
      SI.SpecificHeatCapacity cp "Heat capacity at constant pressure";
      IsobaricVolumeExpansionCoefficient alpha
        "Isobaric volume expansion coefficient";
      // beta in Bejan
      IsothermalCompressibility gamma "Isothermal compressibility";
      // kappa in Bejan
      // Derivatives at constant pressure
      Real dTp=1 "Coefficient in Bridgmans table, see info for usage";
      Real dpT=-dTp "Coefficient in Bridgmans table, see info for usage";
      Real dvp=alpha*v "Coefficient in Bridgmans table, see info for usage";
      Real dpv=-dvp "Coefficient in Bridgmans table, see info for usage";
      Real dsp=cp/T "Coefficient in Bridgmans table, see info for usage";
      Real dps=-dsp "Coefficient in Bridgmans table, see info for usage";
      Real dup=cp - alpha*p*v
        "Coefficient in Bridgmans table, see info for usage";
      Real dpu=-dup "Coefficient in Bridgmans table, see info for usage";
      Real dhp=cp "Coefficient in Bridgmans table, see info for usage";
      Real dph=-dhp "Coefficient in Bridgmans table, see info for usage";
      Real dfp=-s - alpha*p*v
        "Coefficient in Bridgmans table, see info for usage";
      Real dpf=-dfp "Coefficient in Bridgmans table, see info for usage";
      Real dgp=-s "Coefficient in Bridgmans table, see info for usage";
      Real dpg=-dgp "Coefficient in Bridgmans table, see info for usage";
      // Derivatives at constant Temperature
      Real dvT=gamma*v "Coefficient in Bridgmans table, see info for usage";
      Real dTv=-dvT "Coefficient in Bridgmans table, see info for usage";
      Real dsT=alpha*v "Coefficient in Bridgmans table, see info for usage";
      Real dTs=-dsT "Coefficient in Bridgmans table, see info for usage";
      Real duT=alpha*T*v - gamma*p*v
        "Coefficient in Bridgmans table, see info for usage";
      Real dTu=-duT "Coefficient in Bridgmans table, see info for usage";
      Real dhT=-v + alpha*T*v
        "Coefficient in Bridgmans table, see info for usage";
      Real dTh=-dhT "Coefficient in Bridgmans table, see info for usage";
      Real dfT=-gamma*p*v "Coefficient in Bridgmans table, see info for usage";
      Real dTf=-dfT "Coefficient in Bridgmans table, see info for usage";
      Real dgT=-v "Coefficient in Bridgmans table, see info for usage";
      Real dTg=-dgT "Coefficient in Bridgmans table, see info for usage";
      // Derivatives at constant v
      Real dsv=alpha*alpha*v*v - gamma*v*cp/T
        "Coefficient in Bridgmans table, see info for usage";
      Real dvs=-dsv "Coefficient in Bridgmans table, see info for usage";
      Real duv=T*alpha*alpha*v*v - gamma*v*cp
        "Coefficient in Bridgmans table, see info for usage";
      Real dvu=-duv "Coefficient in Bridgmans table, see info for usage";
      Real dhv=T*alpha*alpha*v*v - alpha*v*v - gamma*v*cp
        "Coefficient in Bridgmans table, see info for usage";
      Real dvh=-dhv "Coefficient in Bridgmans table, see info for usage";
      Real dfv=gamma*v*s "Coefficient in Bridgmans table, see info for usage";
      Real dvf=-dfv "Coefficient in Bridgmans table, see info for usage";
      Real dgv=gamma*v*s - alpha*v*v
        "Coefficient in Bridgmans table, see info for usage";
      Real dvg=-dgv "Coefficient in Bridgmans table, see info for usage";
      // Derivatives at constant s
      Real dus=dsv*p "Coefficient in Bridgmans table, see info for usage";
      Real dsu=-dus "Coefficient in Bridgmans table, see info for usage";
      Real dhs=-v*cp/T "Coefficient in Bridgmans table, see info for usage";
      Real dsh=-dhs "Coefficient in Bridgmans table, see info for usage";
      Real dfs=alpha*v*s + dus
        "Coefficient in Bridgmans table, see info for usage";
      Real dsf=-dfs "Coefficient in Bridgmans table, see info for usage";
      Real dgs=alpha*v*s - v*cp/T
        "Coefficient in Bridgmans table, see info for usage";
      Real dsg=-dgs "Coefficient in Bridgmans table, see info for usage";
      // Derivatives at constant u
      Real dhu=p*alpha*v*v + gamma*v*cp*p - v*cp - p*T*alpha*alpha*v*v
        "Coefficient in Bridgmans table, see info for usage";
      Real duh=-dhu "Coefficient in Bridgmans table, see info for usage";
      Real dfu=s*T*alpha*v - gamma*v*cp*p - gamma*v*s*p + p*T*alpha*alpha*v*v
        "Coefficient in Bridgmans table, see info for usage";
      Real duf=-dfu "Coefficient in Bridgmans table, see info for usage";
      Real dgu=alpha*v*v*p + alpha*v*s*T - v*cp - gamma*v*s*p
        "Coefficient in Bridgmans table, see info for usage";
      Real dug=-dgu "Coefficient in Bridgmans table, see info for usage";
      //  Derivatives at constant h
      Real dfh=(s - v*alpha*p)*(v - v*alpha*T) - gamma*v*cp*p
        "Coefficient in Bridgmans table, see info for usage";
      Real dhf=-dfh "Coefficient in Bridgmans table, see info for usage";
      Real dgh=alpha*v*s*T - v*(s + cp)
        "Coefficient in Bridgmans table, see info for usage";
      Real dhg=-dgh "Coefficient in Bridgmans table, see info for usage";
      // Derivatives at constant g
      Real dfg=gamma*v*s*p - v*s - alpha*v*v*p
        "Coefficient in Bridgmans table, see info for usage";
      Real dgf=-dfg "Coefficient in Bridgmans table, see info for usage";
      annotation (Documentation(info="<html>
<p>
Important: the phase equilibrium conditions are not yet considered.
this means that Bridgman's tables do not yet work in the two phase region.
Some derivatives are 0 or infinity anyways.
Idea: Do not use the values in Bridgmans table directly, all
derivatives are calculated as the quotient of two entries in the
table. The last letter indicates which variable is held constant in
taking the derivative. The second letters are the two variables
involved in the derivative and the first letter is always a d to remind
of differentiation.
</p>

<pre>
Example 1: Get the derivative of specific entropy s w.r.t. Temperature at
constant specific volume (between identical to constant density)
constant volume  --> last letter v
Temperature      --> second letter T
Specific entropy --> second letter s
--> the needed value is dsv/dTv
Known variables:
Temperature T
pressure p
specific volume v
specific inner energy u
specific enthalpy h
specific entropy s
specific Helmholtz energy f
specific gibbs enthalpy g
Not included but useful:
density d
In order to convert derivatives involving density use the following
rules:
at constant density == at constant specific volume
ddx/dyx = -d*d*dvx/dyx with y,x any of T,p,u,h,s,f,g
dyx/ddx = -1/(d*d)dyx/dvx with y,x any of T,p,u,h,s,f,g
Usage example assuming water as the medium:
model BridgmansTablesForWater
extends ThermoFluid.BaseClasses.MediumModels.Water.WaterSteamMedium_ph;
Real derOfsByTAtConstantv \"derivative of sp. entropy by temperature at constant sp. volume\"
ThermoFluid.BaseClasses.MediumModels.Common.ExtraDerivatives dpro;
ThermoFluid.BaseClasses.MediumModels.Common.BridgmansTables bt;
equation
dpro = ThermoFluid.BaseClasses.MediumModels.SteamIF97.extraDerivs_pT(p[1],T[1]);
bt.p = p[1];
bt.T = T[1];
bt.v = 1/pro[1].d;
bt.s = pro[1].s;
bt.cp = pro[1].cp;
bt.alpha = dpro.alpha;
bt.gamma = dpro.gamma;
derOfsByTAtConstantv =  bt.dsv/bt.dTv;
                ...
end BridgmansTablesForWater;
                </pre>

                </html>"));
    end BridgmansTables;

    record FundamentalConstants "Constants of the medium"
      extends Modelica.Icons.Record;
      Modelica.SIunits.MolarHeatCapacity R_bar;
      Modelica.SIunits.SpecificHeatCapacity R;
      Modelica.SIunits.MolarMass MM;
      Modelica.SIunits.MolarDensity rhored;
      Modelica.SIunits.Temperature Tred;
      Modelica.SIunits.AbsolutePressure pred;
      Modelica.SIunits.SpecificEnthalpy h_off;
      Modelica.SIunits.SpecificEntropy s_off;
    end FundamentalConstants;

    record AuxiliaryProperties "Intermediate property data record"
      extends Modelica.Icons.Record;
      SI.Pressure p "Pressure";
      SI.Temperature T "Temperature";
      SI.SpecificEnthalpy h "Specific enthalpy";
      SI.SpecificHeatCapacity R "Gas constant";
      SI.SpecificHeatCapacity cp "Specific heat capacity";
      SI.SpecificHeatCapacity cv "Specific heat capacity";
      SI.Density rho "Density";
      SI.SpecificEntropy s "Specific entropy";
      SI.DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      SI.DerPressureByDensity pd "Derivative of pressure w.r.t. density";
      Real vt "Derivative of specific volume w.r.t. temperature";
      Real vp "Derivative of specific volume w.r.t. pressure";
    end AuxiliaryProperties;

    record GibbsDerivs2
      "Derivatives of Gibbs function w.r.t. pressure and temperature"

      extends Modelica.Icons.Record;
      SI.Pressure p "Pressure";
      SI.Temperature T "Temperature";
      SI.SpecificHeatCapacity R "Specific heat capacity";
      Real pi(unit="1") "Dimensionless pressure";
      Real theta(unit="1") "Dimensionless temperature";
      Real g(unit="J/kg") "Gibbs function";
      Real gp(unit="m3/kg") "Derivative of g w.r.t. p";
      Real gpp(unit="m3/(kg.Pa)") "2nd derivative of g w.r.t. p";
      Real gT(unit="J/(kg.K)") "Derivative of g w.r.t. T";
      Real gTT(unit="J/(kg.K2)") "2nd derivative of g w.r.t. T";
      Real gTp(unit="m3/(kg.K)") "Mixed derivative of g w.r.t. T and p";
    end GibbsDerivs2;

    record NewtonDerivatives_dT
      "Derivatives for fast inverse calculations of Gibbs function"
      extends Modelica.Icons.Record;
      SI.SpecificVolume v "Specific volume";
      Real vp "Derivative of specific volume w.r.t. pressure";
    end NewtonDerivatives_dT;

    function gibbsToBridgmansTables
      "Calculates base coefficients for Bridgman's tables from gibbs enthalpy"

      extends Modelica.Icons.Function;
      input GibbsDerivs g "Dimensionless derivatives of Gibbs function";
      output SI.SpecificVolume v "Specific volume";
      output SI.Pressure p=g.p "Pressure";
      output SI.Temperature T=g.T "Temperature";
      output SI.SpecificEntropy s "Specific entropy";
      output SI.SpecificHeatCapacity cp "Heat capacity at constant pressure";
      output IsobaricVolumeExpansionCoefficient alpha
        "Isobaric volume expansion coefficient";
      // beta in Bejan
      output IsothermalCompressibility gamma "Isothermal compressibility";
      // kappa in Bejan
    protected
      Real vt(unit="m3/(kg.K)")
        "Derivative of specific volume w.r.t. temperature";
      Real vp(unit="m4.kg-2.s2") "Derivative of specific volume w.r.t. pressure";
    algorithm
      vt := g.R/g.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
      vp := g.R*g.T/(g.p*g.p)*g.pi*g.pi*g.gpipi;
      v := (g.R*g.T*g.pi*g.gpi)/g.p;
      s := g.R*(g.tau*g.gtau - g.g);
      cp := -g.R*g.tau*g.tau*g.gtautau;
      alpha := vt/v;
      gamma := -vp/v;
    end gibbsToBridgmansTables;

    function helmholtzToBridgmansTables
      "Calculates base coefficients for Bridgmans tables from Helmholtz energy"
      extends Modelica.Icons.Function;
      input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
      output SI.SpecificVolume v=1/f.d "Specific volume";
      output SI.Pressure p "Pressure";
      output SI.Temperature T=f.T "Temperature";
      output SI.SpecificEntropy s "Specific entropy";
      output SI.SpecificHeatCapacity cp "Heat capacity at constant pressure";
      output IsobaricVolumeExpansionCoefficient alpha
        "Isobaric volume expansion coefficient";
      // beta in Bejan
      output IsothermalCompressibility gamma "Isothermal compressibility";
      // kappa in Bejan
    protected
      DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      DerPressureBySpecificVolume pv
        "Derivative of pressure w.r.t. specific volume";
      SI.SpecificHeatCapacity cv "Isochoric specific heat capacity";
    algorithm
      p := f.R*f.d*f.T*f.delta*f.fdelta;
      pv := -(f.d*f.d)*f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
      pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
      s := f.R*(f.tau*f.ftau - f.f);
      alpha := -f.d*pt/pv;
      gamma := -f.d/pv;
      cp := f.R*(-f.tau*f.tau*f.ftautau + (f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)
        ^2/(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));
    end helmholtzToBridgmansTables;

    function gibbsToBoundaryProps
      "Calculate phase boundary property record from dimensionless Gibbs function"

      extends Modelica.Icons.Function;
      input GibbsDerivs g "Dimensionless derivatives of Gibbs function";
      output PhaseBoundaryProperties sat "Phase boundary properties";
    protected
      Real vt "Derivative of specific volume w.r.t. temperature";
      Real vp "Derivative of specific volume w.r.t. pressure";
    algorithm
      sat.d := g.p/(g.R*g.T*g.pi*g.gpi);
      sat.h := g.R*g.T*g.tau*g.gtau;
      sat.u := g.T*g.R*(g.tau*g.gtau - g.pi*g.gpi);
      sat.s := g.R*(g.tau*g.gtau - g.g);
      sat.cp := -g.R*g.tau*g.tau*g.gtautau;
      sat.cv := g.R*(-g.tau*g.tau*g.gtautau + (g.gpi - g.tau*g.gtaupi)*(g.gpi - g.tau
        *g.gtaupi)/(g.gpipi));
      vt := g.R/g.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
      vp := g.R*g.T/(g.p*g.p)*g.pi*g.pi*g.gpipi;
      // sat.kappa := -1/(sat.d*g.p)*sat.cp/(vp*sat.cp + vt*vt*g.T);
      sat.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
      sat.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
    end gibbsToBoundaryProps;

    function helmholtzToBoundaryProps
      "Calculate phase boundary property record from dimensionless Helmholtz function"

      extends Modelica.Icons.Function;
      input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
      output PhaseBoundaryProperties sat "Phase boundary property record";
    protected
      SI.Pressure p "Pressure";
    algorithm
      p := f.R*f.d*f.T*f.delta*f.fdelta;
      sat.d := f.d;
      sat.h := f.R*f.T*(f.tau*f.ftau + f.delta*f.fdelta);
      sat.s := f.R*(f.tau*f.ftau - f.f);
      sat.u := f.R*f.T*f.tau*f.ftau;
      sat.cp := f.R*(-f.tau*f.tau*f.ftautau + (f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)
        ^2/(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));
      sat.cv := f.R*(-f.tau*f.tau*f.ftautau);
      sat.pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
      sat.pd := f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
    end helmholtzToBoundaryProps;

    function cv2Phase
      "Compute isochoric specific heat capacity inside the two-phase region"

      extends Modelica.Icons.Function;
      input PhaseBoundaryProperties liq "Properties on the boiling curve";
      input PhaseBoundaryProperties vap "Properties on the condensation curve";
      input SI.MassFraction x "Vapour mass fraction";
      input SI.Temperature T "Temperature";
      input SI.Pressure p "Properties";
      output SI.SpecificHeatCapacity cv "Isochoric specific heat capacity";
    protected
      Real dpT "Derivative of pressure w.r.t. temperature";
      Real dxv "Derivative of vapour mass fraction w.r.t. specific volume";
      Real dvTl "Derivative of liquid specific volume w.r.t. temperature";
      Real dvTv "Derivative of vapour specific volume w.r.t. temperature";
      Real duTl "Derivative of liquid specific inner energy w.r.t. temperature";
      Real duTv "Derivative of vapour specific inner energy w.r.t. temperature";
      Real dxt "Derivative of vapour mass fraction w.r.t. temperature";
    algorithm
      dxv := if (liq.d <> vap.d) then liq.d*vap.d/(liq.d - vap.d) else 0.0;
      dpT := (vap.s - liq.s)*dxv;
      // wrong at critical point
      dvTl := (liq.pt - dpT)/liq.pd/liq.d/liq.d;
      dvTv := (vap.pt - dpT)/vap.pd/vap.d/vap.d;
      dxt := -dxv*(dvTl + x*(dvTv - dvTl));
      duTl := liq.cv + (T*liq.pt - p)*dvTl;
      duTv := vap.cv + (T*vap.pt - p)*dvTv;
      cv := duTl + x*(duTv - duTl) + dxt*(vap.u - liq.u);
    end cv2Phase;

    function cvdpT2Phase
      "Compute isochoric specific heat capacity inside the two-phase region and derivative of pressure w.r.t. temperature"

      extends Modelica.Icons.Function;
      input PhaseBoundaryProperties liq "Properties on the boiling curve";
      input PhaseBoundaryProperties vap "Properties on the condensation curve";
      input SI.MassFraction x "Vapour mass fraction";
      input SI.Temperature T "Temperature";
      input SI.Pressure p "Properties";
      output SI.SpecificHeatCapacity cv "Isochoric specific heat capacity";
      output Real dpT "Derivative of pressure w.r.t. temperature";
    protected
      Real dxv "Derivative of vapour mass fraction w.r.t. specific volume";
      Real dvTl "Derivative of liquid specific volume w.r.t. temperature";
      Real dvTv "Derivative of vapour specific volume w.r.t. temperature";
      Real duTl "Derivative of liquid specific inner energy w.r.t. temperature";
      Real duTv "Derivative of vapour specific inner energy w.r.t. temperature";
      Real dxt "Derivative of vapour mass fraction w.r.t. temperature";
    algorithm
      dxv := if (liq.d <> vap.d) then liq.d*vap.d/(liq.d - vap.d) else 0.0;
      dpT := (vap.s - liq.s)*dxv;
      // wrong at critical point
      dvTl := (liq.pt - dpT)/liq.pd/liq.d/liq.d;
      dvTv := (vap.pt - dpT)/vap.pd/vap.d/vap.d;
      dxt := -dxv*(dvTl + x*(dvTv - dvTl));
      duTl := liq.cv + (T*liq.pt - p)*dvTl;
      duTv := vap.cv + (T*vap.pt - p)*dvTv;
      cv := duTl + x*(duTv - duTl) + dxt*(vap.u - liq.u);
    end cvdpT2Phase;

    function gibbsToExtraDerivs
      "Compute additional thermodynamic derivatives from dimensionless Gibbs function"

      extends Modelica.Icons.Function;
      input GibbsDerivs g "Dimensionless derivatives of Gibbs function";
      output ExtraDerivatives dpro "Additional property derivatives";
    protected
      Real vt "Derivative of specific volume w.r.t. temperature";
      Real vp "Derivative of specific volume w.r.t. pressure";
      SI.Density d "Density";
      SI.SpecificVolume v "Specific volume";
      SI.SpecificHeatCapacity cv "Isochoric heat capacity";
      SI.SpecificHeatCapacity cp "Isobaric heat capacity";
    algorithm
      d := g.p/(g.R*g.T*g.pi*g.gpi);
      v := 1/d;
      vt := g.R/g.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
      vp := g.R*g.T/(g.p*g.p)*g.pi*g.pi*g.gpipi;
      cp := -g.R*g.tau*g.tau*g.gtautau;
      cv := g.R*(-g.tau*g.tau*g.gtautau + (g.gpi - g.tau*g.gtaupi)*(g.gpi - g.tau
        *g.gtaupi)/g.gpipi);
      dpro.kappa := -1/(d*g.p)*cp/(vp*cp + vt*vt*g.T);
      dpro.theta := cp/(d*g.p*(-vp*cp + vt*v - g.T*vt*vt));
      dpro.alpha := d*vt;
      dpro.beta := -vt/(g.p*vp);
      dpro.gamma := -d*vp;
      dpro.mu := -(v - g.T*vt)/cp;
    end gibbsToExtraDerivs;

    function helmholtzToExtraDerivs
      "Compute additional thermodynamic derivatives from dimensionless Helmholtz function"

      extends Modelica.Icons.Function;
      input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
      output ExtraDerivatives dpro "Additional property derivatives";
    protected
      SI.Pressure p "Pressure";
      SI.SpecificVolume v "Specific volume";
      DerPressureByTemperature pt "Derivative of pressure w.r.t. temperature";
      DerPressureBySpecificVolume pv
        "Derivative of pressure w.r.t. specific volume";
      SI.SpecificHeatCapacity cv "Isochoric specific heat capacity";
    algorithm
      v := 1/f.d;
      p := f.R*f.d*f.T*f.delta*f.fdelta;
      pv := -(f.d*f.d)*f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
      pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
      cv := f.R*(-f.tau*f.tau*f.ftautau);
      dpro.kappa := 1/(f.d*p)*((-pv*cv + pt*pt*f.T)/(cv));
      dpro.theta := -1/(f.d*p)*((-pv*cv + f.T*pt*pt)/(cv + pt*v));
      dpro.alpha := -f.d*pt/pv;
      dpro.beta := pt/p;
      dpro.gamma := -f.d/pv;
      dpro.mu := (v*pv + f.T*pt)/(pt*pt*f.T - pv*cv);
    end helmholtzToExtraDerivs;

    function Helmholtz_ph
      "Function to calculate analytic derivatives for computing d and t given p and h"
      extends Modelica.Icons.Function;
      input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
      output NewtonDerivatives_ph nderivs
        "Derivatives for Newton iteration to calculate d and t from p and h";
    protected
      SI.SpecificHeatCapacity cv "Isochoric heat capacity";
    algorithm
      cv := -f.R*(f.tau*f.tau*f.ftautau);
      nderivs.p := f.d*f.R*f.T*f.delta*f.fdelta;
      nderivs.h := f.R*f.T*(f.tau*f.ftau + f.delta*f.fdelta);
      nderivs.pd := f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
      nderivs.pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
      nderivs.ht := cv + nderivs.pt/f.d;
      nderivs.hd := (nderivs.pd - f.T*nderivs.pt/f.d)/f.d;
    end Helmholtz_ph;

    function Helmholtz_pT
      "Function to calculate analytic derivatives for computing d and t given p and t"

      extends Modelica.Icons.Function;
      input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
      output NewtonDerivatives_pT nderivs
        "Derivatives for Newton iteration to compute d and t from p and t";
    algorithm
      nderivs.p := f.d*f.R*f.T*f.delta*f.fdelta;
      nderivs.pd := f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
    end Helmholtz_pT;

    function Helmholtz_ps
      "Function to calculate analytic derivatives for computing d and t given p and s"

      extends Modelica.Icons.Function;
      input HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
      output NewtonDerivatives_ps nderivs
        "Derivatives for Newton iteration to compute d and t from p and s";
    protected
      SI.SpecificHeatCapacity cv "Isochoric heat capacity";
    algorithm
      cv := -f.R*(f.tau*f.tau*f.ftautau);
      nderivs.p := f.d*f.R*f.T*f.delta*f.fdelta;
      nderivs.s := f.R*(f.tau*f.ftau - f.f);
      nderivs.pd := f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
      nderivs.pt := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
      nderivs.st := cv/f.T;
      nderivs.sd := -nderivs.pt/(f.d*f.d);
    end Helmholtz_ps;

    function smoothStep
      "Approximation of a general step, such that the characteristic is continuous and differentiable"
      extends Modelica.Icons.Function;
      input Real x "Abscissa value";
      input Real y1 "Ordinate value for x > 0";
      input Real y2 "Ordinate value for x < 0";
      input Real x_small(min=0) = 1e-5
        "Approximation of step for -x_small <= x <= x_small; x_small > 0 required";
      output Real y "Ordinate value to approximate y = if x > 0 then y1 else y2";
    algorithm
      y := smooth(1, if x > x_small then y1 else if x < -x_small then y2 else if
        abs(x_small) > 0 then (x/x_small)*((x/x_small)^2 - 3)*(y2 - y1)/4 + (y1
         + y2)/2 else (y1 + y2)/2);

      annotation (
        Inline=true,
        smoothOrder=1,
        Documentation(revisions="<html>
<ul>
<li><em>April 29, 2008</em>
    by <a href=\"mailto:Martin.Otter@DLR.de\">Martin Otter</a>:<br>
    Designed and implemented.</li>
<li><em>August 12, 2008</em>
    by <a href=\"mailto:Michael.Sielemann@dlr.de\">Michael Sielemann</a>:<br>
    Minor modification to cover the limit case <code>x_small -> 0</code> without division by zero.</li>
</ul>
</html>",   info="<html>
<p>
This function is used to approximate the equation
</p>
<pre>
    y = <strong>if</strong> x &gt; 0 <strong>then</strong> y1 <strong>else</strong> y2;
</pre>

<p>
by a smooth characteristic, so that the expression is continuous and differentiable:
</p>

<pre>
   y = <strong>smooth</strong>(1, <strong>if</strong> x &gt;  x_small <strong>then</strong> y1 <strong>else</strong>
                 <strong>if</strong> x &lt; -x_small <strong>then</strong> y2 <strong>else</strong> f(y1, y2));
</pre>

<p>
In the region -x_small &lt; x &lt; x_small a 2nd order polynomial is used
for a smooth transition from y1 to y2.
</p>

<p>
If <strong>mass fractions</strong> X[:] are approximated with this function then this can be performed
for all <strong>nX</strong> mass fractions, instead of applying it for nX-1 mass fractions and computing
the last one by the mass fraction constraint sum(X)=1. The reason is that the approximating function has the
property that sum(X) = 1, provided sum(X_a) = sum(X_b) = 1
(and y1=X_a[i], y2=X_b[i]).
This can be shown by evaluating the approximating function in the abs(x) &lt; x_small
region (otherwise X is either X_a or X_b):
</p>

<pre>
    X[1]  = smoothStep(x, X_a[1] , X_b[1] , x_small);
    X[2]  = smoothStep(x, X_a[2] , X_b[2] , x_small);
       ...
    X[nX] = smoothStep(x, X_a[nX], X_b[nX], x_small);
</pre>

<p>
or
</p>

<pre>
    X[1]  = c*(X_a[1]  - X_b[1])  + (X_a[1]  + X_b[1])/2
    X[2]  = c*(X_a[2]  - X_b[2])  + (X_a[2]  + X_b[2])/2;
       ...
    X[nX] = c*(X_a[nX] - X_b[nX]) + (X_a[nX] + X_b[nX])/2;
    c     = (x/x_small)*((x/x_small)^2 - 3)/4
</pre>

<p>
Summing all mass fractions together results in
</p>

<pre>
    sum(X) = c*(sum(X_a) - sum(X_b)) + (sum(X_a) + sum(X_b))/2
           = c*(1 - 1) + (1 + 1)/2
           = 1
</pre>
</html>"));
    end smoothStep;

    function Gibbs2_ph
      "Function to calculate analytic derivatives for computing T given p and h"
      extends Modelica.Icons.Function;
      input myMedia.Common.GibbsDerivs2 g "Dimensionless derivatives of Gibbs function";
      output myMedia.Common.NewtonDerivatives_ph nderivs "Derivatives for Newton iteration to calculate d and t from p and h";

    algorithm
      nderivs.h := g.g - g.T*g.gT;
      nderivs.ht := -g.T*g.gTT;

      //dummy values - DO NOT USE
      nderivs.p := 0.0;
      nderivs.pd := 0.0;
      nderivs.pt := 0.0;
      nderivs.hd := 0.0;
    end Gibbs2_ph;

    function Gibbs2_dT
      "Function to calculate analytic derivatives for computing p given d and T"
      extends Modelica.Icons.Function;
      input myMedia.Common.GibbsDerivs2 g "Dimensionless derivatives of Gibbs function";
      output myMedia.Common.NewtonDerivatives_dT nderivs "Derivatives for Newton iteration to compute p from d and T";

    algorithm
      nderivs.v := g.gp;
      nderivs.vp := nderivs.v*g.gpp/g.gp;
    end Gibbs2_dT;

    function Gibbs2_ps
      "Function to calculate analytic derivatives for computing d and t given p and s"

      extends Modelica.Icons.Function;
      input myMedia.Common.GibbsDerivs2 g "Dimensionless derivatives of Gibbs function";
      output myMedia.Common.NewtonDerivatives_ps nderivs "Derivatives for Newton iteration to compute T from p and s";

    algorithm
      nderivs.s := -g.gT;
      nderivs.st := -g.gTT;

      //dummy values - DO NOT USE
      nderivs.p := 0.0;
      nderivs.pd := 0.0;
      nderivs.pt := 0.0;
      nderivs.sd := 0.0;
    end Gibbs2_ps;

    package OneNonLinearEquation
      "Determine solution of a non-linear algebraic equation in one unknown without derivatives in a reliable and efficient way"
      extends Modelica.Icons.Package;

      replaceable record f_nonlinear_Data
        "Data specific for function f_nonlinear"
        extends Modelica.Icons.Record;
      end f_nonlinear_Data;

      replaceable partial function f_nonlinear
        "Nonlinear algebraic equation in one unknown: y = f_nonlinear(x,p,X)"
        extends Modelica.Icons.Function;
        input Real x "Independent variable of function";
        input Real p=0.0 "Disregarded variables (here always used for pressure)";
        input Real[:] X=fill(0, 0)
          "Disregarded variables (her always used for composition)";
        input f_nonlinear_Data f_nonlinear_data
          "Additional data for the function";
        output Real y "= f_nonlinear(x)";
        // annotation(derivative(zeroDerivative=y)); // this must hold for all replaced functions
      end f_nonlinear;

      replaceable function solve
        "Solve f_nonlinear(x_zero)=y_zero; f_nonlinear(x_min) - y_zero and f_nonlinear(x_max)-y_zero must have different sign"
        import Modelica.Utilities.Streams.error;
        extends Modelica.Icons.Function;
        input Real y_zero
          "Determine x_zero, such that f_nonlinear(x_zero) = y_zero";
        input Real x_min "Minimum value of x";
        input Real x_max "Maximum value of x";
        input Real pressure=0.0
          "Disregarded variables (here always used for pressure)";
        input Real[:] X=fill(0, 0)
          "Disregarded variables (here always used for composition)";
        input f_nonlinear_Data f_nonlinear_data
          "Additional data for function f_nonlinear";
        input Real x_tol=100*Modelica.Constants.eps
          "Relative tolerance of the result";
        output Real x_zero "f_nonlinear(x_zero) = y_zero";
      protected
        constant Real eps=Modelica.Constants.eps "Machine epsilon";
        constant Real x_eps=1e-10
          "Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid";
        Real x_min2=x_min - x_eps;
        Real x_max2=x_max + x_eps;
        Real a=x_min2 "Current best minimum interval value";
        Real b=x_max2 "Current best maximum interval value";
        Real c "Intermediate point a <= c <= b";
        Real d;
        Real e "b - a";
        Real m;
        Real s;
        Real p;
        Real q;
        Real r;
        Real tol;
        Real fa "= f_nonlinear(a) - y_zero";
        Real fb "= f_nonlinear(b) - y_zero";
        Real fc;
        Boolean found=false;
      algorithm
        // Check that f(x_min) and f(x_max) have different sign
        fa := f_nonlinear(
                x_min2,
                pressure,
                X,
                f_nonlinear_data) - y_zero;
        fb := f_nonlinear(
                x_max2,
                pressure,
                X,
                f_nonlinear_data) - y_zero;
        fc := fb;
        if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
          error(
            "The arguments x_min and x_max to OneNonLinearEquation.solve(..)\n"
             + "do not bracket the root of the single non-linear equation:\n" +
            "  x_min  = " + String(x_min2) + "\n" + "  x_max  = " + String(x_max2)
             + "\n" + "  y_zero = " + String(y_zero) + "\n" +
            "  fa = f(x_min) - y_zero = " + String(fa) + "\n" +
            "  fb = f(x_max) - y_zero = " + String(fb) + "\n" +
            "fa and fb must have opposite sign which is not the case");
        end if;

        // Initialize variables
        c := a;
        fc := fa;
        e := b - a;
        d := e;

        // Search loop
        while not found loop
          if abs(fc) < abs(fb) then
            a := b;
            b := c;
            c := a;
            fa := fb;
            fb := fc;
            fc := fa;
          end if;

          tol := 2*eps*abs(b) + x_tol;
          m := (c - b)/2;

          if abs(m) <= tol or fb == 0.0 then
            // root found (interval is small enough)
            found := true;
            x_zero := b;
          else
            // Determine if a bisection is needed
            if abs(e) < tol or abs(fa) <= abs(fb) then
              e := m;
              d := e;
            else
              s := fb/fa;
              if a == c then
                // linear interpolation
                p := 2*m*s;
                q := 1 - s;
              else
                // inverse quadratic interpolation
                q := fa/fc;
                r := fb/fc;
                p := s*(2*m*q*(q - r) - (b - a)*(r - 1));
                q := (q - 1)*(r - 1)*(s - 1);
              end if;

              if p > 0 then
                q := -q;
              else
                p := -p;
              end if;

              s := e;
              e := d;
              if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then
                // interpolation successful
                d := p/q;
              else
                // use bi-section
                e := m;
                d := e;
              end if;
            end if;

            // Best guess value is defined as "a"
            a := b;
            fa := fb;
            b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol);
            fb := f_nonlinear(
                    b,
                    pressure,
                    X,
                    f_nonlinear_data) - y_zero;

            if fb > 0 and fc > 0 or fb < 0 and fc < 0 then
              // initialize variables
              c := a;
              fc := fa;
              e := b - a;
              d := e;
            end if;
          end if;
        end while;
      end solve;

      annotation (Documentation(info="<html>
<p>
This function should currently only be used in Modelica.Media,
since it might be replaced in the future by another strategy,
where the tool is responsible for the solution of the non-linear
equation.
</p>

<p>
This library determines the solution of one non-linear algebraic equation \"y=f(x)\"
in one unknown \"x\" in a reliable way. As input, the desired value y of the
non-linear function has to be given, as well as an interval x_min, x_max that
contains the solution, i.e., \"f(x_min) - y\" and \"f(x_max) - y\" must
have a different sign. If possible, a smaller interval is computed by
inverse quadratic interpolation (interpolating with a quadratic polynomial
through the last 3 points and computing the zero). If this fails,
bisection is used, which always reduces the interval by a factor of 2.
The inverse quadratic interpolation method has superlinear convergence.
This is roughly the same convergence rate as a globally convergent Newton
method, but without the need to compute derivatives of the non-linear
function. The solver function is a direct mapping of the Algol 60 procedure
\"zero\" to Modelica, from:
</p>

<dl>
<dt> Brent R.P.:</dt>
<dd> <strong>Algorithms for Minimization without derivatives</strong>.
     Prentice Hall, 1973, pp. 58-59.</dd>
</dl>

<p>
Due to current limitations of the
Modelica language (not possible to pass a function reference to a function),
the construction to use this solver on a user-defined function is a bit
complicated (this method is from Hans Olsson, Dassault Syst&egrave;mes AB). A user has to
provide a package in the following way:
</p>

<pre>
  <strong>package</strong> MyNonLinearSolver
    <strong>extends</strong> OneNonLinearEquation;

    <strong>redeclare record extends</strong> Data
      // Define data to be passed to user function
      ...
    <strong>end</strong> Data;

    <strong>redeclare function extends</strong> f_nonlinear
    <strong>algorithm</strong>
       // Compute the non-linear equation: y = f(x, Data)
    <strong>end</strong> f_nonlinear;

    // Dummy definition that has to be present for current Dymola
    <strong>redeclare function extends</strong> solve
    <strong>end</strong> solve;
  <strong>end</strong> MyNonLinearSolver;

  x_zero = MyNonLinearSolver.solve(y_zero, x_min, x_max, data=data);
</pre>
</html>"));
    end OneNonLinearEquation;
    annotation (Documentation(info="<html><h4>Package description</h4>
      <p>Package Modelica.Media.Common provides records and functions shared by many of the property sub-packages.
      High accuracy fluid property models share a lot of common structure, even if the actual models are different.
      Common data structures and computations shared by these property models are collected in this library.
   </p>

</html>",   revisions="<html>
      <ul>
      <li>First implemented: <em>July, 2000</em>
      by Hubertus Tummescheit
      for the ThermoFluid Library with help from Jonas Eborn and Falko Jens Wagner
      </li>
      <li>Code reorganization, enhanced documentation, additional functions: <em>December, 2002</em>
      by Hubertus Tummescheit and move to Modelica
                            properties library.</li>
      <li>Inclusion into Modelica.Media: September 2003</li>
      </ul>

      <address>Author: Hubertus Tummescheit,<br>
      Lund University<br>
      Department of Automatic Control<br>
      Box 118, 22100 Lund, Sweden<br>
      email: hubertus@control.lth.se
      </address>
</html>"));
  end Common;

  package Air "Medium models for air"
      extends Modelica.Icons.VariantsPackage;

    package SimpleAir "Air: Simple dry air model (0..100 degC)"
      extends Modelica.Icons.MaterialProperty;
      extends Interfaces.PartialSimpleIdealGasMedium(
        mediumName="SimpleAir",
        cp_const=1005.45,
        MM_const=0.0289651159,
        R_gas=Constants.R/0.0289651159,
        eta_const=1.82e-5,
        lambda_const=0.026,
        T_min=Cv.from_degC(0),
        T_max=Cv.from_degC(100),
        fluidConstants=airConstants,
        Temperature(min=Modelica.SIunits.Conversions.from_degC(0), max=
              Modelica.SIunits.Conversions.from_degC(100)));

      import Modelica.Constants;

      constant myMedia.Interfaces.Types.Basic.FluidConstants[nS] airConstants={myMedia.Interfaces.Types.Basic.FluidConstants(
              iupacName="simple air",
              casRegistryNumber="not a real substance",
              chemicalFormula="N2, O2",
              structureFormula="N2, O2",
              molarMass=myMedia.IdealGases.Common.SingleGasesData.N2.MM)} "Constant data for the fluid";

      annotation (Documentation(info="<html>
                            <h4>Simple Ideal gas air model for low temperatures</h4>
                            <p>This model demonstrates how to use the PartialSimpleIdealGas base class to build a
                            simple ideal gas model with a limited temperature validity range.</p>
                            </html>"));
    end SimpleAir;

    package DryAirNasa "Air: Detailed dry air model as ideal gas (200..6000 K)"
      extends Modelica.Icons.MaterialProperty;
      extends IdealGases.Common.SingleGasNasa(
        mediumName="Air",
        data=IdealGases.Common.SingleGasesData.Air,
        fluidConstants={IdealGases.Common.FluidData.N2});

      redeclare function dynamicViscosity
        "Return dynamic viscosity of dry air (simple polynomial, moisture influence small, valid from 123.15 K to 1273.15 K, outside of this range linear extrapolation is used)"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output DynamicViscosity eta "Dynamic viscosity";
        import ThermofluidStream.Media.myMedia.Incompressible.TableBased.Polynomials_Temp;
      algorithm
        eta := 1e-6*Polynomials_Temp.evaluateWithRange(
            {9.7391102886305869E-15,-3.1353724870333906E-11,4.3004876595642225E-08,
            -3.8228016291758240E-05,5.0427874367180762E-02,1.7239260139242528E+01},
            Cv.to_degC(123.15),
            Cv.to_degC(1273.15),
            Cv.to_degC(state.T));
        annotation (smoothOrder=2, Documentation(info="<html>
<p>Dynamic viscosity is computed from temperature using a simple polynomial for dry air. Range of validity is from 123.15 K to 1273.15 K. The influence of pressure is neglected.</p>
<p>Source: VDI Waermeatlas, 8th edition.</p>
</html>"));
      end dynamicViscosity;

      redeclare function thermalConductivity
        "Return thermal conductivity of dry air (simple polynomial, moisture influence small, valid from 123.15 K to 1273.15 K, outside of this range linear extrapolation is used)"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        input Integer method=1 "Dummy for compatibility reasons";
        output ThermalConductivity lambda "Thermal conductivity";
        import ThermofluidStream.Media.myMedia.Incompressible.TableBased.Polynomials_Temp;
        import Cv = Modelica.SIunits.Conversions;
      algorithm
        lambda := 1e-3*Polynomials_Temp.evaluateWithRange(
            {6.5691470817717812E-15,-3.4025961923050509E-11,5.3279284846303157E-08,
            -4.5340839289219472E-05,7.6129675309037664E-02,2.4169481088097051E+01},
            Cv.to_degC(123.15),
            Cv.to_degC(1273.15),
            Cv.to_degC(state.T));

        annotation (smoothOrder=2, Documentation(info="<html>
<p>Thermal conductivity is computed from temperature using a simple polynomial for dry air. Range of validity is from 123.15 K to 1273.15 K. The influence of pressure is neglected.</p>
<p>Source: VDI Waermeatlas, 8th edition.</p>
</html>"));
      end thermalConductivity;
      annotation (Documentation(info="<html>
<p>
    <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/Air.png\">
</p>

<p>
Ideal gas medium model for dry air based on the package <a href=\"modelica://Modelica.Media.IdealGases\">IdealGases</a> with additional functions for dynamic viscosity and thermal conductivity in a limited temperature range.
</p>
</html>"));
    end DryAirNasa;

    package ReferenceAir
      "ReferenceAir: Detailed dry air model with a large operating range (130 ... 2000 K, 0 ... 2000 MPa) based on Helmholtz equations of state"
      extends Modelica.Icons.VariantsPackage;
      import SI = Modelica.SIunits;

      constant myMedia.Interfaces.Types.TwoPhase.FluidConstants airConstants(
        chemicalFormula="N2+O2+Ar",
        structureFormula="N2+O2+Ar",
        casRegistryNumber="1",
        iupacName="air",
        molarMass=0.02896546,
        criticalTemperature=132.5306,
        criticalPressure=3.786e6,
        criticalMolarVolume=0.02896546/342.68,
        triplePointTemperature=63.05 "From N2",
        triplePointPressure=0.1253e5 "From N2",
        normalBoilingPoint=78.903,
        meltingPoint=0,
        acentricFactor=0.0335,
        dipoleMoment=0.0,
        hasCriticalData=true,
        hasFundamentalEquation=true,
        hasAccurateViscosityData=true,
        hasAcentricFactor=true);

    protected
      type MolarHeatCapacity = SI.MolarHeatCapacity (
          min=0,
          max=3.e5,
          nominal=3.e1,
          start=3.e1)
        "Type for molar heat capacity with medium specific attributes";
      type MolarDensity = Real (
          final quantity="MolarDensity",
          final unit="mol/m3",
          min=0);
      type IsothermalExpansionCoefficient = Real (
          min=0,
          max=1e8,
          unit="1");
    public
      package Air_ph
        "ReferenceAir.Air_ph: Detailed dry air model (130 ... 2000 K) explicit in p and h"
        extends Modelica.Icons.MaterialProperty;
        extends myMedia.Air.ReferenceAir.Air_Base(
          ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
          final ph_explicit=true,
          final dT_explicit=false,
          final pT_explicit=false);

        annotation (Documentation(info="<html>
<h4>Usage</h4>
<p>
The package Air_ph can be used as any other medium model (see <a href=\"modelica://Modelica.Media.UsersGuide\">User's Guide of Media Library</a> for further information).
</p>
</html>"));
      end Air_ph;

      package Air_pT
        "ReferenceAir.Air_pT: Detailed dry air model (130 ... 2000 K) explicit in p and T"
        extends Modelica.Icons.MaterialProperty;
        extends myMedia.Air.ReferenceAir.Air_Base(
          ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pT,
          final ph_explicit=false,
          final dT_explicit=false,
          final pT_explicit=true);

        annotation (Documentation(info="<html>
<h4>Usage</h4>
<p>
The package Air_pT can be used as any other medium model (see <a href=\"modelica://Modelica.Media.UsersGuide\">User's Guide of Media Library</a> for further information).
</p>
</html>"));
      end Air_pT;

    public
      package Air_dT
        "ReferenceAir.Air_dT: Detailed dry air model (130 ... 2000 K) explicit in d and T"
        extends Modelica.Icons.MaterialProperty;
        extends myMedia.Air.ReferenceAir.Air_Base(
          ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.dTX,
          final ph_explicit=false,
          final dT_explicit=true,
          final pT_explicit=false);

        annotation (Documentation(info="<html>
<h4>Usage</h4>
<p>
The package Air_dT can be used as any other medium model (see <a href=\"modelica://Modelica.Media.UsersGuide\">User's Guide of Media Library</a> for further information).
</p>
</html>"));
      end Air_dT;

    public
      partial package Air_Base
        "Properties of dry air calculated using the equation of state by Lemmon et. al."

        extends myMedia.Interfaces.PartialPureSubstance(
          mediumName="Air",
          substanceNames={"air"},
          singleState=false,
          SpecificEnthalpy(start=1.0e5, nominal=5.0e5),
          Density(start=1.0, nominal=1.2),
          AbsolutePressure(
            start=1e5,
            nominal=1e5,
            min=1.0,
            max=2000e6),
          Temperature(
            start=273.15,
            nominal=293.15,
            min=130,
            max=2000));

        constant Boolean ph_explicit
          "True if explicit in pressure and specific enthalpy";
        constant Boolean dT_explicit
          "True if explicit in density and temperature";
        constant Boolean pT_explicit
          "True if explicit in pressure and temperature";

        redeclare record extends ThermodynamicState "Thermodynamic state"
          SpecificEnthalpy h "Specific enthalpy";
          Density d "Density";
          Temperature T "Temperature";
          AbsolutePressure p "Pressure";
        end ThermodynamicState;

        redeclare model extends BaseProperties(
          h(stateSelect=if ph_explicit and preferredMediumStates then StateSelect.prefer
                 else StateSelect.default),
          d(stateSelect=if dT_explicit and preferredMediumStates then StateSelect.prefer
                 else StateSelect.default),
          T(stateSelect=if (pT_explicit or dT_explicit) and preferredMediumStates
                 then StateSelect.prefer else StateSelect.default),
          p(stateSelect=if (pT_explicit or ph_explicit) and preferredMediumStates
                 then StateSelect.prefer else StateSelect.default))
          "Base properties of air"

        equation
          MM = ReferenceAir.Air_Utilities.Basic.Constants.MM;
          if dT_explicit then
            p = pressure_dT(d, T);
            h = specificEnthalpy_dT(d, T);
          elseif ph_explicit then
            d = density_ph(p, h);
            T = temperature_ph(p, h);
          else
            h = specificEnthalpy_pT(p, T);
            d = density_pT(p, T);
          end if;
          u = h - p/d;
          R = Modelica.Constants.R;
          h = state.h;
          p = state.p;
          T = state.T;
          d = state.d;
        end BaseProperties;

        redeclare function density_ph
          "Computes density as a function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input SpecificEnthalpy h "Specific enthalpy";
          output Density d "Density";
        algorithm
          d := Air_Utilities.rho_ph(p, h);
          annotation (Inline=true);
        end density_ph;

        redeclare function temperature_ph
          "Computes temperature as a function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input SpecificEnthalpy h "Specific enthalpy";
          output Temperature T "Temperature";
        algorithm
          T := Air_Utilities.T_ph(p, h);
          annotation (Inline=true);
        end temperature_ph;

        redeclare function temperature_ps
          "Compute temperature from pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input SpecificEntropy s "Specific entropy";
          output Temperature T "Temperature";
        algorithm
          T := Air_Utilities.T_ps(p, s);
          annotation (Inline=true);
        end temperature_ps;

        redeclare function density_ps
          "Computes density as a function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input SpecificEntropy s "Specific entropy";
          output Density d "Density";
        algorithm
          d := Air_Utilities.rho_ps(p, s);
          annotation (Inline=true);
        end density_ps;

        redeclare function pressure_dT
          "Computes pressure as a function of density and temperature"
          extends Modelica.Icons.Function;
          input Density d "Density";
          input Temperature T "Temperature";
          output AbsolutePressure p "Pressure";
        algorithm
          p := Air_Utilities.p_dT(d, T);
          annotation (Inline=true);
        end pressure_dT;

        redeclare function specificEnthalpy_dT
          "Computes specific enthalpy as a function of density and temperature"
          extends Modelica.Icons.Function;
          input Density d "Density";
          input Temperature T "Temperature";
          output SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := Air_Utilities.h_dT(d, T);
          annotation (Inline=true);
        end specificEnthalpy_dT;

        redeclare function specificEnthalpy_pT
          "Computes specific enthalpy as a function of pressure and temperature"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input Temperature T "Temperature";
          output SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := Air_Utilities.h_pT(p, T);
          annotation (Inline=true);
        end specificEnthalpy_pT;

        redeclare function specificEnthalpy_ps
          "Computes specific enthalpy as a function of pressure and temperature"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input SpecificEntropy s "Specific entropy";
          output SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := Air_Utilities.h_ps(p, s);
          annotation (Inline=true);
        end specificEnthalpy_ps;

        redeclare function density_pT
          "Computes density as a function of pressure and temperature"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input Temperature T "Temperature";
          output Density d "Density";
        algorithm
          d := Air_Utilities.rho_pT(p, T);
          annotation (Inline=true);
        end density_pT;

        redeclare function extends dynamicViscosity
          "Return dynamic viscosity as a function of the thermodynamic state record"
        algorithm
          eta := Air_Utilities.Transport.eta_dT(state.d, state.T);
          annotation (Inline=true);
        end dynamicViscosity;

        redeclare function extends thermalConductivity
          "Thermal conductivity of air"
        algorithm
          lambda := Air_Utilities.Transport.lambda_dT(state.d, state.T);
          annotation (Inline=true);
        end thermalConductivity;

        redeclare function extends pressure "Return pressure of ideal gas"
        algorithm
          p := state.p;
          annotation (Inline=true);
        end pressure;

        redeclare function extends temperature "Return temperature of ideal gas"
        algorithm
          T := state.T;
          annotation (Inline=true);
        end temperature;

        redeclare function extends density "Return density of ideal gas"
        algorithm
          d := state.d;
          annotation (Inline=true);
        end density;

        redeclare function extends specificEnthalpy "Return specific enthalpy"
        algorithm
          h := state.h;
          annotation (Inline=true);
        end specificEnthalpy;

        redeclare function extends specificInternalEnergy
          "Return specific internal energy"
        algorithm
          u := state.h - state.p/state.d;
          annotation (Inline=true);
        end specificInternalEnergy;

        redeclare function extends specificGibbsEnergy
          "Return specific Gibbs energy"
        algorithm
          g := state.h - state.T*specificEntropy(state);
          annotation (Inline=true);
        end specificGibbsEnergy;

        redeclare function extends specificHelmholtzEnergy
          "Return specific Helmholtz energy"
        algorithm
          f := state.h - state.p/state.d - state.T*specificEntropy(state);
          annotation (Inline=true);
        end specificHelmholtzEnergy;

        redeclare function extends specificEntropy "Specific entropy of air"
        algorithm
          if dT_explicit then
            s := Air_Utilities.s_dT(state.d, state.T);
          elseif pT_explicit then
            s := Air_Utilities.s_pT(state.p, state.T);
          else
            s := Air_Utilities.s_ph(state.p, state.h);
          end if;
        end specificEntropy;

        redeclare function extends specificHeatCapacityCp
          "Specific heat capacity at constant pressure of air"

        algorithm
          if dT_explicit then
            cp := Air_Utilities.cp_dT(state.d, state.T);
          elseif pT_explicit then
            cp := Air_Utilities.cp_pT(state.p, state.T);
          else
            cp := Air_Utilities.cp_ph(state.p, state.h);
          end if;
        end specificHeatCapacityCp;

        redeclare function extends specificHeatCapacityCv
          "Specific heat capacity at constant volume of air"
        algorithm
          if dT_explicit then
            cv := Air_Utilities.cv_dT(state.d, state.T);
          elseif pT_explicit then
            cv := Air_Utilities.cv_pT(state.p, state.T);
          else
            cv := Air_Utilities.cv_ph(state.p, state.h);
          end if;
        end specificHeatCapacityCv;

        redeclare function extends isentropicExponent
          "Return isentropic exponent"
        algorithm
          if dT_explicit then
            gamma := Air_Utilities.isentropicExponent_dT(state.d, state.T);
          elseif pT_explicit then
            gamma := Air_Utilities.isentropicExponent_pT(state.p, state.T);
          else
            gamma := Air_Utilities.isentropicExponent_ph(state.p, state.h);
          end if;
        end isentropicExponent;

        redeclare function extends isothermalCompressibility
          "Isothermal compressibility of air"
        algorithm
          if dT_explicit then
            kappa := Air_Utilities.kappa_dT(state.d, state.T);
          elseif pT_explicit then
            kappa := Air_Utilities.kappa_pT(state.p, state.T);
          else
            kappa := Air_Utilities.kappa_ph(state.p, state.h);
          end if;
        end isothermalCompressibility;

        redeclare function extends isobaricExpansionCoefficient
          "Isobaric expansion coefficient of air"
        algorithm
          if dT_explicit then
            beta := Air_Utilities.beta_dT(state.d, state.T);
          elseif pT_explicit then
            beta := Air_Utilities.beta_pT(state.p, state.T);
          else
            beta := Air_Utilities.beta_ph(state.p, state.h);
          end if;
        end isobaricExpansionCoefficient;

        redeclare function extends velocityOfSound
          "Return velocity of sound as a function of the thermodynamic state record"
        algorithm
          if dT_explicit then
            a := Air_Utilities.velocityOfSound_dT(state.d, state.T);
          elseif pT_explicit then
            a := Air_Utilities.velocityOfSound_pT(state.p, state.T);
          else
            a := Air_Utilities.velocityOfSound_ph(state.p, state.h);
          end if;
        end velocityOfSound;

        redeclare function extends density_derh_p
          "Density derivative by specific enthalpy"
        algorithm
          ddhp := Air_Utilities.ddhp(state.p, state.h);
          annotation (Inline=true);
        end density_derh_p;

        redeclare function extends density_derp_h
          "Density derivative by pressure"
        algorithm
          ddph := Air_Utilities.ddph(state.p, state.h);
          annotation (Inline=true);
        end density_derp_h;

        //   redeclare function extends density_derT_p
        //     "Density derivative by temperature"
        //   algorithm
        //     ddTp := IF97_Utilities.ddTp(state.p, state.h, state.phase);
        //   end density_derT_p;
        //
        //   redeclare function extends density_derp_T
        //     "Density derivative by pressure"
        //   algorithm
        //     ddpT := IF97_Utilities.ddpT(state.p, state.h, state.phase);
        //   end density_derp_T;

        redeclare function extends setState_dTX
          "Return thermodynamic state of air as function of d and T"
        algorithm
          state := ThermodynamicState(
                  d=d,
                  T=T,
                  h=specificEnthalpy_dT(d, T),
                  p=pressure_dT(d, T));
          annotation (Inline=true);
        end setState_dTX;

        redeclare function extends setState_phX
          "Return thermodynamic state of air as function of p and h"
        algorithm
          state := ThermodynamicState(
                  d=density_ph(p, h),
                  T=temperature_ph(p, h),
                  h=h,
                  p=p);
          annotation (Inline=true);
        end setState_phX;

        redeclare function extends setState_psX
          "Return thermodynamic state of air as function of p and s"
        algorithm
          state := ThermodynamicState(
                  d=density_ps(p, s),
                  T=temperature_ps(p, s),
                  h=specificEnthalpy_ps(p, s),
                  p=p);
          annotation (Inline=true);
        end setState_psX;

        redeclare function extends setState_pTX
          "Return thermodynamic state of air as function of p and T"
        algorithm
          state := ThermodynamicState(
                  d=density_pT(p, T),
                  T=T,
                  h=specificEnthalpy_pT(p, T),
                  p=p);
          annotation (Inline=true);
        end setState_pTX;

        redeclare function extends setSmoothState
          "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
          import ThermofluidStream.Media.myMedia.Common.smoothStep;
        algorithm
          state := ThermodynamicState(
                  p=smoothStep(
                    x,
                    state_a.p,
                    state_b.p,
                    x_small),
                  h=smoothStep(
                    x,
                    state_a.h,
                    state_b.h,
                    x_small),
                  d=density_ph(smoothStep(
                    x,
                    state_a.p,
                    state_b.p,
                    x_small), smoothStep(
                    x,
                    state_a.h,
                    state_b.h,
                    x_small)),
                  T=temperature_ph(smoothStep(
                    x,
                    state_a.p,
                    state_b.p,
                    x_small), smoothStep(
                    x,
                    state_a.h,
                    state_b.h,
                    x_small)));
          annotation (Inline=true);
        end setSmoothState;

        redeclare function extends isentropicEnthalpy
        algorithm
          h_is := specificEnthalpy_psX(
                  p_downstream,
                  specificEntropy(refState),
                  reference_X);
          annotation (Inline=true);
        end isentropicEnthalpy;

        redeclare function extends molarMass "Return the molar mass of the medium"
        algorithm
          MM := myMedia.Air.ReferenceAir.airConstants.molarMass;
          annotation (Inline=true);
        end molarMass;

        annotation (Documentation(info="<html>
<p>
This model calculates medium properties
for air in the <strong>liquid</strong>, <strong>gas</strong> and <strong>two phase</strong> regions.
Three variable pairs can be the independent variables of the model:
</p>
<ol>
<li>Pressure <strong>p</strong> and specific enthalpy <strong>h</strong> are the most natural choice for general applications. This is the recommended choice for most general purpose applications.</li>
<li>Pressure <strong>p</strong> and temperature <strong>T</strong> are the most natural choice for applications where air is always in the same phase (liquid or gas).</li>
<li>Density <strong>d</strong> and temperature <strong>T</strong> are explicit variables of the Helmholtz function in the near-critical region and can be the best choice for applications with super-critical or near-critical states.</li>
</ol>
<p>
The following quantities are always computed:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Variable</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>T</td>
      <td>K</td>
      <td>temperature</td></tr>
  <tr><td>u</td>
      <td>J/kg</td>
      <td>specific internal energy</td></tr>
  <tr><td>d</td>
      <td>kg/m^3</td>
      <td>density</td></tr>
  <tr><td>p</td>
      <td>Pa</td>
      <td>pressure</td></tr>
  <tr><td>h</td>
      <td>J/kg</td>
      <td>specific enthalpy</td></tr>
</table>
<p>
In some cases additional medium properties are needed.
A component that needs these optional properties has to call
one of the functions listed in
<a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.OptionalProperties\">
Modelica.Media.UsersGuide.MediumUsage.OptionalProperties</a> and in
<a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.TwoPhase\">
Modelica.Media.UsersGuide.MediumUsage.TwoPhase</a>.
</p>
<p>Many further properties can be computed. Using the well-known Bridgman's Tables, all first partial derivatives of the standard thermodynamic variables can be computed easily.</p>
</html>"));
      end Air_Base;

      package Air_Utilities
        "Low level and utility computation for high accuracy dry air properties"
        extends Modelica.Icons.UtilitiesPackage;

        record iter = Inverses.accuracy;
        package Basic "Fundamental equation of state"
          extends Modelica.Icons.BasesPackage;

          constant myMedia.Common.FundamentalConstants Constants(
            final R_bar=8.31451,
            final R=287.117,
            final MM=28.9586E-003,
            final rhored=10447.7,
            final Tred=132.6312,
            final pred=3785020,
            h_off=1589557.62320524,
            s_off=6610.41237132543);

          function Helmholtz "Helmholtz equation of state"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";

          protected
            final constant Real[13] N_0={0.605719400E-007,-0.210274769E-004,-0.158860716E-003,
                -0.13841928076E002,0.17275266575E002,-0.195363420E-003,
                0.2490888032E001,0.791309509,0.212236768,0.197938904,
                0.2536365E002,0.1690741E002,0.8731279E002};
            final constant Real[19] N={0.118160747229,0.713116392079,-0.161824192067E001,
                0.714140178971E-001,-0.865421396646E-001,0.134211176704,
                0.112626704218E-001,-0.420533228842E-001,0.349008431982E-001,
                0.164957183186E-003,-0.101365037912,-0.173813690970,-0.472103183731E-001,
                -0.122523554253E-001,-0.146629609713,-0.316055879821E-001,
                0.233594806142E-003,0.148287891978E-001,-0.938782884667E-002};
            final constant Integer[19] i={1,1,1,2,3,3,4,4,4,6,1,3,5,6,1,3,11,1,3};
            final constant Real[19] j={0,0.33,1.01,0,0,0.15,0,0.2,0.35,1.35,1.6,
                0.8,0.95,1.25,3.6,6,3.25,3.5,15};
            final constant Integer[19] l={0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3};

          algorithm
            f.d := d;
            f.T := T;
            f.R := ReferenceAir.Air_Utilities.Basic.Constants.R;
            //Reduced density
            f.delta := d/(ReferenceAir.Air_Utilities.Basic.Constants.MM*
              ReferenceAir.Air_Utilities.Basic.Constants.rhored);
            //Reciprocal reduced temperature
            f.tau := ReferenceAir.Air_Utilities.Basic.Constants.Tred/T;

            //Dimensionless Helmholtz equation
            f.f := 0;
            //Ideal-gas part
            for k in 1:5 loop
              f.f := f.f + N_0[k]*f.tau^(k - 4);
            end for;
            f.f := f.f + log(f.delta) + N_0[6]*f.tau*sqrt(f.tau) + N_0[7]*log(f.tau)
               + N_0[8]*log(1 - exp(-N_0[11]*f.tau)) + N_0[9]*log(1 - exp(-N_0[12]
              *f.tau)) + N_0[10]*log(2/3 + exp(N_0[13]*f.tau));
            //Residual part
            for k in 1:10 loop
              f.f := f.f + N[k]*f.delta^i[k]*f.tau^j[k];
            end for;
            for k in 11:19 loop
              f.f := f.f + N[k]*f.delta^i[k]*f.tau^j[k]*exp(-f.delta^l[k]);
            end for;

            //First derivative of f w.r.t. delta
            f.fdelta := 0;
            //Ideal-gas part
            f.fdelta := 1/f.delta;
            //Residual part
            for k in 1:10 loop
              f.fdelta := f.fdelta + i[k]*N[k]*f.delta^(i[k] - 1)*f.tau^j[k];
            end for;
            for k in 11:19 loop
              f.fdelta := f.fdelta + N[k]*f.delta^(i[k] - 1)*f.tau^j[k]*exp(-f.delta
                ^l[k])*(i[k] - l[k]*f.delta^l[k]);
            end for;

            //Second derivative of f w.r.t. delta
            f.fdeltadelta := 0;
            //Ideal-gas part
            f.fdeltadelta := -1/f.delta^2;
            //Residual part
            for k in 1:10 loop
              f.fdeltadelta := f.fdeltadelta + i[k]*(i[k] - 1)*N[k]*f.delta^(i[k]
                 - 2)*f.tau^j[k];
            end for;
            for k in 11:19 loop
              f.fdeltadelta := f.fdeltadelta + N[k]*f.delta^(i[k] - 2)*f.tau^j[k]
                *exp(-f.delta^l[k])*((i[k] - l[k]*f.delta^l[k])*(i[k] - 1 - l[k]*
                f.delta^l[k]) - l[k]^2*f.delta^l[k]);
            end for;

            //First derivative of f w.r.t. tau
            f.ftau := 0;
            //Ideal-gas part
            for k in 1:5 loop
              f.ftau := f.ftau + (k - 4)*N_0[k]*f.tau^(k - 5);
            end for;
            f.ftau := f.ftau + 1.5*N_0[6]*sqrt(f.tau) + N_0[7]/f.tau + N_0[8]*N_0
              [11]/(exp(N_0[11]*f.tau) - 1) + N_0[9]*N_0[12]/(exp(N_0[12]*f.tau)
               - 1) + N_0[10]*N_0[13]/(2/3*exp(-N_0[13]*f.tau) + 1);
            //Residual part
            for k in 1:10 loop
              f.ftau := f.ftau + j[k]*N[k]*f.delta^i[k]*f.tau^(j[k] - 1);
            end for;
            for k in 11:19 loop
              f.ftau := f.ftau + j[k]*N[k]*f.delta^i[k]*f.tau^(j[k] - 1)*exp(-f.delta
                ^l[k]);
            end for;

            //Second derivative of f w.r.t. tau
            f.ftautau := 0;
            //Ideal-gas part
            for k in 1:3 loop
              f.ftautau := f.ftautau + (k - 4)*(k - 5)*N_0[k]*f.tau^(k - 6);
            end for;
            f.ftautau := f.ftautau + 0.75*N_0[6]/sqrt(f.tau) - N_0[7]/f.tau^2 -
              N_0[8]*N_0[11]^2*exp(N_0[11]*f.tau)/(exp(N_0[11]*f.tau) - 1)^2 -
              N_0[9]*N_0[12]^2*exp(N_0[12]*f.tau)/(exp(N_0[12]*f.tau) - 1)^2 + 2/
              3*N_0[10]*N_0[13]^2*exp(-N_0[13]*f.tau)/(2/3*exp(-N_0[13]*f.tau) +
              1)^2;
            //Residual part
            for k in 1:10 loop
              f.ftautau := f.ftautau + j[k]*(j[k] - 1)*N[k]*f.delta^i[k]*f.tau^(j[
                k] - 2);
            end for;
            for k in 11:19 loop
              f.ftautau := f.ftautau + j[k]*(j[k] - 1)*N[k]*f.delta^i[k]*f.tau^(j[
                k] - 2)*exp(-f.delta^l[k]);
            end for;

            //Mixed derivative of f w.r.t. delta and tau
            f.fdeltatau := 0;
            //Residual part (Ideal-gas part is zero)
            for k in 1:10 loop
              f.fdeltatau := f.fdeltatau + i[k]*j[k]*N[k]*f.delta^(i[k] - 1)*f.tau
                ^(j[k] - 1);
            end for;
            for k in 11:19 loop
              f.fdeltatau := f.fdeltatau + j[k]*N[k]*f.delta^(i[k] - 1)*f.tau^(j[
                k] - 1)*exp(-f.delta^l[k])*(i[k] - l[k]*f.delta^l[k]);
            end for;

          end Helmholtz;
        end Basic;

        package Inverses "Inverse function"
          extends Modelica.Icons.BasesPackage;

          record accuracy "Accuracy of the iterations"
            extends Modelica.Icons.Record;
            constant Real delp=1E-001 "Accuracy of p";
            constant Real delh=1E-009 "Accuracy of h";
            constant Real dels=1E-006 "Accuracy of s";
          end accuracy;

          function dofpT "Compute d for given p and T"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            input SI.Pressure delp "Iteration converged if (p-pre(p) < delp)";
            output SI.Density d "Density";

          protected
            Integer i=0 "Loop counter";
            Real dp "Pressure difference";
            SI.Density deld "Density step";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.NewtonDerivatives_pT nDerivs "Derivatives needed in Newton iteration";
            Boolean found=false "Flag for iteration success";

          algorithm
            d := p/(ReferenceAir.Air_Utilities.Basic.Constants.R*T);

            while ((i < 100) and not found) loop
              f := Basic.Helmholtz(d, T);
              nDerivs := myMedia.Common.Helmholtz_pT(f);
              dp := nDerivs.p - p;
              if (abs(dp) <= delp) then
                found := true;
              end if;
              deld := dp/nDerivs.pd;
              d := d - deld;
              i := i + 1;
            end while;
          end dofpT;

          function dTofph "Return d and T as a function of p and h"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input SI.Pressure delp "Iteration accuracy";
            input SI.SpecificEnthalpy delh "Iteration accuracy";
            output SI.Density d "Density";
            output SI.Temperature T "Temperature (K)";

          protected
            SI.Temperature Tguess "Initial temperature";
            SI.Density dguess "Initial density";
            Integer i "Iteration counter";
            Real dh "Newton-error in h-direction";
            Real dp "Newton-error in p-direction";
            Real det "Determinant of directional derivatives";
            Real deld "Newton-step in d-direction";
            Real delt "Newton-step in T-direction";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.NewtonDerivatives_ph nDerivs "Derivatives needed in Newton iteration";
            Boolean found=false "Flag for iteration success";

          algorithm
            // Stefan Wischhusen: better guess for high temperatures:
            T := h/1000 + 273.15;
            d := p/(ReferenceAir.Air_Utilities.Basic.Constants.R*T);
            i := 0;

            while ((i < 100) and not found) loop
              f := Basic.Helmholtz(d, T);
              nDerivs := myMedia.Common.Helmholtz_ph(f);
              dh := nDerivs.h - ReferenceAir.Air_Utilities.Basic.Constants.h_off
                 - h;
              dp := nDerivs.p - p;
              if ((abs(dh) <= delh) and (abs(dp) <= delp)) then
                found := true;
              end if;
              det := nDerivs.ht*nDerivs.pd - nDerivs.pt*nDerivs.hd;
              delt := (nDerivs.pd*dh - nDerivs.hd*dp)/det;
              deld := (nDerivs.ht*dp - nDerivs.pt*dh)/det;
              T := T - delt;
              d := d - deld;
              i := i + 1;
            end while;
          end dTofph;

          function dTofps "Return d and T as a function of p and s"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input SI.Pressure delp "Iteration accuracy";
            input SI.SpecificEntropy dels "Iteration accuracy";
            output SI.Density d "Density";
            output SI.Temperature T "Temperature (K)";

          protected
            SI.Temperature Tguess "Initial temperature";
            SI.Density dguess "Initial density";
            Integer i "Iteration counter";
            Real ds "Newton-error in s-direction";
            Real dp "Newton-error in p-direction";
            Real det "Determinant of directional derivatives";
            Real deld "Newton-step in d-direction";
            Real delt "Newton-step in T-direction";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.NewtonDerivatives_ps nDerivs "Derivatives needed in Newton iteration";
            Boolean found=false "Flag for iteration success";

          algorithm
            T := 273.15;
            d := p/(ReferenceAir.Air_Utilities.Basic.Constants.R*T);
            i := 0;

            while ((i < 100) and not found) loop
              f := Basic.Helmholtz(d, T);
              nDerivs := myMedia.Common.Helmholtz_ps(f);
              ds := nDerivs.s - ReferenceAir.Air_Utilities.Basic.Constants.s_off
                 - s;
              dp := nDerivs.p - p;
              if ((abs(ds) <= dels) and (abs(dp) <= delp)) then
                found := true;
              end if;
              det := nDerivs.st*nDerivs.pd - nDerivs.pt*nDerivs.sd;
              delt := (nDerivs.pd*ds - nDerivs.sd*dp)/det;
              deld := (nDerivs.st*dp - nDerivs.pt*ds)/det;
              T := T - delt;
              d := d - deld;
              i := i + 1;
            end while;
          end dTofps;
        end Inverses;

        package Transport "Transport properties for air"
          extends Modelica.Icons.BasesPackage;

          function eta_dT "Return dynamic viscosity as a function of d and T"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature";
            output SI.DynamicViscosity eta "Dynamic viscosity";

          protected
            Real delta=d/(ReferenceAir.Air_Utilities.Basic.Constants.MM*
                ReferenceAir.Air_Utilities.Basic.Constants.rhored)
              "Reduced density";
            Real tau=ReferenceAir.Air_Utilities.Basic.Constants.Tred/T
              "Reciprocal reduced temperature";
            Real Omega "Collision integral";
            SI.DynamicViscosity eta_0=0 "Dilute gas viscosity";
            SI.DynamicViscosity eta_r=0 "Residual fluid viscosity";
            final constant Real[5] b={0.431,-0.4623,0.08406,0.005341,-0.00331};
            final constant Real[5] Nvis={10.72,1.122,0.002019,-8.876,-0.02916};
            final constant Real[5] tvis={0.2,0.05,2.4,0.6,3.6};
            final constant Integer[5] dvis={1,4,9,1,8};
            final constant Integer[5] lvis={0,0,0,1,1};
            final constant Integer[5] gammavis={0,0,0,1,1};

          algorithm
            Omega := exp(myMedia.Incompressible.TableBased.Polynomials_Temp.evaluate({b[5],b[4],b[3],b[2],b[1]}, log(T/103.3)));
            eta_0 := 0.0266958*sqrt(1000*ReferenceAir.Air_Utilities.Basic.Constants.MM
              *T)/(0.36^2*Omega);
            for i in 1:5 loop
              eta_r := eta_r + (Nvis[i]*(tau^tvis[i])*(delta^dvis[i])*exp(-
                gammavis[i]*(delta^lvis[i])));
            end for;
            eta := (eta_0 + eta_r)*1E-006;
          end eta_dT;

          function lambda_dT
            "Return thermal conductivity as a function of d and T"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature";
            output SI.ThermalConductivity lambda "Thermal conductivity";

          protected
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            SI.ThermalConductivity lambda_0=0 "Dilute gas thermal conductivity";
            SI.ThermalConductivity lambda_r=0
              "Residual fluid thermal conductivity";
            SI.ThermalConductivity lambda_c=0
              "Thermal conductivity critical enhancement";
            Real Omega "Collision integral";
            SI.DynamicViscosity eta_0=0 "Dilute gas viscosity";
            Real pddT;
            Real pddTref;
            Real pdTp;
            Real xi;
            Real xiref;
            Real Omega_tilde;
            Real Omega_0_tilde;
            Real cv;
            Real cp;
            final constant Real[5] b={0.431,-0.4623,0.08406,0.005341,-0.00331};
            final constant Real[9] Ncon={1.308,1.405,-1.036,8.743,14.76,-16.62,
                3.793,-6.142,-0.3778};
            final constant Real[9] tcon={0.0,-1.1,-0.3,0.1,0.0,0.5,2.7,0.3,1.3};
            final constant Integer[9] dcon={0,0,0,1,2,3,7,7,11};
            final constant Integer[9] lcon={0,0,0,0,0,2,2,2,2};
            final constant Integer[9] gammacon={0,0,0,0,0,1,1,1,1};

          algorithm
            //chi_tilde in at the reference temperature 265.262
            f := Basic.Helmholtz(d, 265.262);
            pddTref := ReferenceAir.Air_Utilities.Basic.Constants.R_bar*265.262*(
              1 + 2*f.delta*(f.fdelta - 1/f.delta) + f.delta^2*(f.fdeltadelta + 1
              /f.delta^2));
            xiref := ReferenceAir.Air_Utilities.Basic.Constants.pred*(d/
              ReferenceAir.Air_Utilities.Basic.Constants.MM)/ReferenceAir.Air_Utilities.Basic.Constants.rhored
              ^2/pddTref;
            //calculating f at the given state
            f := Basic.Helmholtz(d, T);
            Omega := exp(myMedia.Incompressible.TableBased.Polynomials_Temp.evaluate({b[5],b[4],b[3],b[2],b[1]}, log(T/103.3)));
            //Ideal-gas part of dynamic viscosity
            eta_0 := 0.0266958*sqrt(1000*ReferenceAir.Air_Utilities.Basic.Constants.MM
              *T)/(0.36^2*Omega);
            //Ideal-gas part of thermal conductivity
            lambda_0 := Ncon[1]*eta_0 + Ncon[2]*f.tau^tcon[2] + Ncon[3]*f.tau^
              tcon[3];
            //Residual part of thermal conductivity
            for i in 4:9 loop
              lambda_r := lambda_r + Ncon[i]*f.tau^tcon[i]*f.delta^dcon[i]*exp(-
                gammacon[i]*f.delta^lcon[i]);
            end for;
            //Derivative of p w.r.t. d at constant temperature
            pddT := ReferenceAir.Air_Utilities.Basic.Constants.R*T*(1 + 2*f.delta
              *(f.fdelta - 1/f.delta) + f.delta^2*(f.fdeltadelta + 1/f.delta^2));
            //chi_tilde at the given state
            xi := ReferenceAir.Air_Utilities.Basic.Constants.pred*(d/ReferenceAir.Air_Utilities.Basic.Constants.MM)
              /ReferenceAir.Air_Utilities.Basic.Constants.rhored^2/(pddT*
              ReferenceAir.Air_Utilities.Basic.Constants.MM);
            //Thermal conductivity critical enhancement
            xi := xi - xiref*265.262/T;
            if (xi <= 0) then
              lambda_c := 0;
            else
              xi := 0.11*(xi/0.055)^(0.63/1.2415);
              //Derivative of p w.r.t. T at constant p
              pdTp := ReferenceAir.Air_Utilities.Basic.Constants.R*d*(1 + f.delta
                *(f.fdelta - 1/f.delta) - f.delta*f.tau*f.fdeltatau);
              //Specific isochoric heat capacity
              cv := ReferenceAir.Air_Utilities.Basic.Constants.R*(-f.tau*f.tau*f.ftautau);
              //Specific isobaric heat capacity
              cp := cv + T*pdTp*pdTp/(d*d*pddT);
              Omega_tilde := 2/Modelica.Constants.pi*((cp - cv)/cp*atan(xi/0.31)
                 + cv/cp*xi/0.31);
              Omega_0_tilde := 2/Modelica.Constants.pi*(1 - exp(-1/((0.31/xi) + 1
                /3*(xi/0.31)^2*(ReferenceAir.Air_Utilities.Basic.Constants.rhored
                /(d/ReferenceAir.Air_Utilities.Basic.Constants.MM))^2)));
              lambda_c := d*cp*1.380658E-023*1.01*T/(6*Modelica.Constants.pi*xi*
                eta_dT(d, T))*(Omega_tilde - Omega_0_tilde)*1E012;
            end if;
            lambda := (lambda_0 + lambda_r + lambda_c)/1000;
          end lambda_dT;
        end Transport;

        function airBaseProp_ps "Intermediate property record for air"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEntropy s "Specific entropy";
          output Common.AuxiliaryProperties aux "Auxiliary record";
        protected
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        algorithm
          aux.p := p;
          aux.s := s;
          aux.R := ReferenceAir.Air_Utilities.Basic.Constants.R;
          (aux.rho,aux.T) := Inverses.dTofps(
                  p=p,
                  s=s,
                  delp=iter.delp,
                  dels=iter.dels);
          f := Basic.Helmholtz(aux.rho, aux.T);
          aux.h := aux.R*aux.T*(f.tau*f.ftau + f.delta*f.fdelta) - ReferenceAir.Air_Utilities.Basic.Constants.h_off;
          aux.pd := aux.R*aux.T*f.delta*(2*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*aux.rho*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := aux.R*(-f.tau*f.tau*f.ftautau);
          aux.cp := aux.cv + aux.T*aux.pt*aux.pt/(aux.rho*aux.rho*aux.pd);
          aux.vp := -1/(aux.rho*aux.rho)*1/aux.pd;
          aux.vt := aux.pt/(aux.rho*aux.rho*aux.pd);
        end airBaseProp_ps;

        function rho_props_ps
          "Density as function of pressure and specific entropy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEntropy s "Specific entropy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Density rho "Density";
        algorithm
          rho := aux.rho;
          annotation (Inline=false, LateInline=true);
        end rho_props_ps;

        function rho_ps "Density as function of pressure and specific entropy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEntropy s "Specific entropy";
          output Modelica.SIunits.Density rho "Density";
        algorithm
          rho := rho_props_ps(
                  p,
                  s,
                  Air_Utilities.airBaseProp_ps(p, s));
        end rho_ps;

        function T_props_ps
          "Temperature as function of pressure and specific entropy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEntropy s "Specific entropy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Temperature T "Temperature";
        algorithm
          T := aux.T;
          annotation (Inline=false, LateInline=true);
        end T_props_ps;

        function T_ps "Temperature as function of pressure and specific entropy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEntropy s "Specific entropy";
          output Modelica.SIunits.Temperature T "Temperature";
        algorithm
          T := T_props_ps(
                  p,
                  s,
                  Air_Utilities.airBaseProp_ps(p, s));
        end T_ps;

        function h_props_ps
          "Specific enthalpy as function or pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEntropy s "Specific entropy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := aux.h;
          annotation (Inline=false, LateInline=true);
        end h_props_ps;

        function h_ps "Specific enthalpy as function or pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEntropy s "Specific entropy";
          output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := h_props_ps(
                  p,
                  s,
                  Air_Utilities.airBaseProp_ps(p, s));
        end h_ps;

        function airBaseProp_ph "Intermediate property record for air"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Common.AuxiliaryProperties aux "Auxiliary record";
        protected
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          Integer error "Error flag for inverse iterations";
        algorithm
          aux.p := p;
          aux.h := h;
          aux.R := ReferenceAir.Air_Utilities.Basic.Constants.R;
          (aux.rho,aux.T) := Inverses.dTofph(
                  p,
                  h,
                  delp=iter.delp,
                  delh=iter.delh);
          f := Basic.Helmholtz(aux.rho, aux.T);
          aux.s := aux.R*(f.tau*f.ftau - f.f) - ReferenceAir.Air_Utilities.Basic.Constants.s_off;
          aux.pd := aux.R*aux.T*f.delta*(2*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*aux.rho*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := aux.R*(-f.tau*f.tau*f.ftautau);
          aux.cp := aux.cv + aux.T*aux.pt*aux.pt/(aux.rho*aux.rho*aux.pd);
          aux.vp := -1/(aux.rho*aux.rho)*1/aux.pd;
          aux.vt := aux.pt/(aux.rho*aux.rho*aux.pd);
        end airBaseProp_ph;

        function rho_props_ph
          "Density as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Density rho "Density";
        algorithm
          rho := aux.rho;
          annotation (
            derivative(noDerivative=aux) = rho_ph_der,
            Inline=false,
            LateInline=true);
        end rho_props_ph;

        function rho_ph "Density as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.Density rho "Density";
        algorithm
          rho := rho_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end rho_ph;

        function rho_ph_der "Derivative function of rho_ph"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          input Real p_der "Derivative of pressure";
          input Real h_der "Derivative of specific enthalpy";
          output Real rho_der "Derivative of density";
        algorithm
          rho_der := ((aux.rho*(aux.cv*aux.rho + aux.pt))/(aux.rho*aux.rho*aux.pd
            *aux.cv + aux.T*aux.pt*aux.pt))*p_der + (-aux.rho*aux.rho*aux.pt/(aux.rho
            *aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt))*h_der;
        end rho_ph_der;

        function T_props_ph
          "Temperature as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Temperature T "Temperature";
        algorithm
          T := aux.T;
          annotation (
            derivative(noDerivative=aux) = T_ph_der,
            Inline=false,
            LateInline=true);
        end T_props_ph;

        function T_ph "Temperature as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.Temperature T "Temperature";
        algorithm
          T := T_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end T_ph;

        function T_ph_der "Derivative function of T_ph"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          input Real p_der "Derivative of pressure";
          input Real h_der "Derivative of specific enthalpy";
          output Real T_der "Derivative of temperature";
        algorithm
          T_der := ((-aux.rho*aux.pd + aux.T*aux.pt)/(aux.rho*aux.rho*aux.pd*aux.cv
             + aux.T*aux.pt*aux.pt))*p_der + ((aux.rho*aux.rho*aux.pd)/(aux.rho*
            aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt))*h_der;
        end T_ph_der;

        function s_props_ph
          "Specific entropy as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificEntropy s "Specific entropy";
        algorithm
          s := aux.s;
          annotation (
            derivative(noDerivative=aux) = s_ph_der,
            Inline=false,
            LateInline=true);
        end s_props_ph;

        function s_ph
          "Specific entropy as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.SpecificEntropy s "Specific entropy";
        algorithm
          s := s_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end s_ph;

        function s_ph_der
          "Specific entropy as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          input Real p_der "Derivative of pressure";
          input Real h_der "Derivative of specific enthalpy";
          output Real s_der "Derivative of entropy";
        algorithm
          s_der := -1/(aux.rho*aux.T)*p_der + 1/aux.T*h_der;
        end s_ph_der;

        function cv_props_ph
          "Specific heat capacity at constant volume as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificHeatCapacity cv
            "Specific heat capacity";
        algorithm
          cv := aux.cv;
          annotation (Inline=false, LateInline=true);
        end cv_props_ph;

        function cv_ph
          "Specific heat capacity at constant volume as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.SpecificHeatCapacity cv
            "Specific heat capacity";
        algorithm
          cv := cv_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end cv_ph;

        function cp_props_ph
          "Specific heat capacity at constant pressure as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificHeatCapacity cp
            "Specific heat capacity";
        algorithm
          cp := aux.cp;
          annotation (Inline=false, LateInline=true);
        end cp_props_ph;

        function cp_ph
          "Specific heat capacity at constant pressure as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.SpecificHeatCapacity cp
            "Specific heat capacity";
        algorithm
          cp := cp_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end cp_ph;

        function beta_props_ph
          "Isobaric expansion coefficient as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.RelativePressureCoefficient beta
            "Isobaric expansion coefficient";
        algorithm
          beta := aux.pt/(aux.rho*aux.pd);
          annotation (Inline=false, LateInline=true);
        end beta_props_ph;

        function beta_ph
          "Isobaric expansion coefficient as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.RelativePressureCoefficient beta
            "Isobaric expansion coefficient";
        algorithm
          beta := beta_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end beta_ph;

        function kappa_props_ph
          "Isothermal compressibility factor as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.IsothermalCompressibility kappa
            "Isothermal compressibility factor";
        algorithm
          kappa := 1/(aux.rho*aux.pd);
          annotation (Inline=false, LateInline=true);
        end kappa_props_ph;

        function kappa_ph
          "Isothermal compressibility factor as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.IsothermalCompressibility kappa
            "Isothermal compressibility factor";
        algorithm
          kappa := kappa_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end kappa_ph;

        function velocityOfSound_props_ph
          "Speed of sound as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Velocity a "Speed of sound";
        algorithm
          a := sqrt(max(0, aux.pd + aux.pt*aux.pt*aux.T/(aux.rho*aux.rho*aux.cv)));
          annotation (Inline=false, LateInline=true);
        end velocityOfSound_props_ph;

        function velocityOfSound_ph
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.Velocity a "Speed of sound";
        algorithm
          a := velocityOfSound_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end velocityOfSound_ph;

        function isentropicExponent_props_ph
          "Isentropic exponent as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Real gamma "Isentropic exponent";
        algorithm
          gamma := 1/(aux.rho*p)*((aux.pd*aux.cv*aux.rho*aux.rho + aux.pt*aux.pt*
            aux.T)/(aux.cv));
          annotation (Inline=false, LateInline=true);
        end isentropicExponent_props_ph;

        function isentropicExponent_ph
          "Isentropic exponent as function of pressure and specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Real gamma "Isentropic exponent";
        algorithm
          gamma := isentropicExponent_props_ph(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
          annotation (Inline=false, LateInline=true);
        end isentropicExponent_ph;

        function ddph_props "Density derivative by pressure"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.DerDensityByPressure ddph
            "Density derivative by pressure";
        algorithm
          ddph := ((aux.rho*(aux.cv*aux.rho + aux.pt))/(aux.rho*aux.rho*aux.pd*
            aux.cv + aux.T*aux.pt*aux.pt));
          annotation (Inline=false, LateInline=true);
        end ddph_props;

        function ddph "Density derivative by pressure"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.DerDensityByPressure ddph
            "Density derivative by pressure";
        algorithm
          ddph := ddph_props(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end ddph;

        function ddhp_props "Density derivative by specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.DerDensityByEnthalpy ddhp
            "Density derivative by specific enthalpy";
        algorithm
          ddhp := -aux.rho*aux.rho*aux.pt/(aux.rho*aux.rho*aux.pd*aux.cv + aux.T*
            aux.pt*aux.pt);
          annotation (Inline=false, LateInline=true);
        end ddhp_props;

        function ddhp "Density derivative by specific enthalpy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          output Modelica.SIunits.DerDensityByEnthalpy ddhp
            "Density derivative by specific enthalpy";
        algorithm
          ddhp := ddhp_props(
                  p,
                  h,
                  Air_Utilities.airBaseProp_ph(p, h));
        end ddhp;

        function airBaseProp_pT
          "Intermediate property record for air (p and T preferred states)"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Common.AuxiliaryProperties aux "Auxiliary record";
        protected
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        algorithm
          aux.p := p;
          aux.T := T;
          aux.R := ReferenceAir.Air_Utilities.Basic.Constants.R;
          (aux.rho) := Inverses.dofpT(
                  p=p,
                  T=T,
                  delp=iter.delp);
          f := Basic.Helmholtz(aux.rho, T);
          aux.h := aux.R*T*(f.tau*f.ftau + f.delta*f.fdelta) - ReferenceAir.Air_Utilities.Basic.Constants.h_off;
          aux.s := aux.R*(f.tau*f.ftau - f.f) - ReferenceAir.Air_Utilities.Basic.Constants.s_off;
          aux.pd := aux.R*T*f.delta*(2*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*aux.rho*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := aux.R*(-f.tau*f.tau*f.ftautau);
          aux.cp := aux.cv + aux.T*aux.pt*aux.pt/(aux.rho*aux.rho*aux.pd);
          aux.vp := -1/(aux.rho*aux.rho)*1/aux.pd;
          aux.vt := aux.pt/(aux.rho*aux.rho*aux.pd);
        end airBaseProp_pT;

        function rho_props_pT "Density as function or pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Density rho "Density";
        algorithm
          rho := aux.rho;
          annotation (
            derivative(noDerivative=aux) = rho_pT_der,
            Inline=false,
            LateInline=true);
        end rho_props_pT;

        function rho_pT "Density as function or pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.Density rho "Density";
        algorithm
          rho := rho_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end rho_pT;

        function rho_pT_der "Derivative function of rho_pT"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          output Real rho_der "Derivative of density";
        algorithm
          rho_der := (1/aux.pd)*p_der - (aux.pt/aux.pd)*T_der;
        end rho_pT_der;

        function h_props_pT
          "Specific enthalpy as function or pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := aux.h;
          annotation (
            derivative(noDerivative=aux) = h_pT_der,
            Inline=false,
            LateInline=true);
        end h_props_pT;

        function h_pT "Specific enthalpy as function or pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := h_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end h_pT;

        function h_pT_der "Derivative function of h_pT"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          output Real h_der "Derivative of specific enthalpy";
        algorithm
          h_der := ((-aux.rho*aux.pd + T*aux.pt)/(aux.rho*aux.rho*aux.pd))*p_der
             + ((aux.rho*aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt)/(aux.rho*
            aux.rho*aux.pd))*T_der;
        end h_pT_der;

        function s_props_pT
          "Specific entropy as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificEntropy s "Specific entropy";
        algorithm
          s := aux.s;
          annotation (Inline=false, LateInline=true);
        end s_props_pT;

        function s_pT "Temperature as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificEntropy s "Specific entropy";
        algorithm
          s := s_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end s_pT;

        function cv_props_pT
          "Specific heat capacity at constant volume as function of pressure and temperature"

          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificHeatCapacity cv
            "Specific heat capacity";
        algorithm
          cv := aux.cv;
          annotation (Inline=false, LateInline=true);
        end cv_props_pT;

        function cv_pT
          "Specific heat capacity at constant volume as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificHeatCapacity cv
            "Specific heat capacity";
        algorithm
          cv := cv_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end cv_pT;

        function cp_props_pT
          "Specific heat capacity at constant pressure as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificHeatCapacity cp
            "Specific heat capacity";
        algorithm
          cp := aux.cp;
          annotation (Inline=false, LateInline=true);
        end cp_props_pT;

        function cp_pT
          "Specific heat capacity at constant pressure as function of pressure and temperature"

          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificHeatCapacity cp
            "Specific heat capacity";
        algorithm
          cp := cp_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end cp_pT;

        function beta_props_pT
          "Isobaric expansion coefficient as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.RelativePressureCoefficient beta
            "Isobaric expansion coefficient";
        algorithm
          beta := aux.pt/(aux.rho*aux.pd);
          annotation (Inline=false, LateInline=true);
        end beta_props_pT;

        function beta_pT
          "Isobaric expansion coefficient as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.RelativePressureCoefficient beta
            "Isobaric expansion coefficient";
        algorithm
          beta := beta_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end beta_pT;

        function kappa_props_pT
          "Isothermal compressibility factor as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.IsothermalCompressibility kappa
            "Isothermal compressibility factor";
        algorithm
          kappa := 1/(aux.rho*aux.pd);
          annotation (Inline=false, LateInline=true);
        end kappa_props_pT;

        function kappa_pT
          "Isothermal compressibility factor as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.IsothermalCompressibility kappa
            "Isothermal compressibility factor";
        algorithm
          kappa := kappa_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end kappa_pT;

        function velocityOfSound_props_pT
          "Speed of sound as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Velocity a "Speed of sound";
        algorithm
          a := sqrt(max(0, (aux.pd*aux.rho*aux.rho*aux.cv + aux.pt*aux.pt*aux.T)/
            (aux.rho*aux.rho*aux.cv)));
          annotation (Inline=false, LateInline=true);
        end velocityOfSound_props_pT;

        function velocityOfSound_pT
          "Speed of sound as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.Velocity a "Speed of sound";
        algorithm
          a := velocityOfSound_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end velocityOfSound_pT;

        function isentropicExponent_props_pT
          "Isentropic exponent as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Real gamma "Isentropic exponent";
        algorithm
          gamma := 1/(aux.rho*p)*((aux.pd*aux.cv*aux.rho*aux.rho + aux.pt*aux.pt*
            aux.T)/(aux.cv));
          annotation (Inline=false, LateInline=true);
        end isentropicExponent_props_pT;

        function isentropicExponent_pT
          "Isentropic exponent as function of pressure and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Pressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Real gamma "Isentropic exponent";
        algorithm
          gamma := isentropicExponent_props_pT(
                  p,
                  T,
                  Air_Utilities.airBaseProp_pT(p, T));
        end isentropicExponent_pT;

        function airBaseProp_dT
          "Intermediate property record for air (d and T preferred states)"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Common.AuxiliaryProperties aux "Auxiliary record";
        protected
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        algorithm
          aux.rho := d;
          aux.T := T;
          aux.R := ReferenceAir.Air_Utilities.Basic.Constants.R;
          f := Basic.Helmholtz(d, T);
          aux.p := aux.R*d*T*f.delta*f.fdelta;
          aux.h := aux.R*T*(f.tau*f.ftau + f.delta*f.fdelta) - ReferenceAir.Air_Utilities.Basic.Constants.h_off;
          aux.s := aux.R*(f.tau*f.ftau - f.f) - ReferenceAir.Air_Utilities.Basic.Constants.s_off;
          aux.pd := aux.R*T*f.delta*(2*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := aux.R*(-f.tau*f.tau*f.ftautau);
          aux.cp := aux.cv + aux.T*aux.pt*aux.pt/(d*d*aux.pd);
          aux.vp := -1/(aux.rho*aux.rho)*1/aux.pd;
          aux.vt := aux.pt/(aux.rho*aux.rho*aux.pd);
        end airBaseProp_dT;

        function h_props_dT
          "Specific enthalpy as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := aux.h;
          annotation (
            derivative(noDerivative=aux) = h_dT_der,
            Inline=false,
            LateInline=true);
        end h_props_dT;

        function h_dT "Specific enthalpy as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        algorithm
          h := h_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end h_dT;

        function h_dT_der "Derivative function of h_dT"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          input Real d_der "Derivative of density";
          input Real T_der "Derivative of temperature";
          output Real h_der "Derivative of specific enthalpy";
        algorithm
          h_der := ((-d*aux.pd + T*aux.pt)/(d*d))*d_der + ((aux.cv*d + aux.pt)/d)
            *T_der;
        end h_dT_der;

        function p_props_dT "Pressure as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Pressure p "Pressure";
        algorithm
          p := aux.p;
          annotation (
            derivative(noDerivative=aux) = p_dT_der,
            Inline=false,
            LateInline=true);
        end p_props_dT;

        function p_dT "Pressure as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.Pressure p "Pressure";
        algorithm
          p := p_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end p_dT;

        function p_dT_der "Derivative function of p_dT"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          input Real d_der "Derivative of density";
          input Real T_der "Derivative of temperature";
          output Real p_der "Derivative of pressure";
        algorithm
          p_der := aux.pd*d_der + aux.pt*T_der;
        end p_dT_der;

        function s_props_dT
          "Specific entropy as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificEntropy s "Specific entropy";
        algorithm
          s := aux.s;
          annotation (Inline=false, LateInline=true);
        end s_props_dT;

        function s_dT "Temperature as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificEntropy s "Specific entropy";
        algorithm
          s := s_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end s_dT;

        function cv_props_dT
          "Specific heat capacity at constant volume as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificHeatCapacity cv
            "Specific heat capacity";
        algorithm
          cv := aux.cv;
          annotation (Inline=false, LateInline=true);
        end cv_props_dT;

        function cv_dT
          "Specific heat capacity at constant volume as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificHeatCapacity cv
            "Specific heat capacity";
        algorithm
          cv := cv_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end cv_dT;

        function cp_props_dT
          "Specific heat capacity at constant pressure as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.SpecificHeatCapacity cp
            "Specific heat capacity";
        algorithm
          cp := aux.cp;
          annotation (Inline=false, LateInline=true);
        end cp_props_dT;

        function cp_dT
          "Specific heat capacity at constant pressure as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.SpecificHeatCapacity cp
            "Specific heat capacity";
        algorithm
          cp := cp_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end cp_dT;

        function beta_props_dT
          "Isobaric expansion coefficient as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.RelativePressureCoefficient beta
            "Isobaric expansion coefficient";
        algorithm
          beta := aux.pt/(aux.rho*aux.pd);
          annotation (Inline=false, LateInline=true);
        end beta_props_dT;

        function beta_dT
          "Isobaric expansion coefficient as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.RelativePressureCoefficient beta
            "Isobaric expansion coefficient";
        algorithm
          beta := beta_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end beta_dT;

        function kappa_props_dT
          "Isothermal compressibility factor as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.IsothermalCompressibility kappa
            "Isothermal compressibility factor";
        algorithm
          kappa := 1/(aux.rho*aux.pd);
          annotation (Inline=false, LateInline=true);
        end kappa_props_dT;

        function kappa_dT
          "Isothermal compressibility factor as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.IsothermalCompressibility kappa
            "Isothermal compressibility factor";
        algorithm
          kappa := kappa_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end kappa_dT;

        function velocityOfSound_props_dT
          "Speed of sound as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Modelica.SIunits.Velocity a "Speed of sound";
        algorithm
          a := sqrt(max(0, ((aux.pd*aux.rho*aux.rho*aux.cv + aux.pt*aux.pt*aux.T)
            /(aux.rho*aux.rho*aux.cv))));
          annotation (Inline=false, LateInline=true);
        end velocityOfSound_props_dT;

        function velocityOfSound_dT
          "Speed of sound as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.Velocity a "Speed of sound";
        algorithm
          a := velocityOfSound_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end velocityOfSound_dT;

        function isentropicExponent_props_dT
          "Isentropic exponent as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          input Common.AuxiliaryProperties aux "Auxiliary record";
          output Real gamma "Isentropic exponent";
        algorithm
          gamma := 1/(aux.rho*aux.p)*((aux.pd*aux.cv*aux.rho*aux.rho + aux.pt*aux.pt
            *aux.T)/(aux.cv));
          annotation (Inline=false, LateInline=true);
        end isentropicExponent_props_dT;

        function isentropicExponent_dT
          "Isentropic exponent as function of density and temperature"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.Density d "Density";
          input Modelica.SIunits.Temperature T "Temperature";
          output Real gamma "Isentropic exponent";
        algorithm
          gamma := isentropicExponent_props_dT(
                  d,
                  T,
                  Air_Utilities.airBaseProp_dT(d, T));
        end isentropicExponent_dT;

      protected
        package ThermoFluidSpecial
          extends Modelica.Icons.FunctionsPackage;
          function air_ph
            "Calculate the property record for dynamic simulation properties using p,h as states"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_ph pro "Property record for dynamic simulation";
          protected
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            Modelica.SIunits.Temperature T "Temperature";
            Modelica.SIunits.Density d "Density";
          algorithm
            (d,T) := Air_Utilities.Inverses.dTofph(
                      p=p,
                      h=h,
                      delp=1.0e-7,
                      delh=1.0e-6);
            f := Air_Utilities.Basic.Helmholtz(d, T);
            pro := myMedia.Common.ThermoFluidSpecial.helmholtzToProps_ph(f);
          end air_ph;

          function air_dT
            "Calculate property record for dynamic simulation properties using d and T as dynamic states"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_dT pro "Property record for dynamic simulation";
          protected
            Modelica.SIunits.Pressure p "Pressure";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          algorithm
            f := Air_Utilities.Basic.Helmholtz(d, T);
            pro := myMedia.Common.ThermoFluidSpecial.helmholtzToProps_dT(f);
          end air_dT;

          function air_pT
            "Calculate property record for dynamic simulation properties using p and T as dynamic states"

            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_pT pro "Property record for dynamic simulation";
          protected
            Modelica.SIunits.Density d "Density";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          algorithm
            d := myMedia.Air.ReferenceAir.Air_Utilities.Inverses.dofpT(
                        p=p,
                        T=T,
                        delp=1e-7);
            f := Air_Utilities.Basic.Helmholtz(d, T);
            pro := myMedia.Common.ThermoFluidSpecial.helmholtzToProps_pT(f);
          end air_pT;
        end ThermoFluidSpecial;

      end Air_Utilities;
      annotation (Documentation(info="<html>
<p>
Calculation of fluid properties of air in the fluid region of 130 Kelvin to 2000 Kelvin at pressures up to 2000 MPa. To use this package in your model, select <a href=\"modelica://Modelica.Media.Air.ReferenceAir.Air_dT\">
Air_dT</a>, <a href=\"modelica://Modelica.Media.Air.ReferenceAir.Air_pT\">
Air_pT</a> or <a href=\"modelica://Modelica.Media.Air.ReferenceAir.Air_ph\">Air_ph</a> according to which variables you choose to determine your state.
</p>

<h4>Restriction</h4>
<p>
The functions provided by this package shall be used inside of the restricted limits according to the referenced literature.
</p>

<ul>
<li>
<strong>p &le; 2000 MPa</strong>
</li>
<li>
<strong>130 K &le; T &le; 2000 K</strong>
</li>
</ul>

<h4>References</h4>
<dl>
<dt>Lemmon, E. W., Jacobsen, R. T., Penoncello, S. G., Friend, D. G.:</dt>
<dd><strong>Thermodynamic Properties of Air and Mixtures of Nitrogen, Argon,
and Oxygen From 60 to 2000 K at Pressures to 2000 MPa</strong>. J. Phys. Chem. Ref. Data, Vol. 29, No. 3, 2000.
</dd>
<dt>Lemmon, E. W., Jacobsen, R. T.:</dt>
<dd><strong>Viscosity and Thermal Conductivity Equations for
Nitrogen, Oxygen, Argon, and Air</strong>. International Journal of Thermophysics, Vol. 25, No. 1, January 2004
</dd>
</dl>

<h4>Verification</h4>
<p>
The verification report for the development of this library is provided
<a href=\"modelica://Modelica/Resources/Documentation/Media/MoMoLib_VerificationResults_XRG.pdf\">here</a>.
</p>

<h4>Acknowledgment</h4>
<p>
This library was developed by XRG Simulation GmbH as part of the <a href=\"http://www.cleansky.eu/\">Clean Sky</a> JTI project (Project title: MoMoLib-Modelica Model Library Development for Media, Magnetic Systems and Wavelets; Project number: 296369; Theme: JTI-CS-2011-1-SGO-02-026: Modelica Model Library Development Part I). The partial financial support for the development of this library by the European Union is highly appreciated.
</p>

<p>
Some parts of this library refer to the ThermoFluid library developed at Lund University (<a href=\"http://thermofluid.sourceforge.net/\">http://thermofluid.sourceforge.net</a>).
</p>

<p>
Copyright &copy; 2013-2019, Modelica Association and contributors
</p>
</html>"));
    end ReferenceAir;

    package MoistAir "Air: Moist air model (190 ... 647 K)"
      extends Interfaces.PartialCondensingGases(
        mediumName="Moist air",
        substanceNames={"water","air"},
        final reducedX=true,
        final singleState=false,
        reference_X={0.01,0.99},
        fluidConstants={IdealGases.Common.FluidData.H2O,IdealGases.Common.FluidData.N2},
        Temperature(min=190, max=647));

      import ThermofluidStream.Media.myMedia.IdealGases.Common.Functions;
      constant Integer Water=1
        "Index of water (in substanceNames, massFractions X, etc.)";
      constant Integer Air=2
        "Index of air (in substanceNames, massFractions X, etc.)";
      //     constant SI.Pressure psat_low=saturationPressureWithoutLimits(200.0);
      //     constant SI.Pressure psat_high=saturationPressureWithoutLimits(422.16);
      constant Real k_mair=steam.MM/dryair.MM "Ratio of molar weights";

      constant IdealGases.Common.DataRecord dryair=IdealGases.Common.SingleGasesData.Air;
      constant IdealGases.Common.DataRecord steam=IdealGases.Common.SingleGasesData.H2O;
      constant SI.MolarMass[2] MMX={steam.MM,dryair.MM}
        "Molar masses of components";

      import ThermofluidStream.Media.myMedia.Interfaces;
      import Modelica.Math;
      import Modelica.Constants;
      import ThermofluidStream.Media.myMedia.IdealGases.Common.SingleGasNasa;
      import ThermofluidStream.Media.myMedia.Interfaces.Choices.ReferenceEnthalpy;

      redeclare record extends ThermodynamicState
        "ThermodynamicState record for moist air"
      end ThermodynamicState;

      redeclare replaceable model extends BaseProperties(
        T(stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default),
        p(stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default),
        Xi(each stateSelect=if preferredMediumStates then StateSelect.prefer
               else StateSelect.default),
        final standardOrderComponents=true) "Moist air base properties record"

        /* p, T, X = X[Water] are used as preferred states, since only then all
     other quantities can be computed in a recursive sequence.
     If other variables are selected as states, static state selection
     is no longer possible and non-linear algebraic equations occur.
      */
        MassFraction x_water "Mass of total water/mass of dry air";
        Real phi "Relative humidity";

      protected
        MassFraction X_liquid "Mass fraction of liquid or solid water";
        MassFraction X_steam "Mass fraction of steam water";
        MassFraction X_air "Mass fraction of air";
        MassFraction X_sat
          "Steam water mass fraction of saturation boundary in kg_water/kg_moistair";
        MassFraction x_sat
          "Steam water mass content of saturation boundary in kg_water/kg_dryair";
        AbsolutePressure p_steam_sat "partial saturation pressure of steam";
      equation
        assert(T >= 190 and T <= 647, "
Temperature T is not in the allowed range
190.0 K <= (T ="   + String(T) + " K) <= 647.0 K
required from medium model \""   + mediumName + "\".");
        MM = 1/(Xi[Water]/MMX[Water] + (1.0 - Xi[Water])/MMX[Air]);

        p_steam_sat = min(saturationPressure(T), 0.999*p);
        X_sat = min(p_steam_sat*k_mair/max(100*Constants.eps, p - p_steam_sat)*(1
           - Xi[Water]), 1.0)
          "Water content at saturation with respect to actual water content";
        X_liquid = max(Xi[Water] - X_sat, 0.0);
        X_steam = Xi[Water] - X_liquid;
        X_air = 1 - Xi[Water];

        h = specificEnthalpy_pTX(
              p,
              T,
              Xi);
        R = dryair.R*(X_air/(1 - X_liquid)) + steam.R*X_steam/(1 - X_liquid);
        //
        u = h - R*T;
        d = p/(R*T);
        /* Note, u and d are computed under the assumption that the volume of the liquid
         water is negligible with respect to the volume of air and of steam
      */
        state.p = p;
        state.T = T;
        state.X = X;

        // these x are per unit mass of DRY air!
        x_sat = k_mair*p_steam_sat/max(100*Constants.eps, p - p_steam_sat);
        x_water = Xi[Water]/max(X_air, 100*Constants.eps);
        phi = p/p_steam_sat*Xi[Water]/(Xi[Water] + k_mair*X_air);
        annotation (Documentation(info="<html>
<p>This model computes thermodynamic properties of moist air from three independent (thermodynamic or/and numerical) state variables. Preferred numerical states are temperature T, pressure p and the reduced composition vector Xi, which contains the water mass fraction only. As an EOS the <strong>ideal gas law</strong> is used and associated restrictions apply. The model can also be used in the <strong>fog region</strong>, when moisture is present in its liquid state. However, it is assumed that the liquid water volume is negligible compared to that of the gas phase. Computation of thermal properties is based on property data of <a href=\"modelica://Modelica.Media.Air.DryAirNasa\"> dry air</a> and water (source: VDI-W&auml;rmeatlas), respectively. Besides the standard thermodynamic variables <strong>absolute and relative humidity</strong>, x_water and phi, respectively, are given by the model. Upper case X denotes absolute humidity with respect to mass of moist air while absolute humidity with respect to mass of dry air only is denoted by a lower case x throughout the model. See <a href=\"modelica://Modelica.Media.Air.MoistAir\">package description</a> for further information.</p>
</html>"));
      end BaseProperties;

      redeclare function setState_pTX
        "Return thermodynamic state as function of pressure p, temperature T and composition X"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state";
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
              p=p,
              T=T,
              X=X) else ThermodynamicState(
              p=p,
              T=T,
              X=cat(
                1,
                X,
                {1 - sum(X)}));
        annotation (smoothOrder=2, Documentation(info="<html>
The <a href=\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\">thermodynamic state record</a> is computed from pressure p, temperature T and composition X.
</html>"));
      end setState_pTX;

      redeclare function setState_phX
        "Return thermodynamic state as function of pressure p, specific enthalpy h and composition X"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state";
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
              p=p,
              T=T_phX(
                p,
                h,
                X),
              X=X) else ThermodynamicState(
              p=p,
              T=T_phX(
                p,
                h,
                X),
              X=cat(
                1,
                X,
                {1 - sum(X)}));
        annotation (smoothOrder=2, Documentation(info="<html>
The <a href=\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\">thermodynamic state record</a> is computed from pressure p, specific enthalpy h and composition X.
</html>"));
      end setState_phX;

      redeclare function setState_dTX
        "Return thermodynamic state as function of density d, temperature T and composition X"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input MassFraction X[:]=reference_X "Mass fractions";
        output ThermodynamicState state "Thermodynamic state";
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
              p=d*({steam.R,dryair.R}*X)*T,
              T=T,
              X=X) else ThermodynamicState(
              p=d*({steam.R,dryair.R}*cat(
                1,
                X,
                {1 - sum(X)}))*T,
              T=T,
              X=cat(
                1,
                X,
                {1 - sum(X)}));
        annotation (smoothOrder=2, Documentation(info="<html>
The <a href=\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\">thermodynamic state record</a> is computed from density d, temperature T and composition X.
</html>"));
      end setState_dTX;

      redeclare function extends setSmoothState
        "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
      algorithm
        state := ThermodynamicState(
                p=myMedia.Common.smoothStep(
                  x,
                  state_a.p,
                  state_b.p,
                  x_small),
                T=myMedia.Common.smoothStep(
                  x,
                  state_a.T,
                  state_b.T,
                  x_small),
                X=myMedia.Common.smoothStep(
                  x,
                  state_a.X,
                  state_b.X,
                  x_small));
      end setSmoothState;

      function Xsaturation
        "Return absolute humidity per unit mass of moist air at saturation as a function of the thermodynamic state record"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction X_sat "Steam mass fraction of sat. boundary";
      algorithm
        X_sat := k_mair/(state.p/min(saturationPressure(state.T), 0.999*state.p)
           - 1 + k_mair);
        annotation (smoothOrder=2, Documentation(info="<html>
Absolute humidity per unit mass of moist air at saturation is computed from pressure and temperature in the state record. Note, that unlike X_sat in the BaseProperties model this mass fraction refers to mass of moist air at saturation.
</html>"));
      end Xsaturation;

      function xsaturation
        "Return absolute humidity per unit mass of dry air at saturation as a function of the thermodynamic state record"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction x_sat "Absolute humidity per unit mass of dry air";
      algorithm
        x_sat := k_mair*saturationPressure(state.T)/max(100*Constants.eps, state.p
           - saturationPressure(state.T));
        annotation (smoothOrder=2, Documentation(info="<html>
Absolute humidity per unit mass of dry air at saturation is computed from pressure and temperature in the thermodynamic state record.
</html>"));
      end xsaturation;

      function xsaturation_pT
        "Return absolute humidity per unit mass of dry air at saturation as a function of pressure p and temperature T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SI.Temperature T "Temperature";
        output MassFraction x_sat "Absolute humidity per unit mass of dry air";
      algorithm
        x_sat := k_mair*saturationPressure(T)/max(100*Constants.eps, p -
          saturationPressure(T));
        annotation (smoothOrder=2, Documentation(info="<html>
Absolute humidity per unit mass of dry air at saturation is computed from pressure and temperature.
</html>"));
      end xsaturation_pT;

      function massFraction_pTphi
        "Return steam mass fraction as a function of relative humidity phi and temperature T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input Real phi "Relative humidity (0 ... 1.0)";
        output MassFraction X_steam "Absolute humidity, steam mass fraction";
      protected
        constant Real k=0.621964713077499 "Ratio of molar masses";
        AbsolutePressure psat=saturationPressure(T) "Saturation pressure";
      algorithm
        X_steam := phi*k/(k*phi + p/psat - phi);
        annotation (smoothOrder=2, Documentation(info="<html>
Absolute humidity per unit mass of moist air is computed from temperature, pressure and relative humidity.
</html>"));
      end massFraction_pTphi;

      function relativeHumidity_pTX
        "Return relative humidity as a function of pressure p, temperature T and composition X"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.MassFraction[:] X "Composition";
        output Real phi "Relative humidity";
      protected
        SI.Pressure p_steam_sat "Saturation pressure";
        SI.MassFraction X_air "Dry air mass fraction";
      algorithm
        p_steam_sat := min(saturationPressure(T), 0.999*p);
        X_air := 1 - X[Water];
        phi := max(0.0, min(1.0, p/p_steam_sat*X[Water]/(X[Water] + k_mair*X_air)));
        annotation (smoothOrder=2, Documentation(info="<html>
Relative humidity is computed from pressure, temperature and composition with 1.0 as the upper limit at saturation. Water mass fraction is the first entry in the composition vector.
</html>"));
      end relativeHumidity_pTX;

      function relativeHumidity
        "Return relative humidity as a function of the thermodynamic state record"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state";
        output Real phi "Relative humidity";
      algorithm
        phi := relativeHumidity_pTX(
              state.p,
              state.T,
              state.X);
        annotation (smoothOrder=2, Documentation(info="<html>
Relative humidity is computed from the thermodynamic state record with 1.0 as the upper limit at saturation.
</html>"));
      end relativeHumidity;
      /*
    redeclare function setState_psX "Return thermodynamic state as function of p, s and composition X"
      extends Modelica.Icons.Function;
      input AbsolutePressure p "Pressure";
      input SpecificEntropy s "Specific entropy";
      input MassFraction X[:]=reference_X "Mass fractions";
      output ThermodynamicState state;
    algorithm
      state := if size(X,1) == nX then ThermodynamicState(p=p,T=T_psX(s,p,X),X=X)
        else ThermodynamicState(p=p,T=T_psX(p,s,X), X=cat(1,X,{1-sum(X)}));
    end setState_psX;
*/

      redeclare function extends gasConstant
        "Return ideal gas constant as a function from thermodynamic state, only valid for phi<1"

      algorithm
        R := dryair.R*(1 - state.X[Water]) + steam.R*state.X[Water];
        annotation (smoothOrder=2, Documentation(info="<html>
The ideal gas constant for moist air is computed from <a href=\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\">thermodynamic state</a> assuming that all water is in the gas phase.
</html>"));
      end gasConstant;

      function gasConstant_X
        "Return ideal gas constant as a function from composition X"
        extends Modelica.Icons.Function;
        input SI.MassFraction X[:] "Gas phase composition";
        output SI.SpecificHeatCapacity R "Ideal gas constant";
      algorithm
        R := dryair.R*(1 - X[Water]) + steam.R*X[Water];
        annotation (smoothOrder=2, Documentation(info="<html>
The ideal gas constant for moist air is computed from the gas phase composition. The first entry in composition vector X is the steam mass fraction of the gas phase.
</html>"));
      end gasConstant_X;

      function saturationPressureLiquid
        "Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K"

        extends Modelica.Icons.Function;
        input SI.Temperature Tsat "Saturation temperature";
        output SI.AbsolutePressure psat "Saturation pressure";
      protected
        SI.Temperature Tcritical=647.096 "Critical temperature";
        SI.AbsolutePressure pcritical=22.064e6 "Critical pressure";
        Real r1=(1 - Tsat/Tcritical) "Common subexpression";
        Real a[:]={-7.85951783,1.84408259,-11.7866497,22.6807411,-15.9618719,
            1.80122502} "Coefficients a[:]";
        Real n[:]={1.0,1.5,3.0,3.5,4.0,7.5} "Coefficients n[:]";
      algorithm
        psat := exp(((a[1]*r1^n[1] + a[2]*r1^n[2] + a[3]*r1^n[3] + a[4]*r1^n[4]
           + a[5]*r1^n[5] + a[6]*r1^n[6])*Tcritical)/Tsat)*pcritical;
        annotation (
          derivative=saturationPressureLiquid_der,
          Inline=false,
          smoothOrder=5,
          Documentation(info="<html>
<p>Saturation pressure of water above the triple point temperature is computed from temperature.</p>
<p>Source: A Saul, W Wagner: &quot;International equations for the saturation properties of ordinary water substance&quot;, equation 2.1</p>
</html>"));
      end saturationPressureLiquid;

      function saturationPressureLiquid_der
        "Derivative function for 'saturationPressureLiquid'"

        extends Modelica.Icons.Function;
        input SI.Temperature Tsat "Saturation temperature";
        input Real dTsat(unit="K/s") "Saturation temperature derivative";
        output Real psat_der(unit="Pa/s") "Saturation pressure derivative";
      protected
        SI.Temperature Tcritical=647.096 "Critical temperature";
        SI.AbsolutePressure pcritical=22.064e6 "Critical pressure";
        Real r1=(1 - Tsat/Tcritical) "Common subexpression 1";
        Real r1_der=-1/Tcritical*dTsat "Derivative of common subexpression 1";
        Real a[:]={-7.85951783,1.84408259,-11.7866497,22.6807411,-15.9618719,
            1.80122502} "Coefficients a[:]";
        Real n[:]={1.0,1.5,3.0,3.5,4.0,7.5} "Coefficients n[:]";
        Real r2=(a[1]*r1^n[1] + a[2]*r1^n[2] + a[3]*r1^n[3] + a[4]*r1^n[4] + a[5]
            *r1^n[5] + a[6]*r1^n[6]) "Common subexpression 2";
      algorithm
        // Approach used here is based on Baehr: "Thermodynamik", 12th edition p.204ff, "Method of Wagner"
        //psat := exp(((a[1]*r1^n[1] + a[2]*r1^n[2] + a[3]*r1^n[3] + a[4]*r1^n[4] + a[5]*r1^n[5] + a[6]*r1^n[6])*Tcritical)/Tsat) * pcritical;
        psat_der := exp((r2*Tcritical)/Tsat)*pcritical*((a[1]*(r1^(n[1] - 1)*n[1]
          *r1_der) + a[2]*(r1^(n[2] - 1)*n[2]*r1_der) + a[3]*(r1^(n[3] - 1)*n[3]*
          r1_der) + a[4]*(r1^(n[4] - 1)*n[4]*r1_der) + a[5]*(r1^(n[5] - 1)*n[5]*
          r1_der) + a[6]*(r1^(n[6] - 1)*n[6]*r1_der))*Tcritical/Tsat - r2*
          Tcritical*dTsat/Tsat^2);
        annotation (
          Inline=false,
          smoothOrder=5,
          Documentation(info="<html>
<p>Saturation pressure of water above the triple point temperature is computed from temperature.</p>
<p>Source: A Saul, W Wagner: &quot;International equations for the saturation properties of ordinary water substance&quot;, equation 2.1</p>
</html>"));
      end saturationPressureLiquid_der;

      function sublimationPressureIce
        "Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K"

        extends Modelica.Icons.Function;
        input SI.Temperature Tsat "Sublimation temperature";
        output SI.AbsolutePressure psat "Sublimation pressure";
      protected
        SI.Temperature Ttriple=273.16 "Triple point temperature";
        SI.AbsolutePressure ptriple=611.657 "Triple point pressure";
        Real r1=Tsat/Ttriple "Common subexpression";
        Real a[:]={-13.9281690,34.7078238} "Coefficients a[:]";
        Real n[:]={-1.5,-1.25} "Coefficients n[:]";
      algorithm
        psat := exp(a[1] - a[1]*r1^n[1] + a[2] - a[2]*r1^n[2])*ptriple;
        annotation (
          Inline=false,
          smoothOrder=5,
          derivative=sublimationPressureIce_der,
          Documentation(info="<html>
<p>Sublimation pressure of water below the triple point temperature is computed from temperature.</p>
<p>Source: W Wagner, A Saul, A Pruss: &quot;International equations for the pressure along the melting and along the sublimation curve of ordinary water substance&quot;, equation 3.5</p>
</html>"));
      end sublimationPressureIce;

      function sublimationPressureIce_der
        "Derivative function for 'sublimationPressureIce'"

        extends Modelica.Icons.Function;
        input SI.Temperature Tsat "Sublimation temperature";
        input Real dTsat(unit="K/s") "Sublimation temperature derivative";
        output Real psat_der(unit="Pa/s") "Sublimation pressure derivative";
      protected
        SI.Temperature Ttriple=273.16 "Triple point temperature";
        SI.AbsolutePressure ptriple=611.657 "Triple point pressure";
        Real r1=Tsat/Ttriple "Common subexpression 1";
        Real r1_der=dTsat/Ttriple "Derivative of common subexpression 1";
        Real a[:]={-13.9281690,34.7078238} "Coefficients a[:]";
        Real n[:]={-1.5,-1.25} "Coefficients n[:]";
      algorithm
        //psat := exp(a[1] - a[1]*r1^n[1] + a[2] - a[2]*r1^n[2]) * ptriple;
        psat_der := exp(a[1] - a[1]*r1^n[1] + a[2] - a[2]*r1^n[2])*ptriple*(-(a[1]
          *(r1^(n[1] - 1)*n[1]*r1_der)) - (a[2]*(r1^(n[2] - 1)*n[2]*r1_der)));
        annotation (
          Inline=false,
          smoothOrder=5,
          Documentation(info="<html>
<p>Sublimation pressure of water below the triple point temperature is computed from temperature.</p>
<p>Source: W Wagner, A Saul, A Pruss: &quot;International equations for the pressure along the melting and along the sublimation curve of ordinary water substance&quot;, equation 3.5</p>
</html>"));
      end sublimationPressureIce_der;

      redeclare function extends saturationPressure
        "Return saturation pressure of water as a function of temperature T between 190 and 647.096 K"

      algorithm
        psat := Utilities.spliceFunction(
              saturationPressureLiquid(Tsat),
              sublimationPressureIce(Tsat),
              Tsat - 273.16,
              1.0);
        annotation (
          Inline=false,
          smoothOrder=5,
          derivative=saturationPressure_der,
          Documentation(info="<html>
Saturation pressure of water in the liquid and the solid region is computed using correlations. Functions for the
<a href=\"modelica://Modelica.Media.Air.MoistAir.sublimationPressureIce\">solid</a> and the <a href=\"modelica://Modelica.Media.Air.MoistAir.saturationPressureLiquid\"> liquid</a> region, respectively, are combined using the first derivative continuous <a href=\"modelica://Modelica.Media.Air.MoistAir.Utilities.spliceFunction\">spliceFunction</a>. This functions range of validity is from 190 to 647.096 K. For more information on the type of correlation used, see the documentation of the linked functions.
</html>"));
      end saturationPressure;

      function saturationPressure_der
        "Derivative function for 'saturationPressure'"
        extends Modelica.Icons.Function;
        input Temperature Tsat "Saturation temperature";
        input Real dTsat(unit="K/s") "Time derivative of saturation temperature";
        output Real psat_der(unit="Pa/s") "Saturation pressure";

      algorithm
        /*psat := Utilities.spliceFunction(saturationPressureLiquid(Tsat),sublimationPressureIce(Tsat),Tsat-273.16,1.0);*/
        psat_der := Utilities.spliceFunction_der(
              saturationPressureLiquid(Tsat),
              sublimationPressureIce(Tsat),
              Tsat - 273.16,
              1.0,
              saturationPressureLiquid_der(Tsat=Tsat, dTsat=dTsat),
              sublimationPressureIce_der(Tsat=Tsat, dTsat=dTsat),
              dTsat,
              0);
        annotation (
          Inline=false,
          smoothOrder=5,
          Documentation(info="<html>
Derivative function of <a href=\"modelica://Modelica.Media.Air.MoistAir.saturationPressure\">saturationPressure</a>
</html>"));
      end saturationPressure_der;

      function saturationTemperature
        "Return saturation temperature of water as a function of (partial) pressure p"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T_min=190 "Lower boundary of solution";
        input SI.Temperature T_max=647 "Upper boundary of solution";
        output SI.Temperature T "Saturation temperature";

      protected
        package Internal
          extends myMedia.Common.OneNonLinearEquation;

          redeclare record extends f_nonlinear_Data
            // Define data to be passed to user function
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
          algorithm
            y := saturationPressure(x);
            // Compute the non-linear equation: y = f(x, Data)
          end f_nonlinear;

          // Dummy definition
          redeclare function extends solve
          end solve;
        end Internal;
      algorithm
        T := Internal.solve(
              p,
              T_min,
              T_max,
              f_nonlinear_data=Internal.f_nonlinear_Data());
        annotation (Documentation(info="<html>
 Computes saturation temperature from (partial) pressure via numerical inversion of the function <a href=\"modelica://Modelica.Media.Air.MoistAir.saturationPressure\">saturationPressure</a>. Therefore additional inputs are required (or the defaults are used) for upper and lower temperature bounds.
</html>"));
      end saturationTemperature;

      redeclare function extends enthalpyOfVaporization
        "Return enthalpy of vaporization of water as a function of temperature T, 273.16 to 647.096 K"

      protected
        Real Tcritical=647.096 "Critical temperature";
        Real dcritical=322 "Critical density";
        Real pcritical=22.064e6 "Critical pressure";
        Real n[:]={1,1.5,3,3.5,4,7.5} "Powers in equation (1)";
        Real a[:]={-7.85951783,1.84408259,-11.7866497,22.6807411,-15.9618719,
            1.80122502} "Coefficients in equation (1) of [1]";
        Real m[:]={1/3,2/3,5/3,16/3,43/3,110/3} "Powers in equation (2)";
        Real b[:]={1.99274064,1.09965342,-0.510839303,-1.75493479,-45.5170352,-6.74694450e5}
          "Coefficients in equation (2) of [1]";
        Real o[:]={2/6,4/6,8/6,18/6,37/6,71/6} "Powers in equation (3)";
        Real c[:]={-2.03150240,-2.68302940,-5.38626492,-17.2991605,-44.7586581,-63.9201063}
          "Coefficients in equation (3) of [1]";
        Real tau=1 - T/Tcritical "Temperature expression";
        Real r1=(a[1]*Tcritical*tau^n[1])/T + (a[2]*Tcritical*tau^n[2])/T + (a[3]
            *Tcritical*tau^n[3])/T + (a[4]*Tcritical*tau^n[4])/T + (a[5]*
            Tcritical*tau^n[5])/T + (a[6]*Tcritical*tau^n[6])/T "Expression 1";
        Real r2=a[1]*n[1]*tau^n[1] + a[2]*n[2]*tau^n[2] + a[3]*n[3]*tau^n[3] + a[
            4]*n[4]*tau^n[4] + a[5]*n[5]*tau^n[5] + a[6]*n[6]*tau^n[6]
          "Expression 2";
        Real dp=dcritical*(1 + b[1]*tau^m[1] + b[2]*tau^m[2] + b[3]*tau^m[3] + b[
            4]*tau^m[4] + b[5]*tau^m[5] + b[6]*tau^m[6])
          "Density of saturated liquid";
        Real dpp=dcritical*exp(c[1]*tau^o[1] + c[2]*tau^o[2] + c[3]*tau^o[3] + c[
            4]*tau^o[4] + c[5]*tau^o[5] + c[6]*tau^o[6])
          "Density of saturated vapor";
      algorithm
        r0 := -(((dp - dpp)*exp(r1)*pcritical*(r2 + r1*tau))/(dp*dpp*tau))
          "Difference of equations (7) and (6)";
        annotation (
          smoothOrder=2,
          Documentation(info="<html>
<p>Enthalpy of vaporization of water is computed from temperature in the region of 273.16 to 647.096 K.</p>
<p>Source: W Wagner, A Pruss: \"International equations for the saturation properties of ordinary water substance. Revised according to the international temperature scale of 1990\" (1993).</p>
</html>"));
      end enthalpyOfVaporization;

      function HeatCapacityOfWater
        "Return specific heat capacity of water (liquid only) as a function of temperature T"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificHeatCapacity cp_fl "Specific heat capacity of liquid";
      algorithm
        cp_fl := 1e3*(4.2166 - (T - 273.15)*(0.0033166 + (T - 273.15)*(0.00010295
           - (T - 273.15)*(1.3819e-6 + (T - 273.15)*7.3221e-9))));
        annotation (Documentation(info="<html>
The specific heat capacity of water (liquid and solid) is calculated using a
                 polynomial approach and data from VDI-Waermeatlas 8. Edition (Db1)
</html>"),   smoothOrder=2);
      end HeatCapacityOfWater;

      redeclare function extends enthalpyOfLiquid
        "Return enthalpy of liquid water as a function of temperature T(use enthalpyOfWater instead)"

      algorithm
        h := (T - 273.15)*1e3*(4.2166 - 0.5*(T - 273.15)*(0.0033166 + 0.333333*(T
           - 273.15)*(0.00010295 - 0.25*(T - 273.15)*(1.3819e-6 + 0.2*(T - 273.15)
          *7.3221e-9))));
        annotation (
          Inline=false,
          smoothOrder=5,
          Documentation(info="<html>
Specific enthalpy of liquid water is computed from temperature using a polynomial approach. Kept for compatibility reasons, better use <a href=\"modelica://Modelica.Media.Air.MoistAir.enthalpyOfWater\">enthalpyOfWater</a> instead.
</html>"));
      end enthalpyOfLiquid;

      redeclare function extends enthalpyOfGas
        "Return specific enthalpy of gas (air and steam) as a function of temperature T and composition X"

      algorithm
        h := myMedia.IdealGases.Common.Functions.h_Tlow(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5)*X[Water] + myMedia.IdealGases.Common.Functions.h_Tlow(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684)*(1.0 - X[Water]);
        annotation (
          Inline=false,
          smoothOrder=5,
          Documentation(info="<html>
Specific enthalpy of moist air is computed from temperature, provided all water is in the gaseous state. The first entry in the composition vector X must be the mass fraction of steam. For a function that also covers the fog region please refer to <a href=\"modelica://Modelica.Media.Air.MoistAir.h_pTX\">h_pTX</a>.
</html>"));
      end enthalpyOfGas;

      redeclare function extends enthalpyOfCondensingGas
        "Return specific enthalpy of steam as a function of temperature T"

      algorithm
        h := myMedia.IdealGases.Common.Functions.h_Tlow(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5);
        annotation (
          Inline=false,
          smoothOrder=5,
          Documentation(info="<html>
Specific enthalpy of steam is computed from temperature.
</html>"));
      end enthalpyOfCondensingGas;

      redeclare function extends enthalpyOfNonCondensingGas
        "Return specific enthalpy of dry air as a function of temperature T"

      algorithm
        h := myMedia.IdealGases.Common.Functions.h_Tlow(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684);
        annotation (
          Inline=false,
          smoothOrder=1,
          Documentation(info="<html>
Specific enthalpy of dry air is computed from temperature.
</html>"));
      end enthalpyOfNonCondensingGas;

      function enthalpyOfWater
        "Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T"
        extends Modelica.Icons.Function;
        input SI.Temperature T "Temperature";
        output SI.SpecificEnthalpy h "Specific enthalpy of water";
      algorithm
        /*simple model assuming constant properties:
  heat capacity of liquid water:4200 J/kg
  heat capacity of solid water: 2050 J/kg
  enthalpy of fusion (liquid=>solid): 333000 J/kg*/

        h := Utilities.spliceFunction(
              4200*(T - 273.15),
              2050*(T - 273.15) - 333000,
              T - 273.16,
              0.1);
        annotation (derivative=enthalpyOfWater_der, Documentation(info="<html>
Specific enthalpy of water (liquid and solid) is computed from temperature using constant properties as follows:<br>
<ul>
<li>  heat capacity of liquid water:4200 J/kg</li>
<li>  heat capacity of solid water: 2050 J/kg</li>
<li>  enthalpy of fusion (liquid=>solid): 333000 J/kg</li>
</ul>
Pressure is assumed to be around 1 bar. This function is usually used to determine the specific enthalpy of the liquid or solid fraction of moist air.
</html>"));
      end enthalpyOfWater;

      function enthalpyOfWater_der "Derivative function of enthalpyOfWater"
        extends Modelica.Icons.Function;
        input SI.Temperature T "Temperature";
        input Real dT(unit="K/s") "Time derivative of temperature";
        output Real dh(unit="J/(kg.s)") "Time derivative of specific enthalpy";
      algorithm
        /*simple model assuming constant properties:
  heat capacity of liquid water:4200 J/kg
  heat capacity of solid water: 2050 J/kg
  enthalpy of fusion (liquid=>solid): 333000 J/kg*/

        //h:=Utilities.spliceFunction(4200*(T-273.15),2050*(T-273.15)-333000,T-273.16,0.1);
        dh := Utilities.spliceFunction_der(
              4200*(T - 273.15),
              2050*(T - 273.15) - 333000,
              T - 273.16,
              0.1,
              4200*dT,
              2050*dT,
              dT,
              0);
        annotation (Documentation(info="<html>
Derivative function for <a href=\"modelica://Modelica.Media.Air.MoistAir.enthalpyOfWater\">enthalpyOfWater</a>.

</html>"));
      end enthalpyOfWater_der;

      redeclare function extends pressure
        "Returns pressure of ideal gas as a function of the thermodynamic state record"

      algorithm
        p := state.p;
        annotation (smoothOrder=2, Documentation(info="<html>
Pressure is returned from the thermodynamic state record input as a simple assignment.
</html>"));
      end pressure;

      redeclare function extends temperature
        "Return temperature of ideal gas as a function of the thermodynamic state record"

      algorithm
        T := state.T;
        annotation (smoothOrder=2, Documentation(info="<html>
Temperature is returned from the thermodynamic state record input as a simple assignment.
</html>"));
      end temperature;

      function T_phX
        "Return temperature as a function of pressure p, specific enthalpy h and composition X"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input MassFraction[:] X "Mass fractions of composition";
        output Temperature T "Temperature";

      protected
        package Internal
          "Solve h(data,T) for T with given h (use only indirectly via temperature_phX)"
          extends myMedia.Common.OneNonLinearEquation;
          redeclare record extends f_nonlinear_Data
            "Data to be passed to non-linear function"
            extends myMedia.IdealGases.Common.DataRecord;
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
          algorithm
            y := h_pTX(
                      p,
                      x,
                      X);
          end f_nonlinear;

          // Dummy definition has to be added for current Dymola
          redeclare function extends solve
          end solve;
        end Internal;

      algorithm
        T := Internal.solve(
              h,
              190,
              647,
              p,
              X[1:nXi],
              steam);
        annotation (Documentation(info="<html>
Temperature is computed from pressure, specific enthalpy and composition via numerical inversion of function <a href=\"modelica://Modelica.Media.Air.MoistAir.h_pTX\">h_pTX</a>.
</html>"));
      end T_phX;

      redeclare function extends density
        "Returns density of ideal gas as a function of the thermodynamic state record"

      algorithm
        d := state.p/(gasConstant(state)*state.T);
        annotation (smoothOrder=2, Documentation(info="<html>
Density is computed from pressure, temperature and composition in the thermodynamic state record applying the ideal gas law.
</html>"));
      end density;

      redeclare function extends specificEnthalpy
        "Return specific enthalpy of moist air as a function of the thermodynamic state record"

      algorithm
        h := h_pTX(
              state.p,
              state.T,
              state.X);
        annotation (smoothOrder=2, Documentation(info="<html>
Specific enthalpy of moist air is computed from the thermodynamic state record. The fog region is included for both, ice and liquid fog.
</html>"));
      end specificEnthalpy;

      function h_pTX
        "Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.MassFraction X[:] "Mass fractions of moist air";
        output SI.SpecificEnthalpy h "Specific enthalpy at p, T, X";
      protected
        SI.AbsolutePressure p_steam_sat "partial saturation pressure of steam";
        SI.MassFraction X_sat "Absolute humidity per unit mass of moist air";
        SI.MassFraction X_liquid "Mass fraction of liquid water";
        SI.MassFraction X_steam "Mass fraction of steam water";
        SI.MassFraction X_air "Mass fraction of air";
      algorithm
        p_steam_sat := saturationPressure(T);
        //p_steam_sat :=min(saturationPressure(T), 0.999*p);
        X_sat := min(p_steam_sat*k_mair/max(100*Constants.eps, p - p_steam_sat)*(
          1 - X[Water]), 1.0);
        X_liquid := max(X[Water] - X_sat, 0.0);
        X_steam := X[Water] - X_liquid;
        X_air := 1 - X[Water];
        /* h        := {SingleGasNasa.h_Tlow(data=steam,  T=T, refChoice=ReferenceEnthalpy.UserDefined, h_off=46479.819+2501014.5),
               SingleGasNasa.h_Tlow(data=dryair, T=T, refChoice=ReferenceEnthalpy.UserDefined, h_off=25104.684)}*
    {X_steam, X_air} + enthalpyOfLiquid(T)*X_liquid;*/
        h := {myMedia.IdealGases.Common.Functions.h_Tlow(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5),myMedia.IdealGases.Common.Functions.h_Tlow(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684)}*{X_steam,X_air} + enthalpyOfWater(T)*X_liquid;
        annotation (
          derivative=h_pTX_der,
          Inline=false,
          Documentation(info="<html>
Specific enthalpy of moist air is computed from pressure, temperature and composition with X[1] as the total water mass fraction. The fog region is included for both, ice and liquid fog.
</html>"));
      end h_pTX;

      function h_pTX_der "Derivative function of h_pTX"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.MassFraction X[:] "Mass fractions of moist air";
        input Real dp(unit="Pa/s") "Pressure derivative";
        input Real dT(unit="K/s") "Temperature derivative";
        input Real dX[:](each unit="1/s") "Composition derivative";
        output Real h_der(unit="J/(kg.s)") "Time derivative of specific enthalpy";
      protected
        SI.AbsolutePressure p_steam_sat "partial saturation pressure of steam";
        SI.MassFraction X_sat "Absolute humidity per unit mass of moist air";
        SI.MassFraction X_liquid "Mass fraction of liquid water";
        SI.MassFraction X_steam "Mass fraction of steam water";
        SI.MassFraction X_air "Mass fraction of air";
        SI.MassFraction x_sat
          "Absolute humidity per unit mass of dry air at saturation";
        Real dX_steam(unit="1/s") "Time derivative of steam mass fraction";
        Real dX_air(unit="1/s") "Time derivative of dry air mass fraction";
        Real dX_liq(unit="1/s")
          "Time derivative of liquid/solid water mass fraction";
        Real dps(unit="Pa/s") "Time derivative of saturation pressure";
        Real dx_sat(unit="1/s")
          "Time derivative of absolute humidity per unit mass of dry air";
      algorithm
        p_steam_sat := saturationPressure(T);
        x_sat := p_steam_sat*k_mair/max(100*Modelica.Constants.eps, p -
          p_steam_sat);
        X_sat := min(x_sat*(1 - X[Water]), 1.0);
        X_liquid := Utilities.smoothMax(
              X[Water] - X_sat,
              0.0,
              1e-5);
        X_steam := X[Water] - X_liquid;
        X_air := 1 - X[Water];

        dX_air := -dX[Water];
        dps := saturationPressure_der(Tsat=T, dTsat=dT);
        dx_sat := k_mair*(dps*(p - p_steam_sat) - p_steam_sat*(dp - dps))/(p -
          p_steam_sat)/(p - p_steam_sat);
        dX_liq := Utilities.smoothMax_der(
              X[Water] - X_sat,
              0.0,
              1e-5,
              (1 + x_sat)*dX[Water] - (1 - X[Water])*dx_sat,
              0,
              0);
        dX_steam := dX[Water] - dX_liq;

        h_der := X_steam*myMedia.IdealGases.Common.Functions.h_Tlow_der(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5,
                dT=dT) + dX_steam*myMedia.IdealGases.Common.Functions.h_Tlow(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5) + X_air*myMedia.IdealGases.Common.Functions.h_Tlow_der(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684,
                dT=dT) + dX_air*myMedia.IdealGases.Common.Functions.h_Tlow(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684) + X_liquid*enthalpyOfWater_der(T=T, dT=dT) + dX_liq*enthalpyOfWater(T);

        annotation (
          Inline=false,
          smoothOrder=1,
          Documentation(info="<html>
Derivative function for <a href=\"modelica://Modelica.Media.Air.MoistAir.h_pTX\">h_pTX</a>.
</html>"));
      end h_pTX_der;

      redeclare function extends isentropicExponent
        "Return isentropic exponent (only for gas fraction!)"
      algorithm
        gamma := specificHeatCapacityCp(state)/specificHeatCapacityCv(state);
      end isentropicExponent;

      function isentropicEnthalpyApproximation
        "Approximate calculation of h_is from upstream properties, downstream pressure, gas part only"
        extends Modelica.Icons.Function;
        input AbsolutePressure p2 "Downstream pressure";
        input ThermodynamicState state "Thermodynamic state at upstream location";
        output SpecificEnthalpy h_is "Isentropic enthalpy";
      protected
        SpecificEnthalpy h "Specific enthalpy at upstream location";
        IsentropicExponent gamma=isentropicExponent(state) "Isentropic exponent";
      protected
        MassFraction[nX] X "Complete X-vector";
      algorithm
        X := state.X;
        //  X := if reducedX then cat(1,state.X,{1-sum(state.X)}) else state.X;
        h := {myMedia.IdealGases.Common.Functions.h_Tlow(
                data=steam,
                T=state.T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5),myMedia.IdealGases.Common.Functions.h_Tlow(
                data=dryair,
                T=state.T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684)}*X;

        h_is := h + gamma/(gamma - 1.0)*(state.T*gasConstant(state))*((p2/state.p)
          ^((gamma - 1)/gamma) - 1.0);
      end isentropicEnthalpyApproximation;

      redeclare function extends specificInternalEnergy
        "Return specific internal energy of moist air as a function of the thermodynamic state record"
        extends Modelica.Icons.Function;
        output SI.SpecificInternalEnergy u "Specific internal energy";
      algorithm
        u := specificInternalEnergy_pTX(
              state.p,
              state.T,
              state.X);

        annotation (smoothOrder=2, Documentation(info="<html>
Specific internal energy is determined from the thermodynamic state record, assuming that the liquid or solid water volume is negligible.
</html>"));
      end specificInternalEnergy;

      function specificInternalEnergy_pTX
        "Return specific internal energy of moist air as a function of pressure p, temperature T and composition X"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.MassFraction X[:] "Mass fractions of moist air";
        output SI.SpecificInternalEnergy u "Specific internal energy";
      protected
        SI.AbsolutePressure p_steam_sat "partial saturation pressure of steam";
        SI.MassFraction X_liquid "Mass fraction of liquid water";
        SI.MassFraction X_steam "Mass fraction of steam water";
        SI.MassFraction X_air "Mass fraction of air";
        SI.MassFraction X_sat "Absolute humidity per unit mass of moist air";
        Real R_gas "Ideal gas constant";
      algorithm
        p_steam_sat := saturationPressure(T);
        X_sat := min(p_steam_sat*k_mair/max(100*Constants.eps, p - p_steam_sat)*(
          1 - X[Water]), 1.0);
        X_liquid := max(X[Water] - X_sat, 0.0);
        X_steam := X[Water] - X_liquid;
        X_air := 1 - X[Water];
        R_gas := dryair.R*X_air/(1 - X_liquid) + steam.R*X_steam/(1 - X_liquid);
        u := X_steam*myMedia.IdealGases.Common.Functions.h_Tlow(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5) + X_air*myMedia.IdealGases.Common.Functions.h_Tlow(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684) + enthalpyOfWater(T)*X_liquid - R_gas*T;

        annotation (derivative=specificInternalEnergy_pTX_der, Documentation(info=
               "<html>
Specific internal energy is determined from pressure p, temperature T and composition X, assuming that the liquid or solid water volume is negligible.
</html>"));
      end specificInternalEnergy_pTX;

      function specificInternalEnergy_pTX_der
        "Derivative function for specificInternalEnergy_pTX"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.MassFraction X[:] "Mass fractions of moist air";
        input Real dp(unit="Pa/s") "Pressure derivative";
        input Real dT(unit="K/s") "Temperature derivative";
        input Real dX[:](each unit="1/s") "Mass fraction derivatives";
        output Real u_der(unit="J/(kg.s)") "Specific internal energy derivative";
      protected
        SI.AbsolutePressure p_steam_sat "partial saturation pressure of steam";
        SI.MassFraction X_liquid "Mass fraction of liquid water";
        SI.MassFraction X_steam "Mass fraction of steam water";
        SI.MassFraction X_air "Mass fraction of air";
        SI.MassFraction X_sat "Absolute humidity per unit mass of moist air";
        SI.SpecificHeatCapacity R_gas "Ideal gas constant";

        SI.MassFraction x_sat
          "Absolute humidity per unit mass of dry air at saturation";
        Real dX_steam(unit="1/s") "Time derivative of steam mass fraction";
        Real dX_air(unit="1/s") "Time derivative of dry air mass fraction";
        Real dX_liq(unit="1/s")
          "Time derivative of liquid/solid water mass fraction";
        Real dps(unit="Pa/s") "Time derivative of saturation pressure";
        Real dx_sat(unit="1/s")
          "Time derivative of absolute humidity per unit mass of dry air";
        Real dR_gas(unit="J/(kg.K.s)") "Time derivative of ideal gas constant";
      algorithm
        p_steam_sat := saturationPressure(T);
        x_sat := p_steam_sat*k_mair/max(100*Modelica.Constants.eps, p -
          p_steam_sat);
        X_sat := min(x_sat*(1 - X[Water]), 1.0);
        X_liquid := Utilities.spliceFunction(
              X[Water] - X_sat,
              0.0,
              X[Water] - X_sat,
              1e-6);
        X_steam := X[Water] - X_liquid;
        X_air := 1 - X[Water];
        R_gas := steam.R*X_steam/(1 - X_liquid) + dryair.R*X_air/(1 - X_liquid);

        dX_air := -dX[Water];
        dps := saturationPressure_der(Tsat=T, dTsat=dT);
        dx_sat := k_mair*(dps*(p - p_steam_sat) - p_steam_sat*(dp - dps))/(p -
          p_steam_sat)/(p - p_steam_sat);
        dX_liq := Utilities.spliceFunction_der(
              X[Water] - X_sat,
              0.0,
              X[Water] - X_sat,
              1e-6,
              (1 + x_sat)*dX[Water] - (1 - X[Water])*dx_sat,
              0.0,
              (1 + x_sat)*dX[Water] - (1 - X[Water])*dx_sat,
              0.0);
        dX_steam := dX[Water] - dX_liq;
        dR_gas := (steam.R*(dX_steam*(1 - X_liquid) + dX_liq*X_steam) + dryair.R*
          (dX_air*(1 - X_liquid) + dX_liq*X_air))/(1 - X_liquid)/(1 - X_liquid);

        u_der := X_steam*myMedia.IdealGases.Common.Functions.h_Tlow_der(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5,
                dT=dT) + dX_steam*myMedia.IdealGases.Common.Functions.h_Tlow(
                data=steam,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=46479.819 + 2501014.5) + X_air*myMedia.IdealGases.Common.Functions.h_Tlow_der(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684,
                dT=dT) + dX_air*myMedia.IdealGases.Common.Functions.h_Tlow(
                data=dryair,
                T=T,
                refChoice=ReferenceEnthalpy.UserDefined,
                h_off=25104.684) + X_liquid*enthalpyOfWater_der(T=T, dT=dT) + dX_liq*enthalpyOfWater(T) - dR_gas*T - R_gas*dT;
        annotation (Documentation(info="<html>
Derivative function for <a href=\"modelica://Modelica.Media.Air.MoistAir.specificInternalEnergy_pTX\">specificInternalEnergy_pTX</a>.
</html>"));
      end specificInternalEnergy_pTX_der;

      redeclare function extends specificEntropy
        "Return specific entropy from thermodynamic state record, only valid for phi<1"

      algorithm
        s := s_pTX(
              state.p,
              state.T,
              state.X);
        annotation (
          Inline=false,
          smoothOrder=2,
          Documentation(info="<html>
Specific entropy is calculated from the thermodynamic state record, assuming ideal gas behavior and including entropy of mixing. Liquid or solid water is not taken into account, the entire water content X[1] is assumed to be in the vapor state (relative humidity below 1.0).
</html>"));
      end specificEntropy;

      redeclare function extends specificGibbsEnergy
        "Return specific Gibbs energy as a function of the thermodynamic state record, only valid for phi<1"
        extends Modelica.Icons.Function;
      algorithm
        g := h_pTX(
              state.p,
              state.T,
              state.X) - state.T*specificEntropy(state);
        annotation (smoothOrder=2, Documentation(info="<html>
The Gibbs Energy is computed from the thermodynamic state record for moist air with a water content below saturation.
</html>"));
      end specificGibbsEnergy;

      redeclare function extends specificHelmholtzEnergy
        "Return specific Helmholtz energy as a function of the thermodynamic state record, only valid for phi<1"
        extends Modelica.Icons.Function;
      algorithm
        f := h_pTX(
              state.p,
              state.T,
              state.X) - gasConstant(state)*state.T - state.T*specificEntropy(
          state);
        annotation (smoothOrder=2, Documentation(info="<html>
The Specific Helmholtz Energy is computed from the thermodynamic state record for moist air with a water content below saturation.
</html>"));
      end specificHelmholtzEnergy;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant pressure as a function of the thermodynamic state record"

      protected
        Real dT(unit="s/K") = 1.0;
      algorithm
        cp := h_pTX_der(
              state.p,
              state.T,
              state.X,
              0.0,
              1.0,
              zeros(size(state.X, 1)))*dT "Definition of cp: dh/dT @ constant p";
        //      cp:= SingleGasNasa.cp_Tlow(dryair, state.T)*(1-state.X[Water])
        //        + SingleGasNasa.cp_Tlow(steam, state.T)*state.X[Water];
        annotation (
          Inline=false,
          smoothOrder=2,
          Documentation(info="<html>
The specific heat capacity at constant pressure <strong>cp</strong> is computed from temperature and composition for a mixture of steam (X[1]) and dry air. All water is assumed to be in the vapor state.
</html>"));
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Return specific heat capacity at constant volume as a function of the thermodynamic state record"

      algorithm
        cv := myMedia.IdealGases.Common.Functions.cp_Tlow(dryair, state.T)*(1 - state.X[Water]) + myMedia.IdealGases.Common.Functions.cp_Tlow(steam,
          state.T)*state.X[Water] - gasConstant(state);
        annotation (
          Inline=false,
          smoothOrder=2,
          Documentation(info="<html>
The specific heat capacity at constant density <strong>cv</strong> is computed from temperature and composition for a mixture of steam (X[1]) and dry air. All water is assumed to be in the vapor state.
</html>"));
      end specificHeatCapacityCv;

    redeclare function extends dynamicViscosity
        "Return dynamic viscosity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K"

      import ThermofluidStream.Media.myMedia.Incompressible.TableBased.Polynomials_Temp;
    algorithm
      eta := 1e-6*Polynomials_Temp.evaluateWithRange(
          {9.7391102886305869E-15,-3.1353724870333906E-11,4.3004876595642225E-08,
          -3.8228016291758240E-05,5.0427874367180762E-02,1.7239260139242528E+01},
          Cv.to_degC(123.15),
          Cv.to_degC(1273.15),
          Cv.to_degC(state.T));
      annotation (smoothOrder=2, Documentation(info="<html>
<p>Dynamic viscosity is computed from temperature using a simple polynomial for dry air. Range of validity is from 123.15 K to 1273.15 K. The influence of pressure and moisture is neglected.</p>
<p>Source: VDI Waermeatlas, 8th edition.</p>
</html>"));
    end dynamicViscosity;

    redeclare function extends thermalConductivity
        "Return thermal conductivity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K"
      import ThermofluidStream.Media.myMedia.Incompressible.TableBased.Polynomials_Temp;
      import Cv = Modelica.SIunits.Conversions;
    algorithm
      lambda := 1e-3*Polynomials_Temp.evaluateWithRange(
          {6.5691470817717812E-15,-3.4025961923050509E-11,5.3279284846303157E-08,
          -4.5340839289219472E-05,7.6129675309037664E-02,2.4169481088097051E+01},
          Cv.to_degC(123.15),
          Cv.to_degC(1273.15),
          Cv.to_degC(state.T));

      annotation (smoothOrder=2, Documentation(info="<html>
<p>Thermal conductivity is computed from temperature using a simple polynomial for dry air. Range of validity is from 123.15 K to 1273.15 K. The influence of pressure and moisture is neglected.</p>
<p>Source: VDI Waermeatlas, 8th edition.</p>
</html>"));
    end thermalConductivity;

      redeclare function extends velocityOfSound
      algorithm
        a := sqrt(isentropicExponent(state)*gasConstant(state)*temperature(state));
        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end velocityOfSound;

      redeclare function extends isobaricExpansionCoefficient

      algorithm
        beta := 1/temperature(state);
        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end isobaricExpansionCoefficient;

      redeclare function extends isothermalCompressibility

      algorithm
        kappa := 1/pressure(state);
        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end isothermalCompressibility;

      redeclare function extends density_derp_h

      algorithm
        ddph := 1/(gasConstant(state)*temperature(state));

        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end density_derp_h;

      redeclare function extends density_derh_p

      algorithm
        ddhp := -density(state)/(specificHeatCapacityCp(state)*temperature(state));
        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end density_derh_p;

      redeclare function extends density_derp_T

      algorithm
        ddpT := 1/(gasConstant(state)*temperature(state));

        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end density_derp_T;

      redeclare function extends density_derT_p

      algorithm
        ddTp := -density(state)/temperature(state);
        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end density_derT_p;

      redeclare function extends density_derX

      algorithm
        dddX[Water] := pressure(state)*(steam.R - dryair.R)/((steam.R - dryair.R)
          *state.X[Water]*temperature(state) + dryair.R*temperature(state))^2;
        dddX[Air] := pressure(state)*(dryair.R - steam.R)/((dryair.R - steam.R)*
          state.X[Air]*temperature(state) + steam.R*temperature(state))^2;

        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end density_derX;

      redeclare function extends molarMass
      algorithm
        MM := Modelica.Constants.R/myMedia.Air.MoistAir.gasConstant(state);
        annotation (Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end molarMass;

      function T_psX
        "Return temperature as a function of pressure p, specific entropy s and composition X"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input MassFraction[:] X "Mass fractions of composition";
        output Temperature T "Temperature";

      protected
        package Internal "Solve s(data,T) for T with given s"
          extends myMedia.Common.OneNonLinearEquation;
          redeclare record extends f_nonlinear_Data
            "Data to be passed to non-linear function"
            extends myMedia.IdealGases.Common.DataRecord;
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
          algorithm
            y := s_pTX(
                      p,
                      x,
                      X);
          end f_nonlinear;

          // Dummy definition has to be added for current Dymola
          redeclare function extends solve
          end solve;
        end Internal;

      algorithm
        T := Internal.solve(
              s,
              190,
              647,
              p,
              X[1:nX],
              steam);
        annotation (Documentation(info="<html>
Temperature is computed from pressure, specific entropy and composition via numerical inversion of function <a href=\"modelica://Modelica.Media.Air.MoistAir.specificEntropy\">specificEntropy</a>.
</html>",   revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end T_psX;

      redeclare function extends setState_psX
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
              p=p,
              T=T_psX(
                p,
                s,
                X),
              X=X) else ThermodynamicState(
              p=p,
              T=T_psX(
                p,
                s,
                X),
              X=cat(
                1,
                X,
                {1 - sum(X)}));
        annotation (smoothOrder=2, Documentation(info="<html>
The <a href=\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\">thermodynamic state record</a> is computed from pressure p, specific enthalpy h and composition X.
</html>",   revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end setState_psX;

      function s_pTX
        "Return specific entropy of moist air as a function of pressure p, temperature T and composition X (only valid for phi<1)"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.MassFraction X[:] "Mass fractions of moist air";
        output SI.SpecificEntropy s "Specific entropy at p, T, X";
      protected
        MoleFraction[2] Y=massToMoleFractions(X, {steam.MM,dryair.MM})
          "Molar fraction";

      algorithm
        s := myMedia.IdealGases.Common.Functions.s0_Tlow(dryair, T)*(1 - X[Water]) + myMedia.IdealGases.Common.Functions.s0_Tlow(steam, T)*X[Water]
           - Modelica.Constants.R*(Utilities.smoothMax(
                X[Water]/MMX[Water]*Modelica.Math.log(max(Y[Water], Modelica.Constants.eps)*p/reference_p),
                0.0,
                1e-9) - Utilities.smoothMax(
                (1 - X[Water])/MMX[Air]*Modelica.Math.log(max(Y[Air], Modelica.Constants.eps)*p/reference_p),
                0.0,
                1e-9));
        annotation (
          derivative=s_pTX_der,
          Inline=false,
          Documentation(info="<html>
Specific entropy of moist air is computed from pressure, temperature and composition with X[1] as the total water mass fraction.
</html>",   revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"),Icon(graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={255,127,0},
                textString="f")}));
      end s_pTX;

      function s_pTX_der
        "Return specific entropy of moist air as a function of pressure p, temperature T and composition X (only valid for phi<1)"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.MassFraction X[:] "Mass fractions of moist air";
        input Real dp(unit="Pa/s") "Derivative of pressure";
        input Real dT(unit="K/s") "Derivative of temperature";
        input Real dX[nX](each unit="1/s") "Derivative of mass fractions";
        output Real ds(unit="J/(kg.K.s)") "Specific entropy at p, T, X";
      protected
        MoleFraction[2] Y=massToMoleFractions(X, {steam.MM,dryair.MM})
          "Molar fraction";

      algorithm
        ds := myMedia.IdealGases.Common.Functions.s0_Tlow_der(
                dryair,
                T,
                dT)*(1 - X[Water]) + myMedia.IdealGases.Common.Functions.s0_Tlow_der(
                steam,
                T,
                dT)*X[Water] + myMedia.IdealGases.Common.Functions.s0_Tlow(dryair, T)*dX[Air] + myMedia.IdealGases.Common.Functions.s0_Tlow(steam, T)
          *dX[Water] - Modelica.Constants.R*(1/MMX[Water]*Utilities.smoothMax_der(
                X[Water]*Modelica.Math.log(max(Y[Water], Modelica.Constants.eps)*p/reference_p),
                0.0,
                1e-9,
                (Modelica.Math.log(max(Y[Water], Modelica.Constants.eps)*p/reference_p) + (X[Water]/Y[Water]*(X[Air]*MMX[Water]/(X[Air]*MMX[Water] +
            X[Water]*MMX[Air])^2)))*dX[Water] + X[Water]*reference_p/p*dp,
                0,
                0) - 1/MMX[Air]*Utilities.smoothMax_der(
                (1 - X[Water])*Modelica.Math.log(max(Y[Air], Modelica.Constants.eps)*p/reference_p),
                0.0,
                1e-9,
                (Modelica.Math.log(max(Y[Air], Modelica.Constants.eps)*p/reference_p) + (X[Air]/Y[Air]*(X[Water]*MMX[Air]/(X[Air]*MMX[Water] + X[
            Water]*MMX[Air])^2)))*dX[Air] + X[Air]*reference_p/p*dp,
                0,
                0));
        annotation (
          Inline=false,
          smoothOrder=1,
          Documentation(info="<html>
Specific entropy of moist air is computed from pressure, temperature and composition with X[1] as the total water mass fraction.
</html>",   revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"),Icon(graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={255,127,0},
                textString="f")}));
      end s_pTX_der;

      redeclare function extends isentropicEnthalpy
        "Isentropic enthalpy (only valid for phi<1)"
        extends Modelica.Icons.Function;
      algorithm
        h_is := myMedia.Air.MoistAir.h_pTX(
                p_downstream,
                myMedia.Air.MoistAir.T_psX(
                  p_downstream,
                  myMedia.Air.MoistAir.specificEntropy(refState),
                  refState.X),
                refState.X);

        annotation (Icon(graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={255,127,0},
                textString="f")}), Documentation(revisions="<html>
<p>2012-01-12        Stefan Wischhusen: Initial Release.</p>
</html>"));
      end isentropicEnthalpy;

      package Utilities "Utility functions"
        extends Modelica.Icons.UtilitiesPackage;
        function spliceFunction "Spline interpolation of two functions"
          extends Modelica.Icons.Function;
          input Real pos "Returned value for x-deltax >= 0";
          input Real neg "Returned value for x+deltax <= 0";
          input Real x "Function argument";
          input Real deltax=1 "Region around x with spline interpolation";
          output Real out;
        protected
          Real scaledX;
          Real scaledX1;
          Real y;
        algorithm
          scaledX1 := x/deltax;
          scaledX := scaledX1*Modelica.Math.asin(1);
          if scaledX1 <= -0.999999999 then
            y := 0;
          elseif scaledX1 >= 0.999999999 then
            y := 1;
          else
            y := (Modelica.Math.tanh(Modelica.Math.tan(scaledX)) + 1)/2;
          end if;
          out := pos*y + (1 - y)*neg;
          annotation (derivative=spliceFunction_der);
        end spliceFunction;

        function spliceFunction_der "Derivative of spliceFunction"
          extends Modelica.Icons.Function;
          input Real pos;
          input Real neg;
          input Real x;
          input Real deltax=1;
          input Real dpos;
          input Real dneg;
          input Real dx;
          input Real ddeltax=0;
          output Real out;
        protected
          Real scaledX;
          Real scaledX1;
          Real dscaledX1;
          Real y;
        algorithm
          scaledX1 := x/deltax;
          scaledX := scaledX1*Modelica.Math.asin(1);
          dscaledX1 := (dx - scaledX1*ddeltax)/deltax;
          if scaledX1 <= -0.99999999999 then
            y := 0;
          elseif scaledX1 >= 0.9999999999 then
            y := 1;
          else
            y := (Modelica.Math.tanh(Modelica.Math.tan(scaledX)) + 1)/2;
          end if;
          out := dpos*y + (1 - y)*dneg;
          if (abs(scaledX1) < 1) then
            out := out + (pos - neg)*dscaledX1*Modelica.Math.asin(1)/2/(
              Modelica.Math.cosh(Modelica.Math.tan(scaledX))*Modelica.Math.cos(
              scaledX))^2;
          end if;
        end spliceFunction_der;

        function smoothMax
          extends Modelica.Icons.Function;
          import Modelica.Math;

          input Real x1 "First argument of smooth max operator";
          input Real x2 "Second argument of smooth max operator";
          input Real dx
            "Approximate difference between x1 and x2, below which regularization starts";
          output Real y "Result of smooth max operator";
        algorithm
          y := max(x1, x2) + Math.log((exp((4/dx)*(x1 - max(x1, x2)))) + (exp((4/
            dx)*(x2 - max(x1, x2)))))/(4/dx);
          annotation (smoothOrder=2, Documentation(info="<html>
<p>An implementation of Kreisselmeier Steinhauser smooth maximum</p>
</html>"));
        end smoothMax;

        function smoothMax_der
          extends Modelica.Icons.Function;

          import Modelica.Math.exp;
          import Modelica.Math.log;

          input Real x1 "First argument of smooth max operator";
          input Real x2 "Second argument of smooth max operator";
          input Real dx
            "Approximate difference between x1 and x2, below which regularization starts";
          input Real dx1;
          input Real dx2;
          input Real ddx;
          output Real dy "Derivative of smooth max operator";
        algorithm
          dy := (if x1 > x2 then dx1 else dx2) + 0.25*(((4*(dx1 - (if x1 > x2
             then dx1 else dx2))/dx - 4*(x1 - max(x1, x2))*ddx/dx^2)*exp(4*(x1 -
            max(x1, x2))/dx) + (4*(dx2 - (if x1 > x2 then dx1 else dx2))/dx - 4*(
            x2 - max(x1, x2))*ddx/dx^2)*exp(4*(x2 - max(x1, x2))/dx))*dx/(exp(4*(
            x1 - max(x1, x2))/dx) + exp(4*(x2 - max(x1, x2))/dx)) + log(exp(4*(x1
             - max(x1, x2))/dx) + exp(4*(x2 - max(x1, x2))/dx))*ddx);

          annotation (Documentation(info="<html>
<p>An implementation of Kreisselmeier Steinhauser smooth maximum</p>
</html>"));
        end smoothMax_der;
      end Utilities;
      annotation (Documentation(info="<html>
<h4>Thermodynamic Model</h4>
<p>This package provides a full thermodynamic model of moist air including the fog region and temperatures below zero degC.
The governing assumptions in this model are:</p>
<ul>
<li>the perfect gas law applies</li>
<li>water volume other than that of steam is neglected</li></ul>
<p>All extensive properties are expressed in terms of the total mass in order to comply with other media in this library. However, for moist air it is rather common to express the absolute humidity in terms of mass of dry air only, which has advantages when working with charts. In addition, care must be taken, when working with mass fractions with respect to total mass, that all properties refer to the same water content when being used in mathematical operations (which is always the case if based on dry air only). Therefore two absolute humidities are computed in the <strong>BaseProperties</strong> model: <strong>X</strong> denotes the absolute humidity in terms of the total mass while <strong>x</strong> denotes the absolute humidity per unit mass of dry air. In addition, the relative humidity <strong>phi</strong> is also computed.</p>
<p>At the triple point temperature of water of 0.01 &deg;C or 273.16 K and a relative humidity greater than 1 fog may be present as liquid and as ice resulting in a specific enthalpy somewhere between those of the two isotherms for solid and liquid fog, respectively. For numerical reasons a coexisting mixture of 50% solid and 50% liquid fog is assumed in the fog region at the triple point in this model.</p>

<h4>Range of validity</h4>
<p>From the assumptions mentioned above it follows that the <strong>pressure</strong> should be in the region around <strong>atmospheric</strong> conditions or below (a few bars may still be fine though). Additionally a very high water content at low temperatures would yield incorrect densities, because the volume of the liquid or solid phase would not be negligible anymore. The model does not provide information on limits for water drop size in the fog region or transport information for the actual condensation or evaporation process in combination with surfaces. All excess water which is not in its vapour state is assumed to be still present in the air regarding its energy but not in terms of its spatial extent.<br><br>
The thermodynamic model may be used for <strong>temperatures</strong> ranging from <strong>190 ... 647 K</strong>. This holds for all functions unless otherwise stated in their description. However, although the model works at temperatures above the saturation temperature it is questionable to use the term \"relative humidity\" in this region. Please note, that although several functions compute pure water properties, they are designed to be used within the moist air medium model where properties are dominated by air and steam in their vapor states, and not for pure liquid water applications.</p>

<h4>Transport Properties</h4>
<p>Several additional functions that are not needed to describe the thermodynamic system, but are required to model transport processes, like heat and mass transfer, may be called. They usually neglect the moisture influence unless otherwise stated.</p>

<h4>Application</h4>
<p>The model's main area of application is all processes that involve moist air cooling under near atmospheric pressure with possible moisture condensation. This is the case in all domestic and industrial air conditioning applications. Another large domain of moist air applications covers all processes that deal with dehydration of bulk material using air as a transport medium. Engineering tasks involving moist air are often performed (or at least visualized) by using charts that contain all relevant thermodynamic data for a moist air system. These so called psychrometric charts can be generated from the medium properties in this package. The model <a href=\"modelica://Modelica.Media.Examples.PsychrometricData\">PsychrometricData</a> may be used for this purpose in order to obtain data for figures like those below (the plotting itself is not part of the model though).</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Media/Air/Mollier.png\"><br>
<img src=\"modelica://Modelica/Resources/Images/Media/Air/PsycroChart.png\">
</p>

<p>
<strong>Legend:</strong> blue - constant specific enthalpy, red - constant temperature, black - constant relative humidity</p>

</html>"));
    end MoistAir;

    package ReferenceMoistAir
      "ReferenceMoistAir: Detailed moist air model (143.15 ... 2000 K)"

      extends myMedia.Interfaces.PartialRealCondensingGases(
        mediumName="Moist air",
        substanceNames={"Water","Air"},
        final fixedX=false,
        final reducedX=true,
        final singleState=false,
        reference_X={0.01,0.99},
        fluidConstants={Utilities.Water95_Utilities.waterConstants,myMedia.Air.ReferenceAir.airConstants},
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pTX);

      constant Integer Water=1
        "Index of water (in substanceNames, massFractions X, etc.)";

      constant Integer Air=2
        "Index of air (in substanceNames, massFractions X, etc.)";

      constant Boolean useEnhancementFactor=false
        "Use the enhancement factor in the calculations";

      constant Boolean useDissociation=true
        "Take dissociation into account for high temperatures";

      constant Real k_mair=steam.MM/dryair.MM "Ratio of molar weights";

      constant Common.FundamentalConstants dryair=ReferenceAir.Air_Utilities.Basic.Constants;
      constant Common.FundamentalConstants steam=Utilities.Water95_Utilities.Constants;
      constant SI.MolarMass[2] MMX={steam.MM,dryair.MM}
        "Molar masses of components";

      import ThermofluidStream.Media.myMedia.Interfaces;
      import Modelica.Math;
      import SI = Modelica.SIunits;
      import Cv = Modelica.SIunits.Conversions;
      import Modelica.Constants;
      import ThermofluidStream.Media.myMedia.IdealGases.Common.SingleGasNasa;

      redeclare record extends ThermodynamicState
        "ThermodynamicState record for moist air"
      end ThermodynamicState;

      redeclare replaceable model extends BaseProperties(
        T(stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default),
        p(stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default),
        Xi(each stateSelect=if preferredMediumStates then StateSelect.prefer else
              StateSelect.default),
        final standardOrderComponents=true) "Moist air base properties record"

        Real x_water "Mass of total water/mass of dry air";
        Real phi "Relative humidity";

      protected
        MassFraction X_liquid "Mass fraction of liquid or solid water";
        MassFraction X_steam "Mass fraction of steam water";
        MassFraction X_air "Mass fraction of air";
        MassFraction X_sat
          "Steam water mass fraction of saturation boundary in kg_water/kg_moistair";
        Real x_sat
          "Steam water mass content of saturation boundary in kg_water/kg_dryair";
        AbsolutePressure p_steam_sat "partial saturation pressure of steam";
      equation
        assert(T >= 143.15 and T <= 2000,
          "Temperature T is not in the allowed range 143.15 K <= (T =" + String(T)
           + " K) <= 2000 K required from medium model \"" + mediumName + "\".");

        MM = 1/(Xi[Water]/MMX[Water] + (1.0 - Xi[Water])/MMX[Air]);

        p_steam_sat = myMedia.Air.ReferenceMoistAir.Utilities.pds_pT(p, T);
        X_sat = myMedia.Air.ReferenceMoistAir.Xsaturation(state);
        X_liquid = max(Xi[Water] - X_sat, 0.0);
        X_steam = Xi[Water] - X_liquid;
        X_air = 1 - Xi[Water];

        h = specificEnthalpy_pTX(
            p,
            T,
            Xi);
        R = dryair.R*(X_air/(1 - X_liquid)) + steam.R*X_steam/(1 - X_liquid);
        u = myMedia.Air.ReferenceMoistAir.Utilities.u_pTX(
                p,
                T,
                Xi);
        d = myMedia.Air.ReferenceMoistAir.Utilities.rho_pTX(
                p,
                T,
                Xi);
        state.p = p;
        state.T = T;
        state.X = X;

        // these x are per unit mass of DRY air!
        x_sat = myMedia.Air.ReferenceMoistAir.xsaturation(state);
        x_water = myMedia.Air.ReferenceMoistAir.waterContent_X(state.X);
        phi = myMedia.Air.ReferenceMoistAir.Utilities.phi_pTX(
                p,
                T,
                Xi);

        annotation (Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Resolved a problem for high saturation pressures and temperatures.
</html>"));
      end BaseProperties;

      redeclare function extends setState_pTX
        "Return thermodynamic state as function of pressure p, temperature T and composition X"
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
            p=p,
            T=T,
            X=X) else ThermodynamicState(
            p=p,
            T=T,
            X=cat(
              1,
              X,
              {1 - sum(X)}));
      end setState_pTX;

      redeclare function extends setState_phX
        "Return thermodynamic state as function of pressure p, specific enthalpy h and composition X"
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
                p=p,
                T=myMedia.Air.ReferenceMoistAir.Utilities.Inverses.T_phX(
                  p,
                  h,
                  X),
                X=X) else ThermodynamicState(
                p=p,
                T=myMedia.Air.ReferenceMoistAir.Utilities.Inverses.T_phX(
                  p,
                  h,
                  X),
                X=cat(
                  1,
                  X,
                  {1 - sum(X)}));
      end setState_phX;

      redeclare function extends setState_psX
        "Return thermodynamic state as function of pressure p, specific enthalpy h and composition X"
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
                p=p,
                T=myMedia.Air.ReferenceMoistAir.Utilities.Inverses.T_psX(
                  p,
                  s,
                  X),
                X=X) else ThermodynamicState(
                p=p,
                T=myMedia.Air.ReferenceMoistAir.Utilities.Inverses.T_psX(
                  p,
                  s,
                  X),
                X=cat(
                  1,
                  X,
                  {1 - sum(X)}));
      end setState_psX;

      redeclare function extends setState_dTX
        "Return thermodynamic state as function of density d, temperature T and composition X"
      algorithm
        state := if size(X, 1) == nX then ThermodynamicState(
                p=myMedia.Air.ReferenceMoistAir.Utilities.Inverses.p_dTX(
                  d,
                  T,
                  X),
                T=T,
                X=X) else ThermodynamicState(
                p=myMedia.Air.ReferenceMoistAir.Utilities.Inverses.p_dTX(
                  d,
                  T,
                  X),
                T=T,
                X=cat(
                  1,
                  X,
                  {1 - sum(X)}));
      end setState_dTX;

      redeclare function extends setSmoothState
        "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
      algorithm
        state := ThermodynamicState(
                p=myMedia.Common.smoothStep(
                  x,
                  state_a.p,
                  state_b.p,
                  x_small),
                T=myMedia.Common.smoothStep(
                  x,
                  state_a.T,
                  state_b.T,
                  x_small),
                X=myMedia.Common.smoothStep(
                  x,
                  state_a.X,
                  state_b.X,
                  x_small));
      end setSmoothState;

      function Xsaturation
        "Return absolute humitity per unit mass of moist air at saturation as a function of the thermodynamic state record"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction X_sat "Steam mass fraction of sat. boundary";
      protected
        MassFraction[:] X;
      algorithm
        X := massFractionSaturation(state);
        X_sat := X[1];
      end Xsaturation;

      function xsaturation
        "Return absolute humitity per unit mass of dry air at saturation as a function of the thermodynamic state record"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction x_sat "Absolute humidity per unit mass of dry air";
      algorithm
        x_sat := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(state.p, state.T);
        assert(x_sat > -1,
          "Calculation of absolute humidity is meaningless\nfor input pressure p = "
           + String(state.p) + " Pa and temperature T = " + String(state.T) + " K.");
      end xsaturation;

      redeclare function extends massFraction_pTphi
        "Return mass fractions as a function of pressure, temperature and relative humidity"
      protected
        Real pds;

      algorithm
        assert(phi < 1.0 and phi > 0, "Illegal input phi = " + String(phi) +
          ". Relative humidity is only defined in the range\n 0 <= phi <= 1.0.");
        pds := myMedia.Air.ReferenceMoistAir.Utilities.pds_pT(p, T);
        assert(pds > -1,
          "Calculation of mass fraction of steam is meaningless\nfor input pressure p = "
           + String(p) + " Pa and temperature T = " + String(T) + " K.");
        X := {phi*k_mair/(p/pds - phi),1 - phi*k_mair/(p/pds - phi)};
      end massFraction_pTphi;

      function massFractionWaterVapor "Return mass fraction of water vapor"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction X "Mass fraction of water vapor";
      protected
        Real xw;
        Real xws;
      algorithm
        xw := state.X[1]/max(100*Modelica.Constants.eps, (1 - state.X[1]));
        xws := Utilities.xws_pT(state.p, state.T);
        X := if (xw <= xws) then xw/(1 + xw) else xws/(1 + xw);
        annotation (Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Guard introduced against division by zero.
</html>"));
      end massFractionWaterVapor;

      function massFractionWaterNonVapor
        "Return mass fraction of liquid and solid water"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output MassFraction X "Mass fraction of water varpor";
      protected
        Real xw;
        Real xws;
      algorithm
        xw := state.X[1]/max(100*Modelica.Constants.eps, (1 - state.X[1]));
        xws := Utilities.xws_pT(state.p, state.T);
        X := if (xw <= xws) then 0 else (xw - xws)/(1 + xw);
        annotation (Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Guard introduced against division by zero.
</html>"));
      end massFractionWaterNonVapor;

      redeclare function extends massFractionSaturation
        "Return saturation mass fractions"
      protected
        AbsolutePressure pds;
      algorithm
        pds := Utilities.pds_pT(state.p, state.T);
        Xsat := {k_mair/(state.p/pds - 1 + k_mair),(state.p/pds - 1)/(state.p/pds
           - 1 + k_mair)};
        assert(Xsat[1] > -1,
          "Calculation of saturation mass fraction is meaningless\nfor input pressure p = "
           + String(state.p) + " Pa and temperature T = " + String(state.T) + " K.");
      end massFractionSaturation;

      function massFractionSaturation_ppsat
        "Return mass fvraction at saturation boundary given pressure and saturation pressure"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Ambient pressure";
        input AbsolutePressure psat "Saturation pressure";
        output MassFraction[:] X "Mass fraction";
      algorithm
        X := {k_mair/(p/psat - 1 + k_mair),(p/psat - 1)/(p/psat - 1 + k_mair)};
      end massFractionSaturation_ppsat;

      function massFraction_waterContent
        "Return mass fractions as a function of pressure, temperature and absolute humidity in kg(water)/kg(dry air)"
        extends Modelica.Icons.Function;
        input Real xw "Water content in kg(water)/kg(dry air)";
        output MassFraction[:] X "Mass fractions";
      algorithm
        X := {xw/(1 + xw),1/(1 + xw)};
      end massFraction_waterContent;

      function waterContent_X
        "Return water content in kg(water)/kg(dry air) given mass fractions"
        extends Modelica.Icons.Function;
        input MassFraction[:] X "Mass fractions";
        output Real xw "Water content in kg(water)/kg(dry air)";
      algorithm
        xw := X[1]/max(100*Modelica.Constants.eps, (1 - X[1]));
        annotation (Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Guard introduced against division by zero.
</html>"));
      end waterContent_X;

      redeclare function extends relativeHumidity "Return relative humidity"
      algorithm
        phi := Utilities.phi_pTX(
            state.p,
            state.T,
            state.X);
        assert(phi > -1,
          "Calculation of relative humidity is meaningless\nfor input pressure p = "
           + String(state.p) + " Pa and temperature T = " + String(state.T) + " K.");
      end relativeHumidity;

      redeclare function extends gasConstant
        "Return ideal gas constant as a function from thermodynamic state, only valid for phi<1"

      algorithm
        R := dryair.R*(1 - state.X[Water]) + steam.R*state.X[Water];
      end gasConstant;

      function saturationPressureLiquid
        "Return saturation pressure of water as a function of temperature T"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output AbsolutePressure psat "Saturation pressure";
      algorithm
        psat := myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.psat(state.T);
      end saturationPressureLiquid;

      function sublimationPressureIce
        "Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output AbsolutePressure psat "Sublimation pressure";
      algorithm
        psat := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.psub(state.T);
      end sublimationPressureIce;

      redeclare function extends saturationPressure
        "Return saturation pressure of condensing fluid"
      algorithm
        psat := Utilities.pds_pT(state.p, state.T);
        assert(psat > -1,
          "Calculation of saturation pressure is meaningless\nfor input temperature T = "
           + String(state.T) + " K.");
      end saturationPressure;

      redeclare function extends saturationTemperature
        "Return saturation temperature of condensing fluid"
      protected
        partial function Tsat_res
          extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;
          input SI.Pressure p "Pressure";

        algorithm
          y := myMedia.Air.ReferenceMoistAir.Utilities.pds_pT(p=p, T=u) - p;
        end Tsat_res;

      algorithm
        Tsat := Modelica.Math.Nonlinear.solveOneNonlinearEquation(
            function Tsat_res(p=state.p),
            50.0,
            673.15,
            1e-9);
      end saturationTemperature;

      redeclare function extends enthalpyOfVaporization
        "Return enthalpy of vaporization of water"
      protected
        AbsolutePressure p_liq;
      algorithm
        p_liq := saturationPressureLiquid(state);
        r0 := myMedia.Water.IF97_Utilities.hv_p(p_liq) - myMedia.Water.IF97_Utilities.hl_p(p_liq);
      end enthalpyOfVaporization;

      redeclare function extends enthalpyOfLiquid "Return enthalpy of liquid water"
      protected
        Real xw;
        Real xws;
      algorithm
        xw := state.X[1]/(1 - state.X[1]);
        xws := Utilities.xws_pT(state.p, state.T);
        if ((xws > xw) and (state.T > 273.15)) then
          h := myMedia.Water.IF97_Utilities.h_pT(
                  state.p,
                  state.T,
                  region=1);
        else
          h := 0;
        end if;
      end enthalpyOfLiquid;

      redeclare function extends enthalpyOfGas
        "Return specific enthalpy of gas (air and steam)"
      protected
        Real xw;
        Real xws;
        Real pd;
        Real pl;

      algorithm
        pd := Utilities.pd_pTX(
            state.p,
            state.T,
            state.X);
        pl := state.p - pd;
        xw := state.X[1]/(1 - state.X[1]);
        xws := Utilities.xws_pT(state.p, state.T);
        if ((xw <= xws) or (xws == -1)) then
          h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, state.T) + xw*Utilities.IF97_new.h_pT(pd, state.T);
        else
          if (state.T < 273.16) then
            h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, state.T) + xws*Utilities.IF97_new.h_pT(pd, state.T);
          else
            h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, state.T) + xws*Utilities.IF97_new.h_pT(pd, state.T);
          end if;
        end if;
        annotation (Inline=false, LateInline=true);
      end enthalpyOfGas;

      redeclare function extends enthalpyOfCondensingGas
        "Return specific enthalpy of steam"
      protected
        Real xw;
        Real pd;

      algorithm
        pd := Utilities.pd_pTX(
            state.p,
            state.T,
            state.X);
        xw := state.X[1]/(1 - state.X[1]);
        h := xw*Utilities.IF97_new.h_pT(pd, state.T);
        annotation (Inline=false, LateInline=true);
      end enthalpyOfCondensingGas;

      redeclare function extends enthalpyOfNonCondensingGas
        "Return specific enthalpy of dry air"

      algorithm
        h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(state.p, state.T);
      end enthalpyOfNonCondensingGas;

      function enthalpyOfDryAir = enthalpyOfNonCondensingGas
        "Return specific enthalpy of dry air";
      function enthalpyOfWater
        "Return specific enthalpy of water (solid + liquid + steam)"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SI.SpecificEnthalpy h "Specific enthalpy of water";
      algorithm
        h := specificEnthalpy(state) - enthalpyOfNonCondensingGas(state);
      end enthalpyOfWater;

      function enthalpyOfWaterVapor = enthalpyOfCondensingGas
        "Return specific enthalpy of steam";
      function enthalpyOfWaterNonVapor "Return enthalpy of liquid and solid water"
        extends Modelica.Icons.Function;
        input ThermodynamicState state "Thermodynamic state record";
        output SI.SpecificEnthalpy h "Specific enthalpy of water";
      algorithm
        h := enthalpyOfWater(state) - enthalpyOfWaterVapor(state);
      end enthalpyOfWaterNonVapor;

      redeclare function extends pressure
        "Returns pressure of ideal gas as a function of the thermodynamic state record"

      algorithm
        p := state.p;

      end pressure;

      redeclare function extends temperature
        "Return temperature of ideal gas as a function of the thermodynamic state record"

      algorithm
        T := state.T;

      end temperature;

      redeclare function extends density
        "Returns density as a function of the thermodynamic state record"

      algorithm
        d := Utilities.rho_pTX(
            state.p,
            state.T,
            state.X);

      end density;

      redeclare function extends density_derp_h
        "This is a crude approximation taken from MoistAir."

      algorithm
      ddph := 1/(gasConstant(state)*temperature(state));

      annotation (Documentation(revisions="<html>
  <p>This is a crude approximation taken from MoistAir.</p>
</html>"));
      end density_derp_h;

      redeclare function extends specificEnthalpy
        "Return specific enthalpy of moist air as a function of the thermodynamic state record"

      algorithm
        h := myMedia.Air.ReferenceMoistAir.Utilities.h_pTX(
                state.p,
                state.T,
                state.X);

      end specificEnthalpy;

      redeclare function extends specificInternalEnergy
        "Return specific internal energy of moist air as a function of the thermodynamic state record"

      algorithm
        u := Utilities.u_pTX(
            state.p,
            state.T,
            state.X);

      end specificInternalEnergy;

      redeclare function extends specificEntropy
        "Return specific entropy from thermodynamic state record, only valid for phi<1"

      algorithm
        s := Utilities.s_pTX(
            state.p,
            state.T,
            state.X);

      end specificEntropy;

      redeclare function extends specificGibbsEnergy
        "Return specific Gibbs energy as a function of the thermodynamic state record, only valid for phi<1"
      algorithm
        g := Utilities.h_pTX(
            state.p,
            state.T,
            state.X) - state.T*Utilities.s_pTX(
            state.p,
            state.T,
            state.X);

      end specificGibbsEnergy;

      redeclare function extends specificHelmholtzEnergy
        "Return specific Helmholtz energy as a function of the thermodynamic state record, only valid for phi<1"

      algorithm
        f := Utilities.u_pTX(
            state.p,
            state.T,
            state.X) - state.T*Utilities.s_pTX(
            state.p,
            state.T,
            state.X);

      end specificHelmholtzEnergy;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant pressure as a function of the thermodynamic state record"

      algorithm
        cp := Utilities.cp_pTX(
            state.p,
            state.T,
            state.X);

      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Return specific heat capacity at constant volume as a function of the thermodynamic state record"

      algorithm
        cv := Utilities.cv_pTX(
            state.p,
            state.T,
            state.X);

      end specificHeatCapacityCv;

      redeclare function extends isentropicExponent "Return isentropic exponent"
      algorithm
        gamma := specificHeatCapacityCp(state)/specificHeatCapacityCv(state);
      end isentropicExponent;

      redeclare function extends isentropicEnthalpy "Return isentropic enthalpy"
      protected
        MassFraction[nX] X "Complete X-vector";
      algorithm
        /*X := if reducedX then cat(
      1,
      refState.X,
      {1 - sum(refState.X)}) else refState.X;*/
        X := refState.X;
        h_is := specificEnthalpy(setState_psX(
            p_downstream,
            specificEntropy(refState),
            X));
        annotation (Documentation(revisions="<html>
2013-07-18 Stefan Wischhusen: Changed internal calculation of X.
</html>"));
      end isentropicEnthalpy;

      redeclare function extends velocityOfSound "Return velocity of sound"
      algorithm
        a := sqrt(max(0, gasConstant(state)*state.T*specificHeatCapacityCp(state)/
          specificHeatCapacityCv(state)));
      end velocityOfSound;

      redeclare function extends molarMass "Return the molar mass of the medium"
      algorithm
        MM := 1/(state.X[1]/steam.MM + state.X[2]/dryair.MM);
      end molarMass;

      redeclare function extends dynamicViscosity
        "Return dynamic viscosity as a function of the thermodynamic state record, valid from 73.15 K to 373.15 K"
      algorithm
        eta := Utilities.Transport.eta_pTX(
            state.p,
            state.T,
            state.X);

      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Return thermal conductivity as a function of the thermodynamic state record, valid from 73.15 K to 373.15 K"
      algorithm
        lambda := Utilities.Transport.lambda_pTX(
            state.p,
            state.T,
            state.X);

      end thermalConductivity;

      package Utilities "Utility package for moist air"
        extends Modelica.Icons.UtilitiesPackage;

        final constant MoleFraction[4] MMX={18.015257E-003,28.01348E-003,
            31.9988E-003,39.948E-003};

        final constant Real[3] Xi_Air={0.7557,0.2316,0.0127};

        package Inverses "Compute inverse function"
          extends Modelica.Icons.BasesPackage;

          function T_phX
            "Return temperature as a function of pressure, specific enthalpy and mass fractions"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
            input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
              "Mass fractions";
            output Modelica.SIunits.Temperature T "Temperature";

          protected
            MassFraction[nX] Xfull=if size(X, 1) == nX then X else cat(
                      1,
                      X,
                      {1 - sum(X)});

            function T_phX_res
              extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;
              input Modelica.SIunits.AbsolutePressure p "Pressure";
              input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
              input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
                "Mass fractions";
            algorithm
              y := myMedia.Air.ReferenceMoistAir.Utilities.h_pTX(
                            p=p,
                            T=u,
                            X=X) - h;
            end T_phX_res;

          algorithm
            T := Modelica.Math.Nonlinear.solveOneNonlinearEquation(
                    function T_phX_res(
                      p=p,
                      h=h,
                      X=Xfull),
                    173.15,
                    2000.0,
                    1e-9);
            annotation (inverse(h=
                    Modelica.Media.Air.ReferenceMoistAir.Utilities.h_pTX(
                          p=p,
                          T=T,
                          X=X)));
          end T_phX;

          function T_psX
            "Return temperature as function of pressure, specific entropy and mass fractions"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.SpecificEntropy s "Specific entropy";
            input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
              "Mass fractions";
            output Modelica.SIunits.Temperature T "Temperature";

          protected
            MassFraction[nX] Xfull=if size(X, 1) == nX then X else cat(
                      1,
                      X,
                      {1 - sum(X)});

            function T_psX_res
              extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;
              input Modelica.SIunits.AbsolutePressure p "Pressure";
              input Modelica.SIunits.SpecificEntropy s "Specific entropy";
              input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
                "Mass fractions";
            algorithm
              y := myMedia.Air.ReferenceMoistAir.Utilities.s_pTX(
                            p=p,
                            T=u,
                            X=X) - s;
            end T_psX_res;

          algorithm
            T := Modelica.Math.Nonlinear.solveOneNonlinearEquation(
                    function T_psX_res(
                      p=p,
                      s=s,
                      X=Xfull),
                    173.15,
                    2000.0,
                    1e-9);
            annotation (inverse(s=
                    Modelica.Media.Air.ReferenceMoistAir.Utilities.s_pTX(
                          p=p,
                          T=T,
                          X=X)));
          end T_psX;

          function p_dTX
            "Return pressure as function of density, temperature and mass fractions"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
              "Mass fractions";
            output Modelica.SIunits.AbsolutePressure p "Pressure";

          protected
            MassFraction[nX] Xfull=if size(X, 1) == nX then X else cat(
                      1,
                      X,
                      {1 - sum(X)});

            function p_dTX_res
              extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;
              input Modelica.SIunits.Density d "Density";
              input Modelica.SIunits.Temperature T "Temperature";
              input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
                "Mass fractions";
            algorithm
              y := myMedia.Air.ReferenceMoistAir.Utilities.rho_pTX(
                            p=u,
                            T=T,
                            X=X) - d;
            end p_dTX_res;

          algorithm
            p := Modelica.Math.Nonlinear.solveOneNonlinearEquation(
                    function p_dTX_res(
                      d=d,
                      T=T,
                      X=Xfull),
                    611.2,
                    1e7,
                    1e-9);
            annotation (inverse(d=
                    Modelica.Media.Air.ReferenceMoistAir.Utilities.rho_pTX(
                          p=p,
                          T=T,
                          X=X)), Documentation(revisions="<html>
2013-07-18 Stefan Wischhusen: Corrected inverse interval of pressure to complete range of medium model.
</html>"));
          end p_dTX;
        end Inverses;

        package Transport "Package for transport properties of moist air"
          extends Modelica.Icons.BasesPackage;

          record coef
            "Coefficients for polynomials used to calculate transport properties"
            extends Modelica.Icons.Record;
            Real sigma=2.52;
            Real epsilon=775;
            Real M=18.0152;
            Real R=0.46144;
            Real[5] w={0.69339511,-0.002597963,1.2864772,0.1576848,0.02543632};
            Real[5] a={0.4159259E+001,-0.1725577E-002,0.5702012E-005,-0.4596049E-008,
                0.1424309E-011};
          end coef;

          function eta_pTX "Dynamic viscosity"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
              "Mass fractions";
            output Modelica.SIunits.DynamicViscosity eta "Dynamic viscosity";

          protected
            Real ya;
            Real yd;
            Real yf;
            Real va;
            Real vd;
            Real vf;
            Real xw;
            Real xws;
            Real pd;
            Real pl;
            Real da;
            Real dd;
            Real df;
            Real Omega;
            Real Tred;
            Real etad;
            myMedia.Air.ReferenceMoistAir.Utilities.Transport.coef coef;

          algorithm
            xw := X[1]/(1 - X[1]);
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            pd := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX(
                        p,
                        T,
                        X);
            pl := p - pd;
            da := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T);
            if ((xw <= xws) or (xws == -1)) then
              if (T < 273.16) then
                dd := pd/(myMedia.Air.ReferenceMoistAir.steam.R*T);
                ya := da/(da + dd);
                yd := 1 - ya;
                Tred := T/coef.epsilon;
                Omega := coef.w[1] + coef.w[2]*Tred + coef.w[3]*Modelica.Math.exp(
                  coef.w[4]*Tred)/(coef.w[5] + Tred);
                etad := 2.6695E-006*sqrt(T*coef.M)/(coef.sigma^2*Omega);
                eta := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.eta_dT(da, T) + yd*etad;
              else
                dd := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.rho_pT(pd, T);
                ya := da/(da + dd);
                yd := 1 - ya;
                eta := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.eta_dT(da, T) + yd*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.visc_dT(dd, T);
              end if;
            else
              if (T < 273.16) then
                dd := pd/(myMedia.Air.ReferenceMoistAir.steam.R*T);
                ya := da/(da + dd);
                yd := 1 - ya;
                Tred := T/coef.epsilon;
                Omega := coef.w[1] + coef.w[2]*Tred + coef.w[3]*Modelica.Math.exp(
                  coef.w[4]*Tred)/(coef.w[5] + Tred);
                etad := 2.6695E-006*sqrt(T*coef.M)/(coef.sigma^2*Omega);
                eta := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.eta_dT(da, T) + yd*etad;
              else
                dd := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.rho_pT(pd, T);
                df := myMedia.Water.IF97_Utilities.rho_pT(p, T);
                yf := (xw - xws)/df/((1 + xws)/(da + dd) + (xw - xws)/df);
                ya := (1 - yf)/(1 + dd/da);
                yd := 1 - (ya + yf);
                eta := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.eta_dT(da, T) + yd*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.visc_dT(dd, T) + yf*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.visc_dT(df, T);
              end if;
            end if;
          end eta_pTX;

          function lambda_pTX "Thermal conductivity"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
              "Mass fractions";
            output Modelica.SIunits.ThermalConductivity lambda
              "Thermal conductivity";

          protected
            Real ya;
            Real yd;
            Real yf;
            Real va;
            Real vd;
            Real vf;
            Real xw;
            Real xws;
            Real pd;
            Real pl;
            Real da;
            Real dd;
            Real df;
            Real Omega;
            Real Tred;
            Real cp;
            Real Eu;
            Real lambdad;
            myMedia.Air.ReferenceMoistAir.Utilities.Transport.coef coef;

          algorithm
            xw := X[1]/(1 - X[1]);
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            pd := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX(
                        p,
                        T,
                        X);
            pl := p - pd;
            da := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T);
            if ((xw <= xws) or (xws == -1)) then
              if (T < 273.16) then
                dd := pd/(myMedia.Air.ReferenceMoistAir.steam.R*T);
                ya := da/(da + dd);
                yd := 1 - ya;
                Tred := T/coef.epsilon;
                Omega := coef.w[1] + coef.w[2]*Tred + coef.w[3]*Modelica.Math.exp(
                  coef.w[4]*Tred)/(coef.w[5] + Tred);
                cp := coef.a[1] + coef.a[2]*T + coef.a[3]*T^2 + coef.a[4]*T^3 +
                  coef.a[5]*T^4;
                Eu := 0.35424*cp + 0.1144;
                Eu := 0;
                lambdad := 0.083232*sqrt(T/coef.M)/(coef.sigma^2*Omega)*Eu;
                lambda := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.lambda_dT(da, T) + yd*lambdad;
              else
                dd := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.rho_pT(pd, T);
                ya := da/(da + dd);
                yd := 1 - ya;
                lambda := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.lambda_dT(da, T) + yd*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.cond_dT(dd, T);
              end if;
            else
              if (T < 273.16) then
                dd := pd/(myMedia.Air.ReferenceMoistAir.steam.R*T);
                df := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.rho_pT(p, T);
                yf := (xw - xws)/df/((1 + xws)/(da + dd) + (xw - xws)/df);
                ya := (1 - yf)/(1 + dd/da);
                yd := 1 - (ya + yf);
                Tred := T/coef.epsilon;
                Omega := coef.w[1] + coef.w[2]*Tred + coef.w[3]*Modelica.Math.exp(
                  coef.w[4]*Tred)/(coef.w[5] + Tred);
                cp := coef.a[1] + coef.a[2]*T + coef.a[3]*T^2 + coef.a[4]*T^3 +
                  coef.a[5]*T^4;
                Eu := 0.35424*cp + 0.1144;
                lambdad := 0.083232*sqrt(T/coef.M)/(coef.sigma^2*Omega)*Eu;
                lambda := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.lambda_dT(da, T) + yd*lambdad + yf*2.21;
              else
                dd := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.rho_pT(pd, T);
                df := myMedia.Water.IF97_Utilities.rho_pT(p, T);
                yf := (xw - xws)/df/((1 + xws)/(da + dd) + (xw - xws)/df);
                ya := (1 - yf)/(1 + dd/da);
                yd := 1 - (ya + yf);
                lambda := ya*myMedia.Air.ReferenceAir.Air_Utilities.Transport.lambda_dT(da, T) + yd*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.cond_dT(dd, T) + yf*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.cond_dT(df, T);
              end if;
            end if;
          end lambda_pTX;
        end Transport;

        package VirialCoefficients
          "Virial and cross-virial coefficients of air and water"
          extends Modelica.Icons.BasesPackage;

          function Baa_dT "Second molar virial coefficient of dry air"
            extends Modelica.Icons.Function;

            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarVolume baa "Second virial coefficient";

          protected
            final constant Real[19] N={0.118160747229,0.713116392079,-0.161824192067E+001,
                0.714140178971E-001,-0.865421396646E-001,0.134211176704,
                0.112626704218E-001,-0.420533228842E-001,0.349008431982E-001,
                0.164957183186E-003,-0.101365037912,-0.173813690970,-0.472103183731E-001,
                -0.122523554253E-001,-0.146629609713,-0.316055879821E-001,
                0.233594806142E-003,0.148287891978E-001,-0.938782884667E-002};
            final constant Integer[19] i={1,1,1,2,3,3,4,4,4,6,1,3,5,6,1,3,11,1,3};
            final constant Real[19] j={0,0.33,1.01,0,0,0.15,0,0.2,0.35,1.35,1.6,0.8,
                0.95,1.25,3.6,6,3.25,3.5,15};
            Real tau=ReferenceAir.Air_Utilities.Basic.Constants.Tred/T;

          algorithm
            baa := 0;
            for k in 1:19 loop
              baa := if (i[k] == 1) then baa + N[k]*tau^j[k] else baa;
            end for;
            baa := 1/ReferenceAir.Air_Utilities.Basic.Constants.rhored*baa;

          end Baa_dT;

          function Baw_dT "Second molar cross-virial coefficient"
            extends Modelica.Icons.Function;

            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarVolume baw
              "Second cross-virial coefficient";

          protected
            final constant Real[3] a={0.665687E+002,-0.238834E+003,-0.176755E+003};
            final constant Real[3] b={-0.237,-1.048,-3.183};

            Real theta;

          algorithm
            baw := 0;
            theta := T/100;
            for k in 1:3 loop
              baw := baw + a[k]*theta^b[k];
            end for;
            baw := baw*1E-006;
          end Baw_dT;

          function Bww_dT "Second molar virial coefficient of water"
            extends Modelica.Icons.Function;

            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarVolume bww "Second virial coefficient";

          protected
            final constant Real[56] N={0.12533547935523E-001,0.78957634722828E+001,
                -0.87803203303561E+001,0.31802509345418,-0.26145533859358,-0.78199751687981E-002,
                0.88089493102134E-002,-0.66856572307965,0.20433810950965,-0.66212605039687E-004,
                -0.19232721156002,-0.25709043003438,0.16074868486251,-0.40092828925807E-001,
                0.39343422603254E-006,-0.75941377088144E-005,0.56250979351888E-003,
                -0.15608652257135E-004,0.11537996422951E-008,0.36582165144204E-006,
                -0.13251180074668E-011,-0.62639586912454E-009,-0.10793600908932,
                0.17611491008752E-001,0.22132295167546,-0.40247669763528,
                0.58083399985759,0.49969146990806E-002,-0.31358700712549E-001,-0.74315929710341,
                0.4780732991548,0.20527940895948E-001,-0.13636435110343,
                0.14180634400617E-001,0.83326504880713E-002,-0.29052336009585E-001,
                0.38615085574206E-001,-0.20393486513704E-001,-0.16554050063734E-002,
                0.19955571979541E-002,0.15870308324157E-003,-0.1638856834253E-004,
                0.43613615723811E-001,0.34994005463765E-001,-0.76788197844621E-001,
                0.22446277332006E-001,-0.62689710414685E-004,-0.55711118565645E-009,
                -0.19905718354408,0.31777497330738,-0.11841182425981,-0.31306260323435E+002,
                0.31546140237781E+002,-0.25213154341695E+004,-0.14874640856724,
                0.31806110878444};
            final constant Integer[51] c={0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,6,6,6,6};
            final constant Integer[54] dd={1,1,1,2,2,3,4,1,1,1,2,2,3,4,4,5,7,9,10,
                11,13,15,1,2,2,2,3,4,4,4,5,6,6,7,9,9,9,9,9,10,10,12,3,4,4,5,14,3,6,
                6,6,3,3,3};
            final constant Real[54] t={-0.5,0.875,1.0,0.5,0.75,0.375,1.0,4.0,6.0,
                12.0,1.0,5.0,4.0,2.0,13.0,9.0,3.0,4.0,11.0,4.0,13.0,1.0,7.0,1.0,9.0,
                10.0,10.0,3.0,7.0,10.0,10.0,6.0,10.0,10.0,1.0,2.0,3.0,4.0,8.0,6.0,
                9.0,8.0,16.0,22.0,23.0,23.0,10.0,50.0,44.0,46.0,50.0,0.0,1.0,4.0};
            final constant Integer[54] alpha={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,
                20,20};
            final constant Real[56] beta={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,150,150,250,0.3,0.3};
            final constant Real[54] gamma={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.21,1.21,1.25};
            final constant Integer[54] epsilon={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                1,1};
            final constant Real[56] a={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.5,3.5};
            final constant Real[56] b={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.85,0.95};
            final constant Real[56] AA={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.32,0.32};
            final constant Real[56] BB={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2,0.2};
            final constant Integer[56] CC={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                28,32};
            final constant Integer[56] DD={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                700,800};

            Real Delta55=0;
            Real Delta56=0;
            Real theta55=0;
            Real theta56=0;
            Real psi55=0;
            Real psi56=0;
            Real Delta55delta=0;
            Real Delta56delta=0;
            Real Deltab55delta=0;
            Real Deltab56delta=0;
            Real psi55delta=0;
            Real psi56delta=0;

            Real tau=Water95_Utilities.Constants.Tred/T;

          algorithm
            bww := 0;
            theta55 := (1 - tau) + AA[55];
            theta56 := (1 - tau) + AA[56];
            psi55 := exp(-CC[55] - DD[55]*(tau - 1)^2);
            psi56 := exp(-CC[56] - DD[56]*(tau - 1)^2);
            Delta55 := theta55^2 + BB[55];
            Delta56 := theta56^2 + BB[56];
            Delta55delta := -(AA[55]*theta55*2/beta[55] + 2*BB[55]*a[55]);
            Delta56delta := -(AA[56]*theta56*2/beta[56] + 2*BB[56]*a[56]);
            Deltab55delta := b[55]*Delta55^(b[55] - 1)*Delta55delta;
            Deltab56delta := b[56]*Delta56^(b[56] - 1)*Delta56delta;
            psi55delta := 2*CC[55]*psi55;
            psi56delta := 2*CC[56]*psi56;

            for k in 1:7 loop
              bww := if (dd[k] == 1) then bww + N[k]*tau^t[k] else bww;
            end for;
            for k in 8:51 loop
              bww := if (dd[k] == 1) then bww + N[k]*tau^t[k]*dd[k] else bww;
            end for;
            for k in 52:54 loop
              bww := if (dd[k] == 1) then bww + N[k]*tau^t[k]*exp(-alpha[k]*epsilon[
                k]^2 - beta[k]*(tau - gamma[k])^2) else bww;
            end for;
            bww := (bww + N[55]*Delta55^b[55]*psi55 + N[56]*Delta56^b[56]*psi56)/myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Constants.rhored
              *myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Constants.MM;
          end Bww_dT;

          function Caaa_dT "Third molar virial coefficient of dry air"
            extends Modelica.Icons.Function;

            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarVolume caaa "Third virial coefficient";

          protected
            final constant Real[19] N={0.118160747229,0.713116392079,-0.161824192067E+001,
                0.714140178971E-001,-0.865421396646E-001,0.134211176704,
                0.112626704218E-001,-0.420533228842E-001,0.349008431982E-001,
                0.164957183186E-003,-0.101365037912,-0.173813690970,-0.472103183731E-001,
                -0.122523554253E-001,-0.146629609713,-0.316055879821E-001,
                0.233594806142E-003,0.148287891978E-001,-0.938782884667E-002};
            final constant Integer[19] i={1,1,1,2,3,3,4,4,4,6,1,3,5,6,1,3,11,1,3};
            final constant Real[19] j={0,0.33,1.01,0,0,0.15,0,0.2,0.35,1.35,1.6,0.8,
                0.95,1.25,3.6,6,3.25,3.5,15};
            final constant Integer[19] l={0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3};
            Real tau=ReferenceAir.Air_Utilities.Basic.Constants.Tred/T;

          algorithm
            caaa := 0;
            for k in 1:10 loop
              caaa := if (i[k] == 2) then caaa + 2*N[k]*tau^j[k] else caaa;
            end for;
            for k in 11:19 loop
              caaa := if (i[k] == 2) then caaa + 2*N[k]*tau^j[k] elseif ((i[k] == 1)
                 and (l[k] == 1)) then caaa - 2*N[k]*tau^j[k] else caaa;
            end for;
            caaa := 1/ReferenceAir.Air_Utilities.Basic.Constants.rhored^2*caaa;
          end Caaa_dT;

          function Caaw_dT "Third molar cross-virial coefficient"
            extends Modelica.Icons.Function;

            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output Real caaw "Third cross-virial coefficient";

          protected
            final constant Real[5] c={0.482737E+003,0.105678E+006,-0.656394E+008,
                0.294442E+011,-0.319317E+013};

            Real theta=T;

          algorithm
            caaw := 0;
            for k in 1:5 loop
              caaw := caaw + c[k]*theta^(1 - k);
            end for;
            caaw := caaw*1E-012;

          end Caaw_dT;

          function Caww_dT "Third molar cross-virial coefficient"
            extends Modelica.Icons.Function;

            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output Real caww "Third cross-virial coefficient";

          protected
            final constant Real[4] dd={-0.1072887E+002,0.347804E+004,-0.383383E+006,
                0.33406E+008};

            Real theta=T;

          algorithm
            caww := 0;
            for k in 1:4 loop
              caww := caww + dd[k]*theta^(1 - k);
            end for;
            caww := -exp(caww)*1E-012;

          end Caww_dT;

          function Cwww_dT "Third molar virial coefficient of water"
            extends Modelica.Icons.Function;

            input Modelica.SIunits.Density d "Density";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarVolume cwww "Third virial coefficient";

          protected
            final constant Real[56] N={0.12533547935523E-001,0.78957634722828E+001,
                -0.87803203303561E+001,0.31802509345418,-0.26145533859358,-0.78199751687981E-002,
                0.88089493102134E-002,-0.66856572307965,0.20433810950965,-0.66212605039687E-004,
                -0.19232721156002,-0.25709043003438,0.16074868486251,-0.40092828925807E-001,
                0.39343422603254E-006,-0.75941377088144E-005,0.56250979351888E-003,
                -0.15608652257135E-004,0.11537996422951E-008,0.36582165144204E-006,
                -0.13251180074668E-011,-0.62639586912454E-009,-0.10793600908932,
                0.17611491008752E-001,0.22132295167546,-0.40247669763528,
                0.58083399985759,0.49969146990806E-002,-0.31358700712549E-001,-0.74315929710341,
                0.4780732991548,0.20527940895948E-001,-0.13636435110343,
                0.14180634400617E-001,0.83326504880713E-002,-0.29052336009585E-001,
                0.38615085574206E-001,-0.20393486513704E-001,-0.16554050063734E-002,
                0.19955571979541E-002,0.15870308324157E-003,-0.1638856834253E-004,
                0.43613615723811E-001,0.34994005463765E-001,-0.76788197844621E-001,
                0.22446277332006E-001,-0.62689710414685E-004,-0.55711118565645E-009,
                -0.19905718354408,0.31777497330738,-0.11841182425981,-0.31306260323435E+002,
                0.31546140237781E+002,-0.25213154341695E+004,-0.14874640856724,
                0.31806110878444};
            final constant Integer[51] c={0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,6,6,6,6};
            final constant Integer[54] dd={1,1,1,2,2,3,4,1,1,1,2,2,3,4,4,5,7,9,10,
                11,13,15,1,2,2,2,3,4,4,4,5,6,6,7,9,9,9,9,9,10,10,12,3,4,4,5,14,3,6,
                6,6,3,3,3};
            final constant Real[54] t={-0.5,0.875,1.0,0.5,0.75,0.375,1.0,4.0,6.0,
                12.0,1.0,5.0,4.0,2.0,13.0,9.0,3.0,4.0,11.0,4.0,13.0,1.0,7.0,1.0,9.0,
                10.0,10.0,3.0,7.0,10.0,10.0,6.0,10.0,10.0,1.0,2.0,3.0,4.0,8.0,6.0,
                9.0,8.0,16.0,22.0,23.0,23.0,10.0,50.0,44.0,46.0,50.0,0.0,1.0,4.0};
            final constant Integer[54] alpha={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,
                20,20};
            final constant Real[56] beta={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,150,150,250,0.3,0.3};
            final constant Real[54] gamma={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.21,1.21,1.25};
            final constant Integer[54] epsilon={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                1,1};
            final constant Real[56] a={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.5,3.5};
            final constant Real[56] b={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.85,0.95};
            final constant Real[56] AA={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.32,0.32};
            final constant Real[56] BB={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2,0.2};
            final constant Integer[56] CC={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                28,32};
            final constant Integer[56] DD={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                700,800};

            Real Delta55=0;
            Real Delta56=0;
            Real theta55=0;
            Real theta56=0;
            Real psi55=0;
            Real psi56=0;
            Real Delta55delta=0;
            Real Delta56delta=0;
            Real Deltab55delta=0;
            Real Deltab56delta=0;
            Real psi55delta=0;
            Real psi56delta=0;
            Real Delta55deltadelta=0;
            Real Delta56deltadelta=0;
            Real Deltab55deltadelta=0;
            Real Deltab56deltadelta=0;
            Real psi55deltadelta=0;
            Real psi56deltadelta=0;

            Real tau=Water95_Utilities.Constants.Tred/T;

          algorithm
            cwww := 0;
            theta55 := (1 - tau) + AA[55];
            theta56 := (1 - tau) + AA[56];
            psi55 := exp(-CC[55] - DD[55]*(tau - 1)^2);
            psi56 := exp(-CC[56] - DD[56]*(tau - 1)^2);
            Delta55 := theta55^2 + BB[55];
            Delta56 := theta56^2 + BB[56];
            Delta55delta := -(AA[55]*theta55*2/beta[55] + 2*BB[55]*a[55]);
            Delta56delta := -(AA[56]*theta56*2/beta[56] + 2*BB[56]*a[56]);
            Deltab55delta := b[55]*Delta55^(b[55] - 1)*Delta55delta;
            Deltab56delta := b[56]*Delta56^(b[56] - 1)*Delta56delta;
            psi55delta := 2*CC[55]*psi55;
            psi56delta := 2*CC[56]*psi56;
            Delta55deltadelta := -Delta55delta + AA[55]^2*2/beta[55]^2 + AA[55]*
              theta55*4/beta[55]*(1/(2*beta[55]) - 1) + 4*BB[55]*a[55]*(a[55] - 1);
            Delta56deltadelta := -Delta56delta + AA[56]^2*2/beta[56]^2 + AA[56]*
              theta56*4/beta[56]*(1/(2*beta[56]) - 1) + 4*BB[56]*a[56]*(a[56] - 1);
            Deltab55deltadelta := b[55]*(Delta55^(b[55] - 1)*Delta55deltadelta + (b[
              55] - 1)*Delta55^(b[55] - 2)*Delta55delta^2);
            Deltab56deltadelta := b[56]*(Delta56^(b[56] - 1)*Delta56deltadelta + (b[
              56] - 1)*Delta56^(b[56] - 2)*Delta56delta^2);
            psi55deltadelta := (2*CC[55] - 1)*2*CC[55]*psi55;
            psi56deltadelta := (2*CC[56] - 1)*2*CC[56]*psi56;

            cwww := 0;
            for k in 1:7 loop
              cwww := if (dd[k] == 2) then cwww + 2*N[k]*tau^t[k] else cwww;
            end for;
            for k in 8:51 loop
              cwww := if (dd[k] == 2) then cwww + 2*N[k]*tau^t[k] elseif ((dd[k]
                 == 1) and (c[k] == 1)) then cwww - 2*N[k]*tau^t[k] else cwww;
            end for;
            cwww := cwww + N[55]*(Delta55^b[55]*2*psi55delta + 2*Deltab55delta*
              psi55) + N[56]*(Delta56^b[56]*2*psi56delta + 2*Deltab56delta*psi56);
            cwww := myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Constants.MM^2/myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Constants.rhored
              ^2*cwww*1E-006;
          end Cwww_dT;
        end VirialCoefficients;

        package ReactionIndices
          "Parameters and equations for determining reaction variables (dissociation VDI 4670)"
          extends Modelica.Icons.BasesPackage;

          final constant Real[6] AA={20413.2,1075.5,165.95,1491.75,3235.34,4.5542};
          final constant Modelica.SIunits.Temperature[6] BB={-33086.5,-30283.3,-19526.8,
              -27488.0,-30807.8,-10973.6};
          final constant Modelica.SIunits.MolarHeatCapacity[6] CC={-19.5,-65.2,-18.7,
              -3.6,-21.8,-5.6};
          final constant Modelica.SIunits.MolarInternalEnergy[6] DD={-1.15E+005,
              3.03E+005,5.72E+004,3.93E+005,1.5E+005,1.62E+004};
          final constant Real[6] EE(each unit="J.K/mol") = {9.483E+009,7.277E+009,
            3.136E+009,5.826E+009,7.659E+009,9.94E+008};
          final constant Modelica.SIunits.AbsolutePressure p0=101325
            "Reference pressure";

          function U2 "Reaction index for formation of H2"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            output Real u "Reaction index for H2";
          algorithm
            u := AA[2]*moleFraction[1]/sqrt(moleFraction[3])*(p/p0)^(-0.5)*
              Modelica.Math.exp(BB[2]/T);
            annotation (
              derivative=U2_der,
              Inline=false,
              LateInline=true);
          end U2;

          function U3 "Reaction index for formation of OH"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            output Real u "Reaction index for OH";
          algorithm
            u := AA[3]*sqrt(moleFraction[1])*sqrt(sqrt(moleFraction[3]))*(p/p0)^(-0.25)
              *Modelica.Math.exp(BB[3]/T);
            annotation (
              derivative=U3_der,
              Inline=false,
              LateInline=true);
          end U3;

          function U4 "Reaction index for formation of H"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            output Real u "Reaction index for H";
          algorithm
            u := AA[4]*sqrt(U2(
                    p,
                    T,
                    moleFraction))*(p/p0)^(-0.5)*Modelica.Math.exp(BB[4]/T);
            annotation (
              derivative=U4_der,
              Inline=false,
              LateInline=true);
          end U4;

          function U5 "Reaction index for formation of O"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            output Real u "Reaction index for O";
          algorithm
            u := AA[5]*sqrt(moleFraction[3])*(p/p0)^(-0.5)*Modelica.Math.exp(BB[5]/
              T);
            annotation (
              derivative=U5_der,
              Inline=false,
              LateInline=true);
          end U5;

          function U6 "Reaction index for formation of NO"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            output Real u "Reaction index for NO";
          algorithm
            u := AA[6]*sqrt(moleFraction[2]*moleFraction[3])*Modelica.Math.exp(BB[6]
              /T);
            annotation (
              derivative=U6_der,
              Inline=false,
              LateInline=true);
          end U6;

          function V2 "Energy index for formation of H2"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarHeatCapacity v "Energy index for H2";
          algorithm
            v := CC[2] + DD[2]/T + EE[2]/T^2;
            annotation (
              derivative=V2_der,
              Inline=false,
              LateInline=true);
          end V2;

          function V3 "Energy index for formation of OH"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarHeatCapacity v "Energy index for OH";
          algorithm
            v := CC[3] + DD[3]/T + EE[3]/T^2;
            annotation (
              derivative=V3_der,
              Inline=false,
              LateInline=true);
          end V3;

          function V4 "Energy index for formation of H"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarHeatCapacity v "Energy index for H";
          algorithm
            v := CC[4] + DD[4]/T + EE[4]/T^2;
            annotation (
              derivative=V4_der,
              Inline=false,
              LateInline=true);
          end V4;

          function V5 "Energy index for formation of O"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarHeatCapacity v "Energy index for O";
          algorithm
            v := CC[5] + DD[5]/T + EE[5]/T^2;
            annotation (
              derivative=V5_der,
              Inline=false,
              LateInline=true);
          end V5;

          function V6 "Energy index for formation of NO"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.MolarHeatCapacity v "Energy index for NO";
          algorithm
            v := CC[6] + DD[6]/T + EE[6]/T^2;
            annotation (
              derivative=V6_der,
              Inline=false,
              LateInline=true);
          end V6;

          function U2_der "Derivative reaction index for formation of H2"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            input Real[4] moleFraction_der "Derivative of mole fractions";
            output Real u_der "Derivative of reaction index for H2";

          protected
            Real o[4];
          algorithm
            o[1] := AA[2]*sqrt(moleFraction[3])*(p/p0)^(-0.5)*Modelica.Math.exp(BB[
              2]/T);
            o[2] := -0.5*AA[2]*moleFraction[1]/(moleFraction[3])^1.5*(p/p0)^(-0.5)*
              Modelica.Math.exp(BB[2]/T);
            o[3] := -0.5*AA[2]*moleFraction[1]/sqrt(moleFraction[3])*sqrt(p0)*p^(-1.5)
              *Modelica.Math.exp(BB[2]/T);
            o[4] := -BB[2]*AA[2]*moleFraction[1]/sqrt(moleFraction[3])*(p/p0)^(-0.5)
              *Modelica.Math.exp(BB[2]/T)/T^2;
            u_der := o[1]*moleFraction_der[1] + o[2]*moleFraction_der[3] + o[3]*
              p_der + o[4]*T_der;

          end U2_der;

          function U3_der "Derivative of reaction index for formation of OH"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            input Real[4] moleFraction_der "Derivative of mole fractions";
            output Real u_der "Derivative of reaction index for OH";
          protected
            Real o[4];
          algorithm
            o[1] := 0.5*AA[3]/sqrt(moleFraction[1])*sqrt(sqrt(moleFraction[3]))*(p/
              p0)^(-0.25)*Modelica.Math.exp(BB[3]/T);
            o[2] := 0.25*AA[3]*sqrt(moleFraction[1])/(moleFraction[3])^0.75*(p/p0)^
              (-0.25)*Modelica.Math.exp(BB[3]/T);
            o[3] := -0.25*AA[3]*sqrt(moleFraction[1])*sqrt(sqrt(moleFraction[3]))*
              sqrt(sqrt(p0))*p^(-1.25)*Modelica.Math.exp(BB[3]/T);
            o[4] := BB[3]*AA[3]*moleFraction[1]/sqrt(sqrt(moleFraction[3]))*(p/p0)^
              (-0.25)*Modelica.Math.exp(BB[3]/T)/T^2;
            u_der := o[1]*moleFraction_der[1] + o[2]*moleFraction_der[3] + o[3]*
              p_der + o[4]*T_der;

          end U3_der;

          function U4_der "Derivative of reaction index for formation of H"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            input Real[4] moleFraction_der "Derivative of mole fractions";
            output Real u_der "Derivative of reaction index for H";
          protected
            Real o[3];
          algorithm
            o[1] := 0.5*AA[4]/sqrt(U2(
                    p,
                    T,
                    moleFraction))*U2_der(
                    p,
                    T,
                    moleFraction,
                    p_der,
                    T_der,
                    moleFraction_der)*(p/p0)^(-0.5)*Modelica.Math.exp(BB[4]/T);
            o[2] := -0.5*AA[4]*sqrt(U2(
                    p,
                    T,
                    moleFraction))*sqrt(p0)*p^(-1.5)*Modelica.Math.exp(BB[4]/T);
            o[3] := BB[4]*AA[4]*sqrt(U2(
                    p,
                    T,
                    moleFraction))*(p/p0)^(-0.5)*Modelica.Math.exp(BB[4]/T)/T^2;
            u_der := o[1] + o[2]*p_der + o[3]*T_der;

          end U4_der;

          function U5_der "Derivative of reaction index for formation of O"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            input Real[4] moleFraction_der "Derivative of mole fractions";
            output Real u_der "Derivative of reaction index for O";
          protected
            Real o[3];
          algorithm
            o[1] := 0.5*AA[5]/sqrt(moleFraction[3])*(p/p0)^(-0.5)*Modelica.Math.exp(
              BB[5]/T);
            o[2] := -0.5*AA[5]*sqrt(moleFraction[3])*sqrt(p0)*p^(-1.5)*
              Modelica.Math.exp(BB[5]/T);
            o[3] := BB[5]*AA[5]*sqrt(moleFraction[3])*(p/p0)^(-0.5)*
              Modelica.Math.exp(BB[5]/T)/T^2;
            u_der := o[1]*moleFraction[3] + o[2]*p_der + o[3]*T_der;
          end U5_der;

          function U6_der "Derivative of reaction index for formation of NO"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Modelica.SIunits.MoleFraction[4] moleFraction "Mole fractions";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            input Real[4] moleFraction_der "Derivative of mole fractions";
            output Real u_der "Derivative of reaction index for NO";
          protected
            Real o[3];
          algorithm
            o[1] := 0.5*AA[6]/sqrt(moleFraction[2]*moleFraction[3])*moleFraction[3]
              *Modelica.Math.exp(BB[6]/T);
            o[2] := 0.5*AA[6]/sqrt(moleFraction[2]*moleFraction[3])*moleFraction[2]
              *Modelica.Math.exp(BB[6]/T);
            o[3] := BB[6]*AA[6]*sqrt(moleFraction[2]*moleFraction[3])*
              Modelica.Math.exp(BB[6]/T)/T^2;
            u_der := o[1]*moleFraction[2] + o[2]*moleFraction[3] + o[3]*T_der;
          end U6_der;

          function V2_der "Derivative of energy index for formation of H2"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            input Real T_der "Derivative of temperature";
            output Real v_der "Derivative energy index for H2";
          algorithm
            v_der := (-DD[2]/T^2 - 2*EE[2]/T^3)*T_der;

          end V2_der;

          function V3_der "Derivative energy index for formation of OH"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            input Real T_der "Derivative of temperature";
            output Real v_der "Derivative energy index for OH";
          algorithm
            v_der := (-DD[3]/T^2 - 2*EE[3]/T^3)*T_der;
          end V3_der;

          function V4_der "Derivative of energy index for formation of H"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            input Real T_der "Derivative of temperature";
            output Real v_der "Derivative energy index for H";

          algorithm
            v_der := (-DD[4]/T^2 - 2*EE[4]/T^3)*T_der;
          end V4_der;

          function V5_der "Derivative of energy index for formation of O"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            input Real T_der "Derivative of temperature";
            output Real v_der "Derivative energy index for O";
          algorithm
            v_der := (-DD[5]/T^2 - 2*EE[5]/T^3)*T_der;
          end V5_der;

          function V6_der "Derivative of energy index for formation of NO"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Temperature T "Temperature";
            input Real T_der "Derivative of temperature";
            output Real v_der "Derivative energy index for NO";
          algorithm
            v_der := (-DD[6]/T^2 - 2*EE[6]/T^3)*T_der;
          end V6_der;
        end ReactionIndices;

        package IF97_new "Workaround for IF97"
          extends Modelica.Icons.BasesPackage;

          final constant MolarMass molarMass=0.018015257;

          function g2 "Gibbs function for region 2: g(p,T)"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature (K)";
            output myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          protected
            Real tau2 "Dimensionless temperature";
            Real[55] o "Vector of auxiliary variables";
          algorithm
            g.p := p;
            g.T := T;
            g.R := myMedia.Water.IF97_Utilities.BaseIF97.data.RH2O;
            g.pi := p/myMedia.Water.IF97_Utilities.BaseIF97.data.PSTAR2;
            g.tau := myMedia.Water.IF97_Utilities.BaseIF97.data.TSTAR2/T;
            tau2 := -0.5 + g.tau;
            o[1] := tau2*tau2;
            o[2] := o[1]*tau2;
            o[3] := -0.050325278727930*o[2];
            o[4] := -0.057581259083432 + o[3];
            o[5] := o[4]*tau2;
            o[6] := -0.045996013696365 + o[5];
            o[7] := o[6]*tau2;
            o[8] := -0.0178348622923580 + o[7];
            o[9] := o[8]*tau2;
            o[10] := o[1]*o[1];
            o[11] := o[10]*o[10];
            o[12] := o[11]*o[11];
            o[13] := o[10]*o[11]*o[12]*tau2;
            o[14] := o[1]*o[10]*tau2;
            o[15] := o[10]*o[11]*tau2;
            o[16] := o[1]*o[12]*tau2;
            o[17] := o[1]*o[11]*tau2;
            o[18] := o[1]*o[10]*o[11];
            o[19] := o[10]*o[11]*o[12];
            o[20] := o[1]*o[10];
            o[21] := g.pi*g.pi;
            o[22] := o[21]*o[21];
            o[23] := o[21]*o[22];
            o[24] := o[10]*o[12]*tau2;
            o[25] := o[12]*o[12];
            o[26] := o[11]*o[12]*o[25]*tau2;
            o[27] := o[10]*o[12];
            o[28] := o[1]*o[10]*o[11]*tau2;
            o[29] := o[10]*o[12]*o[25]*tau2;
            o[30] := o[1]*o[10]*o[25]*tau2;
            o[31] := o[1]*o[11]*o[12];
            o[32] := o[1]*o[12];
            o[33] := g.tau*g.tau;
            o[34] := o[33]*o[33];
            o[35] := -0.000053349095828174*o[13];
            o[36] := -0.087594591301146 + o[35];
            o[37] := o[2]*o[36];
            o[38] := -0.0078785554486710 + o[37];
            o[39] := o[1]*o[38];
            o[40] := -0.00037897975032630 + o[39];
            o[41] := o[40]*tau2;
            o[42] := -0.000066065283340406 + o[41];
            o[43] := o[42]*tau2;
            o[44] := 5.7870447262208e-6*tau2;
            o[45] := -0.301951672367580*o[2];
            o[46] := -0.172743777250296 + o[45];
            o[47] := o[46]*tau2;
            o[48] := -0.091992027392730 + o[47];
            o[49] := o[48]*tau2;
            o[50] := o[1]*o[11];
            o[51] := o[10]*o[11];
            o[52] := o[11]*o[12]*o[25];
            o[53] := o[10]*o[12]*o[25];
            o[54] := o[1]*o[10]*o[25];
            o[55] := o[11]*o[12]*tau2;

            g.g := g.pi*(-0.00177317424732130 + o[9] + g.pi*(tau2*(-0.000033032641670203
               + (-0.000189489875163150 + o[1]*(-0.0039392777243355 + (-0.043797295650573
               - 0.0000266745479140870*o[13])*o[2]))*tau2) + g.pi*(
              2.04817376923090e-8 + (4.3870667284435e-7 + o[1]*(-0.000032277677238570
               + (-0.00150339245421480 - 0.040668253562649*o[13])*o[2]))*tau2 + g.pi
              *(g.pi*(2.29220763376610e-6*o[14] + g.pi*((-1.67147664510610e-11 + o[
              15]*(-0.00211714723213550 - 23.8957419341040*o[16]))*o[2] + g.pi*(-5.9059564324270e-18
               + o[17]*(-1.26218088991010e-6 - 0.038946842435739*o[18]) + g.pi*(o[
              11]*(1.12562113604590e-11 - 8.2311340897998*o[19]) + g.pi*(
              1.98097128020880e-8*o[15] + g.pi*(o[10]*(1.04069652101740e-19 + (-1.02347470959290e-13
               - 1.00181793795110e-9*o[10])*o[20]) + o[23]*(o[13]*(-8.0882908646985e-11
               + 0.106930318794090*o[24]) + o[21]*(-0.33662250574171*o[26] + o[21]*
              (o[27]*(8.9185845355421e-25 + (3.06293168762320e-13 -
              4.2002467698208e-6*o[15])*o[28]) + g.pi*(-5.9056029685639e-26*o[24]
               + g.pi*(3.7826947613457e-6*o[29] + g.pi*(-1.27686089346810e-15*o[30]
               + o[31]*(7.3087610595061e-29 + o[18]*(5.5414715350778e-17 -
              9.4369707241210e-7*o[32]))*g.pi)))))))))))) + tau2*(-7.8847309559367e-10
               + (1.27907178522850e-8 + 4.8225372718507e-7*tau2)*tau2))))) + (-0.0056087911830200
               + g.tau*(0.071452738814550 + g.tau*(-0.40710498239280 + g.tau*(
              1.42408197144400 + g.tau*(-4.3839511194500 + g.tau*(-9.6927686002170
               + g.tau*(10.0866556801800 + (-0.284086326077200 + 0.0212684635330700
              *g.tau)*g.tau) + Modelica.Math.log(g.pi)))))))/(o[34]*g.tau);

            g.gpi := (1.00000000000000 + g.pi*(-0.00177317424732130 + o[9] + g.pi*(
              o[43] + g.pi*(6.1445213076927e-8 + (1.31612001853305e-6 + o[1]*(-0.000096833031715710
               + (-0.0045101773626444 - 0.122004760687947*o[13])*o[2]))*tau2 + g.pi
              *(g.pi*(0.0000114610381688305*o[14] + g.pi*((-1.00288598706366e-10 +
              o[15]*(-0.0127028833928130 - 143.374451604624*o[16]))*o[2] + g.pi*(-4.1341695026989e-17
               + o[17]*(-8.8352662293707e-6 - 0.272627897050173*o[18]) + g.pi*(o[11]
              *(9.0049690883672e-11 - 65.849072718398*o[19]) + g.pi*(
              1.78287415218792e-7*o[15] + g.pi*(o[10]*(1.04069652101740e-18 + (-1.02347470959290e-12
               - 1.00181793795110e-8*o[10])*o[20]) + o[23]*(o[13]*(-1.29412653835176e-9
               + 1.71088510070544*o[24]) + o[21]*(-6.0592051033508*o[26] + o[21]*(o[
              27]*(1.78371690710842e-23 + (6.1258633752464e-12 -
              0.000084004935396416*o[15])*o[28]) + g.pi*(-1.24017662339842e-24*o[24]
               + g.pi*(0.000083219284749605*o[29] + g.pi*(-2.93678005497663e-14*o[
              30] + o[31]*(1.75410265428146e-27 + o[18]*(1.32995316841867e-15 -
              0.0000226487297378904*o[32]))*g.pi)))))))))))) + tau2*(-3.15389238237468e-9
               + (5.1162871409140e-8 + 1.92901490874028e-6*tau2)*tau2))))))/g.pi;

            g.gpipi := (-1.00000000000000 + o[21]*(o[43] + g.pi*(
              1.22890426153854e-7 + (2.63224003706610e-6 + o[1]*(-0.000193666063431420
               + (-0.0090203547252888 - 0.244009521375894*o[13])*o[2]))*tau2 + g.pi
              *(g.pi*(0.000045844152675322*o[14] + g.pi*((-5.0144299353183e-10 + o[
              15]*(-0.063514416964065 - 716.87225802312*o[16]))*o[2] + g.pi*(-2.48050170161934e-16
               + o[17]*(-0.000053011597376224 - 1.63576738230104*o[18]) + g.pi*(o[
              11]*(6.3034783618570e-10 - 460.94350902879*o[19]) + g.pi*(
              1.42629932175034e-6*o[15] + g.pi*(o[10]*(9.3662686891566e-18 + (-9.2112723863361e-12
               - 9.0163614415599e-8*o[10])*o[20]) + o[23]*(o[13]*(-1.94118980752764e-8
               + 25.6632765105816*o[24]) + o[21]*(-103.006486756963*o[26] + o[21]*(
              o[27]*(3.3890621235060e-22 + (1.16391404129682e-10 -
              0.00159609377253190*o[15])*o[28]) + g.pi*(-2.48035324679684e-23*o[24]
               + g.pi*(0.00174760497974171*o[29] + g.pi*(-6.4609161209486e-13*o[30]
               + o[31]*(4.0344361048474e-26 + o[18]*(3.05889228736295e-14 -
              0.00052092078397148*o[32]))*g.pi)))))))))))) + tau2*(-9.4616771471240e-9
               + (1.53488614227420e-7 + o[44])*tau2)))))/o[21];

            g.gtau := (0.0280439559151000 + g.tau*(-0.285810955258200 + g.tau*(
              1.22131494717840 + g.tau*(-2.84816394288800 + g.tau*(4.3839511194500
               + o[33]*(10.0866556801800 + (-0.56817265215440 + 0.063805390599210*g.tau)
              *g.tau))))))/(o[33]*o[34]) + g.pi*(-0.0178348622923580 + o[49] + g.pi
              *(-0.000033032641670203 + (-0.00037897975032630 + o[1]*(-0.0157571108973420
               + (-0.306581069554011 - 0.00096028372490713*o[13])*o[2]))*tau2 + g.pi
              *(4.3870667284435e-7 + o[1]*(-0.000096833031715710 + (-0.0090203547252888
               - 1.42338887469272*o[13])*o[2]) + g.pi*(-7.8847309559367e-10 + g.pi*
              (0.0000160454534363627*o[20] + g.pi*(o[1]*(-5.0144299353183e-11 + o[
              15]*(-0.033874355714168 - 836.35096769364*o[16])) + g.pi*((-0.0000138839897890111
               - 0.97367106089347*o[18])*o[50] + g.pi*(o[14]*(9.0049690883672e-11
               - 296.320827232793*o[19]) + g.pi*(2.57526266427144e-7*o[51] + g.pi*(
              o[2]*(4.1627860840696e-19 + (-1.02347470959290e-12 -
              1.40254511313154e-8*o[10])*o[20]) + o[23]*(o[19]*(-2.34560435076256e-9
               + 5.3465159397045*o[24]) + o[21]*(-19.1874828272775*o[52] + o[21]*(o[
              16]*(1.78371690710842e-23 + (1.07202609066812e-11 -
              0.000201611844951398*o[15])*o[28]) + g.pi*(-1.24017662339842e-24*o[27]
               + g.pi*(0.000200482822351322*o[53] + g.pi*(-4.9797574845256e-14*o[54]
               + (1.90027787547159e-27 + o[18]*(2.21658861403112e-15 -
              0.000054734430199902*o[32]))*o[55]*g.pi)))))))))))) + (
              2.55814357045700e-8 + 1.44676118155521e-6*tau2)*tau2))));

            g.gtautau := (-0.168263735490600 + g.tau*(1.42905477629100 + g.tau*(-4.8852597887136
               + g.tau*(8.5444918286640 + g.tau*(-8.7679022389000 + o[33]*(-0.56817265215440
               + 0.127610781198420*g.tau)*g.tau)))))/(o[33]*o[34]*g.tau) + g.pi*(-0.091992027392730
               + (-0.34548755450059 - 1.50975836183790*o[2])*tau2 + g.pi*(-0.00037897975032630
               + o[1]*(-0.047271332692026 + (-1.83948641732407 - 0.033609930371750*
              o[13])*o[2]) + g.pi*((-0.000193666063431420 + (-0.045101773626444 -
              48.395221739552*o[13])*o[2])*tau2 + g.pi*(2.55814357045700e-8 +
              2.89352236311042e-6*tau2 + g.pi*(0.000096272720618176*o[10]*tau2 + g.pi
              *((-1.00288598706366e-10 + o[15]*(-0.50811533571252 -
              28435.9329015838*o[16]))*tau2 + g.pi*(o[11]*(-0.000138839897890111 -
              23.3681054614434*o[18])*tau2 + g.pi*((6.3034783618570e-10 -
              10371.2289531477*o[19])*o[20] + g.pi*(3.09031519712573e-6*o[17] + g.pi
              *(o[1]*(1.24883582522088e-18 + (-9.2112723863361e-12 -
              1.82330864707100e-7*o[10])*o[20]) + o[23]*(o[1]*o[11]*o[12]*(-6.5676921821352e-8
               + 261.979281045521*o[24])*tau2 + o[21]*(-1074.49903832754*o[1]*o[10]
              *o[12]*o[25]*tau2 + o[21]*((3.3890621235060e-22 + (
              3.6448887082716e-10 - 0.0094757567127157*o[15])*o[28])*o[32] + g.pi*(
              -2.48035324679684e-23*o[16] + g.pi*(0.0104251067622687*o[1]*o[12]*o[
              25]*tau2 + g.pi*(o[11]*o[12]*(4.7506946886790e-26 + o[18]*(
              8.6446955947214e-14 - 0.00311986252139440*o[32]))*g.pi -
              1.89230784411972e-12*o[10]*o[25]*tau2))))))))))))))));

            g.gtaupi := -0.0178348622923580 + o[49] + g.pi*(-0.000066065283340406
               + (-0.00075795950065260 + o[1]*(-0.0315142217946840 + (-0.61316213910802
               - 0.00192056744981426*o[13])*o[2]))*tau2 + g.pi*(1.31612001853305e-6
               + o[1]*(-0.000290499095147130 + (-0.0270610641758664 -
              4.2701666240781*o[13])*o[2]) + g.pi*(-3.15389238237468e-9 + g.pi*(
              0.000080227267181813*o[20] + g.pi*(o[1]*(-3.00865796119098e-10 + o[15]
              *(-0.203246134285008 - 5018.1058061618*o[16])) + g.pi*((-0.000097187928523078
               - 6.8156974262543*o[18])*o[50] + g.pi*(o[14]*(7.2039752706938e-10 -
              2370.56661786234*o[19]) + g.pi*(2.31773639784430e-6*o[51] + g.pi*(o[2]
              *(4.1627860840696e-18 + (-1.02347470959290e-11 - 1.40254511313154e-7*
              o[10])*o[20]) + o[23]*(o[19]*(-3.7529669612201e-8 + 85.544255035272*o[
              24]) + o[21]*(-345.37469089099*o[52] + o[21]*(o[16]*(
              3.5674338142168e-22 + (2.14405218133624e-10 - 0.0040322368990280*o[15])
              *o[28]) + g.pi*(-2.60437090913668e-23*o[27] + g.pi*(
              0.0044106220917291*o[53] + g.pi*(-1.14534422144089e-12*o[54] + (
              4.5606669011318e-26 + o[18]*(5.3198126736747e-14 -
              0.00131362632479764*o[32]))*o[55]*g.pi)))))))))))) + (
              1.02325742818280e-7 + o[44])*tau2)));
          end g2;

          function h_pT "Specific enthalpy as function or pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Integer region=0
              "If 0, region is unknown, otherwise known and this input";
            output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";

          protected
            myMedia.Common.GibbsDerivs g;

          algorithm
            g := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.g2(p, T);
            h := g.R*T*g.tau*g.gtau;
            annotation (
              derivative(noDerivative=region) = h_pT_der,
              Inline=false,
              LateInline=true);
          end h_pT;

          function s_pT "Temperature as function of pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Integer region=0
              "If 0, region is unknown, otherwise known and this input";
            output Modelica.SIunits.SpecificEntropy s "Specific entropy";

          protected
            myMedia.Common.GibbsDerivs g;

          algorithm
            g := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.g2(p, T);
            s := g.R*(g.tau*g.gtau - g.g);
          end s_pT;

          function cp_pT
            "Specific heat capacity at constant pressure as function of pressure and temperature"

            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Integer region=0
              "If 0, region is unknown, otherwise known and this input";
            output Modelica.SIunits.SpecificHeatCapacity cp
              "Specific heat capacity";

          protected
            myMedia.Common.GibbsDerivs g;

          algorithm
            g := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.g2(p, T);
            cp := -g.R*g.tau*g.tau*g.gtautau;
          end cp_pT;

          function cv_pT
            "Specific heat capacity at constant volume as function of pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Integer region=0
              "If 0, region is unknown, otherwise known and this input";
            output Modelica.SIunits.SpecificHeatCapacity cv
              "Specific heat capacity";

          protected
            myMedia.Common.GibbsDerivs g;

          algorithm
            g := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.g2(p, T);
            cv := g.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi -
              g.tau*g.gtaupi)/g.gpipi));
          end cv_pT;

          function rho_pT "Density as function or pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.Density rho "Density";

          protected
            myMedia.Common.GibbsDerivs g;

          algorithm
            g := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.g2(p, T);
            rho := p/(g.R*T*g.pi*g.gpi);
            annotation (
              derivative=rho_pT_der,
              Inline=false,
              LateInline=true);
          end rho_pT;

          function rho_pT_der "Derivative function of rho_pT"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            output Real rho_der "Derivative of density";
          protected
            myMedia.Common.GibbsDerivs g;
            SI.Density d;
            Real vp;
            Real vt;
          algorithm
            g := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.g2(p, T);
            vt := g.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
            vp := g.R*T/(p*p)*g.pi*g.pi*g.gpipi;
            d := p/(g.R*T*g.pi*g.gpi);
            rho_der := (-d^2*vp)*p_der + (-d^2*vt)*T_der;
          end rho_pT_der;

          function visc_dT "Dynamic viscosity eta(d,T), industrial formulation"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            output SI.DynamicViscosity eta "Dynamic viscosity";
          protected
            constant Real n0=1.0 "Viscosity coefficient";
            constant Real n1=0.978197 "Viscosity coefficient";
            constant Real n2=0.579829 "Viscosity coefficient";
            constant Real n3=-0.202354 "Viscosity coefficient";
            constant Real[42] nn=array(
                      0.5132047,
                      0.3205656,
                      0.0,
                      0.0,
                      -0.7782567,
                      0.1885447,
                      0.2151778,
                      0.7317883,
                      1.241044,
                      1.476783,
                      0.0,
                      0.0,
                      -0.2818107,
                      -1.070786,
                      -1.263184,
                      0.0,
                      0.0,
                      0.0,
                      0.1778064,
                      0.460504,
                      0.2340379,
                      -0.4924179,
                      0.0,
                      0.0,
                      -0.0417661,
                      0.0,
                      0.0,
                      0.1600435,
                      0.0,
                      0.0,
                      0.0,
                      -0.01578386,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      -0.003629481,
                      0.0,
                      0.0) "Viscosity coefficients";
            constant SI.Density rhostar=317.763 "Scaling density";
            constant SI.DynamicViscosity etastar=55.071e-6 "Scaling viscosity";
            constant SI.Temperature tstar=647.226 "Scaling temperature";
            Integer i "Auxiliary variable";
            Integer j "Auxiliary variable";
            Real delta "Dimensionless density";
            Real deltam1 "Dimensionless density";
            Real tau "Dimensionless temperature";
            Real taum1 "Dimensionless temperature";
            Real Psi0 "Auxiliary variable";
            Real Psi1 "Auxiliary variable";
            Real tfun "Auxiliary variable";
            Real rhofun "Auxiliary variable";
          algorithm
            delta := d/rhostar;
            deltam1 := delta - 1.0;
            tau := tstar/T;
            taum1 := tau - 1.0;
            Psi0 := 1/(n0 + (n1 + (n2 + n3*tau)*tau)*tau)/(tau^0.5);
            Psi1 := 0.0;
            tfun := 1.0;
            for i in 1:6 loop
              if (i <> 1) then
                tfun := tfun*taum1;
              end if;
              rhofun := 1.;
              for j in 0:6 loop
                if (j <> 0) then
                  rhofun := rhofun*deltam1;
                end if;
                Psi1 := Psi1 + nn[i + j*6]*tfun*rhofun;
              end for;
            end for;
            eta := etastar*Psi0*Modelica.Math.exp(delta*Psi1);
          end visc_dT;

          function cond_dT "Thermal conductivity"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            output SI.ThermalConductivity lambda "Thermal conductivity";
          protected
            Integer region(min=1, max=5) "IF97 region, valid values:1,2,3, and 5";
            constant Real n0=1.0 "Conductivity coefficient";
            constant Real n1=6.978267 "Conductivity coefficient";
            constant Real n2=2.599096 "Conductivity coefficient";
            constant Real n3=-0.998254 "Conductivity coefficient";
            constant Real[30] nn=array(
                      1.3293046,
                      1.7018363,
                      5.2246158,
                      8.7127675,
                      -1.8525999,
                      -0.40452437,
                      -2.2156845,
                      -10.124111,
                      -9.5000611,
                      0.9340469,
                      0.2440949,
                      1.6511057,
                      4.9874687,
                      4.3786606,
                      0.0,
                      0.018660751,
                      -0.76736002,
                      -0.27297694,
                      -0.91783782,
                      0.0,
                      -0.12961068,
                      0.37283344,
                      -0.43083393,
                      0.0,
                      0.0,
                      0.044809953,
                      -0.1120316,
                      0.13333849,
                      0.0,
                      0.0) "Conductivity coefficient";
            constant SI.ThermalConductivity lamstar=0.4945 "Scaling conductivity";
            constant SI.Density rhostar=317.763 "Scaling density";
            constant SI.Temperature tstar=647.226 "Scaling temperature";
            constant SI.Pressure pstar=22.115e6 "Scaling pressure";
            constant SI.DynamicViscosity etastar=55.071e-6 "Scaling viscosity";
            Integer i "Auxiliary variable";
            Integer j "Auxiliary variable";
            Real delta "Dimensionless density";
            Real tau "Dimensionless temperature";
            Real deltam1 "Dimensionless density";
            Real taum1 "Dimensionless temperature";
            Real Lam0 "Part of thermal conductivity";
            Real Lam1 "Part of thermal conductivity";
            Real Lam2 "Part of thermal conductivity";
            Real tfun "Auxiliary variable";
            Real rhofun "Auxiliary variable";
            Real dpitau "Auxiliary variable";
            Real ddelpi "Auxiliary variable";
            Real d2 "Auxiliary variable";
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            Real Tc=T - 273.15 "Celsius temperature for region check";
            Real Chi "Symmetrized compressibility";
            // slightly different variables for industrial use
            constant SI.Density rhostar2=317.7 "Reference density";
            constant SI.Temperature Tstar2=647.25 "Reference temperature";
            constant SI.ThermalConductivity lambdastar=1
              "Reference thermal conductivity";
            parameter Real TREL=T/Tstar2 "Relative temperature";
            parameter Real rhoREL=d/rhostar2 "Relative density";
            Real lambdaREL "Relative thermal conductivity";
            Real deltaTREL "Relative temperature increment";
            constant Real[:] C={0.642857,-4.11717,-6.17937,0.00308976,0.0822994,
                10.0932};
            constant Real[:] dpar={0.0701309,0.0118520,0.00169937,-1.0200};
            constant Real[:] b={-0.397070,0.400302,1.060000};
            constant Real[:] B={-0.171587,2.392190};
            constant Real[:] a={0.0102811,0.0299621,0.0156146,-0.00422464};
            Real Q;
            Real S;
            Real lambdaREL2
              "Function, part of the interpolating equation of the thermal conductivity";
            Real lambdaREL1
              "Function, part of the interpolating equation of the thermal conductivity";
            Real lambdaREL0
              "Function, part of the interpolating equation of the thermal conductivity";
          algorithm
            deltaTREL := abs(TREL - 1) + C[4];
            Q := 2 + C[5]/deltaTREL^(3/5);
            if TREL >= 1 then
              S := 1/deltaTREL;
            else
              S := C[6]/deltaTREL^(3/5);
            end if;
            lambdaREL2 := (dpar[1]/TREL^10 + dpar[2])*rhoREL^(9/5)*
              Modelica.Math.exp(C[1]*(1 - rhoREL^(14/5))) + dpar[3]*S*rhoREL^Q*
              Modelica.Math.exp((Q/(1 + Q))*(1 - rhoREL^(1 + Q))) + dpar[4]*
              Modelica.Math.exp(C[2]*TREL^(3/2) + C[3]/rhoREL^5);
            lambdaREL1 := b[1] + b[2]*rhoREL + b[3]*Modelica.Math.exp(B[1]*(rhoREL
               + B[2])^2);
            lambdaREL0 := TREL^(1/2)*sum(a[i]*TREL^(i - 1) for i in 1:4);
            lambdaREL := lambdaREL0 + lambdaREL1 + lambdaREL2;
            lambda := lambdaREL*lambdastar;
          end cond_dT;

          function h_pT_der "Derivative function of h_pT"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature";
            input Integer region=0
              "If 0, region is unknown, otherwise known and this input";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            output Real h_der "Derivative of specific enthalpy";
          protected
            myMedia.Common.GibbsDerivs g;
            SI.Density rho;
            Real vt;

          algorithm
            //region 2
            g := myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.g2(p, T);
            vt := g.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
            rho := max(p/(g.R*T*g.pi*g.gpi), 1e-9);
            h_der := (1/rho - T*vt)*p_der - g.R*g.tau*g.tau*g.gtautau*T_der;

          end h_pT_der;
        end IF97_new;

        package Water95_Utilities
          "Utility functions from IAPWS95 required for air temperatures below 273.15 K"
          extends Modelica.Icons.BasesPackage;

          constant Common.FundamentalConstants Constants(
            R_bar=8.314371,
            R=461.51805,
            MM=18.015268E-003,
            rhored=322,
            Tred=647.096,
            pred=22064000,
            h_off=0.0,
            s_off=0.0);

          constant myMedia.Interfaces.Types.TwoPhase.FluidConstants waterConstants(
            chemicalFormula="H2O",
            structureFormula="H2O",
            casRegistryNumber="7732-18-5",
            iupacName="oxidane",
            molarMass=0.018015268,
            criticalTemperature=647.096,
            criticalPressure=22064.0e3,
            criticalMolarVolume=1/322.0*0.018015268,
            triplePointTemperature=273.16,
            triplePointPressure=611.657,
            normalBoilingPoint=373.124,
            meltingPoint=273.15,
            acentricFactor=0.344,
            dipoleMoment=1.8,
            hasCriticalData=true,
            hasIdealGasHeatCapacity=false,
            hasDipoleMoment=true,
            hasFundamentalEquation=true,
            hasLiquidHeatCapacity=true,
            hasSolidHeatCapacity=false,
            hasAccurateViscosityData=true,
            hasAccurateConductivityData=true,
            hasVapourPressureCurve=false,
            hasAcentricFactor=true,
            HCRIT0=0.0,
            SCRIT0=0.0,
            deltah=0.0,
            deltas=0.0);

          function psat "Saturation pressure"
            extends Modelica.Icons.Function;

            input SI.Temperature T "Temperature";
            output SI.AbsolutePressure p "Pressure";

          protected
            Real theta_s;
            Real A;
            Real B;
            Real C;
            final constant Real[10] n={0.11670521452767E+004,-0.72421316703206E+006,
                -0.17073846940092E+002,0.1202082470247E+005,-0.32325550322333E+007,
                0.1491510861353E+002,-0.48232657361591E+004,0.40511340542057E+006,-0.23855557567849,
                0.65017534844798E+003};
          algorithm
            theta_s := min(T, 553) + n[9]/(min(T, 553) - n[10]);
            A := theta_s^2 + n[1]*theta_s + n[2];
            B := n[3]*theta_s^2 + n[4]*theta_s + n[5];
            C := n[6]*theta_s^2 + n[7]*theta_s + n[8];
            p := (2*C/(-B + sqrt(B^2 - 4*A*C)))^4*1E+006;
            annotation (
              derivative=psat_der,
              Inline=false,
              LateInline=true);
          end psat;

          function Tsat "Saturation temperature"
            extends Modelica.Icons.Function;

            input SI.AbsolutePressure p "Pressure";
            output SI.Temperature T "Temperature";

          protected
            Real beta;
            Real D;
            Real E;
            Real F;
            Real G;
            final constant Real[10] n={0.11670521452767E+004,-0.72421316703206E+006,
                -0.17073846940092E+002,0.1202082470247E+005,-0.32325550322333E+007,
                0.1491510861353E+002,-0.48232657361591E+004,0.40511340542057E+006,-0.23855557567849,
                0.65017534844798E+003};

          algorithm
            beta := (p*1E-006)^0.25;
            E := beta^2 + n[3]*beta + n[6];
            F := n[1]*beta^2 + n[4]*beta + n[7];
            G := n[2]*beta^2 + n[5]*beta + n[8];
            D := 2*G/(-F - sqrt(F^2 - 4*E*G));
            T := (n[10] + D - sqrt((n[10] + D)^2 - 4*(n[9] + n[10]*D)))/2;
            annotation (
              derivative=Tsat_der,
              Inline=false,
              LateInline=true);
          end Tsat;

          function psat_der "Saturation pressure"
            extends Modelica.Icons.Function;

            input SI.Temperature T "Temperature";
            input Real T_der "Derivative of temperature";
            output Real p_der "Derivative of pressure w.r.t. temperature";

          protected
            Real theta_s,        theta_s_der;
            Real A,        A_der;
            Real B,        B_der;
            Real C,        C_der,        o_der[3];
            final constant Real[10] n={0.11670521452767E+004,-0.72421316703206E+006,
                -0.17073846940092E+002,0.1202082470247E+005,-0.32325550322333E+007,
                0.1491510861353E+002,-0.48232657361591E+004,0.40511340542057E+006,-0.23855557567849,
                0.65017534844798E+003};
          algorithm
            theta_s := min(T, 553) + n[9]/(min(T, 553) - n[10]);
            theta_s_der := (1 - n[9]/(min(T, 553) - n[10])^2);

            A := theta_s^2 + n[1]*theta_s + n[2];
            B := n[3]*theta_s^2 + n[4]*theta_s + n[5];
            C := n[6]*theta_s^2 + n[7]*theta_s + n[8];
            A_der := 2*theta_s*theta_s_der + n[1]*theta_s_der;
            B_der := 2*n[3]*theta_s*theta_s_der + n[4]*theta_s_der;
            C_der := 2*n[6]*theta_s*theta_s_der + n[7]*theta_s_der;
            o_der[1] := 2*B*B_der - 4*(A*C_der + A_der*C);
            o_der[2] := -B_der + 0.5/sqrt(B^2 - 4*A*C)*o_der[1];
            o_der[3] := ((2*C_der*(-B + sqrt(B^2 - 4*A*C))) - 2*C*o_der[2])/(-B +
              sqrt(B^2 - 4*A*C))^2;

            p_der := 4*((2*C/(-B + sqrt(B^2 - 4*A*C))))^3*o_der[3]*1E+006*T_der;

          end psat_der;

          function Tsat_der "Derivative of saturation temperature"
            extends Modelica.Icons.Function;

            input SI.AbsolutePressure p "Pressure";
            input Real p_der "Pressure derivative";
            output Real T_der "Temperature derivative";

          protected
            Real beta,        beta_der;
            Real D,        D_der;
            Real E,        E_der;
            Real F,        F_der;
            Real G,        G_der;
            Real o_der[2];
            final constant Real[10] n={0.11670521452767E+004,-0.72421316703206E+006,
                -0.17073846940092E+002,0.1202082470247E+005,-0.32325550322333E+007,
                0.1491510861353E+002,-0.48232657361591E+004,0.40511340542057E+006,-0.23855557567849,
                0.65017534844798E+003};

          algorithm
            beta := (p*1E-006)^0.25;
            beta_der := 0.25/(p*1E-006)^0.75*1E-006;
            E := beta^2 + n[3]*beta + n[6];
            E_der := 2*beta*beta_der + n[3];
            F := n[1]*beta^2 + n[4]*beta + n[7];
            F_der := 2*n[1]*beta*beta_der + n[4];
            G := n[2]*beta^2 + n[5]*beta + n[8];
            G_der := 2*n[2]*beta*beta_der + n[5];
            D := 2*G/(-F - sqrt(F^2 - 4*E*G));
            o_der[1] := 2*F*F_der - 4*(E*G_der + E_der*G);
            o_der[2] := -F_der - 0.5/sqrt(F^2 - 4*E*G)*o_der[1];
            D_der := ((2*G_der*(-F - sqrt(F^2 - 4*E*G))) - 2*G*o_der[2])/(-F - sqrt(
              F^2 - 4*E*G))^2;
            T_der := (D_der - 0.5/sqrt((n[10] + D)^2 - 4*(n[9] + n[10]*D))*(2*D*
              D_der - 2*n[10]*D_der))/2*p_der;
          end Tsat_der;
        end Water95_Utilities;

        package Ice09_Utilities
          "Utility functions from IAPWS09 required for ice in air"
          extends Modelica.Icons.BasesPackage;

          package Basic "Fundamental equation of state"
            extends Modelica.Icons.BasesPackage;

            record IceConstants
              extends Common.FundamentalConstants;
              Modelica.SIunits.AbsolutePressure p0;
            end IceConstants;

          protected
            record MyComplex "Complex number with function"
              extends Modelica.Icons.Record;
              Real re "Real part of complex number" annotation (Dialog);
              Real im "Imaginary part of complex number" annotation (Dialog);
            end MyComplex;

            package MyComplexF
              extends Modelica.Icons.FunctionsPackage;
              function toReal "Extract Real part from Complex number"
                extends Modelica.Icons.Function;
                input MyComplex c "Complex number";
                output Real result=c.re "Real number";
              algorithm

                annotation (Inline=true, Documentation(info="<html>
<p>This function returns the real part of a complex number.</p>
</html>"));
              end toReal;

              function '-' "Subtract two complex numbers"
                extends Modelica.Icons.Function;
                input MyComplex c1 "Complex number 1";
                input MyComplex c2 "Complex number 2";
                output MyComplex c3 "= c1 - c2";
              algorithm
                c3 := MyComplex(c1.re - c2.re, c1.im - c2.im);
                annotation (Inline=true,Documentation(info="<html>
<p>This function returns the difference of two given Complex numbers.</p>
</html>"));
              end '-';

              function '*' "Multiplication"
                extends Modelica.Icons.Function;
                input MyComplex c1 "Complex number 1";
                input MyComplex c2 "Complex number 2";
                output MyComplex c3 "= c1*c2";
              algorithm
                c3 := MyComplex(c1.re*c2.re - c1.im*c2.im, c1.re*c2.im + c1.im*c2.re);

                annotation (Inline=true, Documentation(info="<html>
<p>This function returns the product of two given Complex numbers.</p>
</html>"));
              end '*';

              function '+' "Add two complex numbers"
                extends Modelica.Icons.Function;
                input MyComplex c1 "Complex number 1";
                input MyComplex c2 "Complex number 2";
                output MyComplex c3 "= c1 + c2";
              algorithm
                c3 := MyComplex(c1.re + c2.re, c1.im + c2.im);
                annotation (Inline=true,Documentation(info="<html>
<p>This function returns the sum of two given Complex numbers.</p>
</html>"));
              end '+';

              function '/' "Divide two complex numbers"
                extends Modelica.Icons.Function;
                input MyComplex c1 "Complex number 1";
                input MyComplex c2 "Complex number 2";
                output MyComplex c3 "= c1/c2";
              algorithm
                c3 := MyComplex((+c1.re*c2.re + c1.im*c2.im)/(c2.re*c2.re + c2.im*
                  c2.im), (-c1.re*c2.im + c1.im*c2.re)/(c2.re*c2.re + c2.im*c2.im));
                annotation (Inline=true,Documentation(info="<html>
<p>This function returns the quotient of two given Complex numbers.</p>
</html>"));
              end '/';

              function '^' "Complex power of complex number"
                extends Modelica.Icons.Function;
                input MyComplex c1 "Complex number";
                input MyComplex c2 "Complex exponent";
                output MyComplex c3 "= c1^c2";
              protected
                Real lnz=0.5*log(c1.re*c1.re + c1.im*c1.im);
                Real phi=atan2(c1.im, c1.re);
                Real re=lnz*c2.re - phi*c2.im;
                Real im=lnz*c2.im + phi*c2.re;
              algorithm
                c3 := MyComplex(exp(re)*cos(im), exp(re)*sin(im));
                annotation (Inline=true,Documentation(info="<html>
<p>This function returns the given Complex numbers c1 to the power of the Complex number c2.</p>
</html>"));
              end '^';

              function 'log' "Logarithm of complex number"
                extends Modelica.Icons.Function;
                import Modelica.Math.atan3;
                input MyComplex c1 "Complex number";
                output MyComplex c2 "= log(c1)";
              protected
                Real phi=atan3(
                              c1.im,
                              c1.re,
                              0);
              algorithm
                c2 := MyComplex(log((c1.re^2 + c1.im^2)^0.5), phi);
                annotation (Inline=true,Documentation(info="<html>
<p>This function returns the Complex natural logarithm of the Complex input.</p>
</html>"));
              end 'log';
            end MyComplexF;
          public
            constant IceConstants Constants(
              R_bar=8.314472,
              R=461.52364,
              MM=18.015268E-003,
              rhored=1.0,
              Tred=273.16,
              pred=611.657,
              p0=101325,
              h_off=0.0,
              s_off=0.0);

            function Gibbs "Gibbs equation of state"
              extends Modelica.Icons.Function;
              input SI.AbsolutePressure p "Absolute pressure";
              input SI.Temperature T "Temperature";
              output Common.GibbsDerivs2 g
                "Gibbs function and derivatives w.r.t. T and p";

            protected
              final constant Real[5] g_0={-0.632020233449497E+006,0.655022213658955,
                  -0.189369929326131E-007,0.339746123271053E-014,-0.556464869058991E-021}
                "Coefficients of EOS";
              final constant Real s_0=-0.332733756492168E+004 "Coefficient of EOS";
              final MyComplex[2] t={MyComplex(0.368017112855051E-001,
                  0.510878114959572E-001),MyComplex(0.337315741065416,
                  0.335449415919309)} "Coefficients of EOS";
              final constant MyComplex r_1=MyComplex(0.447050716285388E+002,
                  0.656876847463481E+002) "Coefficients of EOS";
              final MyComplex[3] r_2={MyComplex(-0.725974574329220E+002, -0.781008427112870E+002),
                  MyComplex(-0.557107698030123E-004, 0.464578634580806E-004),
                  MyComplex(0.234801409215913E-010, -0.285651142904972E-010)}
                "Coefficients of EOS";
              final Real pi0=Constants.p0/Constants.pred "Reduced pressure";

              //temporary variables needed for calculation
              Real g0=0.0 "Help variable";
              Real g0p=0.0 "Help variable";
              Real g0pp=0.0 "Help variable";
              MyComplex r2 "Help variable";
              MyComplex r2p "Help variable";
              MyComplex r2pp "Help variable";
              MyComplex o[12] "Help variable";

            algorithm
              g.p := p;
              g.T := T;
              g.R := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.R;

              //Reduced pressure
              g.pi := g.p/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred;
              //Reduced temperature
              g.theta := g.T/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred;

              //calculate temporary values
              //0^0 may result in an error, so we have to use a workaround
              g0 := g_0[1];
              for k in 2:5 loop
                g0 := g0 + g_0[k]*(g.pi - pi0)^(k - 1);
              end for;
              r2 := r_2[1];
              for k in 2:3 loop
                r2 := MyComplexF.'+'(r2, MyComplexF.'*'(r_2[k], MyComplex((g.pi - pi0)
                  ^(k - 1), 0)));
              end for;

              //First derivative of g0 w.r.t. pi
              g0p := g_0[2]/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred;
              for k in 3:5 loop
                g0p := g0p + g_0[k]*(k - 1)/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred*(g.pi - pi0)^(k - 2);
              end for;
              //First derivative of r2 w.r.t. pi
              r2p := MyComplexF.'+'(MyComplexF.'/'(r_2[2], MyComplex(myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred, 0)),
                MyComplexF.'*'(MyComplexF.'/'(r_2[3], MyComplex(myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred/2, 0)),
                MyComplex(g.pi - pi0, 0)));
              //Second derivative of g0 w.r.t. pi
              g0pp := g_0[3]*2/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred^2;
              for k in 4:5 loop
                g0pp := g0pp + g_0[k]*(k - 1)*(k - 2)/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred^2*(g.pi - pi0)^(k
                   - 3);
              end for;
              //Second derivative of g0 w.r.t. pi
              r2pp := MyComplexF.'*'(r_2[3], MyComplex(2/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred^2, 0));

              o[1] := MyComplexF.'*'(MyComplexF.'-'(t[1], MyComplex(g.theta, 0)),
                MyComplexF.'log'(MyComplexF.'-'(t[1], MyComplex(g.theta, 0))));
              o[2] := MyComplexF.'*'(MyComplexF.'+'(t[1], MyComplex(g.theta, 0)),
                MyComplexF.'log'(MyComplexF.'+'(t[1], MyComplex(g.theta, 0))));
              o[3] := MyComplexF.'*'(MyComplexF.'-'(t[2], MyComplex(g.theta, 0)),
                MyComplexF.'log'(MyComplexF.'-'(t[2], MyComplex(g.theta, 0))));
              o[4] := MyComplexF.'*'(MyComplexF.'+'(t[2], MyComplex(g.theta, 0)),
                MyComplexF.'log'(MyComplexF.'+'(t[2], MyComplex(g.theta, 0))));
              o[5] := MyComplexF.'*'(MyComplexF.'*'(MyComplex(2, 0), t[1]),
                MyComplexF.'log'(t[1]));
              o[6] := MyComplexF.'*'(MyComplexF.'*'(MyComplex(2, 0), t[2]),
                MyComplexF.'log'(t[2]));
              o[7] := MyComplexF.'/'(MyComplex(g.theta^2, 0), t[1]);
              o[8] := MyComplexF.'/'(MyComplex(g.theta^2, 0), t[2]);
              o[9] := MyComplexF.'-'(MyComplexF.'-'(MyComplexF.'+'(o[1], o[2]), o[5]),
                o[7]);
              o[10] := MyComplexF.'-'(MyComplexF.'-'(MyComplexF.'+'(o[3], o[4]), o[6]),
                o[8]);

              //   //Gibbs equation
              //   g.g := g0 - s_0*Modelica.Media.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred
              //     *g.theta + Modelica.Media.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred
              //     *GibbsComplex.fromReal(r_1*((t[1] - g.theta)*GibbsComplexMath.log(t[1] - g.theta)
              //      + (t[1] + g.theta)*GibbsComplexMath.log(t[1] + g.theta) - 2*t[1]*
              //     GibbsComplexMath.log(t[1]) - g.theta^2/t[1]) + r2*((t[2] - g.theta)*
              //     GibbsComplexMath.log(t[2] - g.theta) + (t[2] + g.theta)*
              //     GibbsComplexMath.log(t[2] + g.theta) - 2*t[2]*GibbsComplexMath.log(t[2]) -
              //     g.theta^2/t[2]));

              //   //Gibbs equation
              g.g := g0 - s_0*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred*g.theta + myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred
                *MyComplexF.toReal(MyComplexF.'+'(MyComplexF.'*'(r_1, o[9]), MyComplexF.'*'(r2, o[10])));

              // //First derivative of g w.r.t. p
              // g.gp := g0p + MoMoLib.Water.IAPWS09.Ice09_Utilities.Basic.Constants.Tred*
              //   ComplexMath.real(r2p*((t[2] - g.theta)*ComplexMath.log(t[2] - g.theta) + (t[
              //   2] + g.theta)*ComplexMath.log(t[2] + g.theta) - 2*t[2]*ComplexMath.log(t[2])
              //    - g.theta^2/t[2]));

              // //First derivative of g w.r.t. p
              g.gp := g0p + myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred*MyComplexF.toReal(MyComplexF.'*'(r2p, o[10]));

              //   //Second derivative of g w.r.t. p
              //   g.gpp := g0pp + Modelica.Media.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred
              //     *GibbsComplex.fromReal(r2pp*((t[2] - g.theta)*GibbsComplexMath.log(t[2] - g.theta)
              //      + (t[2] + g.theta)*GibbsComplexMath.log(t[2] + g.theta) - 2*t[2]*
              //     GibbsComplexMath.log(t[2]) - g.theta^2/t[2]));

              // //Second derivative of g w.r.t. p
              g.gpp := g0pp + myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred*MyComplexF.toReal(MyComplexF.'*'(r2pp, o[
                10]));

              //   //First derivative of g w.r.t. T
              //   g.gT := -s_0 + GibbsComplex.fromReal(r_1*(
              //      + GibbsComplexMath.log(t[1] + g.theta) - 2*g.theta/t[1] -GibbsComplexMath.log(t[1] - g.theta)) + r2*(-
              //     GibbsComplexMath.log(t[2] - g.theta) + GibbsComplexMath.log(t[2] + g.theta) -
              //     2*g.theta/t[2]));

              o[11] := MyComplexF.'-'(MyComplexF.'-'(MyComplexF.'log'(MyComplexF.'+'(t[
                1], MyComplex(g.theta, 0))), MyComplexF.'/'(MyComplex(2*g.theta, 0),
                t[1])), MyComplexF.'log'(MyComplexF.'-'(t[1], MyComplex(g.theta, 0))));

              o[12] := MyComplexF.'-'(MyComplexF.'-'(MyComplexF.'log'(MyComplexF.'+'(t[
                2], MyComplex(g.theta, 0))), MyComplexF.'log'(MyComplexF.'-'(t[2],
                MyComplex(g.theta, 0)))), MyComplexF.'/'(MyComplex(2*g.theta, 0), t[
                2]));

              //   //First derivative of g w.r.t. T
              g.gT := -s_0 + MyComplexF.toReal(MyComplexF.'+'(MyComplexF.'*'(r_1, o[11]),
                MyComplexF.'*'(r2, o[12])));

              //   //Second derivative of g w.r.t. T
              //   g.gTT := 1/Modelica.Media.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred
              //     *GibbsComplex.fromReal(r_1*(1/(t[1] - g.theta) + 1/(t[1] + g.theta) - 2/t[1])
              //      + r2*(1/(t[2] - g.theta) + 1/(t[2] + g.theta) - 2/t[2]));

              //   //Second derivative of g w.r.t. T
              g.gTT := 1/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred*MyComplexF.toReal(MyComplexF.'+'(MyComplexF.'*'(
                 r_1, MyComplexF.'-'(MyComplexF.'+'(MyComplexF.'/'(MyComplex(1, 0), MyComplexF.'-'(t[1], MyComplex(g.theta, 0))), MyComplexF.'/'(
                MyComplex(1, 0), MyComplexF.'+'(t[1], MyComplex(g.theta, 0)))), MyComplexF.'/'(MyComplex(2, 0), t[1]))), MyComplexF.'*'(r2,
                MyComplexF.'-'(MyComplexF.'+'(MyComplexF.'/'(MyComplex(1, 0), MyComplexF.'-'(t[2], MyComplex(g.theta, 0))), MyComplexF.'/'(MyComplex(
                1, 0), MyComplexF.'+'(t[2], MyComplex(g.theta, 0)))), MyComplexF.'/'(MyComplex(2, 0), t[2])))));

              //  //Mixed derivative of g w.r.t. T and p
              // g.gTp := ComplexMath.real(r2p*(-ComplexMath.log(t[2] - g.theta) +
              //   ComplexMath.log(t[2] + g.theta) - 2*g.theta/t[2]));

              //  //Mixed derivative of g w.r.t. T and p
              g.gTp := MyComplexF.toReal(MyComplexF.'*'(r2p, MyComplexF.'-'(
                MyComplexF.'log'(MyComplexF.'+'(t[2], MyComplex(g.theta, 0))),
                MyComplexF.'+'(MyComplexF.'/'(MyComplex(2*g.theta, 0), t[2]),
                MyComplexF.'log'(MyComplexF.'-'(t[2], MyComplex(g.theta, 0)))))));

            end Gibbs;

            function psub "Sublimation pressure"
              extends Modelica.Icons.Function;

              input SI.Temperature T "Temperature";
              output SI.AbsolutePressure p_sub "Pressure";

            protected
              final constant Real[3] a={-0.212144006E+002,0.273203819E+002,-0.610598130E+001};
              final constant Real[3] b={0.333333333E-002,0.120666667E+001,
                  0.170333333E+001};
              Real theta=0;
              Real sum=0;

            algorithm
              /*assert(T >= 50 and T < 273.16, "IAPWS-95 medium function psub: input temperature T = "
     + String(T) + " K\n" + "must be in the range 50 <= T < 273.16 K.");*/
              theta := T/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred;

              for k in 1:3 loop
                sum := sum + a[k]*theta^b[k];
              end for;

              p_sub := exp(sum/theta)*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred;
              annotation (
                derivative=psub_der,
                Inline=false,
                LateInline=true);
            end psub;

            function Tsub "Sublimation temperature"
              extends Modelica.Icons.Function;
              input Modelica.SIunits.AbsolutePressure p "Pressure";
              output Modelica.SIunits.Temperature T_sub "Temperature";

            protected
              function Tsub_res
                extends
                  Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;
                input Modelica.SIunits.AbsolutePressure p "Pressure";

              algorithm
                y := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.psub(u) - p;

              end Tsub_res;

            algorithm
              T_sub := Modelica.Math.Nonlinear.solveOneNonlinearEquation(
                        function Tsub_res(p=p),
                        143.15,
                        2000.0,
                        1e-9);
            end Tsub;

            function psub_der "Derivative of sublimation pressure"
              extends Modelica.Icons.Function;

              input SI.Temperature T "Temperature";
              input Real T_der "Derivative of temperature";
              output Real p_sub_der "Derivative of pressure";

            protected
              final constant Real[3] a={-0.212144006E+002,0.273203819E+002,-0.610598130E+001};
              final constant Real[3] b={0.333333333E-002,0.120666667E+001,
                  0.170333333E+001};
              Real theta;
              Real theta_der;
              Real sum=0;
              Real sum_der=0;

            algorithm
              /*assert(T >= 50 and T < 273.16, "IAPWS-95 medium function psub: input temperature T = "
     + String(T) + " K\n" + "must be in the range 50 <= T < 273.16 K.");*/
              theta := T/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred;
              theta_der := 1/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.Tred;

              for k in 1:3 loop
                sum := sum + a[k]*theta^b[k];
                sum_der := sum_der + a[k]*b[k]*theta^(b[k] - 1)*theta_der;
              end for;

              p_sub_der := (sum_der*theta - sum*theta_der)/theta^2*exp(sum/theta)*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.pred
                *T_der;

            end psub_der;

          end Basic;

          function ice09BaseProp_pT
            "Intermediate property record for water (p and T preferred states)"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            output Common.AuxiliaryProperties aux "Auxiliary record";
          protected
            Common.GibbsDerivs2 g "Gibbs function and derivatives w.r.t. p and T";
          algorithm
            aux.p := p;
            aux.T := T;
            aux.R := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.R;
            g := Basic.Gibbs(aux.p, T);
            aux.rho := 1/g.gp;
            aux.h := g.g - g.T*g.gT - myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.h_off;
            aux.s := -g.gT - myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.s_off;
            aux.cp := -g.T*g.gTT;
            aux.cv := aux.cp - g.T/g.gpp*g.gTp^2;
            aux.vt := 1/aux.rho*g.gTp/g.gp;
            aux.vp := 1/aux.rho*g.gpp/g.gp;
            aux.pd := -1/(aux.rho*aux.rho*aux.vp);
            aux.pt := -aux.vt/aux.vp;
          end ice09BaseProp_pT;

          function rho_props_pT "Density as function or pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Common.AuxiliaryProperties aux "Auxiliary record";
            output Modelica.SIunits.Density rho "Density";
          algorithm
            rho := aux.rho;
            annotation (
              derivative(noDerivative=aux) = rho_pT_der,
              Inline=false,
              LateInline=true);
          end rho_props_pT;

          function rho_pT "Density as function or pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.Density rho "Density";
          algorithm
            rho := rho_props_pT(
                        p,
                        T,
                        myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T));

          end rho_pT;

          function rho_pT_der "Derivative function of rho_pT"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Common.AuxiliaryProperties aux "Auxiliary record";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            output Real rho_der "Derivative of density";
          algorithm
            rho_der := (-aux.rho*aux.rho*aux.vp)*p_der + (-aux.rho*aux.rho*aux.vt)*
              T_der;
          end rho_pT_der;

          function h_props_pT
            "Specific enthalpy as function or pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Common.AuxiliaryProperties aux "Auxiliary record";
            output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          algorithm
            h := aux.h;
            annotation (
              derivative(noDerivative=aux) = h_pT_der,
              Inline=false,
              LateInline=true);
          end h_props_pT;

          function h_pT "Specific enthalpy as function or pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
          algorithm
            h := h_props_pT(
                        p,
                        T,
                        myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T));

          end h_pT;

          function h_pT_der "Derivative function of h_pT"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Common.AuxiliaryProperties aux "Auxiliary record";
            input Real p_der "Derivative of pressure";
            input Real T_der "Derivative of temperature";
            output Real h_der "Derivative of specific enthalpy";
          algorithm
            h_der := (1/aux.rho - aux.T*aux.vt)*p_der + aux.cp*T_der;
          end h_pT_der;

          function s_props_pT
            "Specific entropy as function of pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Common.AuxiliaryProperties aux "Auxiliary record";
            output Modelica.SIunits.SpecificEntropy s "Specific entropy";
          algorithm
            s := aux.s;
            annotation (Inline=false, LateInline=true);
          end s_props_pT;

          function s_pT "Temperature as function of pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.SpecificEntropy s "Specific entropy";
          algorithm
            s := s_props_pT(
                        p,
                        T,
                        myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T));

          end s_pT;

          function kappa_props_pT
            "Isothermal compressibility factor as function of pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            input Common.AuxiliaryProperties aux "Auxiliary record";
            output Modelica.SIunits.IsothermalCompressibility kappa
              "Isothermal compressibility factor";
          algorithm
            kappa := -aux.vp*aux.rho;
            annotation (Inline=false, LateInline=true);
          end kappa_props_pT;

          function kappa_pT
            "Isothermal compressibility factor as function of pressure and temperature"
            extends Modelica.Icons.Function;
            input Modelica.SIunits.Pressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";
            output Modelica.SIunits.IsothermalCompressibility kappa
              "Isothermal compressibility factor";
          algorithm
            kappa := kappa_props_pT(
                        p,
                        T,
                        myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T));

          end kappa_pT;

        end Ice09_Utilities;

        function beta_H "Henry's law constant"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Real beta_H(unit="1/Pa") "Henry's law constant";

        protected
          Real[3] A={-9.67578,-9.44833,-8.40954};
          Real[3] B={4.72162,4.43822,4.29587};
          Real[3] C={11.70585,11.42005,10.52779};
          Real[3] psi={0.7812,0.2095,0.0093};

          Real[3] beta=fill(0, 3);
          Real Tr=T/647.096;
          Real tau=1 - Tr;

        algorithm
          if ((T < 273.15) or (T > myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Tsat(p))) then
            beta_H := 0;
          else
            for k in 1:3 loop
              beta[k] := myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.psat(T)*exp(A[k]/Tr + B[k]*tau^(0.355)/Tr + C[k]*Tr^(-0.41)*exp(
                tau));
            end for;
            beta_H := 1/1.01325*(psi[1]/beta[1] + psi[2]/beta[2] + psi[3]/beta[3]);
          end if;
        end beta_H;

        function f_pT "Enhancement factor as function of pressure and temperature"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Real f "Vapor-pressure enhancement factor";

        protected
          function f_res
            extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;
            input Modelica.SIunits.AbsolutePressure p "Pressure";
            input Modelica.SIunits.Temperature T "Temperature";

          protected
            Real x=u;
            Real p_ws=0;
            Real kappa_T=0;
            Real v_ws=0;
            Real beta_H=0;
            Real psi_ws=0;
            Real baa=0;
            Real baw=0;
            Real bww=0;
            Real caaa=0;
            Real caaw=0;
            Real caww=0;
            Real cwww=0;
            final constant Real R_bar=8.314472;

          algorithm
            //p_ws is the saturation pressure of water
            p_ws := if (T >= 273.16) then myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.psat(T) else
              myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.psub(T);

            //kappa_T is the isothermal compressibility
            if (p < p_ws) then
              kappa_T := 0;
            else
              kappa_T := if (T >= 273.16) then myMedia.Water.IF97_Utilities.kappa_pT(p, T) else
                myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.kappa_pT(p, T);
            end if;

            //v_ws is the molar volume of saturated water
            v_ws := if (T >= 273.16) then myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.molarMass/myMedia.Water.IF97_Utilities.rho_pT(p, T) else
              myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Constants.MM/
              myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.rho_pT(p, T);

            //beta_H is Henry's law constant
            beta_H := myMedia.Air.ReferenceMoistAir.Utilities.beta_H(p, T);

            //calculating the virial coefficients baa, baw, bww, caaa, caaw, caww, cwww
            baa := myMedia.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Baa_dT(0, T);
            baw := myMedia.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Baw_dT(0, T);
            bww := myMedia.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Bww_dT(0, T);
            caaa := myMedia.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Caaa_dT(0, T);
            caaw := myMedia.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Caaw_dT(0, T);
            caww := myMedia.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Caww_dT(0, T);
            cwww := myMedia.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Cwww_dT(0, T);

            y := ((1 + kappa_T*p_ws)*(p - p_ws) - kappa_T*(p^2 - p_ws^2)/2)/(R_bar*
              T)*v_ws + log(1 - beta_H*(1 - x*p_ws/p)*p) + (1 - x*p_ws/p)^2*p/(
              R_bar*T)*baa - 2*(1 - x*p_ws/p)^2*p/(R_bar*T)*baw - (p - p_ws - (1 -
              x*p_ws/p)^2*p)/(R_bar*T)*bww + (1 - x*p_ws/p)^3*p^2/(R_bar*T)^2*caaa
               + 3*(1 - x*p_ws/p)^2*(1 - 2*(1 - x*p_ws/p))*p^2/(2*(R_bar*T)^2)*caaw
               - 3*(1 - x*p_ws/p)^2*x*p_ws/p*p^2/(R_bar*T)^2*caww - ((3 - 2*x*p_ws/
              p)*(x*p_ws/p)^2*p^2 - p_ws^2)/(2*(R_bar*T)^2)*cwww - (1 - x*p_ws/p)^2
              *(-2 + 3*x*p_ws/p)*x*p_ws/p*p^2/(R_bar*T)^2*baa*bww - 2*(1 - x*p_ws/p)
              ^3*(-1 + 3*x*p_ws/p)*p^2/(R_bar*T)^2*baa*baw + 6*(1 - x*p_ws/p)^2*(x*
              p_ws/p)^2*p^2/(R_bar*T)^2*bww*baw - 3*(1 - x*p_ws/p)^4*p^2/(2*(R_bar*
              T)^2)*baa^2 - 2*(1 - x*p_ws/p)^2*x*p_ws/p*(-2 + 3*x*p_ws/p)*p^2/(
              R_bar*T)^2*baw^2 - (p_ws^2 - (4 - 3*x*p_ws/p)*(x*p_ws/p)^3*p^2)/(2*(
              R_bar*T)^2)*bww^2 - log(x);
          end f_res;
          Real xmax;

        algorithm
          if ((useEnhancementFactor == false) or (T >= myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Tsat(p))) then
            f := 1;
          else
            xmax := if (T < 273.16) then 120.0 else 8.0;
            f := Modelica.Math.Nonlinear.solveOneNonlinearEquation(
                  function f_res(p=p, T=T),
                  0.99999,
                  xmax,
                  1e-9);
          end if;
        end f_pT;

        function rho_pTX
          "Return density as a function of pressure p, temperature T and composition X"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Modelica.SIunits.Density d "Density";

        protected
          Real pd;
          Real pl;
          Real xw;
          Real xws;

        algorithm
          if (X[1] == 0) then
            d := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(p, T);
          else
            xw := X[1]/(1 - X[1]);
            xws := xws_pT(p, T);
            pd := pd_pTX(
                  p,
                  T,
                  X);
            pl := p - pd;
            if ((xw <= xws) or (xws == -1)) then
              if (T < 273.16) then
                d := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T) + pd/(.ThermofluidStream.Media.myMedia.Air.ReferenceMoistAir.steam.R*T);
              else
                d := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T) + IF97_new.rho_pT(pd, T);
              end if;
            else
              if (T < 273.16) then
                d := (1 + xw)/((1 + xws)/(myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T) + pd/(.ThermofluidStream.Media.myMedia.Air.ReferenceMoistAir.steam.R
                  *T)) + (xw - xws)/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.rho_pT(p, T));
              else
                d := (1 + xw)/((1 + xws)/(myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T) + IF97_new.rho_pT(pd, T)) + (xw - xws)/
                  myMedia.Water.IF97_Utilities.rho_pT(p, T));
              end if;
            end if;
          end if;
          annotation (
            derivative=rho_pTX_der,
            Inline=false,
            LateInline=true);
        end rho_pTX;

        function pds_pT "Saturation partial pressure of steam"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Modelica.SIunits.AbsolutePressure pds "Pressure";

        protected
          Real Tlim;

        algorithm
          if (T >= 273.16) then
            pds := myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.psat(T);
            Tlim := myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Tsat(p);
          else
            pds := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.psub(T);
            Tlim := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Tsub(p);
          end if;
          if (T <= Tlim) then
            pds := myMedia.Air.ReferenceMoistAir.Utilities.f_pT(p, T)*pds;
          else
            // pds := -1;
            pds := p;
          end if;
          annotation (
            derivative=pds_pT_der,
            Inline=false,
            LateInline=true,
            Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Partial steam pressure cannot become higher than absolute pressure p.
</html>"));
        end pds_pT;

        function pd_pTX "partial pressure of steam"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Modelica.SIunits.AbsolutePressure pd "partial pressure";

        protected
          Real xw;
          Real xws;
          Real pds;

        algorithm
          if (X[1] == 0) then
            pd := 0;
          else
            xw := X[1]/(1 - X[1]);
            pds := myMedia.Air.ReferenceMoistAir.Utilities.pds_pT(p, T);
            pd := xw/(myMedia.Air.ReferenceMoistAir.k_mair + xw)*p;
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            pd := if ((xw <= xws) or (xws == -1)) then pd else pds;
          end if;
          annotation (
            derivative=pd_pTX_der,
            Inline=false,
            LateInline=true);
        end pd_pTX;

        function xws_pT "Humidity ratio (absolute) of saturated humid air"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          output Real xws "Absolute humidity ratio";

        protected
          Real pds;
          Real Tlim;

        algorithm
          pds := myMedia.Air.ReferenceMoistAir.Utilities.pds_pT(p, T);
          Tlim := if (T <= 273.16) then myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Tsub(p) else
            myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Tsat(p);
        //   xws := if (T <= Tlim) then Modelica.Media.Air.ReferenceMoistAir.k_mair*
        //     pds/(p - pds) else -1;
          xws := if (pds < p) then pds*myMedia.Air.ReferenceMoistAir.k_mair/(p - pds) else Modelica.Constants.inf;
          annotation (
            derivative=xws_pT_der,
            Inline=false,
            LateInline=true,
            Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: New formula for xws.
</html>"));
        end xws_pT;

        function phi_pTX "Relative humidity"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Real phi "Relative humidity";

        protected
          Real xw;
          Real pd;
          Real pds;

        algorithm
          if (X[1] == 0) then
            phi := 0;
          else
            xw := X[1]/(1 - X[1]);
            if (T >= 273.16) then
              pds := myMedia.Water.IF97_Utilities.BaseIF97.Basic.psat(T);
            else
              pds := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.psub(T);
            end if;
            pds := myMedia.Air.ReferenceMoistAir.Utilities.f_pT(p, T)*pds;
            pd := xw/(myMedia.Air.ReferenceMoistAir.k_mair + xw)*p;
        //     if (pd <= pds) then
        //       phi := pd/pds;
        //     else
        //       phi := -1;
        //     end if;
            phi := pd/max(100*Modelica.Constants.eps, pds);
          end if;

          annotation(Inline=false, LateInline=true,
            Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: New calculation for phi.
</html>"));
        end phi_pTX;

        function cp_pTX "Specific isobaric heat capacity"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Modelica.SIunits.SpecificHeatCapacity cp "Specific heat capacity";

        protected
          Real xw;
          Real xws;
          Real pd;
          Real pl;

        algorithm
          if (X[1] == 0.0) then
            if (T >= 773.15) then
              cp := myMedia.Air.ReferenceAir.Air_Utilities.cp_pT(p, T) + Utilities.cp_dis_pTX(
                        p,
                        T,
                        X);
            else
              cp := myMedia.Air.ReferenceAir.Air_Utilities.cp_pT(p, T);
            end if;
          else
            pd := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX(
                      p,
                      T,
                      X);
            pl := p - pd;
            xw := X[1]/(1 - X[1]);
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            if ((xw <= xws) or (xws == -1)) then
              if (T >= 773.15) then
                cp := X[1]*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.cp_pT(pd, T) + X[2]*myMedia.Air.ReferenceAir.Air_Utilities.cp_pT(pl, T)
                   + myMedia.Air.ReferenceMoistAir.Utilities.cp_dis_pTX(
                          p,
                          T,
                          X);
              else
                cp := X[1]*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.cp_pT(pd, T) + X[2]*myMedia.Air.ReferenceAir.Air_Utilities.cp_pT(pl, T);
              end if;
            else
              cp := -1;
            end if;
          end if;
          annotation (Inline=false, LateInline=true);
        end cp_pTX;

        function cv_pTX "Specific isochoric heat capacity"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Modelica.SIunits.SpecificHeatCapacity cv "Specific heat capacity";

        protected
          Real xw;
          Real xws;
          Real pd;
          Real pl;

        algorithm
          if (X[1] == 0) then
            cv := myMedia.Air.ReferenceAir.Air_Utilities.cv_pT(p, T);
          else
            pd := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX(
                      p,
                      T,
                      X);
            pl := p - pd;
            xw := X[1]/(1 - X[1]);
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            if ((xw <= xws) or (xws == -1)) then
              cv := X[1]*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.cv_pT(pd, T) + X[2]*myMedia.Air.ReferenceAir.Air_Utilities.cv_pT(pl, T);
            else
              cv := -1;
            end if;
          end if;
          annotation (Inline=false, LateInline=true);
        end cv_pTX;

        function h_pTX "Specific enthalpy of moist air"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";

        protected
          Real xw;
          Real xws;
          Real pd;
          Real pl;

        algorithm
          if (X[1] == 0) then
            h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(p, T);
          else
            pd := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX(
                      p,
                      T,
                      X);
            pl := p - pd;
            xw := X[1]/(1 - X[1]);
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            if ((xw <= xws) or (xws == -1)) then
              if (T >= 773.15) then
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xw*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + (1 + xw)*
                  myMedia.Air.ReferenceMoistAir.Utilities.h_dis_pTX(
                          p,
                          T,
                          X);
              else
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xw*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T);
              end if;
            else
              if (T < 273.16) then
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xws*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + (xw -
                  xws)*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.h_pT(p, T);
              else
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xws*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + (xw -
                  xws)*myMedia.Water.IF97_Utilities.h_pT(p, T);
              end if;
            end if;
            h := h/(1 + xw);
          end if;
          annotation (
            derivative=h_pTX_der,
            Inline=false,
            LateInline=true);
        end h_pTX;

        function h_dis_pTX
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Real u "Reaction index";
        protected
          Real uges;
          Real invMMX[4] "Inverses of molar weights";
          SI.MolarMass Mmix "Molar mass of mixture";
          MassFraction[4] massFraction "Mass fractions of components";
          Modelica.SIunits.MoleFraction[4] Y
            "Mole fractions of individual components (H2O, N2, O2, Ar) of moist air";
        algorithm
          if (useDissociation == false) then
            u := 0;
          else
            massFraction := {X[1],X[2]*Xi_Air[1],X[2]*Xi_Air[2],X[2]*Xi_Air[3]};
            for i in 1:4 loop
              invMMX[i] := 1/MMX[i];
            end for;
            Mmix := 1/(massFraction*invMMX);
            for i in 1:4 loop
              Y[i] := Mmix*massFraction[i]/MMX[i];
            end for;
            uges := 1 + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U2(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U3(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U4(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U5(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U6(
                      p,
                      T,
                      Y);
            u := -T^2*(myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U2(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V2(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[2]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U3(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V3(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[3]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U4(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V4(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[4]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U5(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V5(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[5]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U6(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V6(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[6])
              /uges*sum(massFraction[j]/MMX[j] for j in 1:4);
          end if;
        end h_dis_pTX;

        function s_pTX "Specific entropy of moist air"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Modelica.SIunits.SpecificEntropy s "Specific entropy";

        protected
          Real xw;
          Real xws;
          Real pd;
          Real pl;

        algorithm
          if (X[1] == 0) then
            s := myMedia.Air.ReferenceAir.Air_Utilities.s_pT(p, T);
          else
            pd := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX(
                      p,
                      T,
                      X);
            pl := p - pd;
            xw := X[1]/(1 - X[1]);
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            if ((xw <= xws) or (xws == -1)) then
              if (T >= 773.15) then
                s := myMedia.Air.ReferenceAir.Air_Utilities.s_pT(pl, T) + xw*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.s_pT(pd, T) + (1 + xw)*
                  myMedia.Air.ReferenceMoistAir.Utilities.s_dis_pTX(
                          p,
                          T,
                          X);
              else
                s := myMedia.Air.ReferenceAir.Air_Utilities.s_pT(pl, T) + xw*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.s_pT(pd, T);
              end if;
            else
              if (T < 273.16) then
                s := myMedia.Air.ReferenceAir.Air_Utilities.s_pT(pl, T) + xws*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.s_pT(pd, T) + (xw -
                  xws)*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.s_pT(p, T);
              else
                s := myMedia.Air.ReferenceAir.Air_Utilities.s_pT(pl, T) + xws*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.s_pT(pd, T) + (xw -
                  xws)*myMedia.Water.IF97_Utilities.s_pT(p, T);
              end if;
            end if;
            s := s/(1 + xw);
          end if;
          annotation (Inline=false, LateInline=true);
        end s_pTX;

        function u_pTX "Internal energy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Modelica.SIunits.SpecificEnergy u "Specific entropy";

        algorithm
          u := myMedia.Air.ReferenceMoistAir.Utilities.h_pTX(
                    p,
                    T,
                    X) - p/myMedia.Air.ReferenceMoistAir.Utilities.rho_pTX(
                    p,
                    T,
                    X);
          annotation (
            derivative=u_pTX_der,
            Inline=false,
            LateInline=true);
        end u_pTX;

        function cp_dis_pTX
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Real u "Reaction index";
        protected
          Real uges;
          Real invMMX[4] "Inverses of molar weights";
          SI.MolarMass Mmix "Molar mass of mixture";
          MassFraction[4] massFraction "Mass fractions of components";
          Modelica.SIunits.MoleFraction[4] Y
            "Mole fractions of individual components (H2O, N2, O2, Ar) of moist air";
        algorithm
          if (useDissociation == false) then
            u := 0;
          else
            massFraction := {X[1],X[2]*Xi_Air[1],X[2]*Xi_Air[2],X[2]*Xi_Air[3]};
            for i in 1:4 loop
              invMMX[i] := 1/MMX[i];
            end for;
            Mmix := 1/(massFraction*invMMX);
            for i in 1:4 loop
              Y[i] := Mmix*massFraction[i]/MMX[i];
            end for;
            uges := 1 + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U2(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U3(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U4(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U5(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U6(
                      p,
                      T,
                      Y);
            u := (myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U2(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V2(T) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U3(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V3(T) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U4(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V4(T) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U5(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V5(T) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U6(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V6(T))/uges*sum(massFraction[j]/MMX[j] for j in 1:4);
          end if;
        end cp_dis_pTX;

        function s_dis_pTX
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          output Real u "Reaction index";
        protected
          Real uges;
          Real invMMX[4] "Inverses of molar weights";
          SI.MolarMass Mmix "Molar mass of mixture";
          MassFraction[4] massFraction "Mass fractions of components";
          Modelica.SIunits.MoleFraction[4] Y
            "Mole fractions of individual components (H2O, N2, O2, Ar) of moist air";
        algorithm
          if (useDissociation == false) then
            u := 0;
          else
            massFraction := {X[1],X[2]*Xi_Air[1],X[2]*Xi_Air[2],X[2]*Xi_Air[3]};
            for i in 1:4 loop
              invMMX[i] := 1/MMX[i];
            end for;
            Mmix := 1/(massFraction*invMMX);
            for i in 1:4 loop
              Y[i] := Mmix*massFraction[i]/MMX[i];
            end for;
            uges := 1 + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U2(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U3(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U4(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U5(
                      p,
                      T,
                      Y) + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U6(
                      p,
                      T,
                      Y);
            u := -T*(myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U2(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V2(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[2]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U3(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V3(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[3]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U4(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V4(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[4]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U5(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V5(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[5]
               + myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.U6(
                      p,
                      T,
                      Y)*myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.V6(T)/myMedia.Air.ReferenceMoistAir.Utilities.ReactionIndices.BB[6])
              /uges*sum(massFraction[j]/MMX[j] for j in 1:4);
          end if;
        end s_dis_pTX;

        function pd_pTX_der "Derivative of partial pressure of steam"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          input Real X_der[:] "Derivative of mass fractions";
          output Real pd_der "Derivative of partial pressure";

        protected
          Real xw,      xw_der;
          Real xws;
          Real pds,      pds_der;

        algorithm
          if (X[1] == 0) then
            //pd := 0;
            pd_der := 0;
          else
            xw := X[1]/(1 - X[1]) "d(xw)/dt = d(xw)/dX[1] * dX[1]/dt";
            xw_der := (X_der[1]*(1 - X[1]) + X[1]*X_der[1])/(1 - X[1])^2;
            pds_der := myMedia.Air.ReferenceMoistAir.Utilities.pds_pT_der(
                      p,
                      T,
                      p_der,
                      T_der);
            //pd := xw/(Modelica.Media.Air.ReferenceMoistAir.k_mair + xw)*p;
            pd_der := (xw_der*(myMedia.Air.ReferenceMoistAir.k_mair + xw) - xw*xw_der)*p + xw/(myMedia.Air.ReferenceMoistAir.k_mair + xw)*p_der;
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            pd_der := if (xw <= xws) then pd_der else pds_der;
          end if;
          annotation (Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Changed derivative function.
</html>"));
        end pd_pTX_der;

        function xws_pT_der
          "Derivative of humidity ration (absolute) of saturated humid air"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          output Real xws_der "Derivative of absolute humidity ratio";

        protected
          Real pds,      pds_der;
          Real Tlim;

        algorithm
          pds := myMedia.Air.ReferenceMoistAir.Utilities.pds_pT(p, T);
          pds_der := myMedia.Air.ReferenceMoistAir.Utilities.pds_pT_der(
                    p,
                    T,
                    p_der,
                    T_der);
          Tlim := if (T <= 273.16) then myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Tsub(p) else
            myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Tsat(p);
          if (pds < p) then
            xws_der := myMedia.Air.ReferenceMoistAir.k_mair*((pds_der*(p - pds) + pds*pds_der)/(p - pds)^2);
          else
            xws_der := 0;
          end if;
          annotation (Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Changed derivative function.
</html>"));
        end xws_pT_der;

        function pds_pT_der "Derivative of saturation partial pressure of steam"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          output Real pds_der "Derivative of pressure";

        protected
          Real Tlim;

        algorithm
          if (T >= 273.16) then
            pds_der := myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.psat_der(T, T_der);
            Tlim := myMedia.Air.ReferenceMoistAir.Utilities.Water95_Utilities.Tsat(p);
          else
            pds_der := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.psub_der(T, T_der);
            Tlim := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.Basic.Tsub(p);
          end if;
          if (T <= Tlim) then
            pds_der := pds_der;
          else
            pds_der := p_der;
          end if;
          annotation (Documentation(revisions="<html>
2017-04-13 Stefan Wischhusen: Changed derivative if pds=p.
</html>"));
        end pds_pT_der;

        function rho_pTX_der
          "Derivative of density as a function of pressure p, temperature T and composition X"
          extends Modelica.Icons.Function;

          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          input Real X_der[:] "Derivative of mass fractions";
          output Real d_der "Derivative of density";

        protected
          Real pd,      pd_der;
          Real pl,      pl_der;
          Real xw,      xw_der;
          Real xws,      xws_der;
          Real o[5];

        algorithm
          if (X[1] == 0) then
            d_der := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT_der(
                      p,
                      T,
                      myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(p, T),
                      p_der,
                      T_der);
          else
            xw := X[1]/(1 - X[1]);
            xw_der := (X_der[1])/(1 - X[1])^2;
            xws := xws_pT(p, T);
            xws_der := xws_pT_der(
                  p,
                  T,
                  p_der,
                  T_der);
            pd := pd_pTX(
                  p,
                  T,
                  X);
            pd_der := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX_der(
                      p,
                      T,
                      X,
                      p_der,
                      T_der,
                      X_der);
            pl := p - pd;
            pl_der := p_der - pd_der;
            if ((xw <= xws) or (xws == -1)) then
              if (T < 273.16) then
                d_der := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(pl, T),
                          pl_der,
                          T_der) + myMedia.Air.ReferenceMoistAir.steam.R*(pd_der*T - pd*T_der)/(myMedia.Air.ReferenceMoistAir.steam.R*T)^2;

              else
                d_der := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(pl, T),
                          pl_der,
                          T_der) + IF97_new.rho_pT_der(
                          pd,
                          T,
                          pd_der,
                          T_der);

              end if;
            else
              if (T < 273.16) then
                o[1] := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T);
                o[2] := myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.rho_pT(p, T);
                o[3] := ((1 + xws)/(myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T) + pd/(.ThermofluidStream.Media.myMedia.Air.ReferenceMoistAir.steam.R
                  *T)) + (xw - xws)/myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.rho_pT(p, T));
                o[4] := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(p, T),
                          p_der,
                          T_der);

                o[5] := (xws_der*o[1] - (1 + xws)*o[4])/o[1]^2 + (pd_der*T - pd*T_der)/myMedia.Air.ReferenceMoistAir.steam.R/T^2 + (xw_der*o[2] - xw*
                  myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.rho_pT_der(
                          p,
                          T,
                          myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T),
                          p_der,
                          T_der))/o[2]^2 - (xws_der*o[2] - xws*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.rho_pT_der(
                          p,
                          T,
                          myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T),
                          p_der,
                          T_der))/o[2]^2;

                d_der := (xw_der*o[3] - (1 + xw)*o[5])/o[3]^2;

              else
                o[1] := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T) + IF97_new.rho_pT(pd, T);
                o[2] := myMedia.Water.IF97_Utilities.rho_pT(p, T);
                o[3] := ((1 + xws)/(myMedia.Air.ReferenceAir.Air_Utilities.rho_pT(pl, T) + IF97_new.rho_pT(pd, T)) + (xw - xws)/
                  myMedia.Water.IF97_Utilities.rho_pT(p, T));
                o[4] := myMedia.Air.ReferenceAir.Air_Utilities.rho_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(p, T),
                          p_der,
                          T_der) + IF97_new.rho_pT_der(
                          pd,
                          T,
                          pd_der,
                          T_der);

                o[5] := (xws_der*o[1] - (1 + xws)*o[4])/o[1]^2 + (xw_der*o[2] - xw*myMedia.Water.IF97_Utilities.rho_pT_der(
                          p,
                          T,
                          myMedia.Water.IF97_Utilities.waterBaseProp_pT(p, T),
                          p_der,
                          T_der))/o[2]^2 - (xws_der*o[2] - xws*myMedia.Water.IF97_Utilities.rho_pT_der(
                          p,
                          T,
                          myMedia.Water.IF97_Utilities.waterBaseProp_pT(p, T),
                          p_der,
                          T_der))/o[2]^2;
                d_der := (xw_der*o[3] - (1 + xw)*o[5])/o[3]^2;
              end if;
            end if;
          end if;
        end rho_pTX_der;

        function h_dis_pTX_der
          extends Modelica.Icons.Function;
          import ThermofluidStream.Media.myMedia.Air.ReferenceMoistAir.Utilities;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          input Real X_der[:] "Derivative of mass fractions";
          output Real u_der "Derivative of reaction index";
        protected
          Real uges,      uges_der,      o[7],      l;
          Real invMMX[4] "Inverses of molar weights";
          SI.MolarMass Mmix "Molar mass of mixture";
          Real Mmix_der "Derivative of molar mass of mixture";
          MassFraction[4] massFraction "Mass fractions of components";
          Real[4] massFraction_der "Derivative of mass fractions of components";
          Modelica.SIunits.MoleFraction[4] Y
            "Mole fractions of individual components (H2O, N2, O2, Ar) of moist air";
          Real[4] Y_der
            "Derivative of mole fractions of individual components (H2O, N2, O2, Ar) of moist air";

        algorithm
          if (useDissociation == false) then
            //u := 0;
            u_der := 0;
          else
            massFraction := {X[1],X[2]*Xi_Air[1],X[2]*Xi_Air[2],X[2]*Xi_Air[3]};
            massFraction_der := {X_der[1],X_der[2]*Xi_Air[1],X_der[2]*Xi_Air[2],
              X_der[2]*Xi_Air[3]};
            for i in 1:4 loop
              invMMX[i] := 1/MMX[i];
            end for;
            Mmix := 1/(massFraction*invMMX);
            Mmix_der := -1/(massFraction*invMMX)^2*massFraction_der*invMMX;
            for i in 1:4 loop
              Y[i] := Mmix*massFraction[i]/MMX[i];
              Y_der[i] := (Mmix_der*massFraction[i] + Mmix*massFraction_der[i])/MMX[
                i];
            end for;
            uges := 1 + Utilities.ReactionIndices.U2(
                  p,
                  T,
                  Y) + Utilities.ReactionIndices.U3(
                  p,
                  T,
                  Y) + Utilities.ReactionIndices.U4(
                  p,
                  T,
                  Y) + Utilities.ReactionIndices.U5(
                  p,
                  T,
                  Y) + Utilities.ReactionIndices.U6(
                  p,
                  T,
                  Y);
            uges_der := Utilities.ReactionIndices.U2_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der) + Utilities.ReactionIndices.U3_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der) + Utilities.ReactionIndices.U4_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der) + Utilities.ReactionIndices.U5_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der) + Utilities.ReactionIndices.U6_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der);
            o[1] := (Utilities.ReactionIndices.U2_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der)*Utilities.ReactionIndices.V2(T) +
              Utilities.ReactionIndices.U2(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V2_der(T, T_der))/Utilities.ReactionIndices.BB[
              2];
            o[2] := (Utilities.ReactionIndices.U3_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der)*Utilities.ReactionIndices.V3(T) +
              Utilities.ReactionIndices.U3(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V3_der(T, T_der))/Utilities.ReactionIndices.BB[
              3];
            o[3] := (Utilities.ReactionIndices.U4_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der)*Utilities.ReactionIndices.V4(T) +
              Utilities.ReactionIndices.U4(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V4_der(T, T_der))/Utilities.ReactionIndices.BB[
              4];
            o[4] := (Utilities.ReactionIndices.U5_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der)*Utilities.ReactionIndices.V5(T) +
              Utilities.ReactionIndices.U5(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V5_der(T, T_der))/Utilities.ReactionIndices.BB[
              5];
            o[5] := (Utilities.ReactionIndices.U6_der(
                  p,
                  T,
                  Y,
                  p_der,
                  T_der,
                  Y_der)*Utilities.ReactionIndices.V6(T) +
              Utilities.ReactionIndices.U6(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V6_der(T, T_der))/Utilities.ReactionIndices.BB[
              6];
            l := (Utilities.ReactionIndices.U2(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V2(T)/Utilities.ReactionIndices.BB[2]
               + Utilities.ReactionIndices.U3(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V3(T)/Utilities.ReactionIndices.BB[3]
               + Utilities.ReactionIndices.U4(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V4(T)/Utilities.ReactionIndices.BB[4]
               + Utilities.ReactionIndices.U5(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V5(T)/Utilities.ReactionIndices.BB[5]
               + Utilities.ReactionIndices.U6(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V6(T)/Utilities.ReactionIndices.BB[6]);
            o[6] := -2*T*(Utilities.ReactionIndices.U2(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V2(T)/Utilities.ReactionIndices.BB[2]
               + Utilities.ReactionIndices.U3(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V3(T)/Utilities.ReactionIndices.BB[3]
               + Utilities.ReactionIndices.U4(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V4(T)/Utilities.ReactionIndices.BB[4]
               + Utilities.ReactionIndices.U5(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V5(T)/Utilities.ReactionIndices.BB[5]
               + Utilities.ReactionIndices.U6(
                  p,
                  T,
                  Y)*Utilities.ReactionIndices.V6(T)/Utilities.ReactionIndices.BB[6])
               - T^2*sum(o[1:5]);
            o[7] := uges_der*sum(massFraction[j]/MMX[j] for j in 1:4) + uges*sum(
              massFraction_der[j]/MMX[j] for j in 1:4);
            u_der := (o[6]*(uges*sum(massFraction[j]/MMX[j] for j in 1:4)) - l*o[7])
              /(uges*sum(massFraction[j]/MMX[j] for j in 1:4))^2;

          end if;
        end h_dis_pTX_der;

        function h_pTX_der "Derivative of specific enthalpy of moist air"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          input Real X_der[:] "Derivative of mass fractions";
          output Real h_der "Derivative of specific enthalpy";

        protected
          Modelica.SIunits.SpecificEnthalpy h;
          Real xw,      xw_der;
          Real xws,      xws_der;
          Real pd,      pd_der;
          Real pl,      pl_der;

        algorithm
          if (X[1] == 0) then
            h_der := myMedia.Air.ReferenceAir.Air_Utilities.h_pT_der(
                      p,
                      T,
                      myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(p, T),
                      p_der,
                      T_der);
          else
            pd := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX(
                      p,
                      T,
                      X);
            pd_der := myMedia.Air.ReferenceMoistAir.Utilities.pd_pTX_der(
                      p,
                      T,
                      X,
                      p_der,
                      T_der,
                      X_der);
            pl := p - pd;
            pl_der := p_der - pd_der;
            xw := X[1]/(1 - X[1]);
            xw_der := (X_der[1])/(1 - X[1])^2;
            xws := myMedia.Air.ReferenceMoistAir.Utilities.xws_pT(p, T);
            xws_der := xws_pT_der(
                  p,
                  T,
                  p_der,
                  T_der);
            if ((xw <= xws) or (xws == -1)) then
              if (T >= 773.15) then
                h_der := myMedia.Air.ReferenceAir.Air_Utilities.h_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(pl, T),
                          pl_der,
                          T_der) + xw_der*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + xw*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT_der(
                          pd,
                          T,
                          0,
                          pd_der,
                          T_der) + xw_der*myMedia.Air.ReferenceMoistAir.Utilities.h_dis_pTX(
                          p,
                          T,
                          X) + xw*myMedia.Air.ReferenceMoistAir.Utilities.h_dis_pTX_der(
                          p,
                          T,
                          X,
                          p_der,
                          T_der,
                          X_der);

              else
                h_der := myMedia.Air.ReferenceAir.Air_Utilities.h_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(pl, T),
                          pl_der,
                          T_der) + xw_der*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + xw*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT_der(
                          pd,
                          T,
                          0,
                          pd_der,
                          T_der);

              end if;
            else
              if (T < 273.16) then
                h_der := myMedia.Air.ReferenceAir.Air_Utilities.h_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(pl, T),
                          pl_der,
                          T_der) + xws_der*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + xws*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT_der(
                          pd,
                          T,
                          0,
                          pd_der,
                          T_der) + xw_der*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.h_pT(p, T) + xw*
                  myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.h_pT_der(
                          p,
                          T,
                          myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T),
                          p_der,
                          T_der) - xws_der*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.h_pT(p, T) - xws*
                  myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.h_pT_der(
                          p,
                          T,
                          myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.ice09BaseProp_pT(p, T),
                          p_der,
                          T_der);

              else
                h_der := myMedia.Air.ReferenceAir.Air_Utilities.h_pT_der(
                          pl,
                          T,
                          myMedia.Air.ReferenceAir.Air_Utilities.airBaseProp_pT(p, T),
                          pl_der,
                          T_der) + xws_der*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + xws*
                  myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT_der(
                          pd,
                          T,
                          0,
                          pd_der,
                          T_der) + xw_der*myMedia.Water.IF97_Utilities.h_pT(p, T) + xw*myMedia.Water.IF97_Utilities.h_pT_der(
                          p,
                          T,
                          myMedia.Water.IF97_Utilities.waterBaseProp_pT(p, T),
                          p_der,
                          T_der) - xws_der*myMedia.Water.IF97_Utilities.h_pT(p, T) - xws*myMedia.Water.IF97_Utilities.h_pT_der(
                          p,
                          T,
                          myMedia.Water.IF97_Utilities.waterBaseProp_pT(p, T),
                          p_der,
                          T_der);

              end if;
            end if;
            if ((xw <= xws) or (xws == -1)) then
              if (T >= 773.15) then
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xw*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + (1 + xw)*
                  myMedia.Air.ReferenceMoistAir.Utilities.h_dis_pTX(
                          p,
                          T,
                          X);
              else
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xw*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T);
              end if;
            else
              if (T < 273.16) then
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xws*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + (xw -
                  xws)*myMedia.Air.ReferenceMoistAir.Utilities.Ice09_Utilities.h_pT(p, T);
              else
                h := myMedia.Air.ReferenceAir.Air_Utilities.h_pT(pl, T) + xws*myMedia.Air.ReferenceMoistAir.Utilities.IF97_new.h_pT(pd, T) + (xw -
                  xws)*myMedia.Water.IF97_Utilities.h_pT(p, T);
              end if;
            end if;
            h_der := (h_der*(1 + xw) - h*xw_der)/(1 + xw)^2;
          end if;
        end h_pTX_der;

        function u_pTX_der "Derivative of internal energy"
          extends Modelica.Icons.Function;
          input Modelica.SIunits.AbsolutePressure p "Pressure";
          input Modelica.SIunits.Temperature T "Temperature";
          input Modelica.SIunits.MassFraction X[:]=myMedia.Air.ReferenceMoistAir.reference_X
            "Mass fractions";
          input Real p_der "Derivative of pressure";
          input Real T_der "Derivative of temperature";
          input Real X_der[:] "Derivative of mass fractions";
          output Real u_der "Derivative of specific entropy";

        algorithm
          u_der := myMedia.Air.ReferenceMoistAir.Utilities.h_pTX_der(
                    p,
                    T,
                    X,
                    p_der,
                    T_der,
                    X_der) - (p_der*myMedia.Air.ReferenceMoistAir.Utilities.rho_pTX(
                    p,
                    T,
                    X) - p*myMedia.Air.ReferenceMoistAir.Utilities.rho_pTX_der(
                    p,
                    T,
                    X,
                    p_der,
                    T_der,
                    X_der))/myMedia.Air.ReferenceMoistAir.Utilities.rho_pTX(
                    p,
                    T,
                    X)^2;
        end u_pTX_der;
      end Utilities;
      annotation (Documentation(info="<html>
<p>
Calculation of fluid properties for moist air in the region from 143.15 Kelvin to 2000 Kelvin at pressures up to 10 MPa. This model of moist air is based on
the diploma thesis of Hellriegel [10] with small modifications. Moist air is treated as an ideal mixture of the real fluids air and water.
</p>

<h4>Restriction</h4>
<p>
The functions provided by this package shall be used inside of the restricted limits according to the referenced literature.
</p>

<ul>
<li>
<strong>611.2 Pa &le; p &le; 10 MPa</strong>
</li>
<li>
<strong>143.15 K &le; T &le; 2000 K</strong>
</li>
</ul>

<h4>Usage</h4>
<p>
The package MoistAir can be used as any other medium model (see <a href=\"modelica://Modelica.Media.UsersGuide\">User's Guide of Media Library</a> for further information). The package defines two boolean constants <strong>useEnhancementFactor</strong> and <strong>useDissociation</strong>, which give the user fine grained control of the calculations.
</p>
<table border=1 cellspacing=0 cellpadding=2>
<tr>
<td><strong>Constant</strong></td>
<td><strong>Default Value</strong></td>
<td><strong>Meaning</strong></td>
</tr>
<tr>
<td>useEnhancementFactor</td>
<td>false</td>
<td>The enhancement factor is used in the calculation of the saturation partial pressure of water in moist air. It is always very close to 1 except for high pressures (&gt;2 MPa) and low temperatures (&lt;233.15 K). For pressures less than 1 MPa this factor can be safely set to 1. Its calculation is very expensive, since it can only be calculated by an iterative method.</td>
</tr>
<tr>
<td>useDissociation</td>
<td>true</td>
<td>The effect of dissociation is taken into account for temperatures greater than 773.15 K.</td>
</tr>
</table>

<h4>Calculation algorithms</h4>
<h5>Nomenclature</h5>
<table width=\"25%\">
<colgroup>
<col width=\"1*\">
<col width=\"2*\">
</colgroup>
<tr>
<td>p</td>
<td>Mixture pressure in Pa</td>
</tr>
<tr>
<td>T</td>
<td>Temperature in K</td>
</tr>
<tr>
<td>x<sub>w</sub></td>
<td>Absolutue humidity in kg(water)/kg(dry air)</td>
</tr>
<tr>
<td>x<sub>ws</sub></td>
<td>Absolutue humidity on saturation boundary in kg(water)/kg(dry air)</td>
</tr>
<tr>
<td>&phi;</td>
<td>Relative humidity (only defined for unsaturated humid air)</td>
</tr>
</table>

<h5>Unsaturated and saturated humid air (0 &le; x<sub>w</sub> &le; x<sub>ws</sub>)</h5>
<p>
Ideal mixture of dry air and steam
</p>

<ul>
<li>Dry air:
<ul>
<li>d,h,u,s,c<sub>p</sub> from [1]</li>
<li>&lambda;, &eta; from [2]</li>
</ul>
</li>

<li>Steam:
<ul>
<li>d,h,u,s,c<sub>p</sub> from [4]</li>
<li>&lambda;, &eta; for 273.15 K &le; T &le; 1073.15 K from [5] and [6]</li>
<li>&lambda;, &eta; for T &lt; 273.15 K or T &gt; 1073.15 K from [12]</li>
</ul>
</li>
</ul>

<h5>Supersaturated humid air (liquid fog and ice fog)</h5>
<p>
<strong>Liquid fog (x<sub>w</sub> &gt; x<sub>wsw</sub>) and T &ge; 273.16 K</strong>
</p>

<p>
Ideal mixture of saturated humid air and water
</p>

<ul>
<li>Saturated humid air (see above)</li>
<li>d,h,u,s of liquid droplets from [4]</li>
<li>c<sub>p</sub> is not defined</li>
<li>&lambda;, &eta; of liquid droplets from [5] and [6]</li>
</ul>

<p>
<strong>Ice fog (x<sub>w</sub> &gt; x<sub>wsw</sub>) and T &lt; 273.16 K</strong>
</p>

<p>
Ideal mixture of saturated humid air and ice
</p>

<ul>
<li>Saturated humid air (see above)</li>
<li>d,h,u,s of ice crystals from [7]</li>
<li>c<sub>p</sub> is not defined</li>
<li>&lambda; of ice as constant value</li>
<li>&eta; of ice is neglected</li>
</ul>


<h5>Saturation pressure of water in moist air</h5>
<p>
The saturation pressure p<sub>ds</sub> of water in moist air is calculated by p<sub>ds</sub> = f*p<sub>sat</sub>, where
</p>

<ul>
<li>f is the enhancement factor from [9] and [3]</li>
<li>p<sub>sat</sub> for T &ge; 273.16 K is the saturation pressure from [4]</li>
<li>p<sub>sat</sub> for T &lt; 273.16 K is the saturation pressure from [8]</li>
</ul>


<h5>Dissociation</h5>
<p>
For temperatures above 773.15 K effects of dissociation are taken into account. Dissociation is modeled according to [11].
For high temperatures the calculated values for moist air with 0 kg(water)/kg(dry air) (i.e. dry air) may differ from those
calculated by the package Modelica.Media.Air.ReferenceAir, because there no dissociation is considered.
</p>

<h4>References</h4>
<dl>
<dd>[1] <strong>Thermodynamic Properties of Air and Mixtures of Nitrogen, Argon,
and Oxygen From 60 to 2000 K at Pressures to 2000 MPa</strong>. J. Phys. Chem. Ref. Data, Vol. 29, No. 3, 2000.
</dd>
<dd>[2] <strong>Viscosity and Thermal Conductivity Equations for
Nitrogen, Oxygen, Argon, and Air</strong>. International Journal of Thermophysics, Vol. 25, No. 1, January 2004
</dd>
<dd>[3] <strong>Revised Release on the IAPWS Formulation 1995 for the Thermodynamic
Properties of Ordinary Water Substance for General and Scientific Use</strong>. 2009 International Association for the Properties of Water and Steam.
</dd>
<dd>[4] <strong>Revised Release on the IAPWS Industrial Formulation 1997
for the Thermodynamic Properties of Water and Steam</strong>. 2007 International Association for the Properties of Water and Steam.
</dd>
<dd>[5] <strong>Release on the IAPWS Formulation 2008 for the Viscosity of Ordinary Water Substance</strong>. 2008 International Association for the Properties of Water and Steam
</dd>
<dd>[6] <strong>Release on the IAPWS Formulation 2011 for the Thermal Conductivity of
Ordinary Water Substance</strong>. 2011 International Association for the Properties of Water and Steam.
</dd>
<dd>[7] <strong>Revised Release on the Equation of State 2006 for H2O Ice Ih</strong>. 2009 International Association for the Properties of Water and Steam.
</dd>
<dd>[8] <strong>Revised Release on the Pressure along the Melting and
Sublimation Curves of Ordinary Water Substance</strong>. 2011 International Association for the Properties of Water and Steam.
</dd>
<dd>[9] <strong>Determination of Thermodynamic and Transport Properties
of Humid Air for Power-Cycle Calculations</strong>. 2009 PTB, Braunschweig, Germany.
</dd>
<dd>[10] <strong>Berechnung der thermodynamischen Zustandsfunktionen von
feuchter Luft in energietechnischen Prozessmodellierungen</strong>. 2001 Diplomarbeit, Zittau.
</dd>
<dd>[11] <strong>Thermodynamische Stoffwerte von feuchter Luft und Verbrennungsgasen</strong>. 2003 VDI-Richtlinie 4670.
</dd>
<dd>[12] <strong>W&auml;rme&uuml;bertragung in Dampferzeugern und W&auml;rmetauschern</strong>. 1985 FDBR-Fachbuchreihe, Bd. 2, Vulkan Verlag Essen.
</dd>
</dl>

<h4>References</h4>
<dl>
<dt>Lemmon, E. W., Jacobsen, R. T., Penoncello, S. G., Friend, D. G.:</dt>
<dd><strong>Thermodynamic Properties of Air and Mixtures of Nitrogen, Argon,
and Oxygen From 60 to 2000 K at Pressures to 2000 MPa</strong>. J. Phys. Chem. Ref. Data, Vol. 29, No. 3, 2000.
</dd>
<dt>Lemmon, E. W., Jacobsen, R. T.:</dt>
<dd><strong>Viscosity and Thermal Conductivity Equations for
Nitrogen, Oxygen, Argon, and Air</strong>. International Journal of Thermophysics, Vol. 25, No. 1, January 2004
</dd>
</dl>


<h4>Verification</h4>
<p>
The verification report for the development of this library is provided
<a href=\"modelica://Modelica/Resources/Documentation/Media/MoMoLib_VerificationResults_XRG.pdf\">here</a>.
</p>

<h4>Acknowledgment</h4>
<p>
This library was developed by XRG Simulation GmbH as part of the <a href=\"http://www.cleansky.eu/\">Clean Sky</a> JTI project (Project title: MoMoLib-Modelica Model Library Development for Media, Magnetic Systems and Wavelets; Project number: 296369; Theme: JTI-CS-2011-1-SGO-02-026: Modelica Model Library Development Part I). The partial financial support for the development of this library by the European Union is highly appreciated.
</p>

<p>
Some parts of this library refer to the ThermoFluid library developed at Lund University (<a href=\"http://thermofluid.sourceforge.net/\">http://thermofluid.sourceforge.net</a>).
</p>

<p>
Copyright &copy; 2013-2019, Modelica Association and contributors
</p>
</html>"));
    end ReferenceMoistAir;
    annotation (Documentation(info="<html>
  <p>This package contains different medium models for air:</p>
<ul>
<li><strong>SimpleAir</strong><br>
    Simple dry air medium in a limited temperature range.</li>
<li><strong>DryAirNasa</strong><br>
    Dry air as an ideal gas from Media.IdealGases.MixtureGases.Air.</li>
<li><strong>MoistAir</strong><br>
    Moist air as an ideal gas mixture of steam and dry air with fog below and above the triple point temperature.</li>
</ul>
</html>"));
  end Air;

  package CompressibleLiquids "Compressible liquid models"
    extends Modelica.Icons.VariantsPackage;
    package Common "Base classes for compressible liquids"
      extends Modelica.Icons.Package;
      partial package LinearWater_pT
        "Base class for liquid, linear compressibility water models"
        extends myMedia.Interfaces.PartialLinearFluid(
          constantJacobian=true,
          reference_d=myMedia.Water.StandardWater.density(state),
          reference_h=myMedia.Water.StandardWater.specificEnthalpy(state),
          reference_s=myMedia.Water.StandardWater.specificEntropy(state),
          cp_const=myMedia.Water.StandardWater.specificHeatCapacityCp(state),
          beta_const=myMedia.Water.StandardWater.isobaricExpansionCoefficient(state),
          kappa_const=myMedia.Water.StandardWater.isothermalCompressibility(state),
          MM_const=myMedia.Water.StandardWater.molarMass(state));

        constant myMedia.Water.StandardWater.ThermodynamicState state=myMedia.Water.StandardWater.setState_pT(reference_p, reference_T);
      end LinearWater_pT;
    end Common;

    package LinearColdWater "Cold water model with linear compressibility"
      extends myMedia.Interfaces.PartialLinearFluid(
        constantJacobian=true,
        reference_p=101325,
        reference_T=278.15,
        reference_d=997.05,
        reference_h=104929,
        reference_s=100.0,
        cp_const=4181.9,
        beta_const=2.5713e-4,
        kappa_const=4.5154e-10,
        MM_const=0.018015268);

    redeclare function extends dynamicViscosity "Dynamic viscosity of water"
    algorithm
      eta := 1.5e-3;
    end dynamicViscosity;

    redeclare function extends thermalConductivity
        "Thermal conductivity of water"
    algorithm
      lambda := 0.572;
    end thermalConductivity;

    end LinearColdWater;

    package LinearWater_pT_Ambient
      "Liquid, linear compressibility water model at 1.01325 bar and 25 degree Celsius"
      extends myMedia.CompressibleLiquids.Common.LinearWater_pT(reference_p=101325, reference_T=298.15);
    redeclare function extends dynamicViscosity "Dynamic viscosity of water"
    algorithm
      eta := 8.9e-4;
    end dynamicViscosity;

    redeclare function extends thermalConductivity
        "Thermal conductivity of water"
    algorithm
      lambda := 0.608;
    end thermalConductivity;
      annotation (Documentation(info="<html>
<h4>Water model with linear compressibility at ambient conditions</h4>
</html>"));
    end LinearWater_pT_Ambient;
    annotation (Documentation(info="<html>

<h4>Fluid models with linear compressibility, using PartialLinearFluid as base class.</h4>
<p>The linear compressibility fluid models contained in this package are based on the assumptions that:
</p>
<ul>
<li>The specific heat capacity at constant pressure (cp) is constant</li>
<li>The isobaric expansion coefficient (beta) is constant</li>
<li>The isothermal compressibility (kappa) is constant</li>
<li>Pressure and temperature are used as states</li>
</ul>
<p>
This results in models that are only valid for small temperature ranges, but sufficient to model compressibility and e.g., the \"water hammer\" effect. Another advantage id that only 3 values need to be measured to have an initial model. Hydraulic fluids can often be approximated by this type of model.
</p>
<p>
That means that the density is a linear function in temperature and in pressure.
In order to define the complete model, a number of constant reference values are needed which
are computed at the reference values of the states pressure p and temperature T. The model can
be interpreted as a linearization of a full non-linear fluid model (but it is not linear in all
thermodynamic coordinates). Reference values are needed for
</p>
<ol>
<li>the density (reference_d),</li>
<li>the specific enthalpy (reference_h),</li>
<li>the specific entropy (reference_s).</li>
</ol>
<p>
Apart from that, a user needs to define the molar mass, MM_const.
Note that it is possible to define a fluid by computing the reference
values from a full non-linear fluid model by computing the package constants
using the standard functions defined in a fluid package (see example in Common, LinearWater_pT).
</p>

</html>"));
  end CompressibleLiquids;

  package IdealGases "Data and models of ideal gases (single, fixed and dynamic mixtures) from NASA source"
    extends Modelica.Icons.VariantsPackage;

    package Common "Common packages and data for the ideal gas models"
    extends Modelica.Icons.Package;

      record DataRecord
        "Coefficient data record for properties of ideal gases based on NASA source"
        extends Modelica.Icons.Record;
        String name "Name of ideal gas";
        SI.MolarMass MM "Molar mass";
        SI.SpecificEnthalpy Hf "Enthalpy of formation at 298.15K";
        SI.SpecificEnthalpy H0 "H0(298.15K) - H0(0K)";
        SI.Temperature Tlimit "Temperature limit between low and high data sets";
        Real alow[7] "Low temperature coefficients a";
        Real blow[2] "Low temperature constants b";
        Real ahigh[7] "High temperature coefficients a";
        Real bhigh[2] "High temperature constants b";
        SI.SpecificHeatCapacity R "Gas constant";
        annotation (Documentation(info="<html>
<p>
This data record contains the coefficients for the
ideal gas equations according to:
</p>
<blockquote>
  <p>McBride B.J., Zehe M.J., and Gordon S. (2002): <strong>NASA Glenn Coefficients
  for Calculating Thermodynamic Properties of Individual Species</strong>. NASA
  report TP-2002-211556</p>
</blockquote>
<p>
The equations have the following structure:
</p>
<img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/singleEquations.png\">
<p>
The polynomials for h(T) and s0(T) are derived via integration from the one for cp(T)  and contain the integration constants b1, b2 that define the reference specific enthalpy and entropy. For entropy differences the reference pressure p0 is arbitrary, but not for absolute entropies. It is chosen as 1 standard atmosphere (101325 Pa).
</p>
<p>
For most gases, the region of validity is from 200 K to 6000 K.
The equations are split into two regions that are separated
by Tlimit (usually 1000 K). In both regions the gas is described
by the data above. The two branches are continuous and in most
gases also differentiable at Tlimit.
</p>
</html>"));
      end DataRecord;

      package Functions
        "Basic Functions for ideal gases: cp, h, s, thermal conductivity, viscosity"
        extends Modelica.Icons.FunctionsPackage;

        constant Boolean excludeEnthalpyOfFormation=true
          "If true, enthalpy of formation Hf is not included in specific enthalpy h";
        constant myMedia.Interfaces.Choices.ReferenceEnthalpy referenceChoice=myMedia.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K
          "Choice of reference enthalpy";
        constant myMedia.Interfaces.Types.SpecificEnthalpy h_offset=0.0
          "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
        constant Integer methodForThermalConductivity(min=1,max=2)=1;

        function cp_T
          "Compute specific heat capacity at constant pressure from temperature and gas data"
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          output SI.SpecificHeatCapacity cp "Specific heat capacity at temperature T";
        algorithm
          cp := smooth(0,if T < data.Tlimit then data.R*(1/(T*T)*(data.alow[1] + T*(
            data.alow[2] + T*(1.*data.alow[3] + T*(data.alow[4] + T*(data.alow[5] + T
            *(data.alow[6] + data.alow[7]*T))))))) else data.R*(1/(T*T)*(data.ahigh[1]
             + T*(data.ahigh[2] + T*(1.*data.ahigh[3] + T*(data.ahigh[4] + T*(data.
            ahigh[5] + T*(data.ahigh[6] + data.ahigh[7]*T))))))));
          annotation (Inline=true,smoothOrder=2);
        end cp_T;

        function cp_Tlow
          "Compute specific heat capacity at constant pressure, low T region"
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          output SI.SpecificHeatCapacity cp "Specific heat capacity at temperature T";
        algorithm
          cp := data.R*(1/(T*T)*(data.alow[1] + T*(
            data.alow[2] + T*(1.*data.alow[3] + T*(data.alow[4] + T*(data.alow[5] + T
            *(data.alow[6] + data.alow[7]*T)))))));
          annotation (Inline=false, derivative(zeroDerivative=data) = cp_Tlow_der);
        end cp_Tlow;

        function cp_Tlow_der
          "Compute specific heat capacity at constant pressure, low T region"
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          input Real dT "Temperature derivative";
          output Real cp_der "Derivative of specific heat capacity";
        algorithm
          cp_der := dT*data.R/(T*T*T)*(-2*data.alow[1] + T*(
            -data.alow[2] + T*T*(data.alow[4] + T*(2.*data.alow[5] + T
            *(3.*data.alow[6] + 4.*data.alow[7]*T)))));
          annotation(smoothOrder=2);
        end cp_Tlow_der;

        function h_T "Compute specific enthalpy from temperature and gas data; reference is decided by the
    refChoice input, or by the referenceChoice package constant by default"
          import ThermofluidStream.Media.myMedia.Interfaces.Choices;
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          input Boolean exclEnthForm=excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
          input myMedia.Interfaces.Choices.ReferenceEnthalpy refChoice=referenceChoice "Choice of reference enthalpy";
          input SI.SpecificEnthalpy h_off=h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
          output SI.SpecificEnthalpy h "Specific enthalpy at temperature T";

        algorithm
          h := smooth(0, (if T < data.Tlimit then data.R*((-data.alow[1] + T*(data.blow[
            1] + data.alow[2]*Modelica.Math.log(T) + T*(1.*data.alow[3] + T*(0.5*data.alow[
            4] + T*(1/3*data.alow[5] + T*(0.25*data.alow[6] + 0.2*data.alow[7]*T))))))
            /T) else data.R*((-data.ahigh[1] + T*(data.bhigh[1] + data.ahigh[2]*
            Modelica.Math.log(T) + T*(1.*data.ahigh[3] + T*(0.5*data.ahigh[4] + T*(1/
            3*data.ahigh[5] + T*(0.25*data.ahigh[6] + 0.2*data.ahigh[7]*T))))))/T))
             + (if exclEnthForm then -data.Hf else 0.0) + (if (refChoice == Choices.ReferenceEnthalpy.ZeroAt0K)
             then data.H0 else 0.0) + (if refChoice == Choices.ReferenceEnthalpy.UserDefined
             then h_off else 0.0));
          annotation (Inline=false,smoothOrder=2);
        end h_T;

        function h_T_der "Derivative function for h_T"
          import ThermofluidStream.Media.myMedia.Interfaces.Choices;
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          input Boolean exclEnthForm=excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
          input myMedia.Interfaces.Choices.ReferenceEnthalpy refChoice=referenceChoice "Choice of reference enthalpy";
          input SI.SpecificEnthalpy h_off=h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
          input Real dT "Temperature derivative";
          output Real h_der "Specific enthalpy at temperature T";
        algorithm
          h_der := dT*myMedia.IdealGases.Common.Functions.cp_T(data, T);
          annotation(Inline=true,smoothOrder=1);
        end h_T_der;

        function h_Tlow "Compute specific enthalpy, low T region; reference is decided by the
    refChoice input, or by the referenceChoice package constant by default"
          import ThermofluidStream.Media.myMedia.Interfaces.Choices;
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          input Boolean exclEnthForm=excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
          input myMedia.Interfaces.Choices.ReferenceEnthalpy refChoice=referenceChoice "Choice of reference enthalpy";
          input SI.SpecificEnthalpy h_off=h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
          output SI.SpecificEnthalpy h "Specific enthalpy at temperature T";

        algorithm
          h := data.R*((-data.alow[1] + T*(data.blow[1] + data.alow[2]*
            Modelica.Math.log(T) + T*(1.*data.alow[3] + T*(0.5*data.alow[4] + T*(1/3*
            data.alow[5] + T*(0.25*data.alow[6] + 0.2*data.alow[7]*T))))))/T) + (if
            exclEnthForm then -data.Hf else 0.0) + (if (refChoice == Choices.ReferenceEnthalpy.ZeroAt0K)
             then data.H0 else 0.0) + (if refChoice == Choices.ReferenceEnthalpy.UserDefined
             then h_off else 0.0);
          annotation(Inline=false,smoothOrder=2);
        end h_Tlow;

        function h_Tlow_der "Compute specific enthalpy, low T region; reference is decided by the
    refChoice input, or by the referenceChoice package constant by default"
          import ThermofluidStream.Media.myMedia.Interfaces.Choices;
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          input Boolean exclEnthForm=excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
          input myMedia.Interfaces.Choices.ReferenceEnthalpy refChoice=referenceChoice "Choice of reference enthalpy";
          input SI.SpecificEnthalpy h_off=h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
          input Real dT(unit="K/s") "Temperature derivative";
          output Real h_der(unit="J/(kg.s)")
            "Derivative of specific enthalpy at temperature T";
        algorithm
          h_der := dT*myMedia.IdealGases.Common.Functions.cp_Tlow(data, T);
          annotation(Inline=true,smoothOrder=2);
        end h_Tlow_der;

        function s0_T "Compute specific entropy from temperature and gas data"
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          output SI.SpecificEntropy s "Specific entropy at temperature T";
        algorithm
          s := if T < data.Tlimit then data.R*(data.blow[2] - 0.5*data.alow[1]/(T*T)
             - data.alow[2]/T + data.alow[3]*Modelica.Math.log(T) + T*(data.alow[4]
             + T*(0.5*data.alow[5] + T*(1/3*data.alow[6] + 0.25*data.alow[7]*T))))
             else data.R*(data.bhigh[2] - 0.5*data.ahigh[1]/(T*T) - data.ahigh[2]/T
             + data.ahigh[3]*Modelica.Math.log(T) + T*(data.ahigh[4] + T*(0.5*data.ahigh[
            5] + T*(1/3*data.ahigh[6] + 0.25*data.ahigh[7]*T))));
          annotation (Inline=true, smoothOrder=2);
        end s0_T;

        function s0_Tlow "Compute specific entropy, low T region"
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          output SI.SpecificEntropy s "Specific entropy at temperature T";
        algorithm
          s := data.R*(data.blow[2] - 0.5*data.alow[1]/(T*T) - data.alow[2]/T + data.alow[
            3]*Modelica.Math.log(T) + T*(data.alow[4] + T*(0.5*data.alow[5] + T*(1/3*
            data.alow[6] + 0.25*data.alow[7]*T))));
          annotation (Inline=true);
        end s0_Tlow;

        function s0_Tlow_der "Compute derivative of specific entropy, low T region"
          extends Modelica.Icons.Function;
          input IdealGases.Common.DataRecord data "Ideal gas data";
          input SI.Temperature T "Temperature";
          input Real T_der "Temperature derivative";
          output SI.SpecificEntropy s "Specific entropy at temperature T";
        algorithm
          s := data.R*(data.blow[2] - 0.5*data.alow[1]/(T*T) - data.alow[2]/T + data.alow[
            3]*Modelica.Math.log(T) + T*(data.alow[4] + T*(0.5*data.alow[5] + T*(1/3*
            data.alow[6] + 0.25*data.alow[7]*T))));
          annotation (Inline=true);
        end s0_Tlow_der;

        function dynamicViscosityLowPressure
          "Dynamic viscosity of low pressure gases"
          extends Modelica.Icons.Function;
          input SI.Temp_K T "Gas temperature";
          input SI.Temp_K Tc "Critical temperature of gas";
          input SI.MolarMass M "Molar mass of gas";
          input SI.MolarVolume Vc "Critical molar volume of gas";
          input Real w "Acentric factor of gas";
          input myMedia.Interfaces.Types.DipoleMoment mu "Dipole moment of gas molecule";
          input Real k =  0.0 "Special correction for highly polar substances";
          output SI.DynamicViscosity eta "Dynamic viscosity of gas";
        protected
          parameter Real Const1_SI=40.785*10^(-9.5)
            "Constant in formula for eta converted to SI units";
          parameter Real Const2_SI=131.3/1000.0
            "Constant in formula for mur converted to SI units";
          Real mur=Const2_SI*mu/sqrt(Vc*Tc)
            "Dimensionless dipole moment of gas molecule";
          Real Fc=1 - 0.2756*w + 0.059035*mur^4 + k
            "Factor to account for molecular shape and polarities of gas";
          Real Tstar "Dimensionless temperature defined by equation below";
          Real Ov "Viscosity collision integral for the gas";

        algorithm
          Tstar := 1.2593*T/Tc;
          Ov := 1.16145*Tstar^(-0.14874) + 0.52487*Modelica.Math.exp(-0.7732*Tstar) + 2.16178*Modelica.Math.exp(-2.43787
            *Tstar);
          eta := Const1_SI*Fc*sqrt(M*T)/(Vc^(2/3)*Ov);
          annotation (smoothOrder=2,
                      Documentation(info="<html>
<p>
The used formula are based on the method of Chung et al (1984, 1988) referred to in ref [1] chapter 9.
The formula 9-4.10 is the one being used. The Formula is given in non-SI units, the following conversion constants were used to
transform the formula to SI units:
</p>

<ul>
<li> <strong>Const1_SI:</strong> The factor 10^(-9.5) =10^(-2.5)*1e-7 where the
     factor 10^(-2.5) originates from the conversion of g/mol->kg/mol + cm^3/mol->m^3/mol
      and the factor 1e-7 is due to conversion from microPoise->Pa.s.</li>
<li>  <strong>Const2_SI:</strong> The factor 1/3.335641e-27 = 1e-3/3.335641e-30
      where the factor 3.335641e-30 comes from debye->C.m and
      1e-3 is due to conversion from cm^3/mol->m^3/mol</li>
</ul>

<h4>References:</h4>
<p>
[1] Bruce E. Poling, John E. Prausnitz, John P. O'Connell, \"The Properties of Gases and Liquids\" 5th Ed. Mc Graw Hill.
</p>

<h4>Author</h4>
<p>T. Skoglund, Lund, Sweden, 2004-08-31</p>

</html>"));
        end dynamicViscosityLowPressure;

        function thermalConductivityEstimate
          "Thermal conductivity of polyatomic gases (Eucken and Modified Eucken correlation)"
          extends Modelica.Icons.Function;
          input myMedia.Interfaces.Types.SpecificHeatCapacity Cp "Constant pressure heat capacity";
          input myMedia.Interfaces.Types.DynamicViscosity eta "Dynamic viscosity";
          input Integer method(min=1,max=2)=1
            "1: Eucken Method, 2: Modified Eucken Method";
          input IdealGases.Common.DataRecord data "Ideal gas data";
          output myMedia.Interfaces.Types.ThermalConductivity lambda "Thermal conductivity [W/(m.k)]";
        algorithm
          lambda := if method == 1 then eta*(Cp - data.R + (9/4)*data.R)
                                   else eta*(Cp - data.R)*(1.32 + 1.77/((Cp/data.R) - 1.0));
          annotation (smoothOrder=2,
                      Documentation(info="<html>
<p>
This function provides two similar methods for estimating the
thermal conductivity of polyatomic gases.
The Eucken method (input method == 1) gives good results for low temperatures,
but it tends to give an underestimated value of the thermal conductivity
(lambda) at higher temperatures.<br>
The Modified Eucken method (input method == 2) gives good results for
high-temperatures, but it tends to give an overestimated value of the
thermal conductivity (lambda) at low temperatures.
</p>
</html>"));
        end thermalConductivityEstimate;
      end Functions;

      partial package SingleGasNasa
        "Medium model of an ideal gas based on NASA source"

        extends Interfaces.PartialPureSubstance(
           ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pT,
           redeclare final record FluidConstants =
              myMedia.Interfaces.Types.IdealGas.FluidConstants,
           mediumName=data.name,
           substanceNames={data.name},
           singleState=false,
           Temperature(min=200, max=6000, start=500, nominal=500),
           SpecificEnthalpy(start=if Functions.referenceChoice==ReferenceEnthalpy.ZeroAt0K then data.H0 else
              if Functions.referenceChoice==ReferenceEnthalpy.UserDefined then Functions.h_offset else 0, nominal=1.0e5),
           Density(start=10, nominal=10),
           AbsolutePressure(start=10e5, nominal=10e5));

        redeclare record extends ThermodynamicState
          "Thermodynamic state variables for ideal gases"
          AbsolutePressure p "Absolute pressure of medium";
          Temperature T "Temperature of medium";
        end ThermodynamicState;
        import Modelica.Math;
        import ThermofluidStream.Media.myMedia.Interfaces.Choices.ReferenceEnthalpy;

        constant IdealGases.Common.DataRecord data
          "Data record of ideal gas substance";

        constant FluidConstants[nS] fluidConstants "Constant data for the fluid";

        redeclare model extends BaseProperties(
         T(stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default),
         p(stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default))
          "Base properties of ideal gas medium"
        equation
          assert(T >= 200 and T <= 6000, "
Temperature T (= "       + String(T) + " K) is not in the allowed range
200 K <= T <= 6000 K required from medium model \""       + mediumName + "\".
");       MM = data.MM;
          R = data.R;
          h = myMedia.IdealGases.Common.Functions.h_T(
                    data,
                    T,
                    myMedia.IdealGases.Common.Functions.excludeEnthalpyOfFormation,
                    myMedia.IdealGases.Common.Functions.referenceChoice,
                    myMedia.IdealGases.Common.Functions.h_offset);
          u = h - R*T;

          // Has to be written in the form d=f(p,T) in order that static
          // state selection for p and T is possible
          d = p/(R*T);
          // connect state with BaseProperties
          state.T = T;
          state.p = p;
        end BaseProperties;

          redeclare function setState_pTX
          "Return thermodynamic state as function of p, T and composition X"
            extends Modelica.Icons.Function;
            input AbsolutePressure p "Pressure";
            input Temperature T "Temperature";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := ThermodynamicState(p=p,T=T);
            annotation(Inline=true,smoothOrder=2);
          end setState_pTX;

          redeclare function setState_phX
          "Return thermodynamic state as function of p, h and composition X"
            extends Modelica.Icons.Function;
            input AbsolutePressure p "Pressure";
            input SpecificEnthalpy h "Specific enthalpy";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := ThermodynamicState(p=p,T=T_h(h));
            annotation(Inline=true,smoothOrder=2);
          end setState_phX;

          redeclare function setState_psX
          "Return thermodynamic state as function of p, s and composition X"
            extends Modelica.Icons.Function;
            input AbsolutePressure p "Pressure";
            input SpecificEntropy s "Specific entropy";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := ThermodynamicState(p=p,T=T_ps(p,s));
            annotation(Inline=true,smoothOrder=2);
          end setState_psX;

          redeclare function setState_dTX
          "Return thermodynamic state as function of d, T and composition X"
            extends Modelica.Icons.Function;
            input Density d "Density";
            input Temperature T "Temperature";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := ThermodynamicState(p=d*data.R*T,T=T);
            annotation(Inline=true,smoothOrder=2);
          end setState_dTX;

            redeclare function extends setSmoothState "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
            algorithm
          state := ThermodynamicState(p=myMedia.Common.smoothStep(
                        x,
                        state_a.p,
                        state_b.p,
                        x_small), T=myMedia.Common.smoothStep(
                        x,
                        state_a.T,
                        state_b.T,
                        x_small));
              annotation(Inline=true,smoothOrder=2);
            end setSmoothState;

        redeclare function extends pressure "Return pressure of ideal gas"
        algorithm
          p := state.p;
          annotation(Inline=true,smoothOrder=2);
        end pressure;

        redeclare function extends temperature "Return temperature of ideal gas"
        algorithm
          T := state.T;
          annotation(Inline=true,smoothOrder=2);
        end temperature;

        redeclare function extends density "Return density of ideal gas"
        algorithm
          d := state.p/(data.R*state.T);
          annotation(Inline=true,smoothOrder=2);
        end density;

        redeclare function extends specificEnthalpy "Return specific enthalpy"
          extends Modelica.Icons.Function;
        algorithm
          h := myMedia.IdealGases.Common.Functions.h_T(data, state.T);
          annotation(Inline=true,smoothOrder=2);
        end specificEnthalpy;

        redeclare function extends specificInternalEnergy
          "Return specific internal energy"
          extends Modelica.Icons.Function;
        algorithm
          u := myMedia.IdealGases.Common.Functions.h_T(data, state.T) - data.R*state.T;
          annotation(Inline=true,smoothOrder=2);
        end specificInternalEnergy;

        redeclare function extends specificEntropy "Return specific entropy"
          extends Modelica.Icons.Function;
        algorithm
          s := myMedia.IdealGases.Common.Functions.s0_T(data, state.T) - data.R*Modelica.Math.log(state.p/reference_p);
          annotation(Inline=true,smoothOrder=2);
        end specificEntropy;

        redeclare function extends specificGibbsEnergy "Return specific Gibbs energy"
          extends Modelica.Icons.Function;
        algorithm
          g := myMedia.IdealGases.Common.Functions.h_T(data, state.T) - state.T*specificEntropy(state);
          annotation(Inline=true,smoothOrder=2);
        end specificGibbsEnergy;

        redeclare function extends specificHelmholtzEnergy
          "Return specific Helmholtz energy"
          extends Modelica.Icons.Function;
        algorithm
          f := myMedia.IdealGases.Common.Functions.h_T(data, state.T) - data.R*state.T - state.T*specificEntropy(state);
          annotation(Inline=true,smoothOrder=2);
        end specificHelmholtzEnergy;

        redeclare function extends specificHeatCapacityCp
          "Return specific heat capacity at constant pressure"
        algorithm
          cp := myMedia.IdealGases.Common.Functions.cp_T(data, state.T);
          annotation(Inline=true,smoothOrder=2);
        end specificHeatCapacityCp;

        redeclare function extends specificHeatCapacityCv
          "Compute specific heat capacity at constant volume from temperature and gas data"
        algorithm
          cv := myMedia.IdealGases.Common.Functions.cp_T(data, state.T) - data.R;
          annotation(Inline=true,smoothOrder=2);
        end specificHeatCapacityCv;

        redeclare function extends isentropicExponent "Return isentropic exponent"
        algorithm
          gamma := specificHeatCapacityCp(state)/specificHeatCapacityCv(state);
          annotation(Inline=true,smoothOrder=2);
        end isentropicExponent;

        redeclare function extends velocityOfSound "Return velocity of sound"
          extends Modelica.Icons.Function;
        algorithm
          a := sqrt(max(0, data.R*state.T*myMedia.IdealGases.Common.Functions.cp_T(data, state.T)/specificHeatCapacityCv(state)));
          annotation(Inline=true,smoothOrder=2);
        end velocityOfSound;

        function isentropicEnthalpyApproximation
          "Approximate method of calculating h_is from upstream properties and downstream pressure"
          extends Modelica.Icons.Function;
          input SI.Pressure p2 "Downstream pressure";
          input ThermodynamicState state "Properties at upstream location";
          input Boolean exclEnthForm=Functions.excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
          input ReferenceEnthalpy refChoice=Functions.referenceChoice
            "Choice of reference enthalpy";
          input SpecificEnthalpy h_off=Functions.h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
          output SI.SpecificEnthalpy h_is "Isentropic enthalpy";
        protected
          IsentropicExponent gamma =  isentropicExponent(state) "Isentropic exponent";
        algorithm
          h_is := myMedia.IdealGases.Common.Functions.h_T(
                    data,
                    state.T,
                    exclEnthForm,
                    refChoice,
                    h_off) + gamma/(gamma - 1.0)*state.p/density(state)*((p2/state.p)^((gamma - 1)/gamma) - 1.0);
          annotation(Inline=true,smoothOrder=2);
        end isentropicEnthalpyApproximation;

        redeclare function extends isentropicEnthalpy "Return isentropic enthalpy"
        input Boolean exclEnthForm=Functions.excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
        input ReferenceEnthalpy refChoice=Functions.referenceChoice
            "Choice of reference enthalpy";
        input SpecificEnthalpy h_off=Functions.h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
        algorithm
          h_is := isentropicEnthalpyApproximation(p_downstream,refState,exclEnthForm,refChoice,h_off);
          annotation(Inline=true,smoothOrder=2);
        end isentropicEnthalpy;

        redeclare function extends isobaricExpansionCoefficient
          "Returns overall the isobaric expansion coefficient beta"
        algorithm
          beta := 1/state.T;
          annotation(Inline=true,smoothOrder=2);
        end isobaricExpansionCoefficient;

        redeclare function extends isothermalCompressibility
          "Returns overall the isothermal compressibility factor"
        algorithm
          kappa := 1.0/state.p;
          annotation(Inline=true,smoothOrder=2);
        end isothermalCompressibility;

        redeclare function extends density_derp_T
          "Returns the partial derivative of density with respect to pressure at constant temperature"
        algorithm
          ddpT := 1/(state.T*data.R);
          annotation(Inline=true,smoothOrder=2);
        end density_derp_T;

        redeclare function extends density_derT_p
          "Returns the partial derivative of density with respect to temperature at constant pressure"
        algorithm
          ddTp := -state.p/(state.T*state.T*data.R);
          annotation(Inline=true,smoothOrder=2);
        end density_derT_p;

        redeclare function extends density_derX
          "Returns the partial derivative of density with respect to mass fractions at constant pressure and temperature"
        algorithm
          dddX := fill(0,nX);
          annotation(Inline=true,smoothOrder=2);
        end density_derX;

        redeclare function extends density_derp_h
          "Returns the partial derivative of density with respect to pressure at constant enthalpy"
        algorithm
          ddph := specificHeatCapacityCp(state)/(state.T*data.R*data.R);
          annotation(Inline=true,smoothOrder=2);
        end density_derp_h;

        redeclare replaceable function extends dynamicViscosity "Dynamic viscosity"
        algorithm
          assert(fluidConstants[1].hasCriticalData,
          "Failed to compute dynamicViscosity: For the species \"" + mediumName + "\" no critical data is available.");
          assert(fluidConstants[1].hasDipoleMoment,
          "Failed to compute dynamicViscosity: For the species \"" + mediumName + "\" no critical data is available.");
          eta := myMedia.IdealGases.Common.Functions.dynamicViscosityLowPressure(
                    state.T,
                    fluidConstants[1].criticalTemperature,
                    fluidConstants[1].molarMass,
                    fluidConstants[1].criticalMolarVolume,
                    fluidConstants[1].acentricFactor,
                    fluidConstants[1].dipoleMoment);
          annotation (smoothOrder=2);
        end dynamicViscosity;

        redeclare replaceable function extends thermalConductivity
          "Thermal conductivity of gas"
        //  input IdealGases.Common.DataRecord data "Ideal gas data";
          input Integer method=Functions.methodForThermalConductivity
            "1: Eucken Method, 2: Modified Eucken Method";
        algorithm
          assert(fluidConstants[1].hasCriticalData,
          "Failed to compute thermalConductivity: For the species \"" + mediumName + "\" no critical data is available.");
          lambda := myMedia.IdealGases.Common.Functions.thermalConductivityEstimate(
                    specificHeatCapacityCp(state),
                    dynamicViscosity(state),
                    method=method,
                    data=data);
          annotation (smoothOrder=2);
        end thermalConductivity;

        redeclare function extends molarMass "Return the molar mass of the medium"
        algorithm
          MM := data.MM;
          annotation(Inline=true,smoothOrder=2);
        end molarMass;

        function T_h "Compute temperature from specific enthalpy"
          extends Modelica.Icons.Function;
          input SpecificEnthalpy h "Specific enthalpy";
          output Temperature T "Temperature";

        protected
        package Internal
            "Solve h(data,T) for T with given h (use only indirectly via temperature_phX)"
          extends myMedia.Common.OneNonLinearEquation;
          redeclare record extends f_nonlinear_Data
              "Data to be passed to non-linear function"
            extends myMedia.IdealGases.Common.DataRecord;
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
          algorithm
              y := myMedia.IdealGases.Common.Functions.h_T(f_nonlinear_data, x);
          end f_nonlinear;

          // Dummy definition has to be added for current Dymola
          redeclare function extends solve
          end solve;
        end Internal;

        algorithm
          T := Internal.solve(h, 200, 6000, 1.0e5, {1}, data);
        end T_h;

        function T_ps "Compute temperature from pressure and specific entropy"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input SpecificEntropy s "Specific entropy";
          output Temperature T "Temperature";

        protected
        package Internal
            "Solve h(data,T) for T with given h (use only indirectly via temperature_phX)"
          extends myMedia.Common.OneNonLinearEquation;
          redeclare record extends f_nonlinear_Data
              "Data to be passed to non-linear function"
            extends myMedia.IdealGases.Common.DataRecord;
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
          algorithm
              y := myMedia.IdealGases.Common.Functions.s0_T(f_nonlinear_data, x) - data.R*Modelica.Math.log(p/reference_p);
          end f_nonlinear;

          // Dummy definition has to be added for current Dymola
          redeclare function extends solve
          end solve;
        end Internal;

        algorithm
          T := Internal.solve(s, 200, 6000, p, {1}, data);
        end T_ps;
      // the functions below are not strictly necessary, there are just here for compatibility reasons

        function dynamicViscosityLowPressure
          "Dynamic viscosity of low pressure gases"
          extends Modelica.Icons.Function;
          input SI.Temp_K T "Gas temperature";
          input SI.Temp_K Tc "Critical temperature of gas";
          input SI.MolarMass M "Molar mass of gas";
          input SI.MolarVolume Vc "Critical molar volume of gas";
          input Real w "Acentric factor of gas";
          input myMedia.Interfaces.Types.DipoleMoment mu "Dipole moment of gas molecule";
          input Real k =  0.0 "Special correction for highly polar substances";
          output myMedia.Interfaces.Types.DynamicViscosity eta "Dynamic viscosity of gas";
        protected
          parameter Real Const1_SI=40.785*10^(-9.5)
            "Constant in formula for eta converted to SI units";
          parameter Real Const2_SI=131.3/1000.0
            "Constant in formula for mur converted to SI units";
          Real mur=Const2_SI*mu/sqrt(Vc*Tc)
            "Dimensionless dipole moment of gas molecule";
          Real Fc=1 - 0.2756*w + 0.059035*mur^4 + k
            "Factor to account for molecular shape and polarities of gas";
          Real Tstar "Dimensionless temperature defined by equation below";
          Real Ov "Viscosity collision integral for the gas";

        algorithm
          eta := Functions.dynamicViscosityLowPressure(T,Tc,M,Vc,w,mu,k);
          annotation (smoothOrder=2,
                      Documentation(info="<html>
<p>
The used formula are based on the method of Chung et al (1984, 1988) referred to in ref [1] chapter 9.
The formula 9-4.10 is the one being used. The Formula is given in non-SI units, the following conversion constants were used to
transform the formula to SI units:
</p>

<ul>
<li> <strong>Const1_SI:</strong> The factor 10^(-9.5) =10^(-2.5)*1e-7 where the
     factor 10^(-2.5) originates from the conversion of g/mol->kg/mol + cm^3/mol->m^3/mol
      and the factor 1e-7 is due to conversion from microPoise->Pa.s.</li>
<li>  <strong>Const2_SI:</strong> The factor 1/3.335641e-27 = 1e-3/3.335641e-30
      where the factor 3.335641e-30 comes from debye->C.m and
      1e-3 is due to conversion from cm^3/mol->m^3/mol</li>
</ul>

<h4>References:</h4>
<p>
[1] Bruce E. Poling, John E. Prausnitz, John P. O'Connell, \"The Properties of Gases and Liquids\" 5th Ed. Mc Graw Hill.
</p>

<h4>Author</h4>
<p>T. Skoglund, Lund, Sweden, 2004-08-31</p>

</html>"));
        end dynamicViscosityLowPressure;

        function thermalConductivityEstimate
          "Thermal conductivity of polyatomic gases(Eucken and Modified Eucken correlation)"
          extends Modelica.Icons.Function;
          input myMedia.Interfaces.Types.SpecificHeatCapacity Cp "Constant pressure heat capacity";
          input myMedia.Interfaces.Types.DynamicViscosity eta "Dynamic viscosity";
          input Integer method(min=1,max=2)=1
            "1: Eucken Method, 2: Modified Eucken Method";
          input IdealGases.Common.DataRecord data "Ideal gas data";
          output myMedia.Interfaces.Types.ThermalConductivity lambda "Thermal conductivity [W/(m.k)]";
        algorithm
          lambda := Functions.thermalConductivityEstimate(Cp,eta,method,data);
          annotation (smoothOrder=2,
                      Documentation(info="<html>
<p>
This function provides two similar methods for estimating the
thermal conductivity of polyatomic gases.
The Eucken method (input method == 1) gives good results for low temperatures,
but it tends to give an underestimated value of the thermal conductivity
(lambda) at higher temperatures.<br>
The Modified Eucken method (input method == 2) gives good results for
high-temperatures, but it tends to give an overestimated value of the
thermal conductivity (lambda) at low temperatures.
</p>
</html>"));
        end thermalConductivityEstimate;
        annotation (
          Documentation(info="<html>
<p>
This model calculates medium properties
for an ideal gas of a single substance, or for an ideal
gas consisting of several substances where the
mass fractions are fixed. Independent variables
are temperature <strong>T</strong> and pressure <strong>p</strong>.
Only density is a function of T and p. All other quantities
are solely a function of T. The properties
are valid in the range:
</p>
<pre>
   200 K &le; T &le; 6000 K
</pre>
<p>
The following quantities are always computed:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Variable</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>h</td>
      <td>J/kg</td>
      <td>specific enthalpy h = h(T)</td></tr>
  <tr><td>u</td>
      <td>J/kg</td>
      <td>specific internal energy u = u(T)</td></tr>
  <tr><td>d</td>
      <td>kg/m^3</td>
      <td>density d = d(p,T)</td></tr>
</table>
<p>
For the other variables, see the functions in
Modelica.Media.IdealGases.Common.SingleGasNasa.
Note, dynamic viscosity and thermal conductivity are only provided
for gases that use a data record from Modelica.Media.IdealGases.FluidData.
Currently these are the following gases:
</p>
<pre>
  Ar
  C2H2_vinylidene
  C2H4
  C2H5OH
  C2H6
  C3H6_propylene
  C3H7OH
  C3H8
  C4H8_1_butene
  C4H9OH
  C4H10_n_butane
  C5H10_1_pentene
  C5H12_n_pentane
  C6H6
  C6H12_1_hexene
  C6H14_n_heptane
  C7H14_1_heptene
  C8H10_ethylbenz
  CH3OH
  CH4
  CL2
  CO
  CO2
  F2
  H2
  H2O
  He
  N2
  N2O
  NH3
  NO
  O2
  SO2
  SO3
</pre>
<p>
<strong>Sources for model and literature:</strong><br>
Original Data: Computer program for calculation of complex chemical
equilibrium compositions and applications. Part 1: Analysis
Document ID: 19950013764 N (95N20180) File Series: NASA Technical Reports
Report Number: NASA-RP-1311  E-8017  NAS 1.61:1311
Authors: Gordon, Sanford (NASA Lewis Research Center)
 Mcbride, Bonnie J. (NASA Lewis Research Center)
Published: Oct 01, 1994.
</p>
<p><strong>Known limits of validity:</strong><br>
The data is valid for
temperatures between 200K and 6000K.  A few of the data sets for
monatomic gases have a discontinuous 1st derivative at 1000K, but
this never caused problems so far.
</p>
<p>
This model has been copied from the ThermoFluid library
and adapted to the Modelica.Media package.
</p>
</html>"));
      end SingleGasNasa;

      partial package MixtureGasNasa
        "Medium model of a mixture of ideal gases based on NASA source"

        import Modelica.Math;
        import ThermofluidStream.Media.myMedia.Interfaces.Choices.ReferenceEnthalpy;

        extends myMedia.Interfaces.PartialMixtureMedium(
          ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pTX,
          substanceNames=data[:].name,
          reducedX=false,
          singleState=false,
          reference_X=fill(1/nX, nX),
          SpecificEnthalpy(start=if referenceChoice == ReferenceEnthalpy.ZeroAt0K then 3e5 else if referenceChoice == ReferenceEnthalpy.UserDefined
                 then h_offset else 0, nominal=1.0e5),
          Density(start=10, nominal=10),
          AbsolutePressure(start=10e5, nominal=10e5),
          Temperature(
            min=200,
            max=6000,
            start=500,
            nominal=500));

          redeclare record extends ThermodynamicState "Thermodynamic state variables"
          end ThermodynamicState;
      //   redeclare record extends FluidConstants "Fluid constants"
      //   end FluidConstants;

        constant myMedia.IdealGases.Common.DataRecord[:] data "Data records of ideal gas substances";
          // ={Common.SingleGasesData.N2,Common.SingleGasesData.O2}

        constant Boolean excludeEnthalpyOfFormation=true
          "If true, enthalpy of formation Hf is not included in specific enthalpy h";
        constant ReferenceEnthalpy referenceChoice=ReferenceEnthalpy.ZeroAt0K
          "Choice of reference enthalpy";
        constant SpecificEnthalpy h_offset=0.0
          "User defined offset for reference enthalpy, if referenceChoice = UserDefined";

      //   constant FluidConstants[nX] fluidConstants
      //     "Additional data needed for transport properties";
        constant MolarMass[nX] MMX=data[:].MM "Molar masses of components";
        constant Integer methodForThermalConductivity(min=1,max=2)=1;
        redeclare replaceable model extends BaseProperties(
          T(stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default),
          p(stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default),
          Xi(each stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default),
          final standardOrderComponents=true)
          "Base properties (p, d, T, h, u, R, MM, X, and Xi of NASA mixture gas"
        equation
          assert(T >= 200 and T <= 6000, "
Temperature T (="       + String(T) + " K = 200 K) is not in the allowed range
200 K <= T <= 6000 K
required from medium model \""       + mediumName + "\".");

          MM = molarMass(state);
          h = h_TX(T, X);
          R = data.R*X;
          u = h - R*T;
          d = p/(R*T);
          // connect state with BaseProperties
          state.T = T;
          state.p = p;
          state.X = if fixedX then reference_X else X;
        end BaseProperties;

          redeclare function setState_pTX
          "Return thermodynamic state as function of p, T and composition X"
            extends Modelica.Icons.Function;
            input AbsolutePressure p "Pressure";
            input Temperature T "Temperature";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := if size(X,1) == 0 then ThermodynamicState(p=p,T=T,X=reference_X) else if size(X,1) == nX then ThermodynamicState(p=p,T=T, X=X) else
                   ThermodynamicState(p=p,T=T, X=cat(1,X,{1-sum(X)}));
          annotation(Inline=true,smoothOrder=2);
          end setState_pTX;

          redeclare function setState_phX
          "Return thermodynamic state as function of p, h and composition X"
            extends Modelica.Icons.Function;
            input AbsolutePressure p "Pressure";
            input SpecificEnthalpy h "Specific enthalpy";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := if size(X,1) == 0 then ThermodynamicState(p=p,T=T_hX(h,reference_X),X=reference_X) else if size(X,1) == nX then ThermodynamicState(p=p,T=T_hX(h,X),X=X) else
                   ThermodynamicState(p=p,T=T_hX(h,X), X=cat(1,X,{1-sum(X)}));
            annotation(Inline=true,smoothOrder=2);
          end setState_phX;

          redeclare function setState_psX
          "Return thermodynamic state as function of p, s and composition X"
            extends Modelica.Icons.Function;
            input AbsolutePressure p "Pressure";
            input SpecificEntropy s "Specific entropy";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := if size(X,1) == 0 then ThermodynamicState(p=p,T=T_psX(p,s,reference_X),X=reference_X) else if size(X,1) == nX then ThermodynamicState(p=p,T=T_psX(p,s,X),X=X) else
                   ThermodynamicState(p=p,T=T_psX(p,s,X), X=cat(1,X,{1-sum(X)}));
            annotation(Inline=true,smoothOrder=2);
          end setState_psX;

          redeclare function setState_dTX
          "Return thermodynamic state as function of d, T and composition X"
            extends Modelica.Icons.Function;
            input Density d "Density";
            input Temperature T "Temperature";
            input MassFraction X[:]=reference_X "Mass fractions";
            output ThermodynamicState state;
          algorithm
            state := if size(X,1) == 0 then ThermodynamicState(p=d*(data.R*reference_X)*T,T=T,X=reference_X) else if size(X,1) == nX then ThermodynamicState(p=d*(data.R*X)*T,T=T,X=X) else
                   ThermodynamicState(p=d*(data.R*cat(1,X,{1-sum(X)}))*T,T=T, X=cat(1,X,{1-sum(X)}));
            annotation(Inline=true,smoothOrder=2);
          end setState_dTX;

            redeclare function extends setSmoothState "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
            algorithm
          state := ThermodynamicState(
                        p=myMedia.Common.smoothStep(
                          x,
                          state_a.p,
                          state_b.p,
                          x_small),
                        T=myMedia.Common.smoothStep(
                          x,
                          state_a.T,
                          state_b.T,
                          x_small),
                        X=myMedia.Common.smoothStep(
                          x,
                          state_a.X,
                          state_b.X,
                          x_small));
              annotation(Inline=true,smoothOrder=2);
            end setSmoothState;

          redeclare function extends pressure "Return pressure of ideal gas"
          algorithm
            p := state.p;
            annotation(Inline=true,smoothOrder=2);
          end pressure;

          redeclare function extends temperature "Return temperature of ideal gas"
          algorithm
            T := state.T;
            annotation(Inline=true,smoothOrder=2);
          end temperature;

          redeclare function extends density "Return density of ideal gas"
          algorithm
            d := state.p/((state.X*data.R)*state.T);
            annotation(Inline = true, smoothOrder = 3);
          end density;

        redeclare function extends specificEnthalpy "Return specific enthalpy"
          extends Modelica.Icons.Function;
        algorithm
          h := h_TX(state.T,state.X);
          annotation(Inline=true,smoothOrder=2);
        end specificEnthalpy;

        redeclare function extends specificInternalEnergy
          "Return specific internal energy"
          extends Modelica.Icons.Function;
        algorithm
          u := h_TX(state.T,state.X) - gasConstant(state)*state.T;
          annotation(Inline=true,smoothOrder=2);
        end specificInternalEnergy;

        redeclare function extends specificEntropy "Return specific entropy"
        protected
          Real[nX] Y(each unit="mol/mol")=massToMoleFractions(state.X, data.MM)
            "Molar fractions";
        algorithm
        s :=  s_TX(state.T, state.X) - sum(state.X[i]*Modelica.Constants.R/MMX[i]*
            (if state.X[i]<Modelica.Constants.eps then Y[i] else
            Modelica.Math.log(Y[i]*state.p/reference_p)) for i in 1:nX);
          annotation(Inline=true,smoothOrder=2);
        end specificEntropy;

        redeclare function extends specificGibbsEnergy "Return specific Gibbs energy"
          extends Modelica.Icons.Function;
        algorithm
          g := h_TX(state.T,state.X) - state.T*specificEntropy(state);
          annotation(Inline=true,smoothOrder=2);
        end specificGibbsEnergy;

        redeclare function extends specificHelmholtzEnergy
          "Return specific Helmholtz energy"
          extends Modelica.Icons.Function;
        algorithm
          f := h_TX(state.T,state.X) - gasConstant(state)*state.T - state.T*specificEntropy(state);
          annotation(Inline=true,smoothOrder=2);
        end specificHelmholtzEnergy;

        function h_TX "Return specific enthalpy"
          import ThermofluidStream.Media.myMedia.Interfaces.Choices;
           extends Modelica.Icons.Function;
           input SI.Temperature T "Temperature";
           input MassFraction X[nX]=reference_X
            "Independent Mass fractions of gas mixture";
           input Boolean exclEnthForm=excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
           input myMedia.Interfaces.Choices.ReferenceEnthalpy refChoice=referenceChoice "Choice of reference enthalpy";
           input SI.SpecificEnthalpy h_off=h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
           output SI.SpecificEnthalpy h "Specific enthalpy at temperature T";
        algorithm
          h := (if fixedX then reference_X else X)*{myMedia.IdealGases.Common.Functions.h_T(
                    data[i],
                    T,
                    exclEnthForm,
                    refChoice,
                    h_off) for i in 1:nX};
          annotation(Inline=false,smoothOrder=2);
        end h_TX;

        function h_TX_der "Return specific enthalpy derivative"
          import ThermofluidStream.Media.myMedia.Interfaces.Choices;
           extends Modelica.Icons.Function;
           input SI.Temperature T "Temperature";
           input MassFraction X[nX] "Independent Mass fractions of gas mixture";
           input Boolean exclEnthForm=excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
           input myMedia.Interfaces.Choices.ReferenceEnthalpy refChoice=referenceChoice "Choice of reference enthalpy";
           input SI.SpecificEnthalpy h_off=h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
          input Real dT "Temperature derivative";
          input Real dX[nX] "Independent mass fraction derivative";
          output Real h_der "Specific enthalpy at temperature T";
        algorithm
          h_der := if fixedX then dT*sum((myMedia.IdealGases.Common.Functions.cp_T(data[i], T)*reference_X[i]) for i in 1:nX) else dT*sum((
            myMedia.IdealGases.Common.Functions.cp_T(data[i], T)*X[i]) for i in 1:nX) + sum((myMedia.IdealGases.Common.Functions.h_T(data[i], T)*dX[i])
            for i in 1:nX);
          annotation (Inline = false, smoothOrder=1);
        end h_TX_der;

        redeclare function extends gasConstant "Return gasConstant"
        algorithm
          R := data.R*state.X;
          annotation(Inline = true, smoothOrder = 3);
        end gasConstant;

        redeclare function extends specificHeatCapacityCp
          "Return specific heat capacity at constant pressure"
        algorithm
          cp := {myMedia.IdealGases.Common.Functions.cp_T(data[i], state.T) for i in 1:nX}*state.X;
          annotation(Inline=true,smoothOrder=1);
        end specificHeatCapacityCp;

        redeclare function extends specificHeatCapacityCv
          "Return specific heat capacity at constant volume from temperature and gas data"
        algorithm
          cv := {myMedia.IdealGases.Common.Functions.cp_T(data[i], state.T) for i in 1:nX}*state.X - data.R*state.X;
          annotation(Inline=true, smoothOrder = 1);
        end specificHeatCapacityCv;

        function MixEntropy "Return mixing entropy of ideal gases / R"
          extends Modelica.Icons.Function;
          input SI.MoleFraction x[:] "Mole fraction of mixture";
          output Real smix "Mixing entropy contribution, divided by gas constant";
        algorithm
          smix := sum(if x[i] > Modelica.Constants.eps then -x[i]*Modelica.Math.log(x[i]) else
                           x[i] for i in 1:size(x,1));
          annotation(Inline=true,smoothOrder=2);
        end MixEntropy;

        function s_TX
          "Return temperature dependent part of the entropy, expects full entropy vector"
          extends Modelica.Icons.Function;
          input Temperature T "Temperature";
          input MassFraction[nX] X "Mass fraction";
          output SpecificEntropy s "Specific entropy";
        algorithm
          s := sum(myMedia.IdealGases.Common.Functions.s0_T(data[i], T)*X[i] for i in 1:size(X, 1));
          annotation(Inline=true,smoothOrder=2);
        end s_TX;

        redeclare function extends isentropicExponent "Return isentropic exponent"
        algorithm
          gamma := specificHeatCapacityCp(state)/specificHeatCapacityCv(state);
          annotation(Inline=true,smoothOrder=2);
        end isentropicExponent;

        redeclare function extends velocityOfSound "Return velocity of sound"
          extends Modelica.Icons.Function;
          input ThermodynamicState state "Properties at upstream location";
        algorithm
          a := sqrt(max(0,gasConstant(state)*state.T*specificHeatCapacityCp(state)/specificHeatCapacityCv(state)));
          annotation(Inline=true,smoothOrder=2);
        end velocityOfSound;

        function isentropicEnthalpyApproximation
          "Approximate method of calculating h_is from upstream properties and downstream pressure"
          extends Modelica.Icons.Function;
          input AbsolutePressure p2 "Downstream pressure";
          input ThermodynamicState state "Thermodynamic state at upstream location";
          output SpecificEnthalpy h_is "Isentropic enthalpy";
        protected
          SpecificEnthalpy h "Specific enthalpy at upstream location";
          SpecificEnthalpy h_component[nX] "Specific enthalpy at upstream location";
          IsentropicExponent gamma =  isentropicExponent(state) "Isentropic exponent";
        protected
          MassFraction[nX] X "Complete X-vector";
        algorithm
          X := if reducedX then cat(1,state.X,{1-sum(state.X)}) else state.X;
          h_component := {myMedia.IdealGases.Common.Functions.h_T(
                    data[i],
                    state.T,
                    excludeEnthalpyOfFormation,
                    referenceChoice,
                    h_offset) for i in 1:nX};
          h :=h_component*X;
          h_is := h + gamma/(gamma - 1.0)*(state.T*gasConstant(state))*
            ((p2/state.p)^((gamma - 1)/gamma) - 1.0);
          annotation(smoothOrder=2);
        end isentropicEnthalpyApproximation;

        redeclare function extends isentropicEnthalpy "Return isentropic enthalpy"
          input Boolean exact = false
            "Flag whether exact or approximate version should be used";
        algorithm
          h_is := if exact then specificEnthalpy_psX(p_downstream,specificEntropy(refState),refState.X) else
                 isentropicEnthalpyApproximation(p_downstream,refState);
          annotation(Inline=true,smoothOrder=2);
        end isentropicEnthalpy;

      function gasMixtureViscosity
          "Return viscosities of gas mixtures at low pressures (Wilke method)"
        extends Modelica.Icons.Function;
        input MoleFraction[:] yi "Mole fractions";
        input MolarMass[size(yi,1)] M "Mole masses";
        input DynamicViscosity[size(yi,1)] eta "Pure component viscosities";
        output DynamicViscosity etam "Viscosity of the mixture";
        protected
        Real fi[size(yi,1),size(yi,1)];
      algorithm
        for i in 1:size(eta,1) loop
          assert(fluidConstants[i].hasDipoleMoment,"Dipole moment for " + fluidConstants[i].chemicalFormula +
             " not known. Can not compute viscosity.");
          assert(fluidConstants[i].hasCriticalData, "Critical data for "+ fluidConstants[i].chemicalFormula +
             " not known. Can not compute viscosity.");
          for j in 1:size(eta,1) loop
            if i==1 then
              fi[i,j] := (1 + (eta[i]/eta[j])^(1/2)*(M[j]/M[i])^(1/4))^2/(8*(1 + M[i]/M[j]))^(1/2);
            elseif j<i then
                fi[i,j] := eta[i]/eta[j]*M[j]/M[i]*fi[j,i];
              else
                fi[i,j] := (1 + (eta[i]/eta[j])^(1/2)*(M[j]/M[i])^(1/4))^2/(8*(1 + M[i]/M[j]))^(1/2);
            end if;
          end for;
        end for;
        etam := sum(yi[i]*eta[i]/sum(yi[j]*fi[i,j] for j in 1:size(eta,1)) for i in 1:size(eta,1));

        annotation (smoothOrder=2,
                   Documentation(info="<html>

<p>
Simplification of the kinetic theory (Chapman and Enskog theory)
approach neglecting the second-order effects.<br>
<br>
This equation has been extensively tested (Amdur and Mason, 1958;
Bromley and Wilke, 1951; Cheung, 1958; Dahler, 1959; Gandhi and Saxena,
1964; Ranz and Brodowsky, 1962; Saxena and Gambhir, 1963a; Strunk, et
al., 1964; Vanderslice, et al. 1962; Wright and Gray, 1962). In most
cases, only nonpolar mixtures were compared, and very good results
obtained. For some systems containing hydrogen as one component, less
satisfactory agreement was noted. Wilke's method predicted mixture
viscosities that were larger than experimental for the H2-N2 system,
but for H2-NH3, it underestimated the viscosities.<br>
Gururaja, et al. (1967) found that this method also overpredicted in
the H2-O2 case but was quite accurate for the H2-CO2 system.<br>
Wilke's approximation has proved reliable even for polar-polar gas
mixtures of aliphatic alcohols (Reid and Belenyessy, 1960). The
principal reservation appears to lie in those cases where Mi&gt;&gt;Mj
and etai&gt;&gt;etaj.<br>
</p>

</html>"));
      end gasMixtureViscosity;

          redeclare replaceable function extends dynamicViscosity
          "Return mixture dynamic viscosity"
        protected
            DynamicViscosity[nX] etaX "Component dynamic viscosities";
          algorithm
            for i in 1:nX loop
            etaX[i] := myMedia.IdealGases.Common.Functions.dynamicViscosityLowPressure(
                        state.T,
                        fluidConstants[i].criticalTemperature,
                        fluidConstants[i].molarMass,
                        fluidConstants[i].criticalMolarVolume,
                        fluidConstants[i].acentricFactor,
                        fluidConstants[i].dipoleMoment);
            end for;
            eta := gasMixtureViscosity(massToMoleFractions(state.X,
                                   fluidConstants[:].molarMass),
                       fluidConstants[:].molarMass,
                       etaX);
            annotation (smoothOrder=2);
          end dynamicViscosity;

        function mixtureViscosityChung
          "Return the viscosity of gas mixtures without access to component viscosities (Chung, et. al. rules)"
        extends Modelica.Icons.Function;

          input Temperature T "Temperature";
          input Temperature[nX] Tc "Critical temperatures";
          input MolarVolume[nX] Vcrit "Critical volumes (m3/mol)";
          input Real[nX] w "Acentric factors";
          input Real[nX] mu "Dipole moments (debyes)";
          input MolarMass[nX] MolecularWeights "Molecular weights (kg/mol)";
          input MoleFraction[nX] y "Molar Fractions";
          input Real[nX] kappa =  zeros(nX) "Association Factors";
          output DynamicViscosity etaMixture "Mixture viscosity (Pa.s)";
        protected
        constant Real[size(y,1)] Vc =  Vcrit*1000000 "Critical volumes (cm3/mol)";
        constant Real[size(y,1)] M =  MolecularWeights*1000
            "Molecular weights (g/mol)";
        Integer n = size(y,1) "Number of mixed elements";
        Real sigmam3 "Mixture sigma3 in Angstrom";
        Real sigma[size(y,1),size(y,1)];
        Real edivkm;
        Real edivk[size(y,1),size(y,1)];
        Real Mm;
        Real Mij[size(y,1),size(y,1)];
        Real wm "Acentric factor";
        Real wij[size(y,1),size(y,1)];
        Real kappam
            "Correlation for highly polar substances such as alcohols and acids";
        Real kappaij[size(y,1),size(y,1)];
        Real mum;
        Real Vcm;
        Real Tcm;
        Real murm "Dimensionless dipole moment of the mixture";
        Real Fcm "Factor to correct for shape and polarity";
        Real omegav;
        Real Tmstar;
        Real etam "Mixture viscosity in microP";
        algorithm
        //combining rules
        for i in 1:n loop
          for j in 1:n loop
            Mij[i,j] := 2*M[i]*M[j]/(M[i]+M[j]);
            if i==j then
              sigma[i,j] := 0.809*Vc[i]^(1/3);
              edivk[i,j] := Tc[i]/1.2593;
              wij[i,j] := w[i];
              kappaij[i,j] := kappa[i];
            else
              sigma[i,j] := (0.809*Vc[i]^(1/3)*0.809*Vc[j]^(1/3))^(1/2);
              edivk[i,j] := (Tc[i]/1.2593*Tc[j]/1.2593)^(1/2);
              wij[i,j] := (w[i] + w[j])/2;
              kappaij[i,j] := (kappa[i]*kappa[j])^(1/2);
            end if;
          end for;
        end for;
        //mixing rules
        sigmam3 := (sum(sum(y[i]*y[j]*sigma[i,j]^3 for j in 1:n) for i in 1:n));
        //(epsilon/k)m
        edivkm := (sum(sum(y[i]*y[j]*edivk[i,j]*sigma[i,j]^3 for j in 1:n) for i in 1:n))/sigmam3;
        Mm := ((sum(sum(y[i]*y[j]*edivk[i,j]*sigma[i,j]^2*Mij[i,j]^(1/2) for j in 1:n) for i in 1:n))/(edivkm*sigmam3^(2/3)))^2;
        wm := (sum(sum(y[i]*y[j]*wij[i,j]*sigma[i,j]^3 for j in 1:n) for i in 1:n))/sigmam3;
        mum := (sigmam3*(sum(sum(y[i]*y[j]*mu[i]^2*mu[j]^2/sigma[i,j]^3 for j in 1:n) for i in 1:n)))^(1/4);
        Vcm := sigmam3/(0.809)^3 "eq. (4)";
        Tcm := 1.2593*edivkm "eq. (5)";
        murm := 131.3*mum/(Vcm*Tcm)^(1/2) "eq. (8)";
        kappam := (sigmam3*(sum(sum(y[i]*y[j]*kappaij[i,j] for j in 1:n) for i in 1:n)));
        Fcm := 1 - 0.275*wm + 0.059035*murm^4 + kappam "eq. (7)";
        Tmstar := T/edivkm "eq. (3)";
        omegav := 1.16145*(Tmstar)^(-0.14874) + 0.52487*Modelica.Math.exp(-0.77320*Tmstar) + 2.16178*Modelica.Math.exp(-2.43787*Tmstar) "eq. (2)";
        etam := 26.69*Fcm*(Mm*T)^(1/2)/(sigmam3^(2/3)*omegav) "eq. (1)";
        etaMixture := etam*1e-7; // conversion from microPoise->Pa.s

          annotation (smoothOrder=2,
                    Documentation(info="<html>

<p>
Equation to estimate the viscosity of gas mixtures at low pressures.<br>
It is a simplification of an extension of the rigorous kinetic theory
of Chapman and Enskog to determine the viscosity of multicomponent
mixtures, at low pressures and with a factor to correct for molecule
shape and polarity.
</p>

<p>
The input argument Kappa is a special correction for highly polar substances such as
alcohols and acids.<br>
Values of kappa for a few such materials:
</p>

<table style=\"text-align: left; width: 302px; height: 200px;\" border=\"1\"
cellspacing=\"0\" cellpadding=\"2\">
<tbody>
<tr>
<td style=\"vertical-align: top;\">Compound<br>
</td>
<td style=\"vertical-align: top; text-align: center;\">Kappa<br>
</td>
<td style=\"vertical-align: top;\">Compound<br>
</td>
<td style=\"vertical-align: top;\">Kappa<br>
</td>
</tr>
<tr>
<td style=\"vertical-align: top;\">Methanol<br>
</td>
<td style=\"vertical-align: top;\">0.215<br>
</td>
<td style=\"vertical-align: top;\">n-Pentanol<br>
</td>
<td style=\"vertical-align: top;\">0.122<br>
</td>
</tr>
<tr>
<td style=\"vertical-align: top;\">Ethanol<br>
</td>
<td style=\"vertical-align: top;\">0.175<br>
</td>
<td style=\"vertical-align: top;\">n-Hexanol<br>
</td>
<td style=\"vertical-align: top;\">0.114<br>
</td>
</tr>
<tr>
<td style=\"vertical-align: top;\">n-Propanol<br>
</td>
<td style=\"vertical-align: top;\">0.143<br>
</td>
<td style=\"vertical-align: top;\">n-Heptanol<br>
</td>
<td style=\"vertical-align: top;\">0.109<br>
</td>
</tr>
<tr>
<td style=\"vertical-align: top;\">i-Propanol<br>
</td>
<td style=\"vertical-align: top;\">0.143<br>
</td>
<td style=\"vertical-align: top;\">Acetic Acid<br>
</td>
<td style=\"vertical-align: top;\">0.0916<br>
</td>
</tr>
<tr>
<td style=\"vertical-align: top;\">n-Butanol<br>
</td>
<td style=\"vertical-align: top;\">0.132<br>
</td>
<td style=\"vertical-align: top;\">Water<br>
</td>
<td style=\"vertical-align: top;\">0.076<br>
</td>
</tr>
<tr>
<td style=\"vertical-align: top;\">i-Butanol<br>
</td>
<td style=\"vertical-align: top;\">0.132</td>
<td style=\"vertical-align: top;\"><br>
</td>
<td style=\"vertical-align: top;\"><br>
</td>
</tr>
</tbody>
</table>
<p>
Chung, et al. (1984) suggest that for other alcohols not shown in the
table:<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp; kappa = 0.0682 + 4.704*[(number of -OH
groups)]/[molecular weight]<br>
<br>
<span style=\"font-weight: normal;\">S.I. units relation for the
debyes:&nbsp;</span><br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; 1 debye = 3.162e-25 (J.m^3)^(1/2)<br>
</p>
<h4>References</h4>
<p>
[1] THE PROPERTIES OF GASES AND LIQUIDS, Fifth Edition,<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; Bruce E. Poling, John M.
Prausnitz, John P. O'Connell.<br>
[2] Chung, T.-H., M. Ajlan, L. L. Lee, and K. E. Starling: Ind. Eng.
Chem. Res., 27: 671 (1988).<br>
[3] Chung, T.-H., L. L. Lee, and K. E. Starling; Ing. Eng. Chem.
Fundam., 23: 3 ()1984).<br>
</p>
</html>"));
        end mixtureViscosityChung;

      function lowPressureThermalConductivity
          "Return thermal conductivities of low-pressure gas mixtures (Mason and Saxena Modification)"
        extends Modelica.Icons.Function;
        input MoleFraction[:] y "Mole fraction of the components in the gas mixture";
        input Temperature T "Temperature";
        input Temperature[size(y,1)] Tc "Critical temperatures";
        input AbsolutePressure[size(y,1)] Pc "Critical pressures";
        input MolarMass[size(y,1)] M "Molecular weights";
        input ThermalConductivity[size(y,1)] lambda
            "Thermal conductivities of the pure gases";
        output ThermalConductivity lambdam "Thermal conductivity of the gas mixture";
        protected
        MolarMass[size(y,1)] gamma;
        Real[size(y,1)] Tr "Reduced temperature";
        Real[size(y,1),size(y,1)] A "Mason and Saxena Modification";
        constant Real epsilon =  1.0 "Numerical constant near unity";
      algorithm
        for i in 1:size(y,1) loop
          gamma[i] := 210*(Tc[i]*M[i]^3/Pc[i]^4)^(1/6);
          Tr[i] := T/Tc[i];
        end for;
        for i in 1:size(y,1) loop
          for j in 1:size(y,1) loop
            A[i,j] := epsilon*(1 + (gamma[j]*(Math.exp(0.0464*Tr[i]) - Math.exp(-0.2412*Tr[i]))/
            (gamma[i]*(Math.exp(0.0464*Tr[j]) - Math.exp(-0.2412*Tr[j]))))^(1/2)*(M[i]/M[j])^(1/4))^2/
            (8*(1 + M[i]/M[j]))^(1/2);
          end for;
        end for;
        lambdam := sum(y[i]*lambda[i]/(sum(y[j]*A[i,j] for j in 1:size(y,1))) for i in 1:size(y,1));

        annotation (smoothOrder=2,
                    Documentation(info="<html>

<p>
This function applies the Masson and Saxena modification of the
Wassiljewa Equation for the thermal conductivity for gas mixtures of
n elements at low pressure.
</p>

<p>
For nonpolar gas mixtures errors will generally be less than 3 to 4%.
For mixtures of nonpolar-polar and polar-polar gases, errors greater
than 5 to 8% may be expected. For mixtures in which the sizes and
polarities of the constituent molecules are not greatly different, the
thermal conductivity can be estimated satisfactorily by a mole fraction
average of the pure component conductivities.
</p>

</html>"));
      end lowPressureThermalConductivity;

          redeclare replaceable function extends thermalConductivity
          "Return thermal conductivity for low pressure gas mixtures"
            input Integer method=methodForThermalConductivity
            "Method to compute single component thermal conductivity";
        protected
            ThermalConductivity[nX] lambdaX "Component thermal conductivities";
            DynamicViscosity[nX] eta "Component thermal dynamic viscosities";
            SpecificHeatCapacity[nX] cp "Component heat capacity";
          algorithm
            for i in 1:nX loop
          assert(fluidConstants[i].hasCriticalData, "Critical data for "+ fluidConstants[i].chemicalFormula +
             " not known. Can not compute thermal conductivity.");
            eta[i] := myMedia.IdealGases.Common.Functions.dynamicViscosityLowPressure(
                        state.T,
                        fluidConstants[i].criticalTemperature,
                        fluidConstants[i].molarMass,
                        fluidConstants[i].criticalMolarVolume,
                        fluidConstants[i].acentricFactor,
                        fluidConstants[i].dipoleMoment);
            cp[i] := myMedia.IdealGases.Common.Functions.cp_T(data[i], state.T);
            lambdaX[i] := myMedia.IdealGases.Common.Functions.thermalConductivityEstimate(
                        Cp=cp[i],
                        eta=eta[i],
                        method=method,
                        data=data[i]);
            end for;
            lambda := lowPressureThermalConductivity(massToMoleFractions(state.X,
                                         fluidConstants[:].molarMass),
                                 state.T,
                                 fluidConstants[:].criticalTemperature,
                                 fluidConstants[:].criticalPressure,
                                 fluidConstants[:].molarMass,
                                 lambdaX);
            annotation (smoothOrder=2);
          end thermalConductivity;

        redeclare function extends isobaricExpansionCoefficient
          "Return isobaric expansion coefficient beta"
        algorithm
          beta := 1/state.T;
          annotation(Inline=true,smoothOrder=2);
        end isobaricExpansionCoefficient;

        redeclare function extends isothermalCompressibility
          "Return isothermal compressibility factor"
        algorithm
          kappa := 1.0/state.p;
          annotation(Inline=true,smoothOrder=2);
        end isothermalCompressibility;

        redeclare function extends density_derp_T
          "Return density derivative by pressure at constant temperature"
        algorithm
          ddpT := 1/(state.T*gasConstant(state));
          annotation(Inline=true,smoothOrder=2);
        end density_derp_T;

        redeclare function extends density_derT_p
          "Return density derivative by temperature at constant pressure"
        algorithm
          ddTp := -state.p/(state.T*state.T*gasConstant(state));
          annotation(Inline=true,smoothOrder=2);
        end density_derT_p;

        redeclare function density_derX "Return density derivative by mass fraction"
          extends Modelica.Icons.Function;
          input ThermodynamicState state "Thermodynamic state record";
          output Density[nX] dddX "Derivative of density w.r.t. mass fraction";
        algorithm
          dddX := {-state.p/(state.T*gasConstant(state))*molarMass(state)/data[
            i].MM for i in 1:nX};
          annotation(Inline=true,smoothOrder=2);
        end density_derX;

        redeclare function extends density_derp_h
          "Returns the partial derivative of density with respect to pressure at constant enthalpy"
        algorithm
          ddph := specificHeatCapacityCp(state)/(state.T*data.R*data.R);
          annotation(Inline=true,smoothOrder=2);
        end density_derp_h;

          redeclare function extends molarMass "Return molar mass of mixture"
          algorithm
          MM := 1/sum(state.X[j]/data[j].MM for j in 1:size(state.X, 1));
          annotation(Inline=true,smoothOrder=2);
          end molarMass;

        function T_hX "Return temperature from specific enthalpy and mass fraction"
          extends Modelica.Icons.Function;
          input SpecificEnthalpy h "Specific enthalpy";
          input MassFraction[nX] X "Mass fractions of composition";
           input Boolean exclEnthForm=excludeEnthalpyOfFormation
            "If true, enthalpy of formation Hf is not included in specific enthalpy h";
           input myMedia.Interfaces.Choices.ReferenceEnthalpy refChoice=referenceChoice "Choice of reference enthalpy";
           input SI.SpecificEnthalpy h_off=h_offset
            "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
          output Temperature T "Temperature";
        protected
          MassFraction[nX] Xfull = if size(X,1) == nX then X else cat(1,X,{1-sum(X)});
        package Internal
            "Solve h(data,T) for T with given h (use only indirectly via temperature_phX)"
          extends myMedia.Common.OneNonLinearEquation;
          redeclare record extends f_nonlinear_Data
              "Data to be passed to non-linear function"
            extends myMedia.IdealGases.Common.DataRecord;
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
          algorithm
              y := h_TX(x,X);
          end f_nonlinear;

          // Dummy definition has to be added for current Dymola
          redeclare function extends solve
          end solve;
        end Internal;

        algorithm
          T := Internal.solve(h, 200, 6000, 1.0e5, Xfull, data[1]);
          annotation(inverse(h = h_TX(T,X,exclEnthForm,refChoice,h_off)));
        end T_hX;

        function T_psX
          "Return temperature from pressure, specific entropy and mass fraction"
          extends Modelica.Icons.Function;
          input AbsolutePressure p "Pressure";
          input SpecificEntropy s "Specific entropy";
          input MassFraction[nX] X "Mass fractions of composition";
          output Temperature T "Temperature";
        protected
          MassFraction[nX] Xfull = if size(X,1) == nX then X else cat(1,X,{1-sum(X)});
        package Internal
            "Solve h(data,T) for T with given h (use only indirectly via temperature_phX)"
          extends myMedia.Common.OneNonLinearEquation;
          redeclare record extends f_nonlinear_Data
              "Data to be passed to non-linear function"
            extends myMedia.IdealGases.Common.DataRecord;
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear
              "Note that this function always sees the complete mass fraction vector"
            protected
          MassFraction[nX] Xfull = if size(X,1) == nX then X else cat(1,X,{1-sum(X)});
          Real[nX] Y(each unit="mol/mol")=massToMoleFractions(if size(X,1) == nX then X else cat(1,X,{1-sum(X)}), data.MM)
                "Molar fractions";
          algorithm
            y := s_TX(x,Xfull) - sum(Xfull[i]*Modelica.Constants.R/MMX[i]*
            (if Xfull[i]<Modelica.Constants.eps then Y[i] else
            Modelica.Math.log(Y[i]*p/reference_p)) for i in 1:nX);
              // s_TX(x,X)- data[:].R*X*(Modelica.Math.log(p/reference_p)
              //       + MixEntropy(massToMoleFractions(X,data[:].MM)));
          end f_nonlinear;

          // Dummy definition has to be added for current Dymola
          redeclare function extends solve
          end solve;
        end Internal;

        algorithm
          T := Internal.solve(s, 200, 6000, p, Xfull, data[1]);
        end T_psX;
      //   redeclare function extends specificEnthalpy_psX
      //   protected
      //     Temperature T "Temperature";
      //   algorithm
      //     T := temperature_psX(p,s,X);
      //     h := specificEnthalpy_pTX(p,T,X);
      //   end extends;

      //   redeclare function extends density_phX
      //     "Compute density from pressure, specific enthalpy and mass fraction"
      //     protected
      //     Temperature T "Temperature";
      //     SpecificHeatCapacity R "Gas constant";
      //   algorithm
      //     T := temperature_phX(p,h,X);
      //     R := if (not reducedX) then
      //       sum(data[i].R*X[i] for i in 1:size(substanceNames, 1)) else
      //       sum(data[i].R*X[i] for i in 1:size(substanceNames, 1)-1) + data[end].R*(1-sum(X[i]));
      //     d := p/(R*T);
      //   end density_phX;

        annotation (Documentation(info="<html>
<p>
This model calculates the medium properties for single component ideal gases.
</p>
<p>
<strong>Sources for model and literature:</strong><br>
Original Data: Computer program for calculation of complex chemical
equilibrium compositions and applications. Part 1: Analysis
Document ID: 19950013764 N (95N20180) File Series: NASA Technical Reports
Report Number: NASA-RP-1311  E-8017  NAS 1.61:1311
Authors: Gordon, Sanford (NASA Lewis Research Center)
 Mcbride, Bonnie J. (NASA Lewis Research Center)
Published: Oct 01, 1994.
</p>
<p><strong>Known limits of validity:</strong><br>
The data is valid for
temperatures between 200 K and 6000 K.  A few of the data sets for
monatomic gases have a discontinuous 1st derivative at 1000 K, but
this never caused problems so far.
</p>
<p>
This model has been copied from the ThermoFluid library.
It has been developed by Hubertus Tummescheit.
</p>
</html>"));
      end MixtureGasNasa;

      package FluidData "Critical data, dipole moments and related data"

        extends Modelica.Icons.Package;

        import ThermofluidStream.Media.myMedia.Interfaces.PartialMixtureMedium;
        import ThermofluidStream.Media.myMedia.IdealGases.Common.SingleGasesData;

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants N2(
          chemicalFormula="N2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7727-37-9",
          meltingPoint=63.15,
          normalBoilingPoint=77.35,
          criticalTemperature=126.20,
          criticalPressure=33.98e5,
          criticalMolarVolume=90.10e-6,
          acentricFactor=0.037,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.N2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants O2(
          chemicalFormula="O2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7782-44-7",
          meltingPoint=54.36,
          normalBoilingPoint=90.17,
          criticalTemperature=154.58,
          criticalPressure=50.43e5,
          criticalMolarVolume=73.37e-6,
          acentricFactor=0.022,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.O2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants CL2(
          chemicalFormula="CL2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7782-50-5",
          meltingPoint=172.19,
          normalBoilingPoint=239.12,
          criticalTemperature=417.00,
          criticalPressure=77.00e5,
          criticalMolarVolume=124.00e-6,
          acentricFactor=0.069,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.CL2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants F2(
          chemicalFormula="F2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7782-41-4",
          meltingPoint=53.48,
          normalBoilingPoint=84.95,
          criticalTemperature=144.30,
          criticalPressure=52.15e5,
          criticalMolarVolume=66.20e-6,
          acentricFactor=0.051,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.F2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants CO2(
          chemicalFormula="CO2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="124-38-9",
          meltingPoint=216.58,
          normalBoilingPoint=-1.0,
          criticalTemperature=304.12,
          criticalPressure=73.74e5,
          criticalMolarVolume=94.07e-6,
          acentricFactor=0.225,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.CO2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);                          // does not exist!

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants CO(
          chemicalFormula="CO",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="630-08-0",
          meltingPoint=68.15,
          normalBoilingPoint=81.66,
          criticalTemperature=132.85,
          criticalPressure=34.94e5,
          criticalMolarVolume=93.10e-6,
          acentricFactor=0.045,
          dipoleMoment=0.1,
          molarMass=SingleGasesData.CO.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants H2(
          chemicalFormula="H2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="800000-51-5",
          meltingPoint=13.56,
          normalBoilingPoint=20.38,
          criticalTemperature=33.25,
          criticalPressure=12.97e5,
          criticalMolarVolume=65.00e-6,
          acentricFactor=-0.216,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.H2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants H2O(
          chemicalFormula="H2O",
          iupacName="oxidane",
          structureFormula="H2O",
          casRegistryNumber="7732-18-5",
          meltingPoint=273.15,
          normalBoilingPoint=373.124,
          criticalTemperature=647.096,
          criticalPressure=220.64e5,
          criticalMolarVolume=55.95e-6,
          acentricFactor=0.344,
          dipoleMoment=1.8,
          molarMass=SingleGasesData.H2O.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants N2O(
          chemicalFormula="N2O",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="10024-97-2",
          meltingPoint=182.33,
          normalBoilingPoint=184.67,
          criticalTemperature=309.60,
          criticalPressure=72.55e5,
          criticalMolarVolume=97.00e-6,
          acentricFactor=0.142,
          dipoleMoment=0.2,
          molarMass=SingleGasesData.N2O.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants NO(
          chemicalFormula="NO",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="10102-43-9",
          meltingPoint=109.51,
          normalBoilingPoint=121.38,
          criticalTemperature=180.00,
          criticalPressure=64.80e5,
          criticalMolarVolume=58.00e-6,
          acentricFactor=0.582,
          dipoleMoment=0.2,
          molarMass=SingleGasesData.NO.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants NO2(
          chemicalFormula="NO2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="10102-44-0",
          meltingPoint=261.95,
          normalBoilingPoint=294.0,
          criticalTemperature=431.35,
          criticalPressure=101.33e5,
          criticalMolarVolume=82.5e-6,
          acentricFactor=0.849,
          dipoleMoment=0.32,
          molarMass=SingleGasesData.NO2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants NH3(
          chemicalFormula="NH3",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7664-41-7",
          meltingPoint=195.41,
          normalBoilingPoint=239.82,
          criticalTemperature=405.40,
          criticalPressure=113.53e5,
          criticalMolarVolume=72.47e-6,
          acentricFactor=0.257,
          dipoleMoment=1.5,
          molarMass=SingleGasesData.NH3.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants SO2(
          chemicalFormula="SO2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7446-09-5",
          meltingPoint=197.67,
          normalBoilingPoint=263.13,
          criticalTemperature=430.80,
          criticalPressure=78.84e5,
          criticalMolarVolume=122.00e-6,
          acentricFactor=0.245,
          dipoleMoment=1.6,
          molarMass=SingleGasesData.SO2.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants SO3(
          chemicalFormula="SO3",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7446-11-9",
          meltingPoint=289.95,
          normalBoilingPoint=317.90,
          criticalTemperature=490.90,
          criticalPressure=82.10e5,
          criticalMolarVolume=126.50e-6,
          acentricFactor=0.422,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.SO3.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants Ar(
          chemicalFormula="Ar",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7440-37-1",
          meltingPoint=83.80,
          normalBoilingPoint=87.27,
          criticalTemperature=150.86,
          criticalPressure=48.98e5,
          criticalMolarVolume=74.57e-6,
          acentricFactor=-0.002,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.Ar.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants He(
          chemicalFormula="He",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7440-59-7",
          meltingPoint=2.15,
          normalBoilingPoint=4.30,
          criticalTemperature=5.19,
          criticalPressure=2.27e5,
          criticalMolarVolume=57.30e-6,
          acentricFactor=-0.390,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.He.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

       constant myMedia.Interfaces.Types.IdealGas.FluidConstants Ne(
          chemicalFormula="Ne",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="7440-01-9",
          meltingPoint=24.56,
          normalBoilingPoint=27.07,
          criticalTemperature=44.40,
          criticalPressure=27.60e5,
          criticalMolarVolume=41.70e-6,
          acentricFactor=-0.016,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.Ne.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants CH4(
          chemicalFormula="CH4",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="74-82-8",
          meltingPoint=90.69,
          normalBoilingPoint=111.66,
          criticalTemperature=190.56,
          criticalPressure=45.99e5,
          criticalMolarVolume=98.60e-6,
          acentricFactor=0.011,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.CH4.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C2H6(
          chemicalFormula="C2H6",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="74-84-0",
          meltingPoint=90.35,
          normalBoilingPoint=184.55,
          criticalTemperature=305.32,
          criticalPressure=48.72e5,
          criticalMolarVolume=145.50e-6,
          acentricFactor=0.099,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C2H6.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C3H8(
          chemicalFormula="C3H8",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="74-98-6",
          meltingPoint=91.45,
          normalBoilingPoint=231.02,
          criticalTemperature=369.83,
          criticalPressure=42.48e5,
          criticalMolarVolume=200.00e-6,
          acentricFactor=0.152,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C3H8.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C4H10_n_butane(
          chemicalFormula="C4H10",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="106-97-8",
          meltingPoint=134.79,
          normalBoilingPoint=272.66,
          criticalTemperature=425.12,
          criticalPressure=37.96e5,
          criticalMolarVolume=255.00e-6,
          acentricFactor=0.20,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C4H10_n_butane.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C5H12_n_pentane(
          chemicalFormula="C5H12",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="109-66-0",
          meltingPoint=143.43,
          normalBoilingPoint=309.22,
          criticalTemperature=469.70,
          criticalPressure=33.70e5,
          criticalMolarVolume=311.00e-6,
          acentricFactor=0.252,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C5H12_n_pentane.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C6H14_n_hexane(
          chemicalFormula="C6H14",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="110-54-3",
          meltingPoint=177.84,
          normalBoilingPoint=341.88,
          criticalTemperature=507.60,
          criticalPressure=30.25e5,
          criticalMolarVolume=368.00e-6,
          acentricFactor=0.300,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C6H14_n_hexane.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C7H16_n_heptane(
          chemicalFormula="C7H16",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="142-82-5",
          meltingPoint=182.59,
          normalBoilingPoint=371.57,
          criticalTemperature=540.20,
          criticalPressure=27.40e5,
          criticalMolarVolume=428.00e-6,
          acentricFactor=0.350,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C7H16_n_heptane.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C2H4(
          chemicalFormula="C2H4",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="74-85-1",
          meltingPoint=103.99,
          normalBoilingPoint=169.42,
          criticalTemperature=282.34,
          criticalPressure=50.41e5,
          criticalMolarVolume=131.10e-6,
          acentricFactor=0.087,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C2H4.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C3H6_propylene(
          chemicalFormula="C3H6",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="115-07-1",
          meltingPoint=87.89,
          normalBoilingPoint=225.46,
          criticalTemperature=364.90,
          criticalPressure=46.00e5,
          criticalMolarVolume=184.60e-6,
          acentricFactor=0.142,
          dipoleMoment=0.4,
          molarMass=SingleGasesData.C3H6_propylene.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C4H8_1_butene(
          chemicalFormula="C4H8",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="106-98-9",
          meltingPoint=87.79,
          normalBoilingPoint=266.92,
          criticalTemperature=419.50,
          criticalPressure=40.20e5,
          criticalMolarVolume=240.80e-6,
          acentricFactor=0.194,
          dipoleMoment=0.3,
          molarMass=SingleGasesData.C4H8_1_butene.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C5H10_1_pentene(
          chemicalFormula="C5H10",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="109-67-1",
          meltingPoint=106.95,
          normalBoilingPoint=303.11,
          criticalTemperature=464.80,
          criticalPressure=35.60e5,
          criticalMolarVolume=298.40e-6,
          acentricFactor=0.237,
          dipoleMoment=0.4,
          molarMass=SingleGasesData.C5H10_1_pentene.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C6H12_1_hexene(
          chemicalFormula="C6H12",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="592-41-6",
          meltingPoint=133.34,
          normalBoilingPoint=336.63,
          criticalTemperature=504.00,
          criticalPressure=31.43e5,
          criticalMolarVolume=355.10e-6,
          acentricFactor=0.281,
          dipoleMoment=0.4,
          molarMass=SingleGasesData.C6H12_1_hexene.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C7H14_1_heptene(
          chemicalFormula="C7H14",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="592-76-7",
          meltingPoint=153.45,
          normalBoilingPoint=366.79,
          criticalTemperature=537.30,
          criticalPressure=29.20e5,
          criticalMolarVolume=409.00e-6,
          acentricFactor=0.343,
          dipoleMoment=0.3,
          molarMass=SingleGasesData.C7H14_1_heptene.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C2H2_vinylidene(
          chemicalFormula="C2H2",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="74-86-2",
          meltingPoint=192.35,
          normalBoilingPoint=188.40,
          criticalTemperature=308.30,
          criticalPressure=61.14e5,
          criticalMolarVolume=112.20e-6,
          acentricFactor=0.189,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C2H2_vinylidene.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C6H6(
          chemicalFormula="C6H6",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="71-43-2",
          meltingPoint=278.68,
          normalBoilingPoint=353.24,
          criticalTemperature=562.05,
          criticalPressure=48.95e5,
          criticalMolarVolume=256.00e-6,
          acentricFactor=0.210,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C6H6.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C8H18_n_octane(
          chemicalFormula="C8H18",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="111-65-9",
          meltingPoint=216.39,
          normalBoilingPoint=398.82,
          criticalTemperature=568.70,
          criticalPressure=24.90e5,
          criticalMolarVolume=492.00e-6,
          acentricFactor=0.399,
          dipoleMoment=0.0,
          molarMass=SingleGasesData.C8H18_n_octane.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C8H10_ethylbenz(
          chemicalFormula="C8H10",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="100-41-4",
          meltingPoint=178.18,
          normalBoilingPoint=409.36,
          criticalTemperature=617.15,
          criticalPressure=36.09e5,
          criticalMolarVolume=374.00e-6,
          acentricFactor=0.304,
          dipoleMoment=0.4,
          molarMass=SingleGasesData.C8H10_ethylbenz.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants CH3OH(
          chemicalFormula="CH3OH",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="67-56-1",
          meltingPoint=175.49,
          normalBoilingPoint=337.69,
          criticalTemperature=512.64,
          criticalPressure=80.97e5,
          criticalMolarVolume=118.00e-6,
          acentricFactor=0.565,
          dipoleMoment=1.7,
          molarMass=SingleGasesData.CH3OH.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C2H5OH(
          chemicalFormula="C2H5OH",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="64-17-5",
          meltingPoint=159.05,
          normalBoilingPoint=351.80,
          criticalTemperature=513.92,
          criticalPressure=61.48e5,
          criticalMolarVolume=167.00e-6,
          acentricFactor=0.649,
          dipoleMoment=1.7,
          molarMass=SingleGasesData.C2H5OH.MM,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C3H7OH(
          chemicalFormula="C3H7OH",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="71-23-8",
          meltingPoint=147.00,
          normalBoilingPoint=370.93,
          criticalTemperature=536.78,
          criticalPressure=51.75e5,
          criticalMolarVolume=219.00e-6,
          acentricFactor=0.629,
          dipoleMoment=1.7,
          molarMass=60.1e-3,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        constant myMedia.Interfaces.Types.IdealGas.FluidConstants C4H9OH(
          chemicalFormula="C4H9OH",
          iupacName="unknown",
          structureFormula="unknown",
          casRegistryNumber="71-36-3",
          meltingPoint=183.35,
          normalBoilingPoint=390.88,
          criticalTemperature=563.05,
          criticalPressure=44.23e5,
          criticalMolarVolume=275.00e-6,
          acentricFactor=0.589,
          dipoleMoment=1.8,
          molarMass=74.12e-3,
          hasDipoleMoment=true,
          hasIdealGasHeatCapacity=true,
          hasCriticalData=true,
          hasAcentricFactor=true);

        annotation (Documentation(info="<html>
<p>
This package contains FluidConstants data records for the following 37 gases
(see also the description in
<a href=\"modelica://Modelica.Media.IdealGases\">Modelica.Media.IdealGases</a>):
</p>
<pre>
Argon             Methane          Methanol       Carbon Monoxide  Carbon Dioxide
Acetylene         Ethylene         Ethanol        Ethane           Propylene
Propane           1-Propanol       1-Butene       N-Butane         1-Pentene
N-Pentane         Benzene          1-Hexene       N-Hexane         1-Heptane
N-Heptane         Ethylbenzene     N-Octane       Chlorine         Fluorine
Hydrogen          Steam            Helium         Ammonia          Nitric Oxide
Nitrogen Dioxide  Nitrogen         Nitrous        Oxide            Neon Oxygen
Sulfur Dioxide    Sulfur Trioxide
</pre>

</html>"));
      end FluidData;

      package SingleGasesData "Ideal gas data based on the NASA Glenn coefficients"
        extends Modelica.Icons.Package;

        constant IdealGases.Common.DataRecord Ag(
          name="Ag",
          MM=0.1078682,
          Hf=2641186.188329832,
          H0=57453.70739476509,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={33520.0237,6.56281935},
          ahigh={-330992.637,982.0086420000001,1.381179917,0.0006170899989999999,-1.6881146e-007,
              2.008826848e-011,-5.627285655e-016},
          bhigh={27267.19171,14.56862733},
          R=77.07991789980736);

        constant IdealGases.Common.DataRecord Agplus(
          name="Agplus",
          MM=0.1078676514,
          Hf=9475442.514362559,
          H0=57454.94519963192,
          Tlimit=1000,
          alow={3691132.75,-43169.82999999999,202.8445385,-0.465841374,0.000558620051,
              -3.154880975e-007,6.578702060000001e-011},
          blow={337157.447,-1142.924427},
          ahigh={-53274323.49999999,131071.0631,-109.8820208,0.0482600276,-1.093661557e-005,
              1.26383591e-009,-5.852542535e-014},
          bhigh={-743912.2509999999,844.6266189999999},
          R=77.08030991764042);

        constant IdealGases.Common.DataRecord Agminus(
          name="Agminus",
          MM=0.1078687486,
          Hf=1419120.273357839,
          H0=57453.41519610434,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={17665.65919,5.8696798},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={17665.65919,5.8696798},
          R=77.07952588596174);

        constant IdealGases.Common.DataRecord Air(
          name="Air",
          MM=0.0289651159,
          Hf=-4333.833858403446,
          H0=298609.6803431054,
          Tlimit=1000,
          alow={10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,
              2.18523191e-012},
          blow={-176.796731,-3.921504225},
          ahigh={241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,
              6.57780015e-016},
          bhigh={6462.26319,-8.147411905},
          R=287.0512249529787);

        constant IdealGases.Common.DataRecord AL(
          name="AL",
          MM=0.026981538,
          Hf=12230585.22460803,
          H0=256422.4100197698,
          Tlimit=1000,
          alow={5006.60889,18.61304407,2.412531111,0.0001987604647,-2.432362152e-007,
              1.538281506e-010,-3.944375734e-014},
          blow={38874.1268,6.086585765},
          ahigh={-29208.20938,116.7751876,2.356906505,7.73723152e-005,-1.529455262e-008,
              -9.97167026e-013,5.053278264e-016},
          bhigh={38232.8865,6.600920155},
          R=308.1541163442944);

        constant IdealGases.Common.DataRecord ALplus(
          name="ALplus",
          MM=0.0269809894,
          Hf=33839201.16732265,
          H0=229696.0985426279,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={109064.4788,3.79100578},
          ahigh={-4181.18325,-9.94855727,2.548615878,-5.878760040000001e-005,
              3.132291294e-008,-7.74889463e-012,7.27444769e-016},
          bhigh={109101.1485,3.48866729},
          R=308.1603819910326);

        constant IdealGases.Common.DataRecord ALminus(
          name="ALminus",
          MM=0.0269820866,
          Hf=10417656.61666804,
          H0=250396.2388142361,
          Tlimit=1000,
          alow={29108.01723,-383.698375,4.6551428,-0.00604582184,8.57725964e-006,-5.47626e-009,
              1.322714061e-012},
          blow={34906.1698,-5.9570977},
          ahigh={633981.432,-2383.438463,5.46997113,-0.001299840355,2.88830547e-007,-3.25324051e-011,
              1.472436088e-015},
          bhigh={47803.0654,-15.36906816},
          R=308.1478509523426);

        constant IdealGases.Common.DataRecord ALBr(
          name="ALBr",
          MM=0.106885538,
          Hf=134022.0133429089,
          H0=89545.4631102666,
          Tlimit=1000,
          alow={8176.158640000001,-251.6942718,5.40329633,-0.00174721292,
              2.07730477e-006,-1.261267579e-009,3.16633597e-013},
          blow={1635.024429,-2.323594886},
          ahigh={-610339.5599999999,2010.066834,1.769617961,0.001929888914,-6.64104783e-007,
              1.172854627e-010,-7.17874276e-015},
          bhigh={-12178.12867,22.04450764},
          R=77.7885591968485);

        constant IdealGases.Common.DataRecord ALBr2(
          name="ALBr2",
          MM=0.186789538,
          Hf=-753051.4101919348,
          H0=71727.1167510463,
          Tlimit=1000,
          alow={31993.7587,-711.917897,9.478258110000001,-0.00487553167,
              5.51651299e-006,-3.34005304e-009,8.36847684e-013},
          blow={-15405.91306,-17.42171366},
          ahigh={-352378.29,467.154417,7.11190819,-0.00055517092,3.16630113e-007,-5.52102833e-011,
              3.17672595e-015},
          bhigh={-22650.04078,-2.69561036},
          R=44.51251440003026);

        constant IdealGases.Common.DataRecord ALBr3(
          name="ALBr3",
          MM=0.266693538,
          Hf=-1539132.395476339,
          H0=67280.73028901059,
          Tlimit=1000,
          alow={47189.4884,-1053.853163,13.50747168,-0.006639869929999999,
              7.26927683e-006,-4.27804949e-009,1.045573281e-012},
          blow={-46994.4033,-36.67936779999999},
          ahigh={-89355.2744,-26.78035134,10.02063997,-8.458764399999999e-006,
              1.904243317e-009,-2.215195785e-013,1.038219389e-017},
          bhigh={-52492.4764,-15.79666403},
          R=31.17612845947546);

        constant IdealGases.Common.DataRecord ALC(
          name="ALC",
          MM=0.038992238,
          Hf=17497931.48574852,
          H0=232305.4398672885,
          Tlimit=1000,
          alow={41399.2188,-585.867789,5.96244572,-0.002006064322,1.665566136e-006,-7.12164921e-010,
              1.271188744e-013},
          blow={83834.3611,-8.00216505},
          ahigh={1937001.487,-6749.117789999999,13.47525643,-0.00585080265,
              1.926461091e-006,-2.585922351e-010,1.222659806e-014},
          bhigh={122536.3649,-61.52244872},
          R=213.2340287828567);

        constant IdealGases.Common.DataRecord ALC2(
          name="ALC2",
          MM=0.051002938,
          Hf=13246605.04851701,
          H0=240432.7374238716,
          Tlimit=1000,
          alow={15240.87465,-264.9987059,6.2804149,-0.0001786037647,3.79190774e-006,-3.99945007e-009,
              1.299752388e-012},
          blow={80927.63279999999,-6.247291862},
          ahigh={146601.7895,-1362.764489,8.457759149999999,-0.000367890168,
              7.9031745e-008,-8.880023720000001e-012,4.05363395e-016},
          bhigh={87059.24230000001,-21.27956728},
          R=163.019471544953);

        constant IdealGases.Common.DataRecord ALCL(
          name="ALCL",
          MM=0.06243453800000001,
          Hf=-816974.7808496637,
          H0=149326.1950620985,
          Tlimit=1000,
          alow={23808.81392,-445.715942,5.99285399,-0.002777300261,3.101582418e-006,-1.815268376e-009,
              4.414662339999999e-013},
          blow={-5202.73603,-7.383298016},
          ahigh={-899346.1220000001,2765.942061,1.003500696,0.002267806833,-7.2805416e-007,
              1.182380673e-010,-6.66049813e-015},
          bhigh={-24961.64448,26.1692548},
          R=133.1710342759323);

        constant IdealGases.Common.DataRecord ALCLplus(
          name="ALCLplus",
          MM=0.0624339894,
          Hf=13804168.45507553,
          H0=146625.821735492,
          Tlimit=1000,
          alow={34699.5522,-547.990003,6.10601113,-0.002674711519,2.696426573e-006,-1.463885068e-009,
              3.35872906e-013},
          blow={105171.951,-7.816586372},
          ahigh={-754724.0819999999,1251.545253,4.44242491,-0.0009786116429999999,
              6.347511329999999e-007,-1.158320344e-010,6.870022460000001e-015},
          bhigh={93183.32699999999,4.047521108},
          R=133.1722044338881);

        constant IdealGases.Common.DataRecord ALCL2(
          name="ALCL2",
          MM=0.09788753800000001,
          Hf=-2460724.387613059,
          H0=131241.0063883719,
          Tlimit=1000,
          alow={53405.4595,-967.805798,10.06252671,-0.00553952845,5.82342056e-006,-3.30654245e-009,
              7.8315621e-013},
          blow={-26076.2711,-23.93364216},
          ahigh={430345.306,-1552.370585,8.760657419999999,-0.0009467450059999999,
              2.40184488e-007,-2.427836709e-011,8.390123470000001e-016},
          bhigh={-21458.84709,-18.03641668},
          R=84.93902461823076);

        constant IdealGases.Common.DataRecord ALCL3(
          name="ALCL3",
          MM=0.133340538,
          Hf=-4384854.5368851,
          H0=122999.3762287055,
          Tlimit=1000,
          alow={77506.0097,-1440.779717,14.01744141,-0.00638163124,5.87167472e-006,-2.908872278e-009,
              5.994050889999999e-013},
          blow={-65793.43180000001,-44.94017799},
          ahigh={-137863.0916,-55.7920729,10.04190387,-1.682165339e-005,
              3.72466466e-009,-4.27552678e-013,1.982341329e-017},
          bhigh={-73434.0747,-20.45130429},
          R=62.35517063835456);

        constant IdealGases.Common.DataRecord ALF(
          name="ALF",
          MM=0.0459799412,
          Hf=-5742948.753488184,
          H0=193391.0041624847,
          Tlimit=1000,
          alow={30207.71686,-308.0986949,3.88641314,0.00356434369,-5.85847128e-006,
              4.38810992e-009,-1.256906273e-012},
          blow={-31175.72862,2.032567172},
          ahigh={-711122.905,1903.013316,2.191607179,0.001421471467,-4.17963477e-007,
              6.1538044e-011,-2.945403999e-015},
          bhigh={-45407.2896,16.13163743},
          R=180.8282434254179);

        constant IdealGases.Common.DataRecord ALFplus(
          name="ALFplus",
          MM=0.0459793926,
          Hf=15055300.25205248,
          H0=191666.0160491116,
          Tlimit=1000,
          alow={36430.3812,-252.4634478,3.105310486,0.00573327043,-8.839786990000001e-006,
              6.34357959e-009,-1.645011685e-012},
          blow={83702.37449999999,6.76401558},
          ahigh={1505101.126,-2236.668821,3.098216724,0.00311541393,-1.168427068e-006,
              1.773587168e-010,-9.665841379999999e-015},
          bhigh={98850.8385,5.99189459},
          R=180.8304009653229);

        constant IdealGases.Common.DataRecord ALFCL(
          name="ALFCL",
          MM=0.0814329412,
          Hf=-5359132.392481975,
          H0=148996.1534141419,
          Tlimit=1000,
          alow={41047.7948,-576.964642,6.5626427,0.00410628584,-7.21392112e-006,
              5.48640145e-009,-1.580656193e-012},
          blow={-51148.287,-6.041227053},
          ahigh={69706.36350000001,-622.4485910000001,7.57347541,-0.0002236155999,
              2.382317949e-008,4.44378576e-012,-5.486977849999999e-016},
          bhigh={-51009.43199999999,-10.91164505},
          R=102.1020716859482);

        constant IdealGases.Common.DataRecord ALFCL2(
          name="ALFCL2",
          MM=0.1168859412,
          Hf=-6770663.741722942,
          H0=134646.3042383407,
          Tlimit=1000,
          alow={69556.07340000001,-1188.857902,11.5667259,0.000457495949,-3.40737283e-006,
              3.35682254e-009,-1.085329228e-012},
          blow={-91620.4926,-32.06065081},
          ahigh={-172036.0526,-119.3340759,10.08894431,-3.55099381e-005,
              7.83095261e-009,-8.961734229999999e-013,4.14533026e-017},
          bhigh={-98041.8547,-21.27046859},
          R=71.13320827671959);

        constant IdealGases.Common.DataRecord ALF2(
          name="ALF2",
          MM=0.0649783444,
          Hf=-9722688.08683282,
          H0=178535.3583123919,
          Tlimit=1000,
          alow={29949.51991,-219.4199915,3.41674876,0.01272953936,-1.883312206e-005,
              1.330702256e-008,-3.68011863e-012},
          blow={-76075.3765,8.759626916},
          ahigh={-214689.6245,30.9684015,6.81639962,0.0001820129379,-7.79367744e-008,
              1.472534201e-011,-8.803695299999999e-016},
          bhigh={-78840.02680000001,-7.915370474},
          R=127.9575845887511);

        constant IdealGases.Common.DataRecord ALF2minus(
          name="ALF2minus",
          MM=0.064978893,
          Hf=-13130889.82602397,
          H0=174392.244570864,
          Tlimit=1000,
          alow={123336.9037,-1348.195504,8.61117805,0.0002245141297,-2.424673201e-006,
              2.21413243e-009,-6.60271396e-013},
          blow={-97084.37460000001,-21.92617549},
          ahigh={-159007.6965,-206.0486516,7.15528938,-6.260167690000001e-005,
              1.391935746e-008,-1.603901265e-012,7.461508519999999e-017},
          bhigh={-104047.9429,-11.22696648},
          R=127.9565042759347);

        constant IdealGases.Common.DataRecord ALF2CL(
          name="ALF2CL",
          MM=0.1004313444,
          Hf=-9948369.714345874,
          H0=147638.3402869194,
          Tlimit=1000,
          alow={56774.12089999999,-886.9829470000001,8.75274655,0.0081957912,-1.380480934e-005,
              1.032703706e-008,-2.948968416e-012},
          blow={-117793.6778,-18.5834736},
          ahigh={-211542.2988,-195.9188681,10.1457685,-5.81321935e-005,
              1.281071982e-008,-1.465366277e-012,6.77600245e-017},
          bhigh={-122715.311,-23.59853398},
          R=82.78762023621782);

        constant IdealGases.Common.DataRecord ALF3(
          name="ALF3",
          MM=0.0839767476,
          Hf=-14400140.18832994,
          H0=167233.459277244,
          Tlimit=1000,
          alow={44102.6352,-566.7495739999999,5.83307285,0.01603535069,-2.413263602e-005,
              1.71410616e-008,-4.7475432e-012},
          blow={-144334.9991,-5.461613658},
          ahigh={-249397.216,-291.1202519,10.21662932,-8.64298597e-005,
              1.905713108e-008,-2.181058411e-012,1.009055287e-016},
          bhigh={-147569.4276,-27.03983244},
          R=99.00921668940654);

        constant IdealGases.Common.DataRecord ALF4minus(
          name="ALF4minus",
          MM=0.1029756994,
          Hf=-18952051.96343634,
          H0=163017.4409866645,
          Tlimit=1000,
          alow={231201.0037,-3235.37678,20.17865547,-0.0091081935,6.67955263e-006,-2.606075106e-009,
              4.11006051e-013},
          blow={-221178.4563,-86.77268282},
          ahigh={-321741.161,-261.2097043,13.19792654,-8.01013541e-005,
              1.786204421e-008,-2.062751964e-012,9.61258177e-017},
          bhigh={-238157.7915,-42.31634321999999},
          R=80.74207845584199);

        constant IdealGases.Common.DataRecord ALH(
          name="ALH",
          MM=0.027989478,
          Hf=8905160.860806337,
          H0=309691.5205063846,
          Tlimit=1000,
          alow={-37591.1403,508.900223,1.128086896,0.003988660910000001,-2.150790303e-007,
              -2.176790819e-009,1.020805902e-012},
          blow={26444.31827,16.50021856},
          ahigh={6802018.430000001,-21784.16933,30.32713047,-0.01503343597,
              4.49214236e-006,-6.17845037e-010,3.11520526e-014},
          bhigh={165830.1221,-187.6766425},
          R=297.0570583702919);

        constant IdealGases.Common.DataRecord ALHCL(
          name="ALHCL",
          MM=0.063442478,
          Hf=165850.4890051741,
          H0=171597.5217739761,
          Tlimit=1000,
          alow={35871.6976,-591.624999,6.94454238,-0.002511543148,6.47133255e-006,-5.64227714e-009,
              1.715950436e-012},
          blow={2750.930479,-9.903745880000001},
          ahigh={-168391.533,-886.230179,8.062379399999999,-0.0009200551470000001,
              3.94981722e-007,-6.40108676e-011,3.5783541e-015},
          bhigh={3641.50485,-18.00686894},
          R=131.0552844420737);

        constant IdealGases.Common.DataRecord ALHCL2(
          name="ALHCL2",
          MM=0.098895478,
          Hf=-3552022.520180347,
          H0=138289.3968114498,
          Tlimit=1000,
          alow={118482.8615,-2054.157118,15.74696513,-0.01476257296,2.065336978e-005,
              -1.42019885e-008,3.82627986e-012},
          blow={-34342.7746,-57.61184061},
          ahigh={96080.63939999999,-1485.540161,11.03592709,-0.00039569552,
              8.46584373e-008,-9.48333652e-012,4.31903353e-016},
          bhigh={-36692.1639,-32.36862171},
          R=84.07332840840307);

        constant IdealGases.Common.DataRecord ALHF(
          name="ALHF",
          MM=0.0469878812,
          Hf=-3886416.653322091,
          H0=224996.7593771817,
          Tlimit=1000,
          alow={-9289.545099999999,133.5515868,2.77244868,0.00675141503,-4.13384614e-006,
              5.86570407e-010,2.276158011e-013},
          blow={-23846.85845,12.28752581},
          ahigh={734216.9250000001,-3462.16413,10.39714588,-0.001750737965,
              4.615687860000001e-007,-5.39041474e-011,2.340478515e-015},
          bhigh={-2965.279722,-37.13172313},
          R=176.9492853829723);

        constant IdealGases.Common.DataRecord ALHFCL(
          name="ALHFCL",
          MM=0.08244088120000001,
          Hf=-6735062.943504781,
          H0=152019.6754034696,
          Tlimit=1000,
          alow={129037.3237,-2142.099873,14.8543442,-0.0114032693,1.564521768e-005,-1.067574855e-008,
              2.857255247e-012},
          blow={-58183.0307,-54.83424986},
          ahigh={40689.8713,-1502.129854,11.05214126,-0.000403158773,8.64525222e-008,
              -9.70065952e-012,4.423629509999999e-016},
          bhigh={-61298.8811,-34.03564016},
          R=100.8537497292059);

        constant IdealGases.Common.DataRecord ALHF2(
          name="ALHF2",
          MM=0.0659862844,
          Hf=-11597852.32580848,
          H0=186401.9941695641,
          Tlimit=1000,
          alow={105018.1431,-1398.654202,9.166334839999999,0.00386728687,-4.83084109e-006,
              3.099287181e-009,-8.440702990000001e-013},
          blow={-86590.48800000001,-25.57299683},
          ahigh={-4419.9473,-1612.826324,11.13336052,-0.000435181266,9.34439616e-008,
              -1.049431425e-011,4.78833398e-016},
          bhigh={-86069.16189999999,-36.76383785},
          R=126.0030334425073);

        constant IdealGases.Common.DataRecord ALH2(
          name="ALH2",
          MM=0.028997418,
          Hf=9544813.058873035,
          H0=347990.7762822194,
          Tlimit=1000,
          alow={14551.82996,-215.3768996,5.14437023,-0.00396522203,1.340900203e-005,-1.216744854e-008,
              3.74310713e-012},
          blow={33110.3794,-3.608799711},
          ahigh={143291.0601,-2365.907684,9.085667190000001,-0.001308536612,
              4.77719136e-007,-7.32472189e-011,3.99790094e-015},
          bhigh={44859.5185,-32.20814285},
          R=286.7314600217164);

        constant IdealGases.Common.DataRecord ALH2CL(
          name="ALH2CL",
          MM=0.064450418,
          Hf=-1650034.387674569,
          H0=174603.2275539315,
          Tlimit=1000,
          alow={93038.2898,-1328.188016,9.42476359,-0.00327766059,1.004231609e-005,-8.94812309e-009,
              2.708031665e-012},
          blow={-7647.43793,-26.82512215},
          ahigh={316692.993,-3094.037914,12.1587202,-0.0008248269589999999,
              1.765027123e-007,-1.977372723e-011,9.00617628e-016},
          bhigh={2411.845642,-47.18390855},
          R=129.0057110257997);

        constant IdealGases.Common.DataRecord ALH2F(
          name="ALH2F",
          MM=0.0479958212,
          Hf=-6597571.331897535,
          H0=224286.2134839355,
          Tlimit=1000,
          alow={89060.39290000001,-975.080393,5.87077232,0.00689666369,-4.04581728e-006,
              7.21931866e-010,7.329846739999999e-014},
          blow={-34253.02600000001,-9.387539141},
          ahigh={271151.4962,-3169.62348,12.21401118,-0.000846560026,1.812341995e-007,
              -2.030947985e-011,9.251825820000001e-016},
          bhigh={-22592.17746,-49.41337333},
          R=173.2332480645211);

        constant IdealGases.Common.DataRecord ALH3(
          name="ALH3",
          MM=0.030005358,
          Hf=4295768.77569666,
          H0=346957.3667476322,
          Tlimit=1000,
          alow={14812.07909,-28.3649534,2.507597126,0.00731592051,2.331766687e-006,-6.38920989e-009,
              2.456885069e-012},
          blow={14631.89428,8.3131877},
          ahigh={588545.855,-4595.78566,13.20893344,-0.001226849004,2.626580824e-007,
              -2.943725869e-011,1.341177648e-015},
          bhigh={39917.1695,-61.81829295},
          R=277.0995766822712);

        constant IdealGases.Common.DataRecord ALI(
          name="ALI",
          MM=0.153886008,
          Hf=437954.1575995656,
          H0=63365.84545100423,
          Tlimit=1000,
          alow={1870.854131,-154.3184003,5.07439188,-0.00112058483,1.386302156e-006,-8.54078228e-010,
              2.180358492e-013},
          blow={7517.44369,0.6688267621999999},
          ahigh={475281.792,-1198.028588,5.43368536,-0.0001004479306,-1.005928846e-007,
              4.568173190000001e-011,-3.960201360000001e-015},
          bhigh={14646.27816,-3.141199746},
          R=54.03007140194319);

        constant IdealGases.Common.DataRecord ALI2(
          name="ALI2",
          MM=0.280790478,
          Hf=-120420.5863419628,
          H0=49585.17859711753,
          Tlimit=1000,
          alow={14234.13595,-464.657569,8.72267491,-0.00356051929,4.18868229e-006,-2.616026962e-009,
              6.72019551e-013},
          blow={-3846.13333,-10.73076578},
          ahigh={-335599.902,474.334794,7.10650139,-0.0005529965340000001,
              3.161480314e-007,-5.51548916e-011,3.17415582e-015},
          bhigh={-9785.48885,-0.5602275943999999},
          R=29.61094713475291);

        constant IdealGases.Common.DataRecord ALI3(
          name="ALI3",
          MM=0.407694948,
          Hf=-469298.0227952199,
          H0=46612.22095889204,
          Tlimit=1000,
          alow={27060.32439,-755.993681,12.71396349,-0.00546688409,6.29761892e-006,-3.86420961e-009,
              9.77413244e-013},
          blow={-22209.66921,-28.47883861},
          ahigh={-63574.2747,-15.7877228,10.01249733,-5.22867312e-006,1.19617352e-009,
              -1.40919449e-013,6.67127639e-018},
          bhigh={-26114.55525,-12.47999813},
          R=20.39385584930034);

        constant IdealGases.Common.DataRecord ALN(
          name="ALN",
          MM=0.040988238,
          Hf=10706217.98868251,
          H0=226043.1638949691,
          Tlimit=1000,
          alow={27166.45079,-254.349111,3.53898772,0.00529625616,-9.845700609999999e-006,
              8.45220904e-009,-2.592304568e-012},
          blow={53099.94910000001,5.39943522},
          ahigh={3821214.22,-10677.76595,14.49174222,-0.00372722713,
              7.922770960000001e-007,-8.086892210000001e-011,2.893539736e-015},
          bhigh={120523.634,-72.88585119000001},
          R=202.8501932676394);

        constant IdealGases.Common.DataRecord ALO(
          name="ALO",
          MM=0.042980938,
          Hf=1566252.602490899,
          H0=204465.1980373253,
          Tlimit=1000,
          alow={-7683.3911,295.7969549,0.480810844,0.01169224855,-1.595428871e-005,
              1.060766814e-008,-2.647888708e-012},
          blow={5843.67217,21.60997839},
          ahigh={15657.21161,3855.74101,-5.92607978,0.009050960419999999,-2.930661549e-006,
              4.238529070000001e-010,-2.280655341e-014},
          bhigh={-13316.94655,68.30663436},
          R=193.4455688240215);

        constant IdealGases.Common.DataRecord ALOplus(
          name="ALOplus",
          MM=0.0429803894,
          Hf=23103397.01110293,
          H0=211485.1942220886,
          Tlimit=1000,
          alow={28291.78513,-417.90871,5.31329987,-0.001410883046,2.526524021e-006,-2.005474816e-009,
              5.76255355e-013},
          blow={120364.8109,-3.41056593},
          ahigh={27108.46446,-699.8653420000001,5.78781584,-0.000687189546,
              2.075047303e-007,-2.655281004e-011,1.28312966e-015},
          bhigh={121868.2226,-7.05103588},
          R=193.4480379556543);

        constant IdealGases.Common.DataRecord ALOminus(
          name="ALOminus",
          MM=0.04298148659999999,
          Hf=-6349752.034867962,
          H0=203453.1304461675,
          Tlimit=1000,
          alow={20780.75267,2.859351226,1.90191237,0.00730104566,-9.13976987e-006,
              5.65298319e-009,-1.396787103e-012},
          blow={-33592.6773,12.96339858},
          ahigh={-69719.4829,-232.0553036,4.67278433,-4.26644704e-005,
              1.632506336e-008,-1.727134051e-012,8.136840640000001e-017},
          bhigh={-33077.1893,-2.155922595},
          R=193.4430997554189);

        constant IdealGases.Common.DataRecord ALOCL(
          name="ALOCL",
          MM=0.078433938,
          Hf=-3844822.505278264,
          H0=151797.0065458144,
          Tlimit=1000,
          alow={-5144.627790000001,-58.86297070000001,4.45231693,0.009288235090000001,
              -1.246894823e-005,8.17807354e-009,-2.130739934e-012},
          blow={-37596.8365,2.476862818},
          ahigh={-125802.7706,-242.0565961,7.68113002,-7.268741699999999e-005,
              1.611337534e-008,1.852889749e-012,8.60727822e-017},
          bhigh={-37543.2605,-14.7581832},
          R=106.0060505950881);

        constant IdealGases.Common.DataRecord ALOCL2(
          name="ALOCL2",
          MM=0.113886938,
          Hf=-3532526.873274967,
          H0=138316.950799046,
          Tlimit=1000,
          alow={69026.3713,-1189.2975,11.61842739,0.0002818279805,-3.145010615e-006,
              3.16838065e-009,-1.032375462e-012},
          blow={-44833.2307,-31.65475132},
          ahigh={-170771.3922,-118.0013804,10.08798517,-3.51385804e-005,
              7.751187029999999e-009,-8.8724706e-013,4.10481544e-017},
          bhigh={-51249.4414,-20.5925296},
          R=73.00637058132162);

        constant IdealGases.Common.DataRecord ALOF(
          name="ALOF",
          MM=0.0619793412,
          Hf=-9233554.147555217,
          H0=177526.9434454718,
          Tlimit=1000,
          alow={7030.57836,-115.457543,3.37882359,0.01283929158,-1.749748388e-005,
              1.162605473e-008,-3.064218613e-012},
          blow={-69593.817,5.994804586},
          ahigh={-164102.0297,-327.777029,7.74451974,-9.78864944e-005,
              2.165743208e-008,-2.486541919e-012,1.153633944e-016},
          bhigh={-69740.85090000001,-17.17253748},
          R=134.1490864378533);

        constant IdealGases.Common.DataRecord ALOF2(
          name="ALOF2",
          MM=0.08097774440000001,
          Hf=-9553856.763142934,
          H0=173570.9867463288,
          Tlimit=1000,
          alow={47560.8529,-612.431836,6.05022366,0.01559291479,-2.366136797e-005,
              1.688366194e-008,-4.690583099999999e-012},
          blow={-91718.2749,-4.956258224},
          ahigh={-249668.1413,-283.7821503,10.21108125,-8.418303430000001e-005,
              1.855520828e-008,-2.122974022e-012,9.8193191e-017},
          bhigh={-95218.0419,-25.22534812},
          R=102.6760137813866);

        constant IdealGases.Common.DataRecord ALOF2minus(
          name="ALOF2minus",
          MM=0.08097829299999999,
          Hf=-12006793.21555963,
          H0=173836.4749180376,
          Tlimit=1000,
          alow={154060.5112,-1928.054597,12.55806423,-0.000490403537,-2.341783347e-006,
              2.4151386e-009,-7.47180925e-013},
          blow={-109143.0174,-42.6582175},
          ahigh={-238988.1459,-288.0143725,10.2170024,-8.747061999999999e-005,
              1.944846334e-008,-2.241045051e-012,1.042591053e-016},
          bhigh={-119057.6566,-26.00779629},
          R=102.6753181868134);

        constant IdealGases.Common.DataRecord ALOH(
          name="ALOH",
          MM=0.043988878,
          Hf=-4382066.098617018,
          H0=235330.6442596694,
          Tlimit=1000,
          alow={58764.9318,-944.942269,7.82059918,0.000585888847,-4.08366681e-006,
              4.587229340000001e-009,-1.563936726e-012},
          blow={-19932.83011,-20.65043885},
          ahigh={788206.811,-2263.671626,7.82395488,0.0001821171456,-8.26372932e-008,
              1.265414876e-011,-6.87597253e-016},
          bhigh={-10398.08093,-22.09032458},
          R=189.0130500714294);

        constant IdealGases.Common.DataRecord ALOHCL(
          name="ALOHCL",
          MM=0.07944187800000001,
          Hf=-4705147.327962211,
          H0=175208.823739036,
          Tlimit=1000,
          alow={16363.60341,-191.5959416,4.71117047,0.01388068475,-1.999018454e-005,
              1.43964735e-008,-4.03333045e-012},
          blow={-45680.83719999999,4.644207506},
          ahigh={796711.551,-2843.470502,10.9555997,-0.0001099328162,-1.344506283e-008,
              4.41589377e-012,-2.973546112e-016},
          bhigh={-29698.61461,-32.96113996},
          R=104.661070575396);

        constant IdealGases.Common.DataRecord ALOHCL2(
          name="ALOHCL2",
          MM=0.114894878,
          Hf=-6311381.504752545,
          H0=149265.1917868784,
          Tlimit=1000,
          alow={39719.2986,-775.155496,9.49405153,0.01074401359,-1.676464791e-005,
              1.259706368e-008,-3.61317798e-012},
          blow={-85847.9693,-19.93481642},
          ahigh={738592.976,-2863.204228,13.97062327,-0.0001160311527,-1.208248796e-008,
              4.25832763e-012,-2.900049181e-016},
          bhigh={-72930.48,-46.81834857},
          R=72.36590651151568);

        constant IdealGases.Common.DataRecord ALOHF(
          name="ALOHF",
          MM=0.0629872812,
          Hf=-9116309.897179686,
          H0=211393.1693244763,
          Tlimit=1000,
          alow={-1556.003336,288.6581999,0.7703793290000001,0.02450406329,-3.41781101e-005,
              2.388932902e-008,-6.570480510000001e-012},
          blow={-71772.22559999999,24.53071801},
          ahigh={755711.3130000001,-2936.702803,11.02455104,-0.000137307803,-7.432816159999999e-009,
              3.72998122e-012,-2.657027781e-016},
          bhigh={-53401.309,-35.27397302},
          R=132.0023954296348);

        constant IdealGases.Common.DataRecord ALOHF2(
          name="ALOHF2",
          MM=0.0819856844,
          Hf=-13923293.06456335,
          H0=188185.2681100507,
          Tlimit=1000,
          alow={17382.63538,-130.7687299,3.31238192,0.02784734099,-3.98236321e-005,
              2.809344456e-008,-7.7645742e-012},
          blow={-138413.3568,10.04739945},
          ahigh={653011.992,-3034.017232,14.09719788,-0.0001663681799,-1.011564183e-009,
              2.993805003e-012,-2.315956955e-016},
          bhigh={-122305.2213,-51.5121069},
          R=101.4137048540635);

        constant IdealGases.Common.DataRecord ALO2(
          name="ALO2",
          MM=0.058980338,
          Hf=-655436.5795597849,
          H0=226543.7848118131,
          Tlimit=1000,
          alow={43384.8045,-473.5292259999999,6.00171767,0.007094420880000001,-1.129107996e-005,
              8.252691679999999e-009,-2.327652976e-012},
          blow={-3826.1458,-4.83002248},
          ahigh={118721.6642,-833.56254,8.309301189999999,-0.000353866722,
              5.96706946e-008,4.0148977e-014,-3.51570252e-016},
          bhigh={-2033.107586,-17.15063884},
          R=140.9702331648218);

        constant IdealGases.Common.DataRecord ALO2minus(
          name="ALO2minus",
          MM=0.0589808866,
          Hf=-7673201.423187831,
          H0=180476.720741597,
          Tlimit=1000,
          alow={117867.8641,-1507.186304,9.52474975,-0.000520798902,-1.586902345e-006,
              1.700455028e-009,-5.30141977e-013},
          blow={-48254.6927,-30.81215859},
          ahigh={-187241.0758,-233.8853263,7.67607002,-7.093570299999999e-005,
              1.576717569e-008,-1.816494162e-012,8.449707959999999e-017},
          bhigh={-55946.40560000001,-17.73751567},
          R=140.9689219558121);

        constant IdealGases.Common.DataRecord AL_OH_2(
          name="AL_OH_2",
          MM=0.060996218,
          Hf=-8322822.080542764,
          H0=229973.8485425441,
          Tlimit=1000,
          alow={4397.31691,132.7680339,1.093947024,0.03054059173,-4.37594335e-005,
              3.17461743e-008,-9.004259400000001e-012},
          blow={-63154.3739,21.01977655},
          ahigh={1669643.735,-5924.73828,15.49480264,-0.000538348808,
              5.413044529999999e-008,-1.196022328e-012,-1.082001733e-016},
          bhigh={-26975.25061,-66.17911543},
          R=136.3112709709314);

        constant IdealGases.Common.DataRecord AL_OH_2CL(
          name="AL_OH_2CL",
          MM=0.096449218,
          Hf=-8906829.332716828,
          H0=178560.6701342047,
          Tlimit=1000,
          alow={24778.79709,-445.457721,5.9284702,0.02730162734,-4.04140537e-005,
              2.97421041e-008,-8.477150599999999e-012},
          blow={-103377.803,-3.679940779},
          ahigh={1603911.487,-5767.23224,18.17772266,-0.000369181615,1.137918702e-008,
              4.0830794e-012,-3.64132343e-016},
          bhigh={-71186.9985,-77.57541774000001},
          R=86.20569634893255);

        constant IdealGases.Common.DataRecord AL_OH_2F(
          name="AL_OH_2F",
          MM=0.07999462119999999,
          Hf=-13371257.86652266,
          H0=205914.4821602081,
          Tlimit=1000,
          alow={21328.12662,-193.2900224,3.069174664,0.0355501733,-5.18115833e-005,
              3.75352028e-008,-1.059220701e-011},
          blow={-129579.7992,10.01897011},
          ahigh={1559238.236,-5841.27303,18.23229919,-0.000390780542,1.610928938e-008,
              3.54478406e-012,-3.39345388e-016},
          bhigh={-96231.0089,-79.71351802},
          R=103.9378882639174);

        constant IdealGases.Common.DataRecord AL_OH_3(
          name="AL_OH_3",
          MM=0.078003558,
          Hf=-12982325.01137961,
          H0=225563.6467249353,
          Tlimit=1000,
          alow={-14024.75452,369.607346,-0.297960065,0.0492985935,-6.98157228e-005,
              5.0148017e-008,-1.412480165e-011},
          blow={-125526.076,27.11490074},
          ahigh={2477063.616,-8968.617249999999,22.80320998,-0.0008320292249999999,
              8.66349443e-008,-2.420287082e-012,-1.331746442e-016},
          bhigh={-70152.7864,-112.1899198},
          R=106.5909326854039);

        constant IdealGases.Common.DataRecord ALS(
          name="ALS",
          MM=0.059046538,
          Hf=3940654.556241722,
          H0=153914.3412607866,
          Tlimit=1000,
          alow={26117.42801,-347.067389,4.43620459,0.00334016821,-8.41019967e-006,
              8.50818511e-009,-2.780868507e-012},
          blow={28637.79062,0.7522705491},
          ahigh={8909844.290000001,-25076.77454,28.93456134,-0.00983976682,
              2.045319809e-006,-2.08797089e-010,8.152792520000001e-015},
          bhigh={188576.1615,-178.6036457},
          R=140.8121844501705);

        constant IdealGases.Common.DataRecord ALS2(
          name="ALS2",
          MM=0.09111153799999999,
          Hf=2727813.452122826,
          H0=158363.90556814,
          Tlimit=1000,
          alow={42523.3541,-776.46033,9.80106896,-0.00391068009,3.87569597e-006,-2.082025593e-009,
              4.68293589e-013},
          blow={31679.6154,-21.78097896},
          ahigh={-68525.6354,-26.71667739,7.52019386,-8.148565100000001e-006,
              1.811865152e-009,-2.086958125e-013,9.703246379999999e-018},
          bhigh={27583.62737,-7.873490263},
          R=91.25597243238283);

        constant IdealGases.Common.DataRecord AL2(
          name="AL2",
          MM=0.053963076,
          Hf=9289717.324490547,
          H0=187889.9935207548,
          Tlimit=1000,
          alow={-5281.50965,-17.27374523,4.60407701,-0.000261646777,6.30231997e-007,-3.29093859e-010,
              8.888365139999999e-014},
          blow={59007.0639,3.060188921},
          ahigh={-2320724.102,9218.70789,-9.44695187,0.00999992001,-3.154798085e-006,
              4.36154481e-010,-2.24115724e-014},
          bhigh={2904.589544,99.60320745000001},
          R=154.0770581721472);

        constant IdealGases.Common.DataRecord AL2Br6(
          name="AL2Br6",
          MM=0.533387076,
          Hf=-1766864.728083513,
          H0=71650.00938267952,
          Tlimit=1000,
          alow={64833.197,-1947.687811,28.86989822,-0.01365825785,1.557883731e-005,-9.486942000000001e-009,
              2.385519396e-012},
          blow={-110152.6833,-102.5934782},
          ahigh={-173182.949,-43.42299780000001,22.0341421,-1.421187503e-005,
              3.23863134e-009,-3.80387976e-013,1.796525455e-017},
          bhigh={-120233.8355,-62.0105495},
          R=15.58806422973773);

        constant IdealGases.Common.DataRecord AL2C2(
          name="AL2C2",
          MM=0.077984476,
          Hf=6988288.284452922,
          H0=207284.8575657545,
          Tlimit=1000,
          alow={11109.87147,-350.243423,8.598856,0.001832528671,1.035743392e-006,-2.09164989e-009,
              7.716068700000001e-013},
          blow={64927.6419,-16.45080239},
          ahigh={159765.1967,-1644.007203,11.64643675,-0.000437921543,9.36964011e-008,
              -1.049615854e-011,4.78046893e-016},
          bhigh={72048.89810000001,-36.48164252},
          R=106.6170143914284);

        constant IdealGases.Common.DataRecord AL2CL6(
          name="AL2CL6",
          MM=0.266681076,
          Hf=-4863023.134044952,
          H0=128044.6686063318,
          Tlimit=1000,
          alow={134093.5279,-3001.037953,31.43000879,-0.01700408496,1.786540089e-005,
              -1.015419943e-008,2.409630451e-012},
          blow={-147183.0046,-127.4445324},
          ahigh={-275297.5554,-92.48235969999999,22.07058224,-2.870537915e-005,
              6.42332569e-009,-7.4365852e-013,3.47206467e-017},
          bhigh={-162915.7014,-70.91602129},
          R=31.17758531917728);

        constant IdealGases.Common.DataRecord AL2F6(
          name="AL2F6",
          MM=0.1679534952,
          Hf=-15673929.42829332,
          H0=155186.3447019232,
          Tlimit=1000,
          alow={191506.1289,-3168.24025,22.45374802,0.01271532036,-2.488697302e-005,
              1.955252096e-008,-5.71208489e-012},
          blow={-304996.255,-93.96473100999999},
          ahigh={-585298.2609999999,-545.0571990000001,22.4068632,-0.0001627323704,
              3.59522504e-008,-4.12120144e-012,1.909095384e-016},
          bhigh={-321968.391,-85.89867941},
          R=49.50460834470327);

        constant IdealGases.Common.DataRecord AL2I6(
          name="AL2I6",
          MM=0.815389896,
          Hf=-598176.4520172568,
          H0=50185.76536297918,
          Tlimit=1000,
          alow={25875.71514,-1280.719742,26.7771582,-0.009913018470000002,
              1.168760413e-005,-7.30391853e-009,1.874532749e-012},
          blow={-58911.0555,-83.30209321},
          ahigh={-121011.2399,-24.67542774,22.0199265,-8.46202259e-006,
              1.957831901e-009,-2.326573151e-013,1.108910373e-017},
          bhigh={-65485.2375,-55.28536481},
          R=10.19692792465017);

        constant IdealGases.Common.DataRecord AL2O(
          name="AL2O",
          MM=0.069962476,
          Hf=-2124157.040982941,
          H0=182619.5230711961,
          Tlimit=1000,
          alow={7776.5307,-129.4235361,4.91250952,0.008604223449999999,-1.217703648e-005,
              8.31463487e-009,-2.237722201e-012},
          blow={-18865.12879,-0.02806368311},
          ahigh={-117107.4351,-178.3009166,7.63321536,-5.33593177e-005,
              1.180702791e-008,-1.355444579e-012,6.28732389e-017},
          bhigh={-19475.80149,-14.15764167},
          R=118.8418774658576);

        constant IdealGases.Common.DataRecord AL2Oplus(
          name="AL2Oplus",
          MM=0.0699619274,
          Hf=9276048.732756898,
          H0=185545.8887772151,
          Tlimit=1000,
          alow={68289.25719999999,-909.850417,8.89656301,-0.000777255438,-4.034655619999999e-007,
              6.97731505e-010,-2.417262484e-013},
          blow={80850.07550000001,-21.76216731},
          ahigh={-110222.5105,-121.4571732,7.59159595,-3.69453916e-005,
              8.21852032e-009,-9.473649719999999e-013,4.40862135e-017},
          bhigh={76149.43580000001,-12.82233856},
          R=118.842809353477);

        constant IdealGases.Common.DataRecord AL2O2(
          name="AL2O2",
          MM=0.08596187600000001,
          Hf=-4689236.737923215,
          H0=184298.1300221973,
          Tlimit=1000,
          alow={-19405.60042,250.8489836,3.62140379,0.01951385302,-2.560329071e-005,
              1.662721576e-008,-4.3123962e-012},
          blow={-51726.9728,9.923995945},
          ahigh={-194061.1656,-460.975243,10.84375637,-0.0001376042893,
              3.044733119e-008,-3.49619392e-012,1.622305079e-016},
          bhigh={-49630.5578,-29.4653809},
          R=96.72278441201074);

        constant IdealGases.Common.DataRecord AL2O2plus(
          name="AL2O2plus",
          MM=0.0859613274,
          Hf=6484762.995877144,
          H0=174207.8147574069,
          Tlimit=1000,
          alow={82920.3499,-1757.427015,15.25328567,-0.008983131330000001,
              8.9539545e-006,-4.8405862e-009,1.096696856e-012},
          blow={73116.7714,-55.1709255},
          ahigh={-165200.5184,-60.2160697,10.04626917,-1.892194088e-005,
              4.2533012e-009,-4.942390419999999e-013,2.314507373e-017},
          bhigh={63862.19,-23.45753361},
          R=96.72340169097949);

        constant IdealGases.Common.DataRecord AL2O3(
          name="AL2O3",
          MM=0.101961276,
          Hf=-5363708.178779559,
          H0=192210.9134844487,
          Tlimit=1000,
          alow={-7443.37432,88.29004210000001,5.26466264,0.02507678848,-3.43454165e-005,
              2.30251698e-008,-6.12252928e-012},
          blow={-68726.85950000001,2.202324298},
          ahigh={-277778.4969,-491.746593,13.86703888,-0.000146938194,3.25040649e-008,
              -3.73086735e-012,1.730444284e-016},
          bhigh={-67907.5785,-43.75559873},
          R=81.54538983996238);

        constant IdealGases.Common.DataRecord AL2S(
          name="AL2S",
          MM=0.086028076,
          Hf=2565198.959000316,
          H0=162783.2639195604,
          Tlimit=1000,
          alow={40946.2437,-779.7172469999999,9.814423100000001,-0.00394033982,
              3.91246543e-006,-2.105891677e-009,4.74600108e-013},
          blow={28339.63305,-24.65067552},
          ahigh={-70434.3737,-26.76376869,7.52023382,-8.16612306e-006,1.81602604e-009,
              -2.091989298e-013,9.727537699999999e-018},
          bhigh={24227.18377,-10.66580982},
          R=96.64835466040181);

        constant IdealGases.Common.DataRecord AL2S2(
          name="AL2S2",
          MM=0.118093076,
          Hf=1145599.09507311,
          H0=153264.8789671632,
          Tlimit=1000,
          alow={66145.8732,-1111.319537,12.57007304,-0.001456053256,-5.85162711e-007,
              1.390055053e-009,-5.4964682e-013},
          blow={19144.56895,-36.00277092},
          ahigh={-137780.6456,-77.050325,10.55723566,-2.277554487e-005,
              5.00768285e-009,-5.715862119999999e-013,2.63799924e-017},
          bhigh={13133.36091,-22.56851594},
          R=70.40609222508525);

        constant IdealGases.Common.DataRecord Ar(
          name="Ar",
          MM=0.039948,
          Hf=0,
          H0=155137.3785921698,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-745.375,4.37967491},
          ahigh={20.10538475,-0.05992661069999999,2.500069401,-3.99214116e-008,
              1.20527214e-011,-1.819015576e-015,1.078576636e-019},
          bhigh={-744.993961,4.37918011},
          R=208.1323720837088);

        constant IdealGases.Common.DataRecord Arplus(
          name="Arplus",
          MM=0.0399474514,
          Hf=38219669.92868035,
          H0=155353.7906050247,
          Tlimit=1000,
          alow={-57312.0917,793.079147,-1.717121217,0.01044184018,-1.180207501e-005,
              6.52813478e-009,-1.44755813e-012},
          blow={179057.223,29.4915095},
          ahigh={-383596.54,816.20197,2.301342628,-4.95298377e-006,1.205108477e-008,-2.185050286e-012,
              1.265493898e-016},
          bhigh={177181.1455,7.94750748},
          R=208.135230374171);

        constant IdealGases.Common.DataRecord B(
          name="B",
          MM=0.010811,
          Hf=53241953.5658126,
          H0=584225.326056794,
          Tlimit=1000,
          alow={118.2394638,-0.0700991691,2.500236159,-4.5842137e-007,5.12318583e-010,
              -3.057217674e-013,7.533815325e-017},
          blow={68483.59080000001,4.20950192},
          ahigh={-107265.961,322.530716,2.126407232,0.0002106579339,-5.93712916e-008,
              7.37742799e-012,-2.282443381e-016},
          bhigh={66434.13099999999,6.87706967},
          R=769.0752011839794);

        constant IdealGases.Common.DataRecord Bplus(
          name="Bplus",
          MM=0.0108104514,
          Hf=127868437.3901352,
          H0=573281.1490184396,
          Tlimit=1000,
          alow={0.07849791190000001,-0.000894748095,2.500004085,-9.577271229999999e-009,
              1.218136411e-011,-7.98675252e-015,2.113769829e-018},
          blow={165508.026,2.419053631},
          ahigh={-8911.54803,4.58779009,2.531500086,-4.9039491e-005,2.853326582e-008,
              -7.38217591e-012,7.12072156e-016},
          bhigh={165452.6303,2.23866978},
          R=769.1142295871198);

        constant IdealGases.Common.DataRecord Bminus(
          name="Bminus",
          MM=0.0108115486,
          Hf=50189988.32415183,
          H0=580175.7206178586,
          Tlimit=1000,
          alow={22.01568105,-0.00474046888,2.500014238,-2.497056599e-008,
              2.556360708e-011,-1.41527478e-014,3.27177071e-018},
          blow={64517.9188,4.61636729},
          ahigh={21.18018248,0.0002070697496,2.499999729,1.456693631e-010,-3.88857176e-014,
              5.09059863e-018,-2.601566168e-022},
          bhigh={64517.8914,4.61645583},
          R=769.0361767416002);

        constant IdealGases.Common.DataRecord BBr(
          name="BBr",
          MM=0.090715,
          Hf=2656146.81144243,
          H0=99179.38598908672,
          Tlimit=1000,
          alow={37960.935,-497.609602,5.2670082,-3.74284019e-005,-1.13154437e-006,
              1.261945702e-009,-4.28881188e-013},
          blow={30381.25367,-4.35340733},
          ahigh={253685.8027,-640.59095,4.66682347,0.000417548639,-2.963714868e-007,
              7.51911954e-011,-4.83536832e-015},
          bhigh={31890.8434,-0.8255870910000001},
          R=91.65487515846331);

        constant IdealGases.Common.DataRecord BBr2(
          name="BBr2",
          MM=0.170619,
          Hf=573374.6944947515,
          H0=71508.54828594705,
          Tlimit=1000,
          alow={65165.5071,-902.959076,8.063817800000001,0.00112984901,-4.19548239e-006,
              3.96565877e-009,-1.283029835e-012},
          blow={14704.66408,-13.36453164},
          ahigh={-419163.337,415.768847,7.14816983,-0.000568959075,3.19544177e-007,-5.55317699e-011,
              3.19113676e-015},
          bhigh={6118.98205,-5.50275962},
          R=48.73121985241972);

        constant IdealGases.Common.DataRecord BBr3(
          name="BBr3",
          MM=0.250523,
          Hf=-819485.6360493847,
          H0=62680.06131173585,
          Tlimit=1000,
          alow={39680.7369,-633.108716,8.054551569999999,0.009777571299999999,-1.614866025e-005,
              1.216119883e-008,-3.51653961e-012},
          blow={-23667.23308,-11.0609939},
          ahigh={-190104.6795,-150.3627687,10.10999896,-4.32309511e-005,
              9.409696190000001e-009,-1.06521847e-012,4.883048770000001e-017},
          bhigh={-27425.53062,-19.97496003},
          R=33.18845774639455);

        constant IdealGases.Common.DataRecord BC(
          name="BC",
          MM=0.0228217,
          Hf=36726532.42308855,
          H0=382754.3522174071,
          Tlimit=1000,
          alow={-39157.58,728.453806,-1.552743361,0.01552898673,-1.976857863e-005,
              1.272066405e-008,-3.22998278e-012},
          blow={96449.13680000001,32.48204466},
          ahigh={-2346280.674,6450.7513,-2.619532384,0.0033391605,-4.50802214e-007,
              1.351919576e-011,8.265104270000001e-016},
          bhigh={57866.8507,50.37884876},
          R=364.323078473558);

        constant IdealGases.Common.DataRecord BC2(
          name="BC2",
          MM=0.0348324,
          Hf=23003259.17823635,
          H0=335544.6366027033,
          Tlimit=1000,
          alow={-29874.22175,364.312658,2.963469415,0.00656175015,-3.53976724e-006,
              1.927356029e-010,3.118724866e-013},
          blow={93048.3573,10.83424193},
          ahigh={1525485.889,-5987.862380000001,14.08384855,-0.0037474998,
              1.081927223e-006,-1.378744645e-010,6.473822e-015},
          bhigh={131120.4013,-63.37215498},
          R=238.6993718491979);

        constant IdealGases.Common.DataRecord BCL(
          name="BCL",
          MM=0.046264,
          Hf=3959308.25263704,
          H0=191538.4964551271,
          Tlimit=1000,
          alow={22024.58989,-170.0511155,3.066075869,0.00559507018,-8.46087041e-006,
              6.08473341e-009,-1.702889433e-012},
          blow={21974.02537,6.388978917},
          ahigh={-74212.6254,263.8090127,3.60022765,0.001018866266,-4.666184119999999e-007,
              9.849002029999999e-011,-6.46881817e-015},
          bhigh={19127.2648,5.235317877},
          R=179.7179664533979);

        constant IdealGases.Common.DataRecord BCLplus(
          name="BCLplus",
          MM=0.0462634514,
          Hf=26679375.67667076,
          H0=191518.7417253525,
          Tlimit=1000,
          alow={65144.0542,-684.554101,5.52727682,-0.000445835745,-4.55772884e-007,
              6.37085816e-010,-2.13436612e-013},
          blow={150942.4507,-6.918246393},
          ahigh={-216942.3542,358.997516,4.03520837,0.000327445243,-8.63457845e-008,
              1.207061044e-011,-5.262253270000001e-016},
          bhigh={144547.7224,3.488222017},
          R=179.7200975800954);

        constant IdealGases.Common.DataRecord BCLOH(
          name="BCLOH",
          MM=0.06327134,
          Hf=-3698441.996012729,
          H0=196479.4644779137,
          Tlimit=1000,
          alow={-28984.27288,689.404658,-2.288138069,0.0334942862,-4.72522598e-005,
              3.32698131e-008,-9.224238860000001e-012},
          blow={-32619.811,39.76886651},
          ahigh={702773.844,-2857.391274,10.9117584,-8.10770934e-005,-2.124440337e-008,
              5.40991244e-012,-3.46415384e-016},
          bhigh={-13072.21888,-35.85168799},
          R=131.4097662543578);

        constant IdealGases.Common.DataRecord BCL_OH_2(
          name="BCL_OH_2",
          MM=0.08027867999999999,
          Hf=-10032397.8670302,
          H0=168975.1625213569,
          Tlimit=1000,
          alow={80726.23009999999,-859.461982,2.705039614,0.0387879962,-5.72173435e-005,
              4.14585033e-008,-1.168536754e-011},
          blow={-93799.10739999999,7.134982695},
          ahigh={1423878.191,-5849.70407,17.92165219,-0.0002009909087,-3.39343578e-008,
              9.838560759999999e-012,-6.47267882e-016},
          bhigh={-64742.6176,-81.00399519},
          R=103.5701135095894);

        constant IdealGases.Common.DataRecord BCL2(
          name="BCL2",
          MM=0.081717,
          Hf=-745028.4518521237,
          H0=140896.2761726446,
          Tlimit=1000,
          alow={35988.7942,-360.28265,4.15768545,0.0115287745,-1.816567395e-005,
              1.341714418e-008,-3.84082286e-012},
          blow={-6765.107050000001,5.182311874},
          ahigh={350140.313,-1662.20359,8.83953472,-0.000977254411,2.467356248e-007,-2.501151018e-011,
              8.722954559999999e-016},
          bhigh={568.2909440000001,-21.48348344},
          R=101.7471517554487);

        constant IdealGases.Common.DataRecord BCL2plus(
          name="BCL2plus",
          MM=0.0817164514,
          Hf=8227417.985994433,
          H0=157236.4166562426,
          Tlimit=1000,
          alow={80659.5624,-1149.602601,10.16765297,-0.00358649491,2.837145924e-006,-1.225075731e-009,
              2.224794198e-013},
          blow={84786.1741,-29.37256994},
          ahigh={302929.3331,-1305.533159,8.920390060000001,-0.000728991964,
              1.727833266e-007,-1.523567337e-011,4.22691144e-016},
          bhigh={86534.15770000001,-22.67466616},
          R=101.747834830723);

        constant IdealGases.Common.DataRecord BCL2OH(
          name="BCL2OH",
          MM=0.09872433999999999,
          Hf=-6127338.445615337,
          H0=142333.3799952474,
          Tlimit=1000,
          alow={20997.5517,-247.0699169,2.578761742,0.03120362393,-4.54531405e-005,
              3.24201177e-008,-9.039822660000001e-012},
          blow={-73090.2862,12.73658611},
          ahigh={587811.379,-2982.969317,14.00662004,-0.0001194189832,-1.269775742e-008,
              4.42289219e-012,-3.004089365e-016},
          bhigh={-58241.6807,-51.50858228},
          R=84.2190689752902);

        constant IdealGases.Common.DataRecord BF(
          name="BF",
          MM=0.0298094032,
          Hf=-3587186.341254897,
          H0=291675.4133474233,
          Tlimit=1000,
          alow={-52389.5473,811.8476640000001,-1.141614903,0.01161249417,-1.175212617e-005,
              6.01923278e-009,-1.238293129e-012},
          blow={-17745.41998,30.05086287},
          ahigh={-374638.978,560.449391,3.60918611,0.000618721693,-1.77893877e-007,
              2.426601527e-011,-9.394651579999999e-016},
          bhigh={-18191.79292,3.71660929},
          R=278.9211157370638);

        constant IdealGases.Common.DataRecord BFCL(
          name="BFCL",
          MM=0.0652624032,
          Hf=-4277869.865509336,
          H0=169056.6001100003,
          Tlimit=1000,
          alow={-23635.12735,438.316898,0.391809572,0.01719990692,-2.139592424e-005,
              1.337389186e-008,-3.37116469e-012},
          blow={-36871.6659,26.68102752},
          ahigh={-108630.9561,-523.343848,7.29750474,-3.054410701e-005,-3.154598306e-008,
              1.052290533e-011,-7.615432260000001e-016},
          bhigh={-33058.9121,-11.86586595},
          R=127.4006409865091);

        constant IdealGases.Common.DataRecord BFCL2(
          name="BFCL2",
          MM=0.1007154032,
          Hf=-6384326.325171282,
          H0=131369.3097542005,
          Tlimit=1000,
          alow={4402.55124,-157.1398929,4.01632231,0.01743396078,-2.25278906e-005,
              1.433673443e-008,-3.64875558e-012},
          blow={-78224.52619999999,6.886094746},
          ahigh={-223361.3309,-644.060296,10.47861848,-0.0001911892367,
              4.22488779e-008,-4.84726692e-012,2.247974725e-016},
          bhigh={-77406.2648,-28.14630564},
          R=82.5541251469666);

        constant IdealGases.Common.DataRecord BFOH(
          name="BFOH",
          MM=0.0468167432,
          Hf=-9646798.284764072,
          H0=255744.4448634778,
          Tlimit=1000,
          alow={-75639.5367,1354.838128,-5.64821011,0.0387027466,-5.03765918e-005,
              3.33959264e-008,-8.847822949999999e-012},
          blow={-61944.4611,58.0036282},
          ahigh={725131.809,-3215.62085,11.17909777,-0.0001883881929,2.57970808e-009,
              2.6651581e-012,-2.186647438e-016},
          bhigh={-37168.0808,-39.7846349},
          R=177.5961212099008);

        constant IdealGases.Common.DataRecord BF_OH_2(
          name="BF_OH_2",
          MM=0.06382408319999999,
          Hf=-16449739.44568937,
          H0=201886.4878892612,
          Tlimit=1000,
          alow={13818.00676,252.9637004,-3.84455204,0.0525514085,-7.19311773e-005,
              4.94830991e-008,-1.345922496e-011},
          blow={-128312.3258,42.9365937},
          ahigh={1422037.64,-6257.297570000001,18.22460686,-0.000322139645,-7.1267399e-009,
              6.75869977e-012,-5.04255454e-016},
          bhigh={-91862.5419,-85.27895049999999},
          R=130.2717028295677);

        constant IdealGases.Common.DataRecord BF2(
          name="BF2",
          MM=0.04880780639999999,
          Hf=-10232521.00098479,
          H0=217428.3743266118,
          Tlimit=1000,
          alow={-67876.51760000001,1085.903536,-3.023320961,0.02326503687,-2.641444147e-005,
              1.515620683e-008,-3.51855918e-012},
          blow={-66409.18250000001,44.31968310000001},
          ahigh={-115309.1296,-810.9800119999999,7.60270923,-0.0002409209242,
              5.32847186e-008,-6.11879794e-012,2.839984178e-016},
          bhigh={-57962.2217,-16.55644047},
          R=170.3512739716162);

        constant IdealGases.Common.DataRecord BF2plus(
          name="BF2plus",
          MM=0.0488072578,
          Hf=6609394.064339341,
          H0=217436.5755906082,
          Tlimit=1000,
          alow={-29383.56477,295.5698598,1.894274526,0.01280508319,-1.388757254e-005,
              7.62436675e-009,-1.706339371e-012},
          blow={35989.9244,13.84803311},
          ahigh={-176940.9966,-534.368518,7.72805291,-1.958622052e-006,-2.419680893e-008,
              5.73253381e-012,-3.21635423e-016},
          bhigh={39087.4505,-19.36560315},
          R=170.3531887423513);

        constant IdealGases.Common.DataRecord BF2minus(
          name="BF2minus",
          MM=0.048808355,
          Hf=-15034371.94308229,
          H0=213766.0857449509,
          Tlimit=1000,
          alow={21097.65318,143.95646,0.2604646296,0.01817373751,-2.241565287e-005,
              1.369712886e-008,-3.35595268e-012},
          blow={-89718.0178,23.51692604},
          ahigh={-170992.0627,-615.621979,7.45887137,-0.0001836703248,
              4.064363959999999e-008,-4.66770095e-012,2.16626484e-016},
          bhigh={-87414.0453,-16.20604664},
          R=170.3493592439245);

        constant IdealGases.Common.DataRecord BF2CL(
          name="BF2CL",
          MM=0.08426080640000001,
          Hf=-10538707.59062662,
          H0=146256.5281122208,
          Tlimit=1000,
          alow={4500.10125,-119.6284966,3.19863514,0.01743426933,-1.994070287e-005,
              1.12513643e-008,-2.544020371e-012},
          blow={-107677.9851,10.08195015},
          ahigh={-206681.7398,-1024.447292,10.75843981,-0.0003023235319,
              6.67252147e-008,-7.6499419e-012,3.5462245e-016},
          bhigh={-104693.6725,-32.29995036},
          R=98.67543826402306);

        constant IdealGases.Common.DataRecord BF2OH(
          name="BF2OH",
          MM=0.0658151464,
          Hf=-16595227.41713448,
          H0=188343.9858153989,
          Tlimit=1000,
          alow={-7522.52165,436.712169,-3.128973474,0.04323957680000001,-5.78549404e-005,
              3.88585813e-008,-1.038574523e-011},
          blow={-134425.9458,41.3917055},
          ahigh={576075.9250000001,-3611.90019,14.4689764,-0.0003028293733,
              2.764337508e-008,-1.90549317e-013,-8.69497194e-017},
          bhigh={-113358.9041,-58.9698151},
          R=126.3306769762044);

        constant IdealGases.Common.DataRecord BF3(
          name="BF3",
          MM=0.0678062096,
          Hf=-16753627.82703017,
          H0=171831.2536378674,
          Tlimit=1000,
          alow={3465.584,21.33198651,1.641245191,0.01993755064,-2.15011993e-005,
              1.145669081e-008,-2.442285789e-012},
          blow={-137945.5591,16.25533544},
          ahigh={-181976.7014,-1405.347931,11.03412258,-0.000410459105,
              9.031277570000001e-008,-1.03305736e-011,4.780551830000001e-016},
          bhigh={-132313.6863,-37.3838608},
          R=122.6210998822739);

        constant IdealGases.Common.DataRecord BF4minus(
          name="BF4minus",
          MM=0.0868051614,
          Hf=-20289876.42663378,
          H0=158926.5289932403,
          Tlimit=1000,
          alow={206848.52,-2463.190805,12.06414196,0.01102766923,-1.75172076e-005,
              1.201346256e-008,-3.150588626e-012},
          blow={-201056.9206,-46.1082694},
          ahigh={-437324.171,-775.928941,13.58222575,-0.0002341024178,5.19691594e-008,
              -5.982245780000001e-012,2.781163206e-016},
          bhigh={-212725.1877,-49.533697},
          R=95.783152359878);

        constant IdealGases.Common.DataRecord BH(
          name="BH",
          MM=0.01181894,
          Hf=37966789.23829041,
          H0=730954.2141681063,
          Tlimit=1000,
          alow={20630.8255,-368.250252,6.07133787,-0.00872832107,1.458566459e-005,-1.036840401e-008,
              2.779462579e-012},
          blow={54604.5992,-13.00392582},
          ahigh={-1098531.663,-174.5890126,8.442426810000001,-0.00544019667,
              2.718307052e-006,-4.83981221e-010,2.868523222e-014},
          bhigh={50167.3567,-29.71030686},
          R=703.4871147497153);

        constant IdealGases.Common.DataRecord BHCL(
          name="BHCL",
          MM=0.04727194,
          Hf=2991590.931110507,
          H0=217989.9322938725,
          Tlimit=1000,
          alow={47632.7491,-442.001652,3.97564588,0.008541698759999999,-1.377785182e-005,
              1.131521587e-008,-3.56965918e-012},
          blow={18222.78428,3.028452399},
          ahigh={349999.172,-2238.404757,8.71110605,-0.001088882906,4.18930109e-007,-6.56871126e-011,
              3.6200676e-015},
          bhigh={28412.40364,-25.89566225},
          R=175.8859907166916);

        constant IdealGases.Common.DataRecord BHCL2(
          name="BHCL2",
          MM=0.08272494,
          Hf=-3044831.81251023,
          H0=141984.170674527,
          Tlimit=1000,
          alow={44199.1481,-238.4739577,1.356682235,0.02517866897,-3.6329104e-005,
              2.644335581e-008,-7.62504411e-012},
          blow={-30038.77914,17.87024616},
          ahigh={411099.606,-2858.027441,11.79547506,-0.000632281797,1.269551549e-007,
              -1.352862344e-011,5.92165351e-016},
          bhigh={-16172.8876,-42.17900972},
          R=100.5074406823384);

        constant IdealGases.Common.DataRecord BHF(
          name="BHF",
          MM=0.0308173432,
          Hf=-2466544.325599099,
          H0=325857.3243912862,
          Tlimit=1000,
          alow={-49083.6226,961.0760210000001,-2.919850316,0.02149156633,-2.595677863e-005,
              1.693492714e-008,-4.55364884e-012},
          blow={-14669.25195,41.6070931},
          ahigh={1184821.3,-4677.43518,10.67328148,-0.001606366598,3.7045347e-007,-3.79788275e-011,
              1.432441145e-015},
          bhigh={18026.40937,-42.85931169999999},
          R=269.798468545465);

        constant IdealGases.Common.DataRecord BHFCL(
          name="BHFCL",
          MM=0.0662703432,
          Hf=-7288880.616510825,
          H0=172242.0384266246,
          Tlimit=1000,
          alow={576.116972,304.215625,-0.9808900360000001,0.02803843648,-3.67673402e-005,
              2.499824138e-008,-6.87342164e-012},
          blow={-60502.0739,31.32842092},
          ahigh={439077.892,-3137.181709,12.00286161,-0.000715366934,1.453878608e-007,
              -1.56519707e-011,6.910075059999999e-016},
          bhigh={-42323.6834,-44.66542881},
          R=125.4629386014708);

        constant IdealGases.Common.DataRecord BHF2(
          name="BHF2",
          MM=0.0498157464,
          Hf=-14846988.44138969,
          H0=213975.4549577521,
          Tlimit=1000,
          alow={-83535.40280000001,1616.659766,-8.161405670000001,0.0415378679,-4.92106328e-005,
              3.054165306e-008,-7.78681398e-012},
          blow={-97480.65459999999,70.3863075},
          ahigh={466087.6960000001,-3728.10049,12.44152658,-0.000890684319,
              1.841732568e-007,-2.010774349e-011,8.979196590000001e-016},
          bhigh={-69781.4293,-51.0321804},
          R=166.904495081499);

        constant IdealGases.Common.DataRecord BH2(
          name="BH2",
          MM=0.01282688,
          Hf=25642171.6738599,
          H0=781449.5029188704,
          Tlimit=1000,
          alow={28125.57296,-300.0083489,4.824221,-0.0002186429819,1.485457398e-006,
              3.89373968e-010,-6.331629389999999e-013},
          blow={39919.8842,-5.04268285},
          ahigh={1360117.365,-4917.70449,9.75897103,-0.000741587064,1.269760019e-007,
              -1.187742442e-011,4.68255251e-016},
          bhigh={68902.92660000001,-41.9049012},
          R=648.2068905298874);

        constant IdealGases.Common.DataRecord BH2CL(
          name="BH2CL",
          MM=0.04827988,
          Hf=-1674522.679012458,
          H0=215967.8524470235,
          Tlimit=1000,
          alow={16466.38117,127.7320942,0.1300268921,0.01938143193,-2.316389616e-005,
              1.607896164e-008,-4.66833765e-012},
          blow={-11121.12215,23.08500112},
          ahigh={1427215.437,-6265.56434,13.82183005,-0.001313843556,2.587131606e-007,
              -2.71384527e-011,1.172827257e-015},
          bhigh={26393.87516,-63.99725308},
          R=172.2140154449431);

        constant IdealGases.Common.DataRecord BH2F(
          name="BH2F",
          MM=0.0318252832,
          Hf=-10179225.42791387,
          H0=318549.3098769974,
          Tlimit=1000,
          alow={-88379.2044,1705.285929,-8.061246130000001,0.0364318868,-4.15248255e-005,
              2.620135756e-008,-6.930886410000001e-012},
          blow={-47872.7341,68.6208767},
          ahigh={1435082.111,-6625.32017,14.09165008,-0.00142246906,2.828724718e-007,
              -2.992498948e-011,1.302618926e-015},
          bhigh={-793.719267,-68.013564},
          R=261.2536689068646);

        constant IdealGases.Common.DataRecord BH3(
          name="BH3",
          MM=0.01383482,
          Hf=7571229.622069531,
          H0=727129.0121591751,
          Tlimit=1000,
          alow={-66196.3507,1262.658391,-4.6543559,0.02461795131,-2.501537437e-005,
              1.562330756e-008,-4.32394948e-012},
          blow={5667.58798,46.66504620000001},
          ahigh={1855778.95,-8002.492370000001,15.05692199,-0.001790456689,
              3.6125111e-007,-3.86603591e-011,1.698508879e-015},
          bhigh={59675.3707,-79.94046159999999},
          R=600.9815812565686);

        constant IdealGases.Common.DataRecord BH3NH3(
          name="BH3NH3",
          MM=0.03086534,
          Hf=-3725862.083489118,
          H0=410866.3633706935,
          Tlimit=1000,
          alow={-181106.3598,3010.341543,-15.24271135,0.0621563775,-5.95988185e-005,
              3.26742936e-008,-7.75124309e-012},
          blow={-29342.78877,108.7399608},
          ahigh={4354925.96,-18242.35232,31.6299983,-0.00320824361,5.88507545e-007,-5.80853553e-011,
              2.3825786e-015},
          bhigh={94381.18030000001,-189.7865799},
          R=269.3789214698429);

        constant IdealGases.Common.DataRecord BH4(
          name="BH4",
          MM=0.01484276,
          Hf=17194273.6391345,
          H0=725665.3749033199,
          Tlimit=1000,
          alow={27342.74578,-84.73619380000001,1.551871695,0.01439765491,-6.11115236e-006,
              -1.324417559e-010,5.13300815e-013},
          blow={30220.48074,12.50358328},
          ahigh={1354714.146,-7870.76275,18.2617061,-0.001948275329,4.07270689e-007,-4.4827109e-011,
              2.014115885e-015},
          bhigh={74702.49489999999,-96.8608689},
          R=560.1702109311207);

        constant IdealGases.Common.DataRecord BI(
          name="BI",
          MM=0.13771547,
          Hf=2367108.807746871,
          H0=66384.71335137585,
          Tlimit=1000,
          alow={35174.4953,-544.5819300000001,6.02751101,-0.002387237926,
              2.244796277e-006,-1.110001347e-009,2.280204403e-013},
          blow={40719.1013,-7.28804984},
          ahigh={2132872.626,-6283.684960000001,11.23964343,-0.00325885675,
              7.06428215e-007,-4.23006893e-011,-4.20807847e-016},
          bhigh={77976.3481,-46.6404261},
          R=60.37427748676311);

        constant IdealGases.Common.DataRecord BI2(
          name="BI2",
          MM=0.26461994,
          Hf=899767.1301716719,
          H0=47949.61407670186,
          Tlimit=1000,
          alow={66409.75900000001,-1044.411994,9.73419724,-0.00395255754,
              3.16556778e-006,-1.273764644e-009,1.879968132e-013},
          blow={32057.5089,-20.12407058},
          ahigh={-392402.223,442.290235,7.12962358,-0.000561963406,3.18076052e-007,-5.537079720000001e-011,
              3.1839597e-015},
          bhigh={22919.72638,-3.20179324},
          R=31.42042886110548);

        constant IdealGases.Common.DataRecord BI3(
          name="BI3",
          MM=0.39152441,
          Hf=54658.1501776607,
          H0=43249.08375444586,
          Tlimit=1000,
          alow={62431.1489,-1002.408628,11.06650075,0.001609588058,-5.14725025e-006,
              4.73251402e-009,-1.512999796e-012},
          blow={5160.34815,-24.20687643},
          ahigh={-150617.6506,-81.67210609999999,10.05937867,-2.319396215e-005,
              5.01996673e-009,-5.65434963e-013,2.580651348e-017},
          bhigh={-426.168791,-16.17962779},
          R=21.23615230018481);

        constant IdealGases.Common.DataRecord BN(
          name="BN",
          MM=0.0248177,
          Hf=23157923.90108673,
          H0=361077.2956398055,
          Tlimit=1000,
          alow={-45697.0758,670.4286070000001,0.0361508908,0.007339487509999999,-4.96903349e-006,
              1.22903138e-009,6.34028152e-014},
          blow={64854.6508,25.39869896},
          ahigh={-227693.2705,-102.5649298,4.41458681,0.0002561670989,-1.612994942e-008,
              -6.526052929999999e-013,5.74946612e-017},
          bhigh={67844.6513,-0.6778568656},
          R=335.0218593987356);

        constant IdealGases.Common.DataRecord BO(
          name="BO",
          MM=0.0268104,
          Hf=761137.6182376987,
          H0=323535.0461015128,
          Tlimit=1000,
          alow={-11662.16822,92.17579389999999,3.65549849,-0.00311854292,
              9.00832983e-006,-8.017789990000001e-009,2.472952292e-012},
          blow={873.8284780000001,4.48284739},
          ahigh={17886.00589,-630.901963,4.5745284,0.0001988001643,-9.70296348e-008,
              1.870854291e-011,-1.030218131e-015},
          bhigh={4841.311089999999,-3.39889058},
          R=310.1211470175753);

        constant IdealGases.Common.DataRecord BOminus(
          name="BOminus",
          MM=0.0268109486,
          Hf=-10361105.8356958,
          H0=323525.4421397086,
          Tlimit=1000,
          alow={-82420.23209999999,920.3636899999999,-0.2302659981,
              0.006229904119999999,-3.157624391e-006,1.184578107e-010,
              2.819228693e-013},
          blow={-39111.4122,25.99226838},
          ahigh={212280.4369,-1262.124688,5.38316731,-0.00031810491,7.28898825e-008,-8.141708919999999e-012,
              3.71536439e-016},
          bhigh={-27068.92261,-9.77375367},
          R=310.1148013837899);

        constant IdealGases.Common.DataRecord BOCL(
          name="BOCL",
          MM=0.0622634,
          Hf=-5115954.075749156,
          H0=170371.5666025305,
          Tlimit=1000,
          alow={70523.8064,-1315.301429,11.30087727,-0.0120711205,1.880516131e-005,-1.373823975e-008,
              3.85489016e-012},
          blow={-33553.991,-36.98462517},
          ahigh={155714.8487,-1446.254968,8.50944805,-0.000385900738,8.26226882e-008,
              -9.261027459999999e-012,4.21999801e-016},
          bhigh={-32035.8904,-23.72713292},
          R=133.5370699319344);

        constant IdealGases.Common.DataRecord BOCL2(
          name="BOCL2",
          MM=0.0977164,
          Hf=-3700151.786189422,
          H0=134774.2037160599,
          Tlimit=1000,
          alow={7322.66736,-202.7726965,4.16192409,0.01733309456,-2.263908718e-005,
              1.45227519e-008,-3.71959312e-012},
          blow={-44144.4188,6.52042411},
          ahigh={-229752.7041,-619.456793,10.46075518,-0.0001841620739,
              4.07121543e-008,-4.67224655e-012,2.167237536e-016},
          bhigh={-43715.3842,-27.43570215},
          R=85.08778465027366);

        constant IdealGases.Common.DataRecord BOF(
          name="BOF",
          MM=0.0458088032,
          Hf=-12944636.61080759,
          H0=218043.1336830909,
          Tlimit=1000,
          alow={72268.02649999999,-1131.38663,8.81605452,-0.00462769457,
              7.80129958e-006,-5.681205839999999e-009,1.534732094e-012},
          blow={-67111.16009999999,-25.47957229},
          ahigh={193702.0297,-1739.112297,8.695650860000001,-0.000451889557,
              9.59101908e-008,-1.067806769e-011,4.840007660000001e-016},
          bhigh={-63301.5239,-27.02458617},
          R=181.5038031816557);

        constant IdealGases.Common.DataRecord BOF2(
          name="BOF2",
          MM=0.0648072064,
          Hf=-12849924.35656045,
          H0=179169.2412774639,
          Tlimit=1000,
          alow={7227.79413,21.48783624,1.157840301,0.02250585296,-2.610731536e-005,
              1.508824929e-008,-3.51836485e-012},
          blow={-101399.5733,20.10127136},
          ahigh={-220502.8861,-1254.23869,10.9255138,-0.0003680144,8.10716494e-008,-9.28127506e-012,
              4.2975493e-016},
          bhigh={-96804.47579999999,-34.8285333},
          R=128.2954853613317);

        constant IdealGases.Common.DataRecord BOH(
          name="BOH",
          MM=0.02781834,
          Hf=-242882.1417812853,
          H0=360608.2893515573,
          Tlimit=1000,
          alow={-75214.1027,1391.444703,-5.63033018,0.02966358811,-3.83083518e-005,
              2.550606424e-008,-6.79585721e-012},
          blow={-8341.300280000001,55.17690039999999},
          ahigh={844749.8570000001,-3016.982887,8.0838647,-0.0001609855388,-2.191830959e-009,
              3.127133119e-012,-2.376665451e-016},
          bhigh={16476.98495,-26.03227947},
          R=298.8845488264217);

        constant IdealGases.Common.DataRecord BO2(
          name="BO2",
          MM=0.0428098,
          Hf=-7220822.031404024,
          H0=251628.2953903078,
          Tlimit=1000,
          alow={-41410.9064,719.885461,-1.477629435,0.02277415194,-2.786326934e-005,
              1.718462069e-008,-4.27899144e-012},
          blow={-41776.5769,32.5845801},
          ahigh={-38344.5234,-956.326114,8.200962779999999,-0.0002062130802,
              9.87228899e-009,8.15836676e-012,-7.52751966e-016},
          bhigh={-34235.6402,-22.24772278},
          R=194.2188938046896);

        constant IdealGases.Common.DataRecord BO2minus(
          name="BO2minus",
          MM=0.0428103486,
          Hf=-16689749.42661411,
          H0=224187.4059395069,
          Tlimit=1000,
          alow={53242.7969,-732.631303,5.90247,0.0024374652,-4.87880395e-007,-8.47572476e-010,
              4.08078118e-013},
          blow={-83442.9368,-10.53931911},
          ahigh={119922.6372,-1715.766982,8.701038219999999,-0.000460124212,
              9.867011870000001e-008,-1.107288516e-011,5.05018324e-016},
          bhigh={-78257.89689999999,-28.39356505},
          R=194.2164049558802);

        constant IdealGases.Common.DataRecord B_OH_2(
          name="B_OH_2",
          MM=0.04482568,
          Hf=-9486607.721288333,
          H0=267071.4197754501,
          Tlimit=1000,
          alow={1491.659222,364.818484,-2.906006389,0.0413683446,-5.78258422e-005,
              4.069783560000001e-008,-1.126499791e-011},
          blow={-53754.8366,38.8853518},
          ahigh={1557023.406,-5784.71076,14.87391235,-0.0001821804765,-3.80354164e-008,
              1.030332746e-011,-6.68588983e-016},
          bhigh={-18068.10301,-65.902689},
          R=185.4845704515805);

        constant IdealGases.Common.DataRecord BS(
          name="BS",
          MM=0.042876,
          Hf=6379312.552476911,
          H0=203472.9219143577,
          Tlimit=1000,
          alow={-38394.901,698.941749,-1.21398046,0.01396391264,-1.689881284e-005,
              1.038889985e-008,-2.582063989e-012},
          blow={28656.85472,31.54819945},
          ahigh={1358760.165,-4364.03596,9.034307589999999,-0.002114548699,
              4.18927531e-007,-1.354787322e-011,-1.360684605e-015},
          bhigh={59130.6545,-33.36696868},
          R=193.9190222968561);

        constant IdealGases.Common.DataRecord BS2(
          name="BS2",
          MM=0.07494100000000001,
          Hf=852236.559426749,
          H0=180936.4700230848,
          Tlimit=1000,
          alow={18202.64374,-515.067189,8.547515000000001,-0.001626155268,
              1.866387194e-006,-1.277165468e-009,3.68198069e-013},
          blow={8186.839750000001,-17.78384854},
          ahigh={512040.251,-1938.581076,9.814873459999999,-0.001339731606,
              3.75430116e-007,-4.40038378e-011,1.887662968e-015},
          bhigh={17365.35,-27.57546712},
          R=110.9469048985202);

        constant IdealGases.Common.DataRecord B2(
          name="B2",
          MM=0.021622,
          Hf=39652691.98039035,
          H0=407229.0259920451,
          Tlimit=1000,
          alow={-151641.8096,2630.168946,-13.81358321,0.05216225190000001,-6.93049474e-005,
              4.46941039e-008,-1.128496456e-011},
          blow={89952.5105,98.13118490000001},
          ahigh={1094594.495,-2602.735739,6.90945621,-0.0006405949889999999,
              1.951732355e-007,-2.555902119e-011,1.053557323e-015},
          bhigh={118780.7611,-19.49045025},
          R=384.5376005919897);

        constant IdealGases.Common.DataRecord B2C(
          name="B2C",
          MM=0.0336327,
          Hf=23799237.46829722,
          H0=348562.9759133224,
          Tlimit=1000,
          alow={-41665.1987,579.777952,1.411017091,0.01174705713,-1.066474425e-005,
              4.71723262e-009,-7.97001326e-013},
          blow={91968.742,17.69254387},
          ahigh={1159241.019,-4567.79881,12.28672097,-0.002500830701,6.40997985e-007,
              -6.932935770000001e-011,2.672933741e-015},
          bhigh={122244.2137,-51.99066186},
          R=247.2139316795856);

        constant IdealGases.Common.DataRecord B2CL4(
          name="B2CL4",
          MM=0.163434,
          Hf=-2998152.159281422,
          H0=132090.8256543926,
          Tlimit=1000,
          alow={42855.5513,-728.074881,9.315763670000001,0.02331629623,-3.51124761e-005,
              2.464057658e-008,-6.73547996e-012},
          blow={-58190.2324,-16.22083878},
          ahigh={-642798.703,507.856299,14.86725022,2.026983515e-006,6.27271881e-009,
              -1.218822573e-012,7.241208409999999e-017},
          bhigh={-68200.66,-41.39110669},
          R=50.87357587772434);

        constant IdealGases.Common.DataRecord B2F4(
          name="B2F4",
          MM=0.09761561279999999,
          Hf=-14731250.0403624,
          H0=181126.6916515224,
          Tlimit=1000,
          alow={-59716.9564,818.9425440000001,-0.643767129,0.0385896607,-4.31305319e-005,
              2.404463223e-008,-5.39355935e-012},
          blow={-179004.1225,35.5217997},
          ahigh={38558.6589,-2928.842655,17.92063736,-0.000952399827,1.614708845e-007,
              -1.428613504e-011,5.21873967e-016},
          bhigh={-161305.1924,-71.8480325},
          R=85.17563698580808);

        constant IdealGases.Common.DataRecord B2H(
          name="B2H",
          MM=0.02262994,
          Hf=35186239.86630102,
          H0=447000.6106953885,
          Tlimit=1000,
          alow={87755.7974,-1343.931564,9.83209915,-0.00560713775,
              5.730651049999999e-006,-2.266436197e-009,1.97235208e-013},
          blow={100990.8698,-32.8246148},
          ahigh={617554.5750000001,-2627.897466,9.08490507,-0.000538941833,
              1.0507147e-007,-1.092459556e-011,4.68485466e-016},
          bhigh={109953.7555,-31.6402991},
          R=367.4102538495462);

        constant IdealGases.Common.DataRecord B2H2(
          name="B2H2",
          MM=0.02363788,
          Hf=19235140.33407395,
          H0=447300.6462508482,
          Tlimit=1000,
          alow={142161.7322,-2138.011262,13.17732399,-0.00894265807,1.127804935e-005,
              -5.7878862e-009,1.000813871e-012},
          blow={63723.19250000001,-53.4698274},
          ahigh={1240614.592,-5368.96502,13.79292454,-0.001136749748,2.245617156e-007,
              -2.361530467e-011,1.022604572e-015},
          bhigh={85065.1149,-64.354613},
          R=351.7435573748576);

        constant IdealGases.Common.DataRecord B2H3(
          name="B2H3",
          MM=0.02464582,
          Hf=14244716.58885767,
          H0=484407.5384791417,
          Tlimit=1000,
          alow={94251.4716,-1075.866284,6.38399939,0.01167858327,-1.429661252e-005,
              1.128776882e-008,-3.68132506e-012},
          blow={46353.3508,-14.00002845},
          ahigh={1771506.902,-7872.26093,17.89447015,-0.001709304785,3.40957543e-007,
              -3.61454368e-011,1.575671409e-015},
          bhigh={87377.1189,-90.5462946},
          R=337.3583025437985);

        constant IdealGases.Common.DataRecord B2H3_db(
          name="B2H3_db",
          MM=0.02464582,
          Hf=14339479.35187387,
          H0=483296.0315380052,
          Tlimit=1000,
          alow={60640.1484,-752.446633,5.58448384,0.01080468494,-8.64903281e-006,
              4.74833331e-009,-1.309096028e-012},
          blow={44917.923,-8.87368682},
          ahigh={1497731.017,-7219.31414,17.50463766,-0.0015796988,3.16410347e-007,-3.36722515e-011,
              1.472919654e-015},
          bhigh={83243.4967,-87.79549259999999},
          R=337.3583025437985);

        constant IdealGases.Common.DataRecord B2H4(
          name="B2H4",
          MM=0.02565376,
          Hf=8231232.341769785,
          H0=481015.6094077438,
          Tlimit=1000,
          alow={40001.323,-307.1548876,1.763071673,0.02646361882,-3.066168202e-005,
              2.163781936e-008,-6.49183541e-012},
          blow={25810.33714,10.1526713},
          ahigh={2292078.842,-10598.32517,22.68612155,-0.002363586598,4.76217307e-007,
              -5.0901004e-011,2.23391159e-015},
          bhigh={86385.91979999999,-124.6794566},
          R=324.1034452649437);

        constant IdealGases.Common.DataRecord B2H4_db(
          name="B2H4_db",
          MM=0.02565376,
          Hf=8183301.31723381,
          H0=449394.0849216645,
          Tlimit=1000,
          alow={-17814.96923,571.6048040000001,-2.763085348,0.03125348696,-2.709524346e-005,
              1.341728634e-008,-3.004352798e-012},
          blow={21581.38307,36.7587294},
          ahigh={1886854.256,-10100.45614,22.47110812,-0.002319968667,4.73187996e-007,
              -5.11067303e-011,2.262693782e-015},
          bhigh={82334.87,-123.7455797},
          R=324.1034452649437);

        constant IdealGases.Common.DataRecord B2H5(
          name="B2H5",
          MM=0.0266617,
          Hf=9556175.67521951,
          H0=458364.9579734226,
          Tlimit=1000,
          alow={38309.6545,-40.6614805,-1.422523787,0.0367459527,-3.85198971e-005,
              2.44449444e-008,-6.82172294e-012},
          blow={30089.56452,28.02425895},
          ahigh={2696691.012,-13200.19835,27.35260413,-0.002961879012,5.98499943e-007,
              -6.41374855e-011,2.821187823e-015},
          bhigh={106452.4901,-155.9654379},
          R=311.8507822081863);

        constant IdealGases.Common.DataRecord B2H5_db(
          name="B2H5_db",
          MM=0.0266617,
          Hf=10320070.21307719,
          H0=437613.3554874596,
          Tlimit=1000,
          alow={14244.46027,420.45582,-3.70045125,0.036720531,-3.19350373e-005,
              1.695013434e-008,-4.25703814e-012},
          blow={30466.84683,42.45495820000001},
          ahigh={2571729.448,-13568.29858,27.81376038,-0.00319236503,6.56116526e-007,
              -7.12733394e-011,3.16949265e-015},
          bhigh={110637.0527,-159.7214457},
          R=311.8507822081863);

        constant IdealGases.Common.DataRecord B2H6(
          name="B2H6",
          MM=0.02766964,
          Hf=1322749.410545276,
          H0=431242.0761527797,
          Tlimit=1000,
          alow={-10528.44558,1041.795556,-8.960518860000001,0.0549248088,-5.30519705e-005,
              3.011904756e-008,-7.688768300000001e-012},
          blow={-925.9374349999999,68.12592429999999},
          ahigh={2835765.414,-15676.00163,32.2612233,-0.00373860973,7.71880646e-007,-8.41445454e-011,
              3.75222338e-015},
          bhigh={93583.7855,-192.0223395},
          R=300.4907906282843);

        constant IdealGases.Common.DataRecord B2O(
          name="B2O",
          MM=0.0376214,
          Hf=5124690.149755193,
          H0=313199.8809188387,
          Tlimit=1000,
          alow={-56995.4676,1018.000465,-2.636481947,0.02746009279,-3.63243272e-005,
              2.406890217e-008,-6.38412972e-012},
          blow={17038.74394,38.5534611},
          ahigh={-162872.322,-387.628981,7.78772352,-0.0001146822108,2.528097612e-008,
              -2.893783941e-012,1.339210475e-016},
          bhigh={22630.35354,-19.08513011},
          R=221.0037903958917);

        constant IdealGases.Common.DataRecord B2O2(
          name="B2O2",
          MM=0.0536208,
          Hf=-8536080.886521647,
          H0=249839.9501685913,
          Tlimit=1000,
          alow={81743.9169,-1732.702797,16.05560926,-0.02160057288,3.56685457e-005,-2.660198794e-008,
              7.531833240000001e-012},
          blow={-48996.32900000001,-61.72702390000001},
          ahigh={460578.966,-2990.079203,12.56764079,-0.000785097495,1.672537624e-007,
              -1.86769478e-011,8.486190669999999e-016},
          bhigh={-40157.4815,-48.7441371},
          R=155.0605735087876);

        constant IdealGases.Common.DataRecord B2O3(
          name="B2O3",
          MM=0.06962019999999999,
          Hf=-11999136.32824956,
          H0=207105.5383351384,
          Tlimit=1000,
          alow={73796.11910000001,-1263.620592,10.72681512,0.000384138372,
              5.97605838e-006,-6.55289135e-009,2.123951064e-012},
          blow={-96281.83140000001,-30.88078011},
          ahigh={390503.53,-3691.34821,15.55502598,-0.0009707645510000001,
              2.068887872e-007,-2.310858356e-011,1.050136734e-015},
          bhigh={-82630.5441,-63.9086344},
          R=119.4261435617824);

        constant IdealGases.Common.DataRecord B2_OH_4(
          name="B2_OH_4",
          MM=0.08965136,
          Hf=-13998533.10646933,
          H0=216874.2225438633,
          Tlimit=1000,
          alow={-17287.17249,849.591348,-8.715959570000001,0.0936236261,-0.0001278784165,
              8.81367116e-008,-2.400605571e-011},
          blow={-156433.7133,71.2016931},
          ahigh={2983925.656,-12074.69577,31.6261057,-0.000516368244,-4.23209397e-008,
              1.67197728e-011,-1.156366726e-015},
          bhigh={-82809.76969999999,-165.3010498},
          R=92.74228522579023);

        constant IdealGases.Common.DataRecord B2S(
          name="B2S",
          MM=0.053687,
          Hf=11590528.52645892,
          H0=245547.4323393,
          Tlimit=1000,
          alow={66386.09299999999,-920.1185690000001,8.699831339999999,0.000764558901,
              -3.70902603e-006,3.64237398e-009,-1.197766071e-012},
          blow={77703.758,-22.51712444},
          ahigh={-121150.1483,-64.73398450000001,7.54682561,-1.82054145e-005,
              3.92395117e-009,-4.40386238e-013,2.003651718e-017},
          bhigh={72585.3187,-13.94971229},
          R=154.8693724737832);

        constant IdealGases.Common.DataRecord B2S2(
          name="B2S2",
          MM=0.085752,
          Hf=1612989.924433249,
          H0=169898.2181173617,
          Tlimit=1000,
          alow={-70615.4997,718.294478,1.919797788,0.02036407461,-2.309813846e-005,
              1.311616725e-008,-2.996394781e-012},
          blow={11008.29019,18.55402586},
          ahigh={-164153.5014,-774.286564,11.07731737,-0.0002313278554,
              5.12561429e-008,-5.89408123e-012,2.738673834e-016},
          bhigh={17330.03515,-33.59766998},
          R=96.95951114842804);

        constant IdealGases.Common.DataRecord B2S3(
          name="B2S3",
          MM=0.117817,
          Hf=150691.8101801947,
          H0=169229.0331615981,
          Tlimit=1000,
          alow={-34312.685,558.761537,3.41407741,0.02398333891,-2.841617637e-005,
              1.690005199e-008,-4.060070709999999e-012},
          blow={-3027.690575,18.46767864},
          ahigh={-190585.5086,-934.8342479999999,13.69333613,-0.000276664725,
              6.1101558e-008,-7.00804857e-012,3.24952462e-016},
          bhigh={2906.43376,-39.46870479},
          R=70.57107208637125);

        constant IdealGases.Common.DataRecord B3H7_C2v(
          name="B3H7_C2v",
          MM=0.03948858,
          Hf=4457469.450661431,
          H0=375258.8469881672,
          Tlimit=1000,
          alow={108600.9469,-792.15368,-0.9577368039999999,0.0565611929,-6.4050345e-005,
              4.28132296e-008,-1.227580455e-011},
          blow={24306.38819,21.02582666},
          ahigh={3598592.14,-18637.01968,39.9399883,-0.00427541016,
              8.705358820000001e-007,-9.38510502e-011,4.14786531e-015},
          bhigh={127215.4092,-237.9769856},
          R=210.5538360710869);

        constant IdealGases.Common.DataRecord B3H7_Cs(
          name="B3H7_Cs",
          MM=0.03948858,
          Hf=4034541.682683955,
          H0=356642.9078989419,
          Tlimit=1000,
          alow={52981.69330000001,407.174537,-9.63573053,0.07944312000000001,-9.306456819999999e-005,
              6.105147350000001e-008,-1.685927691e-011},
          blow={17070.69083,68.73966560000001},
          ahigh={3281576.45,-18110.96595,39.6383246,-0.00417842411,8.52682906e-007,-9.20960024e-011,
              4.076496770000001e-015},
          bhigh={121362.2564,-235.7090217},
          R=210.5538360710869);

        constant IdealGases.Common.DataRecord B3H9(
          name="B3H9",
          MM=0.04150446,
          Hf=3346840.315474529,
          H0=417543.9217857551,
          Tlimit=1000,
          alow={84832.14900000001,-520.616304,-0.466570121,0.0534698386,-4.15579682e-005,
              1.944135439e-008,-4.54122735e-012},
          blow={18051.011,21.10804198},
          ahigh={3863999.5,-22294.33407,48.7504615,-0.00541844926,1.125767651e-006,-1.233226406e-010,
              5.52034818e-015},
          bhigh={142218.7123,-295.8240102},
          R=200.3271937521895);

        constant IdealGases.Common.DataRecord B3N3H6(
          name="B3N3H6",
          MM=0.08050073999999999,
          Hf=-6360189.980862289,
          H0=201505.5762220323,
          Tlimit=1000,
          alow={-155262.1082,4010.21127,-33.824913,0.1624575582,-0.0002065528647,
              1.368862991e-007,-3.6734709e-011},
          blow={-80512.534,199.5000751},
          ahigh={3739245.17,-19412.38951,44.4507003,-0.00321030805,5.71746542e-007,-5.48669214e-011,
              2.191943197e-015},
          bhigh={47584.2616,-264.1156625},
          R=103.2844170128126);

        constant IdealGases.Common.DataRecord B3O3CL3(
          name="B3O3CL3",
          MM=0.1867902,
          Hf=-8758393.325774049,
          H0=130905.0528346776,
          Tlimit=1000,
          alow={-42844.52800000001,1005.623966,-4.55651963,0.08117967139999999,-0.0001038385803,
              6.62142233e-008,-1.695748504e-011},
          blow={-204090.7277,54.66113803},
          ahigh={-741405.981,-2527.447455,26.87263667,-0.000746338936,1.64633411e-007,
              -1.886231553e-011,8.737926310000001e-016},
          bhigh={-192350.9858,-118.5636255},
          R=44.51235664397812);

        constant IdealGases.Common.DataRecord B3O3FCL2(
          name="B3O3FCL2",
          MM=0.1703356032,
          Hf=-11059388.90995162,
          H0=137658.4728001245,
          Tlimit=1000,
          alow={-37191.2007,867.3745889999999,-4.09577846,0.0781556397,-9.767035169999999e-005,
              6.09761009e-008,-1.532880319e-011},
          blow={-233138.3552,51.98088158},
          ahigh={-716236.083,-2851.210308,27.10953133,-0.000840091964,
              1.852318684e-007,-2.121694694e-011,9.827291560000002e-016},
          bhigh={-220272.9252,-121.0679365},
          R=48.81229668842362);

        constant IdealGases.Common.DataRecord B3O3F2CL(
          name="B3O3F2CL",
          MM=0.1538810064,
          Hf=-13860169.47053188,
          H0=144663.6691609264,
          Tlimit=1000,
          alow={-52770.1554,1104.904696,-5.85418105,0.07953943099999999,-9.59266077e-005,
              5.79985631e-008,-1.416698348e-011},
          blow={-264040.0115,60.71247222},
          ahigh={-681078.749,-3370.00902,27.48953579,-0.000990544256,2.18290844e-007,
              -2.49957348e-011,1.157532106e-015},
          bhigh={-247211.4785,-126.1501548},
          R=54.03182754333741);

        constant IdealGases.Common.DataRecord B3O3F3(
          name="B3O3F3",
          MM=0.1374264096,
          Hf=-17337999.9152652,
          H0=154269.7510741051,
          Tlimit=1000,
          alow={-72515.4978,1400.996228,-7.9067162,0.0821716185,-9.63315266e-005,
              5.66819426e-008,-1.349024305e-011},
          blow={-295346.1728,70.01536830000001},
          ahigh={-662982.291,-3784.94687,27.79526578,-0.001112096232,2.450806704e-007,
              -2.80648498e-011,1.299750466e-015},
          bhigh={-274886.5475,-131.5605015},
          R=60.50126772721858);

        constant IdealGases.Common.DataRecord B4H4(
          name="B4H4",
          MM=0.04727576,
          Hf=6899738.893674052,
          H0=315946.3115981636,
          Tlimit=1000,
          alow={217179.1579,-2598.282557,9.845440610000001,0.0302630914,-4.128334159999999e-005,
              3.089368344e-008,-9.35338426e-012},
          blow={50791.4348,-37.7075721},
          ahigh={1937200.886,-10781.85932,28.79625241,-0.002401547707,4.83775678e-007,
              -5.17049023e-011,2.269138182e-015},
          bhigh={98365.95389999999,-156.1814117},
          R=175.8717786874288);

        constant IdealGases.Common.DataRecord B4H10(
          name="B4H10",
          MM=0.0533234,
          Hf=1239605.876594516,
          H0=290408.6011019553,
          Tlimit=1000,
          alow={-32966.04820000001,2440.532922,-26.85332563,0.1406499347,-0.0001586710574,
              9.87459413e-008,-2.601426018e-011},
          blow={-3091.924018,158.9905532},
          ahigh={4030474.13,-25606.29762,56.8723366,-0.00617856786,1.280621032e-006,-1.400254585e-010,
              6.258866560000001e-015},
          bhigh={150600.9087,-352.07142},
          R=155.9253911040931);

        constant IdealGases.Common.DataRecord B4H12(
          name="B4H12",
          MM=0.05533928000000001,
          Hf=3401491.924000457,
          H0=393006.8117980573,
          Tlimit=1000,
          alow={71521.70299999999,-159.0351575,-4.71977166,0.088112289,-8.60494688e-005,
              5.12353551e-008,-1.37986525e-011},
          blow={21941.86547,41.878974},
          ahigh={6158360.8,-32020.8673,66.60443599999999,-0.00740636928,
              1.512993908e-006,-1.635619071e-010,7.24538514e-015},
          bhigh={205458.6275,-414.210686},
          R=150.2453953141421);

        constant IdealGases.Common.DataRecord B5H9(
          name="B5H9",
          MM=0.06312646,
          Hf=1159893.965224725,
          H0=254293.9521715617,
          Tlimit=1000,
          alow={89984.7372,104.2533357,-11.95549834,0.1007310686,-9.866680210000001e-005,
              5.29553518e-008,-1.232119583e-011},
          blow={8374.341780000001,76.6309048},
          ahigh={3169017.62,-22825.03203,55.1200898,-0.005563411420000001,
              1.157837073e-006,-1.270332301e-010,5.69426203e-015},
          bhigh={133445.2571,-337.106046},
          R=131.7113616065276);

        constant IdealGases.Common.DataRecord Ba(
          name="Ba",
          MM=0.137327,
          Hf=1347149.504467439,
          H0=45128.98410363585,
          Tlimit=1000,
          alow={2222.563526,-34.0797785,2.706751118,-0.0006382894490000001,
              1.063003846e-006,-9.10262427e-010,3.148062219e-013},
          blow={21665.49702,5.10254588},
          ahigh={-19265792.28,60065.0104,-66.3396413,0.0350756593,-7.80760183e-006,
              8.0851268e-010,-3.199486918e-014},
          bhigh={-358966.372,500.75834},
          R=60.54506397139674);

        constant IdealGases.Common.DataRecord Baplus(
          name="Baplus",
          MM=0.1373264514,
          Hf=5054011.961456684,
          H0=45129.16438762649,
          Tlimit=1000,
          alow={-54231.6755,674.468078,-0.8940272500000001,0.008796642950000001,-1.222812901e-005,
              8.387953870000001e-009,-2.037964358e-012},
          blow={79417.7464,26.07063698},
          ahigh={8794971.85,-19518.17883,14.85542861,-0.00094042335,-7.03125779e-007,
              1.667412753e-010,-1.07011731e-014},
          bhigh={214680.0732,-92.28264190000002},
          R=60.54530584047409);

        constant IdealGases.Common.DataRecord BaBr(
          name="BaBr",
          MM=0.217231,
          Hf=-346749.2070652899,
          H0=46955.19055751711,
          Tlimit=1000,
          alow={-691.2557439999999,-62.4550016,4.79667765,-0.000683800494,
              1.04394768e-006,-7.4412243e-010,2.172187003e-013},
          blow={-10113.49165,5.19645487},
          ahigh={-1056014.042,1034.740207,6.73572938,-0.0037840263,1.952196896e-006,-3.34783188e-010,
              1.893189803e-014},
          bhigh={-19502.33645,-5.06927964},
          R=38.27479503385797);

        constant IdealGases.Common.DataRecord BaBr2(
          name="BaBr2",
          MM=0.297135,
          Hf=-1388307.473034143,
          H0=52116.91318760833,
          Tlimit=1000,
          alow={-5143.37406,-38.7051846,7.16244697,-0.000369671531,4.68971527e-007,-3.107902475e-010,
              8.36358205e-014},
          blow={-51533.1826,0.9741407000000001},
          ahigh={-8928.25121,-0.753655889,7.00065821,-2.94982171e-007,
              7.092392109999999e-011,-8.670038099999999e-015,4.22174231e-019},
          bhigh={-51726.6949,1.910185706},
          R=27.98213606609791);

        constant IdealGases.Common.DataRecord BaCL(
          name="BaCL",
          MM=0.17278,
          Hf=-788811.6738048386,
          H0=57165.86989234866,
          Tlimit=1000,
          alow={-2661.946867,-77.2499634,4.74610605,-0.000352354888,3.99919835e-007,-1.936413749e-010,
              4.124048529999999e-014},
          blow={-17363.28141,3.904455084},
          ahigh={-1075410.089,1209.303069,6.2725586,-0.00328811031,1.717751087e-006,-2.910607065e-010,
              1.632658438e-014},
          bhigh={-27791.73737,-3.574185216},
          R=48.12172705174211);

        constant IdealGases.Common.DataRecord BaCLplus(
          name="BaCLplus",
          MM=0.1727794514,
          Hf=2018166.090785492,
          H0=55957.05925479053,
          Tlimit=1000,
          alow={-895.155669,-133.4692684,4.93541612,-0.000757405451,8.355724e-007,-4.68525851e-010,
              1.095343103e-013},
          blow={41251.5599,1.896278378},
          ahigh={-18291.98157,-2.931616688,4.50228071,3.67178849e-005,
              2.396147871e-009,5.4794586e-014,1.174342316e-018},
          bhigh={40551.00150000001,4.503765564},
          R=48.12187984525572);

        constant IdealGases.Common.DataRecord BaCL2(
          name="BaCL2",
          MM=0.208233,
          Hf=-2397801.438772913,
          H0=70109.50713863796,
          Tlimit=1000,
          alow={-1157.501999,-205.4518828,7.83751405,-0.001867700704,2.335378734e-006,
              -1.531373341e-009,4.08852509e-013},
          blow={-61156.6528,-5.978149218},
          ahigh={-22165.98768,-4.00248381,7.00342674,-1.515820808e-006,
              3.61184921e-010,-4.38675906e-014,2.125803293e-018},
          bhigh={-62190.9527,-1.132439694},
          R=39.92869525963705);

        constant IdealGases.Common.DataRecord BaF(
          name="BaF",
          MM=0.1563254032,
          Hf=-2040575.501295109,
          H0=59760.67746358449,
          Tlimit=1000,
          alow={25303.17292,-471.69951,6.18503622,-0.0033666788,
              4.011834559999999e-006,-2.506578601e-009,6.47725816e-013},
          blow={-37318.7214,-6.22071538},
          ahigh={1868380.434,-7071.099600000001,14.66959284,-0.0069959502,
              2.366313845e-006,-3.2877343e-010,1.647896238e-014},
          bhigh={3571.78068,-66.6239092},
          R=53.18695381429856);

        constant IdealGases.Common.DataRecord BaFplus(
          name="BaFplus",
          MM=0.1563248546,
          Hf=857593.7226555399,
          H0=58862.77024562158,
          Tlimit=1000,
          alow={28407.19922,-486.357182,5.94605839,-0.002429844077,2.445346729e-006,-1.316757471e-009,
              2.97488632e-013},
          blow={17306.39076,-5.95120693},
          ahigh={-40544.2367,-17.01997704,4.51305534,2.632753508e-005,
              2.612088236e-009,-9.502197929999999e-014,6.515176160000001e-018},
          bhigh={14744.8657,2.783167711},
          R=53.18714046640156);

        constant IdealGases.Common.DataRecord BaF2(
          name="BaF2",
          MM=0.1753238064,
          Hf=-4631450.227286418,
          H0=76641.14346994921,
          Tlimit=1000,
          alow={34883.9552,-764.845956,9.79775038,-0.00575645751,6.7756038e-006,-4.24361475e-009,
              1.093687692e-012},
          blow={-95903.56449999999,-20.82035292},
          ahigh={-55086.3366,-16.91114228,7.01356488,-5.73190977e-006,
              1.321203959e-009,-1.565528167e-013,7.444983019999999e-018},
          bhigh={-99835.29700000001,-4.38958149},
          R=47.42351977592018);

        constant IdealGases.Common.DataRecord BaH(
          name="BaH",
          MM=0.13833494,
          Hf=1514694.010059932,
          H0=63115.68863224288,
          Tlimit=1000,
          alow={-37652.6888,698.668012,-1.313524351,0.01460648882,-1.802974829e-005,
              1.133031115e-008,-2.865589059e-012},
          blow={20974.78889,32.308026},
          ahigh={-6755466.57,17307.00212,-11.36812458,0.00561774474,-3.18078885e-007,
              -1.052342502e-010,1.111101879e-014},
          bhigh={-89540.70379999999,118.2377538},
          R=60.10391879303957);

        constant IdealGases.Common.DataRecord BaI(
          name="BaI",
          MM=0.26423147,
          Hf=-38745.10102827645,
          H0=39348.54920952451,
          Tlimit=1000,
          alow={-4186.28554,10.33094613,4.42890023,0.0003026019976,-2.591429408e-007,
              1.7416054e-010,-3.370062760000001e-014},
          blow={-2636.169733,8.201924679999999},
          ahigh={-3533859.66,7394.258,1.285151488,-0.002303429302,2.214839289e-006,-4.68109681e-010,
              3.011371472e-014},
          bhigh={-53402.2959,37.1044387},
          R=31.46662280613282);

        constant IdealGases.Common.DataRecord BaI2(
          name="BaI2",
          MM=0.39113594,
          Hf=-737441.7318950542,
          H0=40370.70845496836,
          Tlimit=1000,
          alow={-4241.592729999999,-18.62214382,7.07855675,-0.0001793922821,
              2.281437677e-007,-1.514647881e-010,4.08149836e-014},
          blow={-36703.5149,3.16313897},
          ahigh={-6048.2248,-0.362272945,7.00031745,-1.425793502e-007,3.43334942e-011,
              -4.201754979999999e-015,2.047703474e-019},
          bhigh={-36796.5075,3.61547532},
          R=21.25724370918203);

        constant IdealGases.Common.DataRecord BaO(
          name="BaO",
          MM=0.1533264,
          Hf=-769263.4275636812,
          H0=58790.31921443405,
          Tlimit=1000,
          alow={37643.985,-507.15553,5.39284728,-0.000411932469,-6.52789662e-007,
              9.430588419999999e-010,-3.43660303e-013},
          blow={-12755.52614,-3.75221376},
          ahigh={13184816.98,-38542.5325,46.8674161,-0.02188646633,
              5.335677450000001e-006,-5.1523043e-010,1.4330834e-014},
          bhigh={230690.2396,-302.8332772},
          R=54.22726940696449);

        constant IdealGases.Common.DataRecord BaOplus(
          name="BaOplus",
          MM=0.1533258514,
          Hf=3337367.321477009,
          H0=61762.48762705387,
          Tlimit=1000,
          alow={356641.097,-3779.24671,16.73544137,-0.0130661161,2.686157445e-006,
              4.044077950000001e-009,-2.016508813e-012},
          blow={79832.68490000001,-72.8511855},
          ahigh={-331767.923,1594.253495,3.22724781,0.00057226415,-1.147415658e-007,
              1.382873231e-011,-6.38443703e-016},
          bhigh={50252.4761,14.09092365},
          R=54.22746343217109);

        constant IdealGases.Common.DataRecord BaOH(
          name="BaOH",
          MM=0.15433434,
          Hf=-1453056.481143471,
          H0=72728.99213486773,
          Tlimit=1000,
          alow={37762.3151,-889.139022,9.531718,-0.0054588259,4.94178301e-006,-1.809327537e-009,
              2.050048305e-013},
          blow={-24418.52965,-24.89410158},
          ahigh={2637336.694,-8365.410400000001,15.99803975,-0.005098446049999999,
              1.594657431e-006,-2.180478542e-010,1.084610688e-014},
          bhigh={23935.50647,-74.9070579},
          R=53.87311728549849);

        constant IdealGases.Common.DataRecord BaOHplus(
          name="BaOHplus",
          MM=0.1543337914,
          Hf=1308976.544717996,
          H0=73237.2340332462,
          Tlimit=1000,
          alow={27976.32165,-768.07694,9.05297844,-0.0043685779,3.52349726e-006,-8.38636087e-010,
              -6.47545747e-014},
          blow={26232.80802,-22.64561641},
          ahigh={876673.843,-2335.8196,7.97316606,0.0001038679898,-6.31948578e-008,
              1.028729445e-011,-5.74180857e-016},
          bhigh={37725.1747,-19.30805001},
          R=53.87330878466322);

        constant IdealGases.Common.DataRecord Ba_OH_2(
          name="Ba_OH_2",
          MM=0.17134168,
          Hf=-3540682.407222807,
          H0=101485.6688693609,
          Tlimit=1000,
          alow={57028.149,-1577.384797,16.59935325,-0.01039598275,
              9.664889600000001e-006,-3.67362144e-009,4.62578499e-013},
          blow={-68351.58899999999,-58.51911699999999},
          ahigh={1762908.112,-4676.205419999999,13.95135494,0.0002051842928,-1.25726553e-007,
              2.048917625e-011,-1.144045777e-015},
          bhigh={-45459.6441,-49.2945719},
          R=48.52568271771352);

        constant IdealGases.Common.DataRecord BaS(
          name="BaS",
          MM=0.169392,
          Hf=229475.5065174271,
          H0=56414.20492112969,
          Tlimit=1000,
          alow={13770.75147,-329.350056,5.81154584,-0.00284897376,3.57633602e-006,-2.325649347e-009,
              6.17280531e-013},
          blow={4964.43245,-3.497962615},
          ahigh={6104262.07,-22276.17479,35.9751351,-0.0215779374,7.31987235e-006,-1.089038636e-009,
              5.88410195e-014},
          bhigh={140413.8006,-214.1776331},
          R=49.08420704637764);

        constant IdealGases.Common.DataRecord Ba2(
          name="Ba2",
          MM=0.274654,
          Hf=1296046.432966569,
          H0=41357.9885965615,
          Tlimit=1000,
          alow={-12941.77083,-727.633008,14.64866569,-0.0396633165,5.89871106e-005,-4.23530056e-008,
              1.189594362e-011},
          blow={43867.1223,-41.4567367},
          ahigh={216011.4547,195.0676877,2.253699771,0.0001507750613,-4.742515e-008,
              7.04895196e-012,-3.54744017e-016},
          bhigh={41677.6297,23.75906459},
          R=30.27253198569837);

        constant IdealGases.Common.DataRecord Be(
          name="Be",
          MM=0.009012181999999999,
          Hf=35951337.86690061,
          H0=687672.3084376237,
          Tlimit=1000,
          alow={-0.000411290152,5.36496736e-006,2.499999972,7.56920369e-011,-1.097852652e-013,
              8.00211024e-017,-2.303022777e-020},
          blow={38222.6459,2.146172983},
          ahigh={-692628.584,2466.773005,-0.9776613340000001,0.002458939515,-9.047950419999999e-007,
              1.587880407e-010,-9.415600603e-015},
          bhigh={23002.12917,26.23234754},
          R=922.581456965694);

        constant IdealGases.Common.DataRecord Beplus(
          name="Beplus",
          MM=0.0090116334,
          Hf=136457096.4460228,
          H0=687714.1717726777,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={147152.8569,2.839228698},
          ahigh={-94781.35979999999,276.8325398,2.191388413,0.0001648824289,-4.28016682e-008,
              4.54235047e-012,-6.270417825e-017},
          bhigh={145385.0986,5.05550384},
          R=922.6376208335329);

        constant IdealGases.Common.DataRecord Beplusplus(
          name="Beplusplus",
          MM=0.009011084800000001,
          Hf=332146638.7709501,
          H0=687756.0402050593,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={359227.916,2.145990203},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={359227.916,2.145990203},
          R=922.6937915399486);

        constant IdealGases.Common.DataRecord BeBr(
          name="BeBr",
          MM=0.08891618200000001,
          Hf=1489563.598221075,
          H0=100893.9857539092,
          Tlimit=1000,
          alow={37462.8806,-472.233907,5.03940904,0.0005798853219999999,-1.937634343e-006,
              1.793372625e-009,-5.67229558e-013},
          blow={17231.35679,-2.573912886},
          ahigh={821723.8139999999,-2850.509348,8.017266019999999,-0.002105663212,
              6.84913634e-007,-9.98912932e-011,5.192456840000001e-015},
          bhigh={32293.7287,-23.26810811},
          R=93.50909826515043);

        constant IdealGases.Common.DataRecord BeBr2(
          name="BeBr2",
          MM=0.168820182,
          Hf=-1386460.411469051,
          H0=76042.45445014389,
          Tlimit=1000,
          alow={-21186.98678,209.0382611,3.73117131,0.01115501549,-1.542821761e-005,
              1.052354444e-008,-2.850006057e-012},
          blow={-30904.56277,9.458917720000001},
          ahigh={-104133.1811,-154.3443092,7.61446541,-4.55670063e-005,
              1.003180548e-008,-1.146879501e-012,5.30179538e-017},
          bhigh={-29845.27608,-11.4936098},
          R=49.25046224627338);

        constant IdealGases.Common.DataRecord BeCL(
          name="BeCL",
          MM=0.044465182,
          Hf=1274999.998875525,
          H0=199281.9235508808,
          Tlimit=1000,
          alow={20161.38947,-141.3988978,2.898223773,0.00606992551,-9.162038470000001e-006,
              6.61262066e-009,-1.859126853e-012},
          blow={6626.691440000001,7.90018105},
          ahigh={280884.5146,-1103.100122,5.67118983,-0.0005443000450000001,
              1.459036606e-007,-1.230971735e-011,9.90080476e-017},
          bhigh={12246.49804,-8.38237137},
          R=186.9883721604918);

        constant IdealGases.Common.DataRecord BeCL2(
          name="BeCL2",
          MM=0.079918182,
          Hf=-4523865.920773824,
          H0=151165.3505831752,
          Tlimit=1000,
          alow={-22299.57657,152.8781667,3.71499471,0.0106777655,-1.397766942e-005,
              9.066693559999998e-009,-2.350292311e-012},
          blow={-45904.2823,6.682555572},
          ahigh={-115408.746,-248.4300053,7.68567214,-7.44496037e-005,
              1.649479787e-008,-1.895997075e-012,8.804973950000001e-017},
          bhigh={-44687.4728,-15.00337407},
          R=104.0373015492269);

        constant IdealGases.Common.DataRecord BeF(
          name="BeF",
          MM=0.0280105852,
          Hf=-6091439.853245195,
          H0=310993.3240523657,
          Tlimit=1000,
          alow={-46644.9723,788.717885,-1.463363201,0.01381790494,-1.591299964e-005,
              9.35293152e-009,-2.229211181e-012},
          blow={-25226.27476,31.976343},
          ahigh={-185794.1543,47.76082770000001,4.26998602,0.0002310668473,-6.657214920000001e-008,
              1.152149888e-011,-6.33558644e-016},
          bhigh={-22579.5096,-0.218478727},
          R=296.8332128955307);

        constant IdealGases.Common.DataRecord BeF2(
          name="BeF2",
          MM=0.0470089884,
          Hf=-16945445.18213883,
          H0=231440.0792338684,
          Tlimit=1000,
          alow={7490.27024,-287.8053102,5.43471282,0.00390323346,-2.214865601e-006,-1.965806119e-010,
              4.04236227e-013},
          blow={-95916.15640000001,-5.61661692},
          ahigh={-64820.1807,-768.455606,8.062860840000001,-0.0002227502549,
              4.89159866e-008,-5.58788672e-012,2.583409761e-016},
          bhigh={-93954.9549,-21.25660266},
          R=176.8698345357289);

        constant IdealGases.Common.DataRecord BeH(
          name="BeH",
          MM=0.010020122,
          Hf=34156480.72947615,
          H0=863073.7230544697,
          Tlimit=1000,
          alow={-1615.149125,-59.3528608,4.5072691,-0.00526418961,1.145319967e-005,-9.247883590000001e-009,
              2.700364753e-012},
          blow={40301.93040000001,-3.48511705},
          ahigh={-2424081.636,6597.39846,-3.62631648,0.00457963435,-1.163329056e-006,
              1.297785691e-010,-5.29188581e-015},
          bhigh={-2489.846221,52.1601869},
          R=829.7775216708938);

        constant IdealGases.Common.DataRecord BeHplus(
          name="BeHplus",
          MM=0.0100195734,
          Hf=117591728.1069072,
          H0=862706.4900787092,
          Tlimit=1000,
          alow={-32206.1102,252.0229596,3.20771957,-0.00219128729,6.90253449e-006,-5.76952263e-009,
              1.656414969e-012},
          blow={139253.066,3.30704477},
          ahigh={462234.1589999999,-1760.169629,5.37990555,2.742462444e-005,-1.16720817e-007,
              3.55717791e-011,-2.569695765e-015},
          bhigh={151585.9734,-13.69222641},
          R=829.822954338555);

        constant IdealGases.Common.DataRecord BeH2(
          name="BeH2",
          MM=0.011028062,
          Hf=14608088.25703011,
          H0=835967.6432722267,
          Tlimit=1000,
          alow={90653.14900000001,-1320.65722,9.90130806,-0.01255772231,
              2.205704068e-005,-1.633609388e-008,4.50510324e-012},
          blow={24645.61869,-36.3582675},
          ahigh={607426.201,-3407.53425,9.79237036,-0.000825461482,1.915656246e-007,-1.962774813e-011,
              8.929908660000001e-016},
          bhigh={37931.052,-42.5465358},
          R=753.9377272271411);

        constant IdealGases.Common.DataRecord BeI(
          name="BeI",
          MM=0.135916652,
          Hf=1526334.749622879,
          H0=66872.66693414432,
          Tlimit=1000,
          alow={35300.5481,-519.095026,5.71450524,-0.00140907364,7.66477212e-007,-2.601945105e-011,
              -8.230960639999999e-014},
          blow={26379.03657,-5.14099784},
          ahigh={-532820.662,1139.497861,3.62917166,0.0001704033769,1.067048688e-007,
              -3.58945788e-011,2.72276956e-015},
          bhigh={15854.74307,9.370951270000001},
          R=61.17331377468009);

        constant IdealGases.Common.DataRecord BeI2(
          name="BeI2",
          MM=0.262821122,
          Hf=-246401.2424389543,
          H0=51139.53131970877,
          Tlimit=1000,
          alow={359.272618,-48.6605901,5.24157118,0.007830305059999999,-1.169525374e-005,
              8.389583910000001e-009,-2.356636003e-012},
          blow={-9333.22092,2.896318281},
          ahigh={-93923.72840000001,-89.5921438,7.56555479,-2.577727326e-005,
              5.61426533e-009,-6.35966385e-013,2.917080336e-017},
          bhigh={-9814.768620000001,-9.03204281},
          R=31.63547867359002);

        constant IdealGases.Common.DataRecord BeN(
          name="BeN",
          MM=0.023018882,
          Hf=18549988.65713808,
          H0=379046.2542881101,
          Tlimit=1000,
          alow={-42477.8363,759.0188900000001,-1.561469235,0.01496945721,-1.83560888e-005,
              1.146861461e-008,-2.897470581e-012},
          blow={46830.0332,32.56973759},
          ahigh={-59096.9616,-307.8649431,4.72795915,-3.92815883e-005,
              2.006201069e-008,-2.300018068e-012,1.066101831e-016},
          bhigh={51560.9571,-3.031380625},
          R=361.2022512648529);

        constant IdealGases.Common.DataRecord BeO(
          name="BeO",
          MM=0.025011582,
          Hf=5155223.847895747,
          H0=347363.2335611557,
          Tlimit=1000,
          alow={-48694.58319999999,721.347362,-0.378415732,0.008792203849999999,-7.07015126e-006,
              2.25017562e-009,-2.799117872e-014},
          blow={11014.66639,25.74081184},
          ahigh={-35034724.5,105585.9473,-116.5011722,0.0647736948,-1.649656058e-005,
              2.0055584e-009,-9.426891790000001e-014},
          bhigh={-657001.8000000001,864.0898030000001},
          R=332.4248742042786);

        constant IdealGases.Common.DataRecord BeOH(
          name="BeOH",
          MM=0.026019522,
          Hf=-3832419.404168916,
          H0=415013.38879323,
          Tlimit=1000,
          alow={-38530.2452,449.8059289999999,1.532096459,0.01299912603,-1.708979996e-005,
              1.169968182e-008,-3.16318371e-012},
          blow={-15590.46567,15.4554293},
          ahigh={855033.031,-2646.537838,8.204784630000001,1.110814513e-005,-4.265364e-008,
              7.926511920000001e-012,-4.64541952e-016},
          bhigh={3121.216271,-25.71641308},
          R=319.5474536388486);

        constant IdealGases.Common.DataRecord BeOHplus(
          name="BeOHplus",
          MM=0.0260189734,
          Hf=29208835.73369579,
          H0=367074.5902680389,
          Tlimit=1000,
          alow={71061.19160000001,-806.8981600000001,5.60310781,0.004932070859999999,
              -7.722847159999999e-006,5.910889809999999e-009,-1.695201901e-012},
          blow={94407.8242,-10.88099852},
          ahigh={813487.439,-2814.653683,8.381145009999999,-6.94207328e-005,-2.369535806e-008,
              5.67810638e-012,-3.58325356e-016},
          bhigh={107312.9932,-29.01093335},
          R=319.5541911734304);

        constant IdealGases.Common.DataRecord Be_OH_2(
          name="Be_OH_2",
          MM=0.043026862,
          Hf=-14848036.46614991,
          H0=353868.6600012801,
          Tlimit=1000,
          alow={7863.08983,-739.7142249999999,10.43303334,0.00451424953,-6.95060153e-006,
              5.77703004e-009,-1.727199382e-012},
          blow={-75856.7696,-33.0146661},
          ahigh={1722889.403,-5242.47719,14.86877785,3.93149836e-005,-8.92027631e-008,
              1.630912925e-011,-9.505371139999999e-016},
          bhigh={-46428.2384,-64.7680402},
          R=193.2390979383995);

        constant IdealGases.Common.DataRecord BeS(
          name="BeS",
          MM=0.041077182,
          Hf=6015390.880513663,
          H0=213746.5515526357,
          Tlimit=1000,
          alow={-7390.57908,282.8134792,0.65520194,0.01076012495,-1.398380157e-005,
              8.81841889e-009,-2.110588578e-012},
          blow={27515.93294,19.80493561},
          ahigh={-16557083.61,54314.6612,-63.5185925,0.0396409199,-1.078978696e-005,
              1.394030343e-009,-6.93695504e-014},
          bhigh={-312155.9628,480.3454935},
          R=202.4109638290182);

        constant IdealGases.Common.DataRecord Be2(
          name="Be2",
          MM=0.018024364,
          Hf=35371196.34290564,
          H0=545823.3089389452,
          Tlimit=1000,
          alow={-158087.381,2035.567774,-3.69158063,0.01028818435,-9.60385451e-006,
              4.707519419999999e-009,-9.374688790000001e-013},
          blow={65269.68369999999,48.7932499},
          ahigh={101003.4484,141.4207488,2.292070182,0.0001543331824,-5.801043e-008,
              1.003129697e-011,-5.68281834e-016},
          bhigh={75501.3973,12.38758616},
          R=461.290728482847);

        constant IdealGases.Common.DataRecord Be2CL4(
          name="Be2CL4",
          MM=0.159836364,
          Hf=-5127775.385330963,
          H0=141653.5225989,
          Tlimit=1000,
          alow={121615.2589,-2000.824823,17.23384275,0.00581044828,-1.362970089e-005,
              1.156602362e-008,-3.5522558e-012},
          blow={-92064.75470000001,-61.37959773999999},
          ahigh={-335492.008,-231.6199283,16.17047912,-6.73440595e-005,
              1.472073032e-008,-1.672352806e-012,7.68877397e-017},
          bhigh={-103107.5197,-50.47009374},
          R=52.01865077461346);

        constant IdealGases.Common.DataRecord Be2F4(
          name="Be2F4",
          MM=0.0940179768,
          Hf=-18418816.28322808,
          H0=210965.0587588479,
          Tlimit=1000,
          alow={-6327.70187,-69.0253372,5.47093723,0.03097341347,-4.09431006e-005,
              2.668113685e-008,-6.942909560000001e-012},
          blow={-210597.9269,-0.2073546195},
          ahigh={-368183.495,-943.919148,16.70099855,-0.0002797974015,
              6.178061719999999e-008,-7.08308019e-012,3.28279104e-016},
          bhigh={-208904.5725,-60.9266576},
          R=88.43491726786446);

        constant IdealGases.Common.DataRecord Be2O(
          name="Be2O",
          MM=0.034023764,
          Hf=-1088468.724389224,
          H0=328899.1188629218,
          Tlimit=1000,
          alow={-426.367357,-115.9556261,4.08267777,0.01015885064,-1.326015538e-005,
              8.48895536e-009,-2.168039077e-012},
          blow={-5362.25812,1.253737886},
          ahigh={-141264.6378,-349.864459,7.76093268,-0.0001044953518,
              2.313342334e-008,-2.657722263e-012,1.233820439e-016},
          bhigh={-5172.38549,-18.54887619},
          R=244.3724921205073);

        constant IdealGases.Common.DataRecord Be2OF2(
          name="Be2OF2",
          MM=0.0720205704,
          Hf=-16725415.99309522,
          H0=230279.6813172699,
          Tlimit=1000,
          alow={-27834.91921,178.2881461,4.09425136,0.02270142496,-2.672688189e-005,
              1.572575618e-008,-3.73607058e-012},
          blow={-148008.1903,7.35349477},
          ahigh={-228182.6506,-1130.355396,13.83400563,-0.000331608064,
              7.30492101e-008,-8.36270438e-012,3.87218498e-016},
          bhigh={-143139.0587,-47.3915023},
          R=115.4457949141708);

        constant IdealGases.Common.DataRecord Be2O2(
          name="Be2O2",
          MM=0.050023164,
          Hf=-8228893.898034918,
          H0=218477.4237791116,
          Tlimit=1000,
          alow={-30317.1953,1163.353177,-8.73315595,0.0537200293,-7.27943919e-005,
              4.89492825e-008,-1.312147056e-011},
          blow={-55469.3688,69.53282640000001},
          ahigh={-396057.6640000001,-907.4948830000001,10.67160422,-0.0002670905218,
              5.87762999e-008,-6.71866409e-012,3.105949075e-016},
          bhigh={-48611.1433,-36.1654689},
          R=166.2124371021393);

        constant IdealGases.Common.DataRecord Be3O3(
          name="Be3O3",
          MM=0.075034746,
          Hf=-13643287.71100258,
          H0=201583.0506043161,
          Tlimit=1000,
          alow={-27380.72346,874.38326,-6.59960612,0.0653302114,-8.762305740000001e-005,
              5.81724479e-008,-1.5406005e-011},
          blow={-128467.9012,58.3720312},
          ahigh={-589080.936,-1392.823588,17.03450699,-0.000412733074,9.10752915e-008,
              -1.043465231e-011,4.83305377e-016},
          bhigh={-121904.5534,-70.0061451},
          R=110.8082914014262);

        constant IdealGases.Common.DataRecord Be4O4(
          name="Be4O4",
          MM=0.100046328,
          Hf=-16485308.50627521,
          H0=158265.6686810135,
          Tlimit=1000,
          alow={-68932.5564,1687.565069,-14.79616594,0.1007319774,-0.0001291057622,
              8.243136760000001e-008,-2.111283987e-011},
          blow={-207287.7151,100.2507262},
          ahigh={-884133.8459999999,-2726.394165,24.02941774,-0.0008114675460000001,
              1.794255972e-007,-2.059359498e-011,9.552905330000001e-016},
          bhigh={-192371.0587,-113.662075},
          R=83.10621855106966);

        constant IdealGases.Common.DataRecord Br(
          name="Br",
          MM=0.079904,
          Hf=1400055.066079295,
          H0=77560.92310772926,
          Tlimit=1000,
          alow={-3700.29391,61.4521542,2.092120721,0.00137681887,-2.445566658e-006,
              2.050975161e-009,-5.144249091e-013},
          blow={12425.08647,8.996166199999999},
          ahigh={-4789717.399999999,16920.51999,-20.24085357,0.01395620355,-3.65623056e-006,
              4.489781e-010,-2.122507526e-014},
          bhigh={-92070.54960000001,166.1695929},
          R=104.0557669203044);

        constant IdealGases.Common.DataRecord Brplus(
          name="Brplus",
          MM=0.07990345139999999,
          Hf=15743087.58832913,
          H0=77561.53071505495,
          Tlimit=1000,
          alow={39811.8742,-475.158147,4.73457898,-0.00516932479,5.90585752e-006,-2.885129283e-009,
              5.054894290000001e-013},
          blow={152905.2046,-5.76928322},
          ahigh={1741149.829,-5455.46567,8.470663350000001,-0.002683465574,
              6.59045456e-007,-7.9537703e-011,3.735898818e-015},
          bhigh={185178.1643,-36.3790903},
          R=104.0564813449348);

        constant IdealGases.Common.DataRecord Brminus(
          name="Brminus",
          MM=0.0799045486,
          Hf=-2740776.036371977,
          H0=77560.39059833948,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-27084.92743,5.41955617},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={-27084.92743,5.41955617},
          R=104.055052505484);

        constant IdealGases.Common.DataRecord BrCL(
          name="BrCL",
          MM=0.115357,
          Hf=128202.9959170228,
          H0=81547.82978059414,
          Tlimit=1000,
          alow={16532.91583,-357.876928,5.70062216,-0.002201257188,2.415146969e-006,-1.371032976e-009,
              3.22780342e-013},
          blow={2252.619279,-4.155659669},
          ahigh={-128486.3067,-1138.379626,7.9640408,-0.00343805667,1.524999514e-006,
              -2.761469114e-010,1.694450407e-014},
          bhigh={5938.264260000001,-19.25044389},
          R=72.07600752446753);

        constant IdealGases.Common.DataRecord BrF(
          name="BrF",
          MM=0.09890240319999999,
          Hf=-595045.6520352784,
          H0=91212.22243465163,
          Tlimit=1000,
          alow={38361.4319,-518.461197,5.45832705,-0.00056568431,-4.12131197e-007,
              7.85991348e-010,-3.03616152e-013},
          blow={-5595.53991,-4.9011295},
          ahigh={3771388.47,-12674.9343,20.8055593,-0.0102635936,3.30820359e-006,-4.90319225e-010,
              2.64827508e-014},
          bhigh={70626.0972,-113.02536},
          R=84.06744154827575);

        constant IdealGases.Common.DataRecord BrF3(
          name="BrF3",
          MM=0.1368992096,
          Hf=-1867067.025053153,
          H0=107463.1478369032,
          Tlimit=1000,
          alow={111645.5127,-1959.42433,15.26220126,-0.0079993623,6.98203026e-006,-3.24275796e-009,
              6.16475146e-013},
          blow={-23453.41551,-55.226336},
          ahigh={-188653.224,-82.45232970000001,10.06180694,-2.477319092e-005,
              5.47857686e-009,-6.28265526e-013,2.910628214e-017},
          bhigh={-33868.0037,-22.98937369},
          R=60.73425861474075);

        constant IdealGases.Common.DataRecord BrF5(
          name="BrF5",
          MM=0.174896016,
          Hf=-2451742.525684519,
          H0=109633.9610160131,
          Tlimit=1000,
          alow={221136.6805,-4024.80922,27.34900212,-0.01832254979,1.721754649e-005,-8.75350863e-009,
              1.860196959e-012},
          blow={-35374.4767,-124.4296466},
          ahigh={-375764.764,-157.5896472,16.11869838,-4.776497799999999e-005,
              1.059755365e-008,-1.218527723e-012,5.65753545e-017},
          bhigh={-56672.66800000001,-55.4083931},
          R=47.53951628034798);

        constant IdealGases.Common.DataRecord BrO(
          name="BrO",
          MM=0.0959034,
          Hf=1311736.601622049,
          H0=94480.48765737189,
          Tlimit=1000,
          alow={14554.31116,122.5152439,-0.3058728672,0.02117309202,-3.49426119e-005,
              2.622639719e-008,-7.50805954e-012},
          blow={13891.49932,25.27867438},
          ahigh={-2392612.795,6932.79313,-2.513183892,0.00344654456,-7.569536839999999e-007,
              6.51429134e-011,-1.715768736e-015},
          bhigh={-30844.99064,53.6104836},
          R=86.6963215068496);

        constant IdealGases.Common.DataRecord OBrO(
          name="OBrO",
          MM=0.1119028,
          Hf=1357915.31579192,
          H0=101826.1383986817,
          Tlimit=1000,
          alow={34702.13230000001,-340.134182,3.93225162,0.01215938586,-1.901501702e-005,
              1.398631495e-008,-3.99289976e-012},
          blow={18759.55788,6.36123518},
          ahigh={-162450.466,-145.3689372,7.10582213,-4.14136207e-005,
              8.981833259999999e-009,-1.013712869e-012,4.63513314e-017},
          bhigh={16500.75386,-9.11181792},
          R=74.300839657274);

        constant IdealGases.Common.DataRecord BrOO(
          name="BrOO",
          MM=0.1119028,
          Hf=965123.3034383413,
          H0=114837.6984311385,
          Tlimit=1000,
          alow={-44176.199,495.963716,3.23988495,0.00594150211,-3.40269677e-006,-3.44477816e-011,
              4.81195795e-013},
          blow={8815.22198,16.07446878},
          ahigh={6172.483480000001,-658.504966,7.48395533,-0.0001920530746,
              4.22694617e-008,-4.83739261e-012,2.23974132e-016},
          bhigh={14603.5347,-9.85038024},
          R=74.300839657274);

        constant IdealGases.Common.DataRecord BrO3(
          name="BrO3",
          MM=0.1279022,
          Hf=1726480.740753482,
          H0=102428.5821510498,
          Tlimit=1000,
          alow={106390.1881,-1501.928813,9.70365743,0.00813300076,-1.531857845e-005,
              1.199117619e-008,-3.51274787e-012},
          blow={32331.3599,-27.3512543},
          ahigh={-282285.1113,-235.8973461,10.17525279,-6.97845105e-005,
              1.535701661e-008,-1.75445495e-012,8.10410015e-017},
          bhigh={24011.4014,-25.88197197},
          R=65.00648151478239);

        constant IdealGases.Common.DataRecord Br2(
          name="Br2",
          MM=0.159808,
          Hf=193419.6035242291,
          H0=60855.00725871045,
          Tlimit=1000,
          alow={7497.04754,-235.0884557,5.49193432,-0.002227573303,2.932401703e-006,-1.954889514e-009,
              5.31230789e-013},
          blow={3521.47505,-1.96415157},
          ahigh={-4311698.57,11112.68634,-5.55577561,0.00363051659,-2.754164226e-007,
              -6.21750676e-011,7.37534162e-015},
          bhigh={-70365.8416,78.7847802},
          R=52.02788346015218);

        constant IdealGases.Common.DataRecord BrBrO(
          name="BrBrO",
          MM=0.1758074,
          Hf=955591.1753430174,
          H0=74726.64973146751,
          Tlimit=1000,
          alow={16174.98037,-246.4406776,5.91285845,0.00498035428,-8.09995825e-006,
              6.072776260000001e-009,-1.753715313e-012},
          blow={19740.12093,2.009704963},
          ahigh={-85371.0175,-64.8704607,7.04715935,-1.843088186e-005,3.99226786e-009,
              -4.50068795e-013,2.055867395e-017},
          bhigh={18215.66655,-3.162186125},
          R=47.29307185021791);

        constant IdealGases.Common.DataRecord BrOBr(
          name="BrOBr",
          MM=0.1758074,
          Hf=612255.2634303221,
          H0=70526.37147241812,
          Tlimit=1000,
          alow={64050.6891,-1062.722566,9.907866289999999,-0.00447049247,
              3.91370107e-006,-1.805444867e-009,3.36613255e-013},
          blow={16429.21537,-23.50319399},
          ahigh={-96866.60249999999,-39.5739527,7.02943438,-1.171881908e-005,
              2.576958549e-009,-2.941186078e-013,1.357198784e-017},
          bhigh={10769.42321,-5.69777938},
          R=47.29307185021791);

        constant IdealGases.Common.DataRecord C(
          name="C",
          MM=0.0120107,
          Hf=59670127.46967287,
          H0=544172.696012722,
          Tlimit=1000,
          alow={649.503147,-0.964901086,2.504675479,-1.281448025e-005,
              1.980133654e-008,-1.606144025e-011,5.314483411e-015},
          blow={85457.6311,4.747924288},
          ahigh={-128913.6472,171.9528572,2.646044387,-0.000335306895,1.74209274e-007,
              -2.902817829e-011,1.642182385e-015},
          bhigh={84105.9785,4.130047418},
          R=692.2554055966764);

        constant IdealGases.Common.DataRecord Cplus(
          name="Cplus",
          MM=0.0120101514,
          Hf=150659589.6867712,
          H0=553638.482858759,
          Tlimit=1000,
          alow={2258.535929,-1.574575687,2.50363773,-5.20287837e-006,4.51690839e-009,
              -2.181431053e-012,4.495047033e-016},
          blow={216895.1913,4.345699505},
          ahigh={12551.12551,-34.1187467,2.543383218,-2.805120849e-005,
              9.751641969999999e-009,-1.736855394e-012,1.246191931e-016},
          bhigh={217100.1786,4.063913515},
          R=692.2870264566357);

        constant IdealGases.Common.DataRecord Cminus(
          name="Cminus",
          MM=0.0120112486,
          Hf=48980273.04172191,
          H0=517751.0021730797,
          Tlimit=1000,
          alow={4.67129153,-0.001986169369,2.500008638,-1.976750928e-008,
              2.478947477e-011,-1.610664044e-014,4.23650681e-018},
          blow={70012.18549999999,4.879570141},
          ahigh={4.25317572,0.0005778186479999999,2.499999424,2.836136231e-010,-7.32725342e-014,
              9.478507810000001e-018,-4.830487319999999e-022},
          bhigh={70012.17170000001,4.879624211},
          R=692.22378762521);

        constant IdealGases.Common.DataRecord CBr(
          name="CBr",
          MM=0.0919147,
          Hf=5335727.756278375,
          H0=104609.1212831027,
          Tlimit=1000,
          alow={4324.44688,-159.6366559,4.85785659,-0.000438943916,4.40886363e-007,-2.281330618e-010,
              5.44561822e-014},
          blow={58476.7725,0.1351169646},
          ahigh={1021862.102,-3243.48436,8.38822656,-0.002242155508,
              6.988355369999999e-007,-9.719134370000001e-011,4.71697624e-015},
          bhigh={78059.24059999999,-25.18386915},
          R=90.45856647522105);

        constant IdealGases.Common.DataRecord CBr2(
          name="CBr2",
          MM=0.1718187,
          Hf=1959177.429464895,
          H0=70986.5631622169,
          Tlimit=1000,
          alow={72481.97839999999,-1128.26123,9.822303379999999,-0.0038727481,
              2.904819596e-006,-1.061380159e-009,1.297474642e-013},
          blow={44377.71599999999,-23.61121795},
          ahigh={-744143.141,421.542783,8.796797740000001,-0.002726562507,
              1.336438546e-006,-2.304854483e-010,1.337493953e-014},
          bhigh={33646.1814,-15.99565135},
          R=48.39096093731357);

        constant IdealGases.Common.DataRecord CBr3(
          name="CBr3",
          MM=0.2517227,
          Hf=933566.9766771132,
          H0=61903.25703641347,
          Tlimit=1000,
          alow={85635.1626,-1275.764123,11.17190031,0.002341705749,-6.54067141e-006,
              5.73671714e-009,-1.777823046e-012},
          blow={32432.1589,-27.66468801},
          ahigh={-192649.8949,-132.4072178,10.09808665,-3.89504082e-005,
              8.55044501e-009,-9.747493679999999e-013,4.49424559e-017},
          bhigh={25415.76129,-18.66868947},
          R=33.03028292641069);

        constant IdealGases.Common.DataRecord CBr4(
          name="CBr4",
          MM=0.3316267000000001,
          Hf=239727.3802139574,
          H0=61434.48039618039,
          Tlimit=1000,
          alow={102308.3739,-1735.600709,16.51317914,-0.003147664747,2.924135486e-007,
              1.360605681e-009,-6.43175865e-013},
          blow={15005.02543,-55.3647676},
          ahigh={-205978.5072,-104.8517002,13.0777255,-3.086857556e-005,
              6.77530981e-009,-7.72183754e-013,3.55921824e-017},
          bhigh={5615.89394,-32.8378763},
          R=25.0717810116013);

        constant IdealGases.Common.DataRecord CCL(
          name="CCL",
          MM=0.0474637,
          Hf=9114566.668843769,
          H0=197943.1228496725,
          Tlimit=1000,
          alow={17070.70049,-14.63803497,2.334108251,0.00720209913,-1.034120045e-005,
              7.2281067e-009,-1.985123755e-012},
          blow={51233.503,12.00820386},
          ahigh={590050.763,-2075.31146,6.88001723,-0.001294796228,3.88313798e-007,-5.00698163e-011,
              2.218229619e-015},
          bhigh={63589.2205,-16.10664472},
          R=175.1753866639137);

        constant IdealGases.Common.DataRecord CCL2(
          name="CCL2",
          MM=0.08291670000000001,
          Hf=2688724.310060578,
          H0=137761.8501459899,
          Tlimit=1000,
          alow={75096.23150000001,-1034.728559,8.061704539999999,0.001487134213,-4.56481711e-006,
              3.95488581e-009,-1.166197091e-012},
          blow={30524.09293,-17.39691692},
          ahigh={-6437455.17,19584.13353,-16.04038625,0.01238833906,-3.013367274e-006,
              3.47346892e-010,-1.553272793e-014},
          bhigh={-99612.42159999999,155.6949315},
          R=100.2749988844225);

        constant IdealGases.Common.DataRecord CCL2Br2(
          name="CCL2Br2",
          MM=0.2427247,
          Hf=41198.93855054718,
          H0=77008.69338802355,
          Tlimit=1000,
          alow={101849.5619,-1740.854039,15.21338304,0.00112825651,-5.875405490000001e-006,
              5.65988697e-009,-1.821576512e-012},
          blow={6918.57219,-50.15385818999999},
          ahigh={-255334.7012,-159.8005477,13.1186093,-4.717443870000001e-005,
              1.036912808e-008,-1.183321687e-012,5.46061269e-017},
          bhigh={-2588.63698,-34.61705319},
          R=34.25474210082452);

        constant IdealGases.Common.DataRecord CCL3(
          name="CCL3",
          MM=0.1183697,
          Hf=600897.0200988936,
          H0=121652.7540409412,
          Tlimit=1000,
          alow={34144.7165,-554.796973,6.84554439,0.01242006495,-2.036896881e-005,
              1.554979993e-008,-4.56894011e-012},
          blow={9388.56882,-7.143598465},
          ahigh={-542757.254,680.902062,9.047723619999999,0.0001324277766,
              6.30126304e-008,-2.6566392e-011,2.105668053e-015},
          bhigh={386.621615,-15.28745849},
          R=70.24155674974254);

        constant IdealGases.Common.DataRecord CCL3Br(
          name="CCL3Br",
          MM=0.1982737,
          Hf=-216871.9300643504,
          H0=90705.67099922984,
          Tlimit=1000,
          alow={104966.8463,-1793.828482,14.89250892,0.00239712831,-7.78961547e-006,
              7.01661711e-009,-2.196069746e-012},
          blow={910.1349309999999,-50.58348139},
          ahigh={-277232.4186,-184.0310333,13.13673812,-5.44391001e-005,
              1.197658923e-008,-1.367818632e-012,6.316164790000001e-017},
          bhigh={-8895.857689999999,-36.69528209},
          R=41.93431604897675);

        constant IdealGases.Common.DataRecord CCL4(
          name="CCL4",
          MM=0.1538227,
          Hf=-621494.746874161,
          H0=111547.3333909754,
          Tlimit=1000,
          alow={109338.5626,-1861.731846,14.49632467,0.00394948516,-1.010805379e-005,
              8.64551417e-009,-2.642368852e-012},
          blow={-4948.00623,-51.8028475},
          ahigh={-304307.8255,-216.8170491,13.16132386,-6.43112489e-005,
              1.416482497e-008,-1.61934332e-012,7.48397435e-017},
          bhigh={-15123.2007,-39.968443},
          R=54.05230827439643);

        constant IdealGases.Common.DataRecord CF(
          name="CF",
          MM=0.0310091032,
          Hf=7813834.487157951,
          H0=292337.0257286254,
          Tlimit=1000,
          alow={-45827.8668,797.263589,-1.364936319,0.01312359375,-1.457012892e-005,
              8.25327668e-009,-1.896351845e-012},
          blow={24382.5962,32.4806528},
          ahigh={-132980.71,-121.4340891,4.45241362,0.0001293786948,-3.67055059e-008,
              6.590212389999999e-012,-3.73126161e-016},
          bhigh={28159.34108,-0.664046873},
          R=268.1300373756052);

        constant IdealGases.Common.DataRecord CFplus(
          name="CFplus",
          MM=0.0310085546,
          Hf=36943485.87921605,
          H0=280487.0821034657,
          Tlimit=1000,
          alow={-59752.132,927.6863649999999,-1.866581982,0.01384340912,-1.51342886e-005,
              8.51855634e-009,-1.959577655e-012},
          blow={132351.941,34.1201319},
          ahigh={-80537.6278,-339.027509,4.7083735,-3.96314831e-005,2.497996218e-008,
              -5.23679043e-012,5.31394913e-016},
          bhigh={138133.7068,-3.92051473},
          R=268.1347811032766);

        constant IdealGases.Common.DataRecord CFBr3(
          name="CFBr3",
          MM=0.2707211032,
          Hf=-443260.6050343547,
          H0=67387.07763953881,
          Tlimit=1000,
          alow={51492.4428,-936.479664,10.44260886,0.01205370047,-1.876290291e-005,
              1.344488618e-008,-3.73054576e-012},
          blow={-12432.46293,-23.63948551},
          ahigh={-272915.8956,-332.816465,13.24822519,-9.92707754e-005,
              2.193640054e-008,-2.515424945e-012,1.165680878e-016},
          bhigh={-17301.85479,-36.2681843},
          R=30.71231574384335);

        constant IdealGases.Common.DataRecord CFCL(
          name="CFCL",
          MM=0.0664621032,
          Hf=388879.8692124447,
          H0=164039.0760309253,
          Tlimit=1000,
          alow={15419.97945,-82.74039809999999,2.501701822,0.01390738086,-1.8957347e-005,
              1.261934581e-008,-3.33345382e-012},
          blow={2411.755114,13.31517094},
          ahigh={-268163.0077,-2.328091539,6.83463383,0.0001565270633,-5.967755160000001e-008,
              9.82092446e-012,-5.05889721e-016},
          bhigh={301.7669604,-9.005085128999999},
          R=125.1009462487188);

        constant IdealGases.Common.DataRecord CFCLBr2(
          name="CFCLBr2",
          MM=0.2262701032,
          Hf=-773411.9422985264,
          H0=77332.45688465308,
          Tlimit=1000,
          alow={58987.9974,-1050.714861,10.39349401,0.01273690622,-1.999097478e-005,
              1.43820423e-008,-4.00013035e-012},
          blow={-18377.99602,-24.17479131},
          ahigh={-296081.1596,-353.12762,13.26346169,-0.0001053860298,2.32908508e-008,
              -2.670979639e-012,1.237844667e-016},
          bhigh={-23875.94306,-36.84977271},
          R=36.74578250689551);

        constant IdealGases.Common.DataRecord CFCL2(
          name="CFCL2",
          MM=0.1019151032,
          Hf=-1030269.280049161,
          H0=129685.9207811703,
          Tlimit=1000,
          alow={26113.98792,-335.35659,4.09467308,0.01960244711,-2.762775193e-005,
              1.880124302e-008,-5.0474103e-012},
          blow={-12512.98871,6.870882561},
          ahigh={-265311.8323,-446.972417,10.33334881,-0.0001333673368,
              2.948755634e-008,-3.3833062e-012,1.568746348e-016},
          bhigh={-13931.60489,-25.56817972},
          R=81.58233410884678);

        constant IdealGases.Common.DataRecord CFCL2Br(
          name="CFCL2Br",
          MM=0.1818191032,
          Hf=-1292493.450160192,
          H0=92017.68519117852,
          Tlimit=1000,
          alow={65299.59220000001,-1135.235485,10.09526872,0.01401380147,-2.191705096e-005,
              1.573404132e-008,-4.36934034e-012},
          blow={-25044.88145,-24.51093103},
          ahigh={-321545.505,-388.412962,13.28990796,-0.0001160048581,
              2.564498787e-008,-2.941639768e-012,1.363542881e-016},
          bhigh={-30974.21144,-38.71356695},
          R=45.72936426187367);

        constant IdealGases.Common.DataRecord CFCL3(
          name="CFCL3",
          MM=0.1373681032,
          Hf=-2065253.820873898,
          H0=116938.2383959423,
          Tlimit=1000,
          alow={74001.74000000001,-1252.282466,10.01327229,0.01475107601,-2.315635251e-005,
              1.664207025e-008,-4.62292996e-012},
          blow={-30205.08601,-27.08387087},
          ahigh={-345046.478,-417.782145,13.31196736,-0.0001248759531,
              2.761391353e-008,-3.16820764e-012,1.468834601e-016},
          bhigh={-36740.6719,-41.56886057000001},
          R=60.52694771430753);

        constant IdealGases.Common.DataRecord CF2(
          name="CF2",
          MM=0.0500075064,
          Hf=-3731439.806404744,
          H0=206987.1654308282,
          Tlimit=1000,
          alow={-37970.2627,873.1800030000001,-3.46019157,0.02746253741,-3.4746219e-005,
              2.204470693e-008,-5.62175085e-012},
          blow={-27467.97157,44.5677807},
          ahigh={-108642.8547,-585.498914,7.01864895,0.000392918615,-2.603822675e-007,
              6.142196389999999e-011,-4.17283326e-015},
          bhigh={-21529.45157,-13.56143285},
          R=166.2644790462898);

        constant IdealGases.Common.DataRecord CF2plus(
          name="CF2plus",
          MM=0.0500069578,
          Hf=18984184.21686112,
          H0=206811.2009805164,
          Tlimit=1000,
          alow={-28923.73827,604.935461,-0.972186666,0.01808478341,-1.980065782e-005,
              1.101640055e-008,-2.500457119e-012},
          blow={110275.567,32.4759147},
          ahigh={-64889.6607,-1064.283593,7.7857021,-0.0003158347626,
              7.130804079999999e-008,-8.53318359e-012,4.25163882e-016},
          bhigh={117844.6465,-18.19424707},
          R=166.2663030463333);

        constant IdealGases.Common.DataRecord CF2Br2(
          name="CF2Br2",
          MM=0.2098155064,
          Hf=-1811114.948175251,
          H0=77591.96295512693,
          Tlimit=1000,
          alow={12614.04028,-281.5725114,5.09803213,0.02502548939,-3.43885319e-005,
              2.297615553e-008,-6.08016143e-012},
          blow={-46427.6375,3.094167118},
          ahigh={-332766.93,-618.435249,13.46170049,-0.0001849172548,4.09259134e-008,
              -4.69981043e-012,2.180811799e-016},
          bhigh={-47151.8661,-41.0536924},
          R=39.62753822469625);

        constant IdealGases.Common.DataRecord CF2CL(
          name="CF2CL",
          MM=0.0854605064,
          Hf=-3217860.642117609,
          H0=145473.8981045869,
          Tlimit=1000,
          alow={8914.558349999999,-17.68816959,1.607015025,0.02473626554,-3.27073894e-005,
              2.12635183e-008,-5.509831110000001e-012},
          blow={-34273.0625,19.2968069},
          ahigh={-280234.6654,-686.031485,10.51143635,-0.0002046954963,
              4.52889718e-008,-5.20022903e-012,2.41297145e-016},
          bhigh={-33081.7948,-28.74899785},
          R=97.29022621377774);

        constant IdealGases.Common.DataRecord CF2CLBr(
          name="CF2CLBr",
          MM=0.1653645064,
          Hf=-2630552.404926478,
          H0=93903.11946651207,
          Tlimit=1000,
          alow={26966.99365,-467.883227,5.24480942,0.02530121349,-3.508443520000001e-005,
              2.354353958e-008,-6.24616113e-012},
          blow={-51983.8273,0.8532887803},
          ahigh={-359282.884,-653.928359,13.48831524,-0.0001956099469,4.32977597e-008,
              -4.97264437e-012,2.30757505e-016},
          bhigh={-53651.4117,-42.24913908000001},
          R=50.27966509262958);

        constant IdealGases.Common.DataRecord CF2CL2(
          name="CF2CL2",
          MM=0.1209135064,
          Hf=-4059099.885635274,
          H0=123072.2228066988,
          Tlimit=1000,
          alow={38412.5875,-613.949982,5.26966719,0.02574105783,-3.58737648e-005,
              2.41160013e-008,-6.4022369e-012},
          blow={-57845.4133,-1.957454856},
          ahigh={-382744.855,-693.37748,13.51791274,-0.0002075114435,4.59402161e-008,
              -5.276874600000001e-012,2.449037044e-016},
          bhigh={-60215.2777,-44.79580046},
          R=68.76379858255437);

        constant IdealGases.Common.DataRecord CF3(
          name="CF3",
          MM=0.0690059096,
          Hf=-6773332.932053692,
          H0=166528.7808915426,
          Tlimit=1000,
          alow={-29783.07106,715.367883,-3.49818538,0.0359545799,-4.50797443e-005,
              2.82180845e-008,-7.098047020000001e-012},
          blow={-60599.9703,45.0259264},
          ahigh={-299730.5557,-1046.989457,10.77923191,-0.0003116087076,
              6.89135143e-008,-7.91122564e-012,3.67059302e-016},
          bhigh={-54253.044,-34.1703879},
          R=120.489274733073);

        constant IdealGases.Common.DataRecord CF3plus(
          name="CF3plus",
          MM=0.06900536099999999,
          Hf=6138906.801748347,
          H0=167251.9327882366,
          Tlimit=1000,
          alow={-35874.6354,374.35067,0.778741393,0.01929435768,-1.89281577e-005,
              9.36390876e-009,-1.885759656e-012},
          blow={47755.8172,22.24044005},
          ahigh={-29109.19531,-1996.658183,11.44279678,-0.000565339304,
              1.232297113e-007,-1.399758046e-011,6.44301795e-016},
          bhigh={59023.458,-40.80349990000001},
          R=120.4902326356934);

        constant IdealGases.Common.DataRecord CF3Br(
          name="CF3Br",
          MM=0.1489099096,
          Hf=-4356996.80258217,
          H0=96998.43374292129,
          Tlimit=1000,
          alow={-5439.48901,124.361519,0.923194195,0.0348104438,-4.54964549e-005,
              2.932836552e-008,-7.54800036e-012},
          blow={-80233.9676,22.32999096},
          ahigh={-383408.851,-971.9093300000001,13.72477396,-0.0002901710612,
              6.421892200000001e-008,-7.37568877e-012,3.42315425e-016},
          bhigh={-77653.0631,-47.1736721},
          R=55.83558557206995);

        constant IdealGases.Common.DataRecord CF3CL(
          name="CF3CL",
          MM=0.1044589096,
          Hf=-6741406.766512906,
          H0=132020.8209410603,
          Tlimit=1000,
          alow={14994.09978,-136.5768572,1.45291237,0.0340476507,-4.47377764e-005,
              2.888115112e-008,-7.43417133e-012},
          blow={-85471.6664,17.27327095},
          ahigh={-406604.2119999999,-1022.626507,13.76252628,-0.0003052722979,
              6.75596604e-008,-7.75931525e-012,3.60119229e-016},
          bhigh={-84105.5937,-49.13411939},
          R=79.59562311954289);

        constant IdealGases.Common.DataRecord CF4(
          name="CF4",
          MM=0.0880043128,
          Hf=-10603116.71452538,
          H0=144655.558289866,
          Tlimit=1000,
          alow={9817.458500000001,116.3343483,-1.288338636,0.0395956691,-4.99624421e-005,
              3.125339346e-008,-7.841700320000001e-012},
          blow={-113850.2297,29.38656548},
          ahigh={-416445.678,-1414.797167,14.05124837,-0.000419909386,9.27892161e-008,
              -1.06457583e-011,4.937099680000001e-016},
          bhigh={-109469.1149,-54.87105},
          R=94.47800608244737);

        constant IdealGases.Common.DataRecord CHplus(
          name="CHplus",
          MM=0.0130180914,
          Hf=125254229.2029076,
          H0=662777.9552999605,
          Tlimit=1000,
          alow={30196.07105,-461.814131,6.22564119,-0.0077757118,1.094489485e-005,-6.67548791e-009,
              1.565232409e-012},
          blow={197249.1928,-14.31512811},
          ahigh={-7102094.67,18283.54883,-13.12691402,0.006191717360000001,-2.909421253e-007,
              -1.134243575e-010,1.105962085e-014},
          bhigh={75412.9604,124.3984829},
          R=638.6859443927395);

        constant IdealGases.Common.DataRecord CHBr3(
          name="CHBr3",
          MM=0.25273064,
          Hf=66236.5275536041,
          H0=62938.94954723337,
          Tlimit=1000,
          alow={43465.7686,-499.963442,5.62022211,0.02079346321,-2.921336328e-005,
              2.066942448e-008,-5.78122091e-012},
          blow={2627.830062,1.247904015},
          ahigh={627423.495,-3378.7111,14.87852612,-0.000593274527,1.082421577e-007,-1.061012665e-011,
              4.31915245e-016},
          bhigh={18772.34659,-53.1190965},
          R=32.89855159627658);

        constant IdealGases.Common.DataRecord CHCL(
          name="CHCL",
          MM=0.04847164,
          Hf=6129357.290159771,
          H0=210441.4663914817,
          Tlimit=1000,
          alow={-269991.2334,4351.19973,-22.75911813,0.07550621760000001,-9.07199797e-005,
              5.25697186e-008,-1.189769182e-011},
          blow={14168.6268,152.0980812},
          ahigh={-954806.1900000001,2174.413794,4.86764537,0.0008321641859999999,-1.536948638e-007,
              1.529236537e-011,-6.596159359999999e-016},
          bhigh={18801.2181,2.674761385},
          R=171.5327147998293);

        constant IdealGases.Common.DataRecord CHCLBr2(
          name="CHCLBr2",
          MM=0.20827964,
          Hf=48012.37413316059,
          H0=73416.85437904541,
          Tlimit=1000,
          alow={38153.8025,-408.4175110000001,4.63924402,0.02325990646,-3.22298886e-005,
              2.254671151e-008,-6.25650774e-012},
          blow={1483.809044,6.175235281},
          ahigh={604286.53,-3438.24101,14.94162631,-0.000622842797,1.153724426e-007,-1.147291377e-011,
              4.733482859999999e-016},
          bhigh={18224.60958,-54.07258924},
          R=39.91975403836881);

        constant IdealGases.Common.DataRecord CHCL2(
          name="CHCL2",
          MM=0.08392464,
          Hf=1141500.27929819,
          H0=152517.7826202174,
          Tlimit=1000,
          alow={56385.5613,-656.245542,6.06881802,0.0097441226,-1.275310131e-005,
              8.55238672e-009,-2.2315827e-012},
          blow={13304.47798,-4.533535456},
          ahigh={884939.3709999999,-3526.96973,11.86372153,-0.000500237612,
              6.1338604e-008,-1.885433405e-012,-1.234221421e-016},
          bhigh={30711.36475,-40.88905858},
          R=99.0706900857722);

        constant IdealGases.Common.DataRecord CHCL2Br(
          name="CHCL2Br",
          MM=0.16382864,
          Hf=-274677.248129509,
          H0=89910.37830748031,
          Tlimit=1000,
          alow={32940.2265,-327.530117,3.77323524,0.02536466143,-3.47266699e-005,
              2.404666618e-008,-6.62173093e-012},
          blow={-5425.56508,9.433412003999999},
          ahigh={592487.644,-3509.47561,14.99349593,-0.000643306257,1.198581809e-007,
              -1.198476716e-011,4.96994807e-016},
          bhigh={11972.51405,-56.02687781},
          R=50.75102863577455);

        constant IdealGases.Common.DataRecord CHCL3(
          name="CHCL3",
          MM=0.11937764,
          Hf=-860295.1105416392,
          H0=119833.9488031427,
          Tlimit=1000,
          alow={33953.3329,-304.7428785,2.923672263,0.02830547858,-3.71242469e-005,
              2.551365915e-008,-6.98765955e-012},
          blow={-12350.63157,11.15556408},
          ahigh={613605.274,-3715.08717,15.10777247,0.0002362584336,1.297140438e-007,
              -1.267494791e-011,5.259022309999999e-016},
          bhigh={6203.31345,-59.92576539},
          R=69.64848693607949);

        constant IdealGases.Common.DataRecord CHF(
          name="CHF",
          MM=0.03201704320000001,
          Hf=3398190.123939989,
          H0=311746.9635672041,
          Tlimit=1000,
          alow={-78685.85829999999,1300.218466,-3.94768525,0.02114995848,-2.239962738e-005,
              1.283155181e-008,-2.904778136e-012},
          blow={5824.38972,47.8545377},
          ahigh={3994085.42,-7962.756200000001,6.75559509,0.00494983657,-2.101763812e-006,
              3.34823295e-010,-1.88682505e-014},
          bhigh={67061.34940000001,-23.81240379},
          R=259.6889396707313);

        constant IdealGases.Common.DataRecord CHFBr2(
          name="CHFBr2",
          MM=0.1918250432,
          Hf=-912289.6420648375,
          H0=74857.56687685709,
          Tlimit=1000,
          alow={-18201.9798,436.224967,-0.373385417,0.033886314,-4.37129853e-005,
              2.889569295e-008,-7.683915110000001e-012},
          blow={-24656.11586,33.2047879},
          ahigh={593575.1630000001,-3742.65658,15.17184031,-0.0007158039030000001,
              1.360636972e-007,-1.385897355e-011,5.844209110000001e-016},
          bhigh={-2347.676027,-57.6578343},
          R=43.34403819907494);

        constant IdealGases.Common.DataRecord CHFCL(
          name="CHFCL",
          MM=0.06747004320000001,
          Hf=-1232320.301819519,
          H0=165198.5751211139,
          Tlimit=1000,
          alow={-71130.0851,1377.872745,-6.48461724,0.0389097249,-4.80073522e-005,
              3.073300019e-008,-7.98285341e-012},
          blow={-17517.93745,63.73895867},
          ahigh={662216.358,-3809.00798,12.23880469,-0.000746718275,1.43476785e-007,-1.475406631e-011,
              6.27378068e-016},
          bhigh={10189.87746,-46.58365563},
          R=123.2320538961801);

        constant IdealGases.Common.DataRecord CHFCLBr(
          name="CHFCLBr",
          MM=0.1473740432,
          Hf=-1560654.746289813,
          H0=93552.3359516542,
          Tlimit=1000,
          alow={-19592.40614,490.172327,-1.259408503,0.0361770847,-4.65424496e-005,
              3.065240659e-008,-8.1239036e-012},
          blow={-31399.00705,37.10450945},
          ahigh={580011.7509999999,-3823.33785,15.22809062,-0.000737390631,
              1.407097155e-007,-1.438245319e-011,6.08386715e-016},
          bhigh={-8552.249899999999,-59.03677705},
          R=56.41747908562503);

        constant IdealGases.Common.DataRecord CHFCL2(
          name="CHFCL2",
          MM=0.1029230432,
          Hf=-2768087.603534833,
          H0=129167.984026341,
          Tlimit=1000,
          alow={-17349.59015,492.49132,-1.854635884,0.0378278628,-4.86334304e-005,
              3.19719763e-008,-8.45905799e-012},
          blow={-37887.4927,38.01530544},
          ahigh={564011.302,-3887.0833,15.27760246,-0.0007576487420000001,
              1.452498792e-007,-1.490796515e-011,6.3289985e-016},
          bhigh={-14847.36185,-61.67535516},
          R=80.78338670809922);

        constant IdealGases.Common.DataRecord CHF2(
          name="CHF2",
          MM=0.0510154464,
          Hf=-4682895.414201452,
          H0=214052.8167562991,
          Tlimit=1000,
          alow={-146969.0117,2553.397313,-13.0262763,0.0543812846,-6.71341879e-005,
              4.28765173e-008,-1.110824216e-011},
          blow={-41793.7216,99.39930250000001},
          ahigh={552680.655,-3696.00917,12.08610573,-0.00064985881,1.12084622e-007,-9.814147009999999e-012,
              3.34919239e-016},
          bhigh={-9437.06842,-47.044162},
          R=162.9795010477454);

        constant IdealGases.Common.DataRecord CHF2Br(
          name="CHF2Br",
          MM=0.1309194464,
          Hf=-3223356.129315255,
          H0=100592.4204702412,
          Tlimit=1000,
          alow={-77145.1016,1422.544046,-6.68439365,0.0473838915,-5.83058875e-005,
              3.69572047e-008,-9.49548528e-012},
          blow={-58785.00930000001,66.0863909},
          ahigh={576770.684,-4177.71608,15.50150581,-0.000849014729,1.657177491e-007,
              -1.727828054e-011,7.43562723e-016},
          bhigh={-29661.47348,-63.4938014},
          R=63.50830398867315);

        constant IdealGases.Common.DataRecord CHF2CL(
          name="CHF2CL",
          MM=0.08646844640000001,
          Hf=-5583539.662162821,
          H0=143029.0067059653,
          Tlimit=1000,
          alow={-72405.7941,1365.510973,-7.15322208,0.0485498797,-5.94878167e-005,
              3.75096619e-008,-9.58952442e-012},
          blow={-65659.32799999999,66.5721223},
          ahigh={562949.373,-4298.673049999999,15.58191398,-0.000878927848,
              1.720248689e-007,-1.797910869e-011,7.753391699999999e-016},
          bhigh={-36340.6716,-66.11261479999999},
          R=96.15613956491762);

        constant IdealGases.Common.DataRecord CHF3(
          name="CHF3",
          MM=0.0700138496,
          Hf=-9902326.524836596,
          H0=165208.5418254162,
          Tlimit=1000,
          alow={-109513.226,2042.273879,-11.66213079,0.0578580777,-6.857135060000001e-005,
              4.21211838e-008,-1.053196888e-011},
          blow={-93954.70050000001,89.3592065},
          ahigh={568523.2020000001,-4728.3617,15.86728516,-0.000738234865,
              1.970841706e-007,-2.062115571e-011,8.970599639999999e-016},
          bhigh={-59231.9637,-71.6127322},
          R=118.7546756463453);

        constant IdealGases.Common.DataRecord CHI3(
          name="CHI3",
          MM=0.39373205,
          Hf=535576.4154835757,
          H0=43574.2708778724,
          Tlimit=1000,
          alow={52529.2359,-724.216647,8.01862334,0.01470995487,-2.163843469e-005,
              1.594571452e-008,-4.60143796e-012},
          blow={26781.86915,-8.605054839999999},
          ahigh={629420.543,-3184.06157,14.79622178,-0.00057495555,1.062025541e-007,-1.052804696e-011,
              4.32972002e-016},
          bhigh={41036.098,-49.0135739},
          R=21.11708203586678);

        constant IdealGases.Common.DataRecord CH2(
          name="CH2",
          MM=0.01402658,
          Hf=27830341.89374745,
          H0=0,
          Tlimit=1000,
          alow={32189.2173,-287.7601815,4.20358382,0.00345540596,-6.74619334e-006,
              7.65457164e-009,-2.870328419e-012},
          blow={4.733624710e+004,-2.143628603e+000},
          ahigh={2550418.031,-7971.62539,12.28924487,-0.001699122922,2.991728605e-007,
              -2.767007492e-011,1.051341740e-015},
          bhigh={9.642216890e+004,-6.094739910e+001},
          R=592.7654495964092);

        constant IdealGases.Common.DataRecord CH2Br2(
          name="CH2Br2",
          MM=0.17383458,
          Hf=-84965.83361032081,
          H0=72565.5792995847,
          Tlimit=1000,
          alow={4797.30801,361.385924,-1.819592338,0.0347704834,-4.49854618e-005,
              3.068623685e-008,-8.43484634e-012},
          blow={-4481.49706,38.2712359},
          ahigh={1528284.441,-6673.414949999999,16.70213316,-0.001166351237,
              2.122634493e-007,-2.07547224e-011,8.4285777e-016},
          bhigh={36007.0664,-74.48065490000001},
          R=47.82979312861688);

        constant IdealGases.Common.DataRecord CH2CL(
          name="CH2CL",
          MM=0.04947958,
          Hf=2409074.612193556,
          H0=221908.1083550022,
          Tlimit=1000,
          alow={-31885.8563,633.316321,-1.164065495,0.0216058608,-2.545462163e-005,
              1.693887757e-008,-4.6600786e-012},
          blow={10201.4254,32.30835289},
          ahigh={1662438.334,-6441.12572,13.59753722,-0.00114053681,2.087760159e-007,
              -2.052347186e-011,8.37577227e-016},
          bhigh={52129.0612,-61.48586271},
          R=168.0384514177364);

        constant IdealGases.Common.DataRecord CH2CLBr(
          name="CH2CLBr",
          MM=0.12938358,
          Hf=-347803.0210634147,
          H0=94221.74745821687,
          Tlimit=1000,
          alow={-13079.48755,645.586038,-3.57734991,0.0383368723,-4.86425205e-005,
              3.26162233e-008,-8.852877389999999e-012},
          blow={-9402.27253,47.48806758},
          ahigh={1525016.309,-6823.33416,16.82769102,-0.001219735119,2.244964495e-007,
              -2.219063248e-011,9.104705129999999e-016},
          bhigh={33202.3992,-76.37571062000001},
          R=64.26218844771493);

        constant IdealGases.Common.DataRecord CH2CL2(
          name="CH2CL2",
          MM=0.08493258000000001,
          Hf=-1118534.25387525,
          H0=139570.4333955238,
          Tlimit=1000,
          alow={-25098.41179,868.766738,-5.09466921,0.0415004999,-5.19977215e-005,
              3.44594426e-008,-9.270292519999999e-012},
          blow={-16389.7884,53.9689032},
          ahigh={1529279.337,-6976.95476,16.94154931,-0.001265053995,2.344766734e-007,
              -2.333227421e-011,9.632834730000001e-016},
          bhigh={28063.18171,-79.49453509999999},
          R=97.89496563038588);

        constant IdealGases.Common.DataRecord CH2F(
          name="CH2F",
          MM=0.0330249832,
          Hf=-962907.3785569707,
          H0=336987.3023886958,
          Tlimit=1000,
          alow={-85697.1253,1392.226749,-4.38205259,0.02645916948,-2.848145663e-005,
              1.732706028e-008,-4.44206144e-012},
          blow={-11694.44586,50.494992},
          ahigh={2535399.502,-9358.43902,17.00366206,-0.003062919929,
              7.612869080000001e-007,-9.664554980000001e-011,4.8447681e-015},
          bhigh={52283.9131,-87.0755157},
          R=251.7630955221803);

        constant IdealGases.Common.DataRecord CH2FBr(
          name="CH2FBr",
          MM=0.1129289832,
          Hf=-1903851.375507647,
          H0=102919.4248514229,
          Tlimit=1000,
          alow={-92561.0953,1811.985865,-9.69834687,0.0503584867,-6.07027268e-005,
              3.8782508e-008,-1.012615992e-011},
          blow={-35375.0962,81.4039605},
          ahigh={1539975.462,-7231.55136,17.14566439,-0.001350184394,2.538022824e-007,
              -2.558977386e-011,1.069310946e-015},
          bhigh={15096.04224,-80.62053710000001},
          R=73.62566955265032);

        constant IdealGases.Common.DataRecord CH2FCL(
          name="CH2FCL",
          MM=0.0684779832,
          Hf=-3880079.225230454,
          H0=164320.8002656247,
          Tlimit=1000,
          alow={-107134.0332,2081.328396,-11.55723697,0.0544148211,-6.51862274e-005,
              4.13315988e-008,-1.071935103e-011},
          blow={-42647.5621,90.35923546999999},
          ahigh={1536120.418,-7378.93973,17.25797178,-0.001395645457,2.639247747e-007,
              -2.675653563e-011,1.123582778e-015},
          bhigh={9813.71046,-83.13642553},
          R=121.4181786825755);

        constant IdealGases.Common.DataRecord CH2F2(
          name="CH2F2",
          MM=0.0520233864,
          Hf=-8694166.821866099,
          H0=205548.4607976231,
          Tlimit=1000,
          alow={-181991.75,3174.42789,-17.14256906,0.06411353830000001,-7.31359212e-005,
              4.426384159999999e-008,-1.103877216e-011},
          blow={-70270.5895,120.7331926},
          ahigh={1546609.496,-7876.88333,17.68770469,-0.001581298721,3.068917255e-007,
              -3.18340546e-011,1.363827177e-015},
          bhigh={-9800.13596,-89.0742036},
          R=159.8218142908129);

        constant IdealGases.Common.DataRecord CH2I2(
          name="CH2I2",
          MM=0.26783552,
          Hf=438964.9289235423,
          H0=49472.25819786711,
          Tlimit=1000,
          alow={27381.33757,-89.7256804,1.387869408,0.02733482611,-3.61940877e-005,
              2.53918761e-008,-7.145585160000001e-012},
          blow={13387.67276,22.41870165},
          ahigh={1512892.716,-6442.9124,16.59026137,-0.00113555152,2.07375025e-007,-2.033902231e-011,
              8.282283700000001e-016},
          bhigh={50582.1903,-71.2523514},
          R=31.0432014394506);

        constant IdealGases.Common.DataRecord CH3(
          name="CH3",
          MM=0.01503452,
          Hf=9754753.726756824,
          H0=0,
          Tlimit=1000,
          alow={-28761.88806,509.326866,0.2002143949,0.01363605829,-1.433989346e-005,
              1.013556725e-008,-3.027331936e-012},
          blow={1.408271825e+004,2.022772791e+001},
          ahigh={2760802.663,-9336.53117,14.87729606,-0.001439429774,2.444477951e-007,
              -2.224555778e-011,8.395065760e-016},
          bhigh={7.481809480e+004,-7.919682400e+001},
          R=553.0254374599256);

        constant IdealGases.Common.DataRecord CH3Br(
          name="CH3Br",
          MM=0.09493852,
          Hf=-397520.4163705101,
          H0=111784.5001164965,
          Tlimit=1000,
          alow={-71155.85769999999,1524.705928,-8.230445209999999,0.0423997321,-4.94697989e-005,
              3.19443334e-008,-8.531237080000001e-012},
          blow={-12517.53591,70.48127769999999},
          ahigh={2524874.348,-10118.76098,18.65902163,-0.00179767369,3.29852011e-007,
              -3.25091203e-011,1.330179925e-015},
          bhigh={55405.7639,-97.7866446},
          R=87.57743432275962);

        constant IdealGases.Common.DataRecord CH3CL(
          name="CH3CL",
          MM=0.05048752,
          Hf=-1621588.859979654,
          H0=206311.2626645159,
          Tlimit=1000,
          alow={-98419.71100000001,1983.700841,-10.84512305,0.0477798005,-5.51551626e-005,
              3.50617614e-008,-9.23610396e-012},
          blow={-19946.89506,83.99658330999999},
          ahigh={2522463.305,-10301.15447,18.82725852,-0.001872291294,3.47337286e-007,
              -3.45888722e-011,1.428941079e-015},
          bhigh={51114.1741,-100.6571389},
          R=164.6837079737725);

        constant IdealGases.Common.DataRecord CH3F(
          name="CH3F",
          MM=0.0340329232,
          Hf=-6984413.257806781,
          H0=297806.5957025989,
          Tlimit=1000,
          alow={-202982.1878,3447.33113,-17.68994275,0.059452758,-6.46952825e-005,
              3.85941804e-008,-9.626541530000001e-012},
          blow={-45779.26220000001,122.8382176},
          ahigh={2561903.188,-10860.52758,19.2944692,-0.002070973131,3.92912453e-007,
              -3.99450342e-011,1.681447081e-015},
          bhigh={35635.0851,-106.1158456},
          R=244.3067247305985);

        constant IdealGases.Common.DataRecord CH3I(
          name="CH3I",
          MM=0.14193899,
          Hf=96980.82253509061,
          H0=76200.58449056177,
          Tlimit=1000,
          alow={-45164.6274,1086.208429,-5.66317627,0.0368317171,-4.3213935e-005,
              2.833483666e-008,-7.684383690000001e-012},
          blow={-4303.83065,56.88562690000001},
          ahigh={2511915.982,-9960.289989999999,18.56907132,-0.001768191331,
              3.24220626e-007,-3.19294201e-011,1.305407821e-015},
          bhigh={60669.29949999999,-95.9077704},
          R=58.57778754097095);

        constant IdealGases.Common.DataRecord CH2OH(
          name="CH2OH",
          MM=0.03103392,
          Hf=-573565.9562182283,
          H0=379616.8837194915,
          Tlimit=1000,
          alow={-156007.6238,2685.446279,-13.4202242,0.0575713947,-7.28444999e-005,
              4.836648860000001e-008,-1.293492601e-011},
          blow={-15968.2041,99.630337},
          ahigh={2250349.506,-8173.186060000001,15.99639179,-0.0008704133719999999,
              6.06918395e-008,4.40834946e-012,-5.7023095e-016},
          bhigh={46453.1343,-78.3515845},
          R=267.9156226477351);

        constant IdealGases.Common.DataRecord CH2OHplus(
          name="CH2OHplus",
          MM=0.0310333714,
          Hf=23084826.67790326,
          H0=327035.0446036295,
          Tlimit=1000,
          alow={-107708.0841,2252.082711,-11.88167865,0.0460231696,-4.87973688e-005,
              2.876413471e-008,-7.1002265e-012},
          blow={74844.4777,90.2792857},
          ahigh={2603333.487,-10099.5381,17.30843898,-0.000694639032,3.009715083e-008,
              5.22148598e-012,-5.09018379e-016},
          bhigh={146540.2426,-92.2395528},
          R=267.9203587915685);

        constant IdealGases.Common.DataRecord CH3O(
          name="CH3O",
          MM=0.03103392,
          Hf=418896.4848784814,
          H0=364183.7705323724,
          Tlimit=1000,
          alow={86571.17660000001,-663.1685250000001,2.257455672,0.02266283789,-2.970566403e-005,
              2.199341353e-008,-6.58804338e-012},
          blow={4174.102129999999,8.174777900000001},
          ahigh={2101188.243,-8841.968800000001,18.22645731,-0.001743485034,
              3.34043427e-007,-3.43067316e-011,1.473897771e-015},
          bhigh={53095.82060000001,-94.2250059},
          R=267.9156226477351);

        constant IdealGases.Common.DataRecord CH4(
          name="CH4",
          MM=0.01604246,
          Hf=-4650159.63885838,
          H0=624355.7409524474,
          Tlimit=1000,
          alow={-176685.0998,2786.18102,-12.0257785,0.0391761929,-3.61905443e-005,
              2.026853043e-008,-4.976705489999999e-012},
          blow={-23313.1436,89.0432275},
          ahigh={3730042.76,-13835.01485,20.49107091,-0.001961974759,4.72731304e-007,
              -3.72881469e-011,1.623737207e-015},
          bhigh={75320.6691,-121.9124889},
          R=518.2791167938085);

        constant IdealGases.Common.DataRecord CH3OH(
          name="CH3OH",
          MM=0.03204186,
          Hf=-6271171.523750494,
          H0=356885.5553329301,
          Tlimit=1000,
          alow={-241664.2886,4032.14719,-20.46415436,0.0690369807,-7.59893269e-005,
              4.59820836e-008,-1.158706744e-011},
          blow={-44332.61169999999,140.014219},
          ahigh={3411570.76,-13455.00201,22.61407623,-0.002141029179,3.73005054e-007,
              -3.49884639e-011,1.366073444e-015},
          bhigh={56360.8156,-127.7814279},
          R=259.4878075117987);

        constant IdealGases.Common.DataRecord CH3OOH(
          name="CH3OOH",
          MM=0.04804126,
          Hf=-2893346.261109721,
          H0=0,
          Tlimit=1000,
          alow={-149797.4156,2656.222273,-13.77060625,0.0658867383,-7.75180165e-005,
              4.9688007e-008,-1.31436764e-011},
          blow={-3.058414201e+004,1.031696850e+002},
          ahigh={3060740.61,-12829.59627,25.41021168,-0.002394481095,4.44342991e-007,
              -4.4166595e-011,1.819673372e-015},
          bhigh={5.837492360e+004,-1.387713096e+002},
          R=173.069399095694);

        constant IdealGases.Common.DataRecord CI(
          name="CI",
          MM=0.13891517,
          Hf=4104669.15888308,
          H0=68344.68834469267,
          Tlimit=1000,
          alow={104301.1064,-1715.427168,12.88874952,-0.01828504834,2.135468356e-005,
              -1.286980869e-008,3.16704766e-012},
          blow={75507.84700000001,-44.9681132},
          ahigh={-240822.9894,344.738704,4.9769687,-0.000844481539,
              5.061239719999999e-007,-1.047700525e-010,6.74084314e-015},
          bhigh={64513.4202,1.090913159},
          R=59.85287279999731);

        constant IdealGases.Common.DataRecord CI2(
          name="CI2",
          MM=0.26581964,
          Hf=1762073.084592245,
          H0=47562.82492896311,
          Tlimit=1000,
          alow={60282.89810000001,-1043.205435,10.17465942,-0.00553567171,
              5.63031901e-006,-3.108249657e-009,7.20246956e-013},
          blow={59648.9655,-23.10319208},
          ahigh={-702865.553,308.2750393,9.04642705,-0.002946736644,1.424347233e-006,
              -2.45318341e-010,1.425270291e-014},
          bhigh={50211.34209999999,-15.60349377},
          R=31.27862185051489);

        constant IdealGases.Common.DataRecord CI3(
          name="CI3",
          MM=0.39272411,
          Hf=1033763.755935433,
          H0=42858.20649004717,
          Tlimit=1000,
          alow={85967.84250000001,-1347.703793,12.72103659,-0.002442876357,
              2.511609978e-007,1.024658583e-009,-4.87269296e-013},
          blow={53107.1651,-32.384929},
          ahigh={-153651.1918,-83.5704437,10.06203125,-2.466447336e-005,
              5.41905475e-009,-6.181417e-013,2.851262022e-017},
          bhigh={45825.8953,-14.94825345},
          R=21.17127975667193);

        constant IdealGases.Common.DataRecord CI4(
          name="CI4",
          MM=0.51962858,
          Hf=515644.0009516028,
          H0=43022.17172119363,
          Tlimit=1000,
          alow={89190.4387,-1651.906475,17.96124325,-0.00851811425,8.50868225e-006,-4.59909773e-009,
              1.039492403e-012},
          blow={36893.9215,-58.0595312},
          ahigh={-144676.277,-52.8036517,13.03985589,-1.606214814e-005,
              3.56755047e-009,-4.10536698e-013,1.907272766e-017},
          bhigh={28177.46618,-28.10414436},
          R=16.0007981085259);

        constant IdealGases.Common.DataRecord CN(
          name="CN",
          MM=0.0260174,
          Hf=16861160.30041434,
          H0=333319.3939440528,
          Tlimit=1000,
          alow={3949.14857,-139.1590572,4.93083532,-0.006304670510000001,
              1.256836472e-005,-9.878300500000001e-009,2.843137221e-012},
          blow={52284.55379999999,-2.763115585},
          ahigh={-2228006.27,5040.733389999999,-0.2121897722,0.001354901134,
              1.325929798e-007,-6.93700637e-011,5.49495227e-015},
          bhigh={17844.96132,32.82563919},
          R=319.5735161853222);

        constant IdealGases.Common.DataRecord CNplus(
          name="CNplus",
          MM=0.0260168514,
          Hf=69143297.79352164,
          H0=333710.7886929008,
          Tlimit=1000,
          alow={-830290.9570000001,8775.6875,-29.7744356,0.0497689706,-1.302225951e-005,
              -2.058325353e-008,1.126843895e-011},
          blow={170386.0539,203.9918818},
          ahigh={-7153463.08,18572.50421,-10.84534159,0.00610668143,-1.191208566e-006,
              1.184848778e-010,-4.799838730000001e-015},
          bhigh={92426.44959999999,113.5340573},
          R=319.5802548189978);

        constant IdealGases.Common.DataRecord CNminus(
          name="CNminus",
          MM=0.0260179486,
          Hf=2455424.32964911,
          H0=333273.93075102,
          Tlimit=1000,
          alow={-46065.4139,429.417475,2.32878188,-0.0001235303004,4.47846277e-006,-4.40315129e-009,
              1.349001191e-012},
          blow={4362.07834,11.42928617},
          ahigh={351796.472,-1630.477359,5.60987575,-0.000397560597,
              8.856147079999999e-008,-9.722872320000001e-012,4.43420569e-016},
          bhigh={16479.76581,-11.75502699},
          R=319.5667778358206);

        constant IdealGases.Common.DataRecord CNN(
          name="CNN",
          MM=0.0400241,
          Hf=15827565.29191162,
          H0=259285.2806184274,
          Tlimit=1000,
          alow={-73576.9236,965.2438659999999,-1.704121157,0.02037239025,-2.183423906e-005,
              1.176082777e-008,-2.551355221e-012},
          blow={70217.2983,35.2815091},
          ahigh={-181714.8765,-672.986349,7.85794834,-6.13688072e-005,-1.088178985e-008,
              4.45665581e-012,-2.836496278e-016},
          bhigh={77234.8898,-19.66012324},
          R=207.7366386751982);

        constant IdealGases.Common.DataRecord CO(
          name="CO",
          MM=0.0280101,
          Hf=-3946262.098314536,
          H0=309570.6191695138,
          Tlimit=1000,
          alow={14890.45326,-292.2285939,5.72452717,-0.008176235030000001,
              1.456903469e-005,-1.087746302e-008,3.027941827e-012},
          blow={-13031.31878,-7.85924135},
          ahigh={461919.725,-1944.704863,5.91671418,-0.0005664282830000001,
              1.39881454e-007,-1.787680361e-011,9.62093557e-016},
          bhigh={-2466.261084,-13.87413108},
          R=296.8383547363272);

        constant IdealGases.Common.DataRecord COplus(
          name="COplus",
          MM=0.0280095514,
          Hf=44548703.62543543,
          H0=309576.6824741077,
          Tlimit=1000,
          alow={-21787.86658,128.8857032,3.76905755,-0.00343173013,8.19394575e-006,-6.463814690000001e-009,
              1.803727574e-012},
          blow={148234.5898,3.99054707},
          ahigh={231684.7506,-1057.646148,4.55425778,0.000449552032,-2.489507047e-007,
              5.26756642e-011,-3.28951027e-015},
          bhigh={155505.0724,-3.87346264},
          R=296.8441686645506);

        constant IdealGases.Common.DataRecord COCL(
          name="COCL",
          MM=0.0634631,
          Hf=-252115.0085640317,
          H0=182007.3239409988,
          Tlimit=1000,
          alow={25131.7574,-596.918967,8.327671349999999,-0.00705613259,
              1.313150734e-005,-1.037059653e-008,3.033665179e-012},
          blow={-705.277032,-15.80716775},
          ahigh={344372.024,-1793.14347,8.392755899999999,-0.000537476959,
              9.113555710000001e-008,-3.111441728e-012,-2.040435218e-016},
          bhigh={6914.470149999999,-19.98919104},
          R=131.0126987178376);

        constant IdealGases.Common.DataRecord COCL2(
          name="COCL2",
          MM=0.09891610000000001,
          Hf=-2219052.307966044,
          H0=130197.4299431538,
          Tlimit=1000,
          alow={93193.2145,-1577.971273,12.08353907,-0.00480901561,
              7.688477319999999e-006,-5.8588412e-009,1.687786559e-012},
          blow={-20542.52334,-38.3476732},
          ahigh={-25458.81891,-1305.958516,10.92922584,-0.000360121016,
              7.78701765e-008,-8.79245203e-012,4.02869661e-016},
          bhigh={-22198.4734,-32.3330345},
          R=84.05580082514373);

        constant IdealGases.Common.DataRecord COFCL(
          name="COFCL",
          MM=0.08246150319999999,
          Hf=-5208404.471578928,
          H0=144355.821056631,
          Tlimit=1000,
          alow={72621.739,-1019.738175,7.29091199,0.00742069171,-7.902548079999999e-006,
              4.209427650000001e-009,-9.3144129e-013},
          blow={-48043.8646,-13.16923671},
          ahigh={-53168.8791,-1581.009678,11.12696501,-0.00043730008,
              9.464190710000001e-008,-1.069291346e-011,4.901756640000001e-016},
          bhigh={-45996.6723,-35.25879824},
          R=100.8285281901095);

        constant IdealGases.Common.DataRecord COF2(
          name="COF2",
          MM=0.06600690640000001,
          Hf=-9695955.088723866,
          H0=168678.2430391253,
          Tlimit=1000,
          alow={52633.9315,-461.860339,2.774114516,0.01831931082,-2.130172554e-005,
              1.266924542e-008,-3.101675983e-012},
          blow={-75642.55099999999,9.467181460000001},
          ahigh={-40738.0685,-1974.009812,11.40363654,-0.000543711147,
              1.175232744e-007,-1.326564192e-011,6.07677213e-016},
          bhigh={-69077.9541,-40.09695},
          R=125.9636673413314);

        constant IdealGases.Common.DataRecord COHCL(
          name="COHCL",
          MM=0.06447104000000001,
          Hf=-2547064.170207274,
          H0=170716.6814743488,
          Tlimit=1000,
          alow={6332.94687,81.2036559,1.374648391,0.01650970564,-1.692917241e-005,
              9.68404683e-009,-2.37446939e-012},
          blow={-21203.5658,19.3837965},
          ahigh={831895.285,-4416.87084,12.70661114,-0.0009361408629999999,
              1.855335611e-007,-1.958378539e-011,8.512046829999999e-016},
          bhigh={4330.49644,-51.45071542},
          R=128.9644466724905);

        constant IdealGases.Common.DataRecord COHF(
          name="COHF",
          MM=0.0480164432,
          Hf=-7801293.391093992,
          H0=217629.5098842307,
          Tlimit=1000,
          alow={-45858.285,1048.202675,-4.77657422,0.03080719931,-3.4158959e-005,
              2.034926806e-008,-5.05419462e-012},
          blow={-50859.8373,52.3224741},
          ahigh={857885.316,-4791.95912,12.93975218,-0.001018285299,2.021278474e-007,
              -2.136698091e-011,9.299588910000002e-016},
          bhigh={-18789.33107,-55.2744914},
          R=173.1588482172291);

        constant IdealGases.Common.DataRecord COS(
          name="COS",
          MM=0.0600751,
          Hf=-2358714.342547911,
          H0=165486.1498357889,
          Tlimit=1000,
          alow={85478.76430000001,-1319.464821,9.735257239999999,-0.00687083096,
              1.082331416e-005,-7.70559734e-009,2.078570344e-012},
          blow={-11916.57685,-29.91988593},
          ahigh={195909.8567,-1756.167688,8.71043034,-0.000413942496,1.015243648e-007,
              -1.159609663e-011,5.691053860000001e-016},
          bhigh={-8927.09669,-26.36328016},
          R=138.4013010382005);

        constant IdealGases.Common.DataRecord CO2(
          name="CO2",
          MM=0.0440095,
          Hf=-8941478.544405185,
          H0=212805.6215135368,
          Tlimit=1000,
          alow={49436.5054,-626.411601,5.30172524,0.002503813816,-2.127308728e-007,-7.68998878e-010,
              2.849677801e-013},
          blow={-45281.9846,-7.04827944},
          ahigh={117696.2419,-1788.791477,8.29152319,-9.22315678e-005,4.86367688e-009,
              -1.891053312e-012,6.330036589999999e-016},
          bhigh={-39083.5059,-26.52669281},
          R=188.9244822140674);

        constant IdealGases.Common.DataRecord CO2plus(
          name="CO2plus",
          MM=0.0440089514,
          Hf=21465814.54335674,
          H0=240089.5423288817,
          Tlimit=1000,
          alow={-73830.3098,1086.211742,-2.771112737,0.02318463595,-2.570240315e-005,
              1.450335497e-008,-3.33447042e-012},
          blow={107178.4918,40.54885210000001},
          ahigh={-169505.1682,-806.646973,8.00282846,-0.0001577214041,
              2.566759314e-008,-2.404195965e-012,1.6774468e-016},
          bhigh={115438.9478,-21.33567772},
          R=188.9268372797449);

        constant IdealGases.Common.DataRecord COOH(
          name="COOH",
          MM=0.04501744,
          Hf=-4731499.614371675,
          H0=240203.5522233161,
          Tlimit=1000,
          alow={-11283.80671,377.517943,-0.5992550409999999,0.02181894272,-2.425918417e-005,
              1.451245206e-008,-3.59623338e-012},
          blow={-28410.42565,29.34561769},
          ahigh={929318.873,-4483.030570000001,12.42199567,-0.0007463139639999999,
              1.332996131e-007,-1.28271055e-011,5.1379979e-016},
          bhigh={-851.8232680000001,-50.6806551},
          R=184.694465078423);

        constant IdealGases.Common.DataRecord CP(
          name="CP",
          MM=0.042984461,
          Hf=12101159.18401303,
          H0=202750.1287034866,
          Tlimit=1000,
          alow={-45239.4011,775.8828140000001,-1.453947907,0.01397713706,-1.624489706e-005,
              9.514083879999999e-009,-2.210281109e-012},
          blow={57926.3467,33.1164792},
          ahigh={-5449937.15,16883.45926,-15.956922,0.01136028761,-2.84654133e-006,
              3.37936404e-010,-1.554457397e-014},
          bhigh={-45545.17739999999,145.1324059},
          R=193.429714054109);

        constant IdealGases.Common.DataRecord CS(
          name="CS",
          MM=0.0440757,
          Hf=6319810.643960278,
          H0=197577.7582658926,
          Tlimit=1000,
          alow={-49248.4412,816.69681,-1.542998408,0.01380324735,-1.574407905e-005,
              9.16971493e-009,-2.169700595e-012},
          blow={28651.82876,33.08541327},
          ahigh={-971957.476,2339.201284,1.709390402,0.001577178949,-4.146335910000001e-007,
              4.50475708e-011,-5.94545773e-016},
          bhigh={16810.20727,18.7404822},
          R=188.6407249346012);

        constant IdealGases.Common.DataRecord CS2(
          name="CS2",
          MM=0.07614069999999999,
          Hf=1532688.824767831,
          H0=140059.4294510032,
          Tlimit=1000,
          alow={16135.60482,-464.948147,6.29793879,0.001888896706,3.031927747e-007,-1.737645373e-009,
              7.79398939e-013},
          blow={14777.61119,-9.303382129999999},
          ahigh={-1390419.724,3354.9755,3.019247723,0.002876437543,-9.076812719999999e-007,
              1.374091042e-010,-6.99957557e-015},
          bhigh={-10138.98046,15.65113703},
          R=109.1987859318341);

        constant IdealGases.Common.DataRecord C2(
          name="C2",
          MM=0.0240214,
          Hf=34571562.10712116,
          H0=423335.9421182778,
          Tlimit=1000,
          alow={555963.451,-9980.12644,66.8162037,-0.1743432724,0.0002448523051,-1.70346758e-007,
              4.68452773e-011},
          blow={144586.9634,-344.82297},
          ahigh={-968926.793,3561.09299,-0.5064138930000001,0.002945154879,-7.13944119e-007,
              8.67065725e-011,-4.07690681e-015},
          bhigh={76817.96829999999,33.3998524},
          R=346.1277027983382);

        constant IdealGases.Common.DataRecord C2plus(
          name="C2plus",
          MM=0.0240208514,
          Hf=83459803.26076201,
          H0=361565.2024723819,
          Tlimit=1000,
          alow={-99134.2384,1347.170609,-3.47675316,0.01676429424,-1.865908025e-005,
              1.091134647e-008,-2.434913818e-012},
          blow={233545.48,44.0664462},
          ahigh={3836292.81,-6242.062449999999,2.779245639,0.006065865859999999,-2.452799858e-006,
              3.8829425e-010,-2.190639912e-014},
          bhigh={285744.7553,0.729738349},
          R=346.1356078327848);

        constant IdealGases.Common.DataRecord C2minus(
          name="C2minus",
          MM=0.0240219486,
          Hf=20013651.34883354,
          H0=361174.0306529504,
          Tlimit=1000,
          alow={-118192.866,1438.18971,-3.19613135,0.01465548163,-1.545537278e-005,
              9.061235610000001e-009,-2.135962274e-012},
          blow={49653.1779,42.2560888},
          ahigh={4478136.25,-11541.45714,13.10143499,-0.001862700578,4.00693125e-008,
              3.7102136e-011,-3.33726687e-015},
          bhigh={132535.6168,-69.75964399999999},
          R=346.1197981249531);

        constant IdealGases.Common.DataRecord C2CL(
          name="C2CL",
          MM=0.0594744,
          Hf=8980049.752498554,
          H0=181264.9812356241,
          Tlimit=1000,
          alow={47258.8941,-898.0223609999999,9.016877149999999,-0.00633378283,
              1.08706005e-005,-8.089068920000001e-009,2.248275223e-012},
          blow={67022.15700000001,-23.54893403},
          ahigh={213736.8408,-1630.519518,8.62349025,-0.000425351786,9.04001864e-008,
              -1.007541495e-011,4.570764750000001e-016},
          bhigh={71710.9328,-24.13014598},
          R=139.7991740984356);

        constant IdealGases.Common.DataRecord C2CL2(
          name="C2CL2",
          MM=0.09492680000000001,
          Hf=2387102.48317651,
          H0=0,
          Tlimit=1000,
          alow={3.871168730e+004,-9.336870210e+002,1.119377832e+001,-3.746287380e-003,6.770471350e-006,
              -4.910387450e-009,1.299068486e-012},
          blow={2.948153174e+004,-3.310723530e+001},
          ahigh={2.961995390e+005,-2.044290845e+003,1.187529729e+001,-5.115031340e-004,1.072666588e-007,
              -1.183417569e-011,5.326530480e-016},
          bhigh={3.636802500e+004,-4.000826050e+001},
          R=87.58824694396103);

        constant IdealGases.Common.DataRecord C2CL3(
          name="C2CL3",
          MM=0.1303804,
          Hf=1459357.326714752,
          H0=123870.2903197106,
          Tlimit=1000,
          alow={46750.1604,-885.1019640000001,9.03227055,0.01242122796,-1.554614347e-005,
              9.51388712e-009,-2.341473263e-012},
          blow={24958.63399,-17.79070154},
          ahigh={-220402.8219,-1072.926248,13.78367377,-0.0003093322915,
              6.77752895e-008,-7.72730182e-012,3.56669022e-016},
          bhigh={24310.20015,-43.42161815},
          R=63.77087353620636);

        constant IdealGases.Common.DataRecord C2CL4(
          name="C2CL4",
          MM=0.1658322,
          Hf=-145930.6455561706,
          H0=0,
          Tlimit=1000,
          alow={3.746257500e+004,-8.481774390e+002,1.009156041e+001,1.845463807e-002,-2.390899731e-005,
              1.514828471e-008,-3.841119950e-012},
          blow={-1.598289063e+003,-2.368079134e+001},
          ahigh={-3.001289625e+005,-1.132413909e+003,1.683073063e+001,-3.288820170e-004,7.220975400e-008,
             -8.245417760e-012,3.810154710e-016},
          bhigh={-2.292758158e+003,-5.980164420e+001},
          R=50.13786224870682);

        constant IdealGases.Common.DataRecord C2CL6(
          name="C2CL6",
          MM=0.2367376,
          Hf=-626009.5565723401,
          H0=0,
          Tlimit=1000,
          alow={1.593451902e+005,-2.606697262e+003,2.028011918e+001,1.769364625e-002,-3.133104894e-005,
              2.389395021e-008,-6.893037660e-012},
          blow={-9.038007040e+003,-7.953073010e+001},
          ahigh={-5.577351940e+005,-4.976576790e+002,2.237042798e+001,-1.477797229e-004,3.257641460e-008,
             -3.727218070e-012,1.723860648e-016},
          bhigh={-2.335217699e+004,-8.381736910e+001},
          R=35.12104541061496);

        constant IdealGases.Common.DataRecord C2F(
          name="C2F",
          MM=0.0430198032,
          Hf=8225223.16884983,
          H0=240982.8783224188,
          Tlimit=1000,
          alow={12497.97213,-348.387675,5.75508435,0.000852868538,2.353546435e-006,-2.804737097e-009,
              9.083575639999999e-013},
          blow={42815.2531,-6.43720096},
          ahigh={289877.6676,-2016.644658,8.87504571,-0.000516684113,1.092094306e-007,
              -1.212216787e-011,5.48228768e-016},
          bhigh={52412.8792,-27.7308958},
          R=193.2708051067979);

        constant IdealGases.Common.DataRecord C2FCL(
          name="C2FCL",
          MM=0.0784728032,
          Hf=430294.2882509389,
          H0=176832.0543441476,
          Tlimit=1000,
          alow={26976.75344,-741.4403179999999,9.6296043,-0.000386554493,
              3.003347997e-006,-2.710191661e-009,7.73758689e-013},
          blow={5500.62039,-25.15774889},
          ahigh={347145.489,-2348.4611,12.06875617,-0.000580469823,1.21273434e-007,-1.334214186e-011,
              5.99255661e-016},
          bhigh={15020.61224,-42.52445687},
          R=105.9535490125068);

        constant IdealGases.Common.DataRecord C2FCL3(
          name="C2FCL3",
          MM=0.1493788032,
          Hf=-1111268.777389696,
          H0=125398.7419816201,
          Tlimit=1000,
          alow={12372.82217,-470.396184,7.58162179,0.02305727066,-2.792144322e-005,
              1.679699826e-008,-4.07757244e-012},
          blow={-20313.33976,-9.274637513},
          ahigh={-282950.5545,-1473.853145,17.07879074,-0.000426521339,
              9.357199850000001e-008,-1.067932796e-011,4.93326161e-016},
          bhigh={-17384.33314,-61.97054796},
          R=55.66032008482446);

        constant IdealGases.Common.DataRecord C2F2(
          name="C2F2",
          MM=0.0620182064,
          Hf=-2332632.567071465,
          H0=213911.684488831,
          Tlimit=1000,
          alow={17763.13572,-611.328094,8.6636068,0.0009156381209999999,
              2.363808425e-006,-2.753750054e-009,8.713935969999999e-013},
          blow={-16496.11017,-21.65150307},
          ahigh={419389.094,-2715.359989,12.30403413,-0.0006649305540000001,
              1.385254301e-007,-1.520813764e-011,6.81982103e-016},
          bhigh={-4179.221939999999,-46.7038623},
          R=134.0650186878026);

        constant IdealGases.Common.DataRecord C2F2CL2(
          name="C2F2CL2",
          MM=0.1329242064,
          Hf=-2541576.204588121,
          H0=134934.2567901161,
          Tlimit=1000,
          alow={-115043.3214,2032.113595,-11.19750271,0.08342451400000001,-0.0001163698616,
              7.83309289e-008,-2.070004069e-011},
          blow={-52082.5681,88.88322147},
          ahigh={-870256.566,726.472448,15.30689121,0.0003045597224,-7.04546804e-008,
              8.28592434e-012,-3.89858107e-016},
          bhigh={-52088.8871,-49.98300753},
          R=62.55047312435939);

        constant IdealGases.Common.DataRecord C2F3(
          name="C2F3",
          MM=0.0810166096,
          Hf=-2816472.993952588,
          H0=174823.0032079743,
          Tlimit=1000,
          alow={-26147.75016,210.1767714,2.32862508,0.02368943293,-2.416431591e-005,
              1.224916093e-008,-2.488670434e-012},
          blow={-30285.66585,16.9960879},
          ahigh={-124260.3837,-2137.292446,14.55051371,-0.0006093891980000001,
              1.331427672e-007,-1.515124358e-011,6.98411206e-016},
          bhigh={-19771.46179,-54.21039870000001},
          R=102.6267581555277);

        constant IdealGases.Common.DataRecord C2F3CL(
          name="C2F3CL",
          MM=0.1164696096,
          Hf=-4423471.511318606,
          H0=147061.1008212738,
          Tlimit=1000,
          alow={-8122.270309999999,-157.4007092,5.04181029,0.02621692321,-2.843001445e-005,
              1.537643979e-008,-3.36073067e-012},
          blow={-63540.49950000001,2.792301872},
          ahigh={-216272.4659,-2195.103372,17.59605428,-0.000628261729,
              1.37416661e-007,-1.565004037e-011,7.218309900000001e-016},
          bhigh={-55151.095,-69.21931823999999},
          R=71.38748063597872);

        constant IdealGases.Common.DataRecord C2F4(
          name="C2F4",
          MM=0.1000150128,
          Hf=-6594010.054458545,
          H0=163281.0269459867,
          Tlimit=1000,
          alow={-9991.530069999999,-129.1088427,4.50422905,0.0259202964,-2.63030872e-005,
              1.316489777e-008,-2.625017169e-012},
          blow={-80904.47080000001,3.27424147},
          ahigh={-162991.5758,-2603.903955,17.88488423,-0.000739703801,
              1.61446034e-007,-1.835820392e-011,8.45764107e-016},
          bhigh={-70063.7166,-74.54165860000001},
          R=83.13223952314488);

        constant IdealGases.Common.DataRecord C2F6(
          name="C2F6",
          MM=0.1380118192,
          Hf=-9738296.384980919,
          H0=146886.2603037118,
          Tlimit=1000,
          alow={-37953.717,799.82764,-4.67156181,0.0750145099,-9.812116100000001e-005,
              6.31980759e-008,-1.622597311e-011},
          blow={-167521.1878,50.537592},
          ahigh={-1011551.484,-942.2140710000001,22.02553906,-0.000131451875,
              1.8660453e-008,-3.46711861e-012,2.488311205e-016},
          bhigh={-165743.4402,-93.02161150000001},
          R=60.24463736653651);

        constant IdealGases.Common.DataRecord C2H(
          name="C2H",
          MM=0.02502934,
          Hf=22621470.72196071,
          H0=417457.3520516323,
          Tlimit=1000,
          alow={13436.69487,-506.797072,7.77210741,-0.00651233982,1.030117855e-005,-5.880147670000001e-009,
              1.226901861e-012},
          blow={68922.69989999999,-18.71881626},
          ahigh={3922334.57,-12047.51703,17.5617292,-0.00365544294,6.98768543e-007,-6.82516201e-011,
              2.719262793e-015},
          bhigh={143326.6627,-95.6163438},
          R=332.1890229626511);

        constant IdealGases.Common.DataRecord C2HCL(
          name="C2HCL",
          MM=0.06048204,
          Hf=3743259.982632861,
          H0=0,
          Tlimit=1000,
          alow={1.329784931e+005,-2.174542005e+003,1.497980787e+001,-1.290343200e-002,1.602596399e-005,
              -9.152047430e-009,2.021222995e-012},
          blow={3.604801260e+004,-5.958236750e+001},
          ahigh={1.152149855e+006,-4.461204350e+003,1.281367818e+001,-6.797397460e-004,1.151395389e-007,
              -1.046657798e-011,3.949939170e-016},
          bhigh={5.233955000e+004,-5.320661700e+001},
          R=137.4700985614903);

        constant IdealGases.Common.DataRecord C2HCL3(
          name="C2HCL3",
          MM=0.13138744,
          Hf=-133193.8577994974,
          H0=0,
          Tlimit=1000,
          alow={3.959233060e+004,-5.178756040e+002,5.155030160e+000,2.816922101e-002,-3.624741150e-005,
              2.392073843e-008,-6.362400700e-012},
          blow={-1.534345080e+003,1.209377115e+000},
          ahigh={6.049298240e+005,-4.237003190e+003,1.846274582e+001,-8.137243260e-004,1.551223511e-007,
              -1.584645594e-011,6.701006540e-016},
          bhigh={1.848292676e+004,-7.698375250e+001},
          R=63.28209149976589);

        constant IdealGases.Common.DataRecord C2HF(
          name="C2HF",
          MM=0.0440277432,
          Hf=946955.282504691,
          H0=259970.3543287678,
          Tlimit=1000,
          alow={91611.6911,-1537.245636,11.33665074,-0.00462472931,5.87798546e-006,-2.690992345e-009,
              3.52471953e-013},
          blow={10859.0282,-40.23994380000001},
          ahigh={1234347.179,-4819.58196,13.02337752,-0.000749543582,1.285452942e-007,
              -1.184559365e-011,4.53678476e-016},
          bhigh={32368.1171,-56.4079182},
          R=188.8462000477917);

        constant IdealGases.Common.DataRecord C2HFCL2(
          name="C2HFCL2",
          MM=0.1149337432,
          Hf=-1467349.755645999,
          H0=141466.6358834818,
          Tlimit=1000,
          alow={31173.99823,-136.9505457,1.176399869,0.040807766,-5.4181378e-005,
              3.61360066e-008,-9.625862350000001e-012},
          blow={-21151.42871,21.4643316},
          ahigh={407124.352,-3808.20452,18.2114405,-0.000727896606,1.381532849e-007,-1.405342513e-011,
              5.92000972e-016},
          bhigh={-2676.849943,-75.67353566999999},
          R=72.34143575687527);

        constant IdealGases.Common.DataRecord C2HF2CL(
          name="C2HF2CL",
          MM=0.09847914640000001,
          Hf=-3388067.54726298,
          H0=154984.6293143743,
          Tlimit=1000,
          alow={170443.7675,-1667.236861,4.7887885,0.0444483001,-7.32219777e-005,
              5.62934755e-008,-1.654638029e-011},
          blow={-32918.0976,-5.78859364},
          ahigh={583037.47,-3810.31741,17.99003171,-0.000588821086,1.002861284e-007,-9.149788100000001e-012,
              3.45998516e-016},
          bhigh={-22058.75409,-75.90948533},
          R=84.42875780247421);

        constant IdealGases.Common.DataRecord C2HF3(
          name="C2HF3",
          MM=0.0820245496,
          Hf=-5986012.75343059,
          H0=174673.461419409,
          Tlimit=1000,
          alow={-14109.69036,368.762492,-1.144797568,0.0395630602,-4.60200136e-005,
              2.785149385e-008,-6.90376008e-012},
          blow={-62264.1033,32.8966169},
          ahigh={691741.378,-5260.30164,19.15276614,-0.001072493938,2.099276744e-007,
              -2.195126633e-011,9.472702399999999e-016},
          bhigh={-32476.4021,-87.5045695},
          R=101.3656526070093);

        constant IdealGases.Common.DataRecord C2H2_vinylidene(
          name="C2H2_vinylidene",
          MM=0.02603728,
          Hf=15930556.80163212,
          H0=417638.4015534649,
          Tlimit=1000,
          alow={-14660.42239,278.9475593,1.276229776,0.01395015463,-1.475702649e-005,
              9.476298110000001e-009,-2.567602217e-012},
          blow={47361.1018,16.58225704},
          ahigh={1940838.725,-6892.718150000001,13.39582494,-0.0009368968669999999,
              1.470804368e-007,-1.220040365e-011,4.12239166e-016},
          bhigh={91071.1293,-63.3750293},
          R=319.3295152181795);

        constant IdealGases.Common.DataRecord C2H2CL2(
          name="C2H2CL2",
          MM=0.09694328000000001,
          Hf=35175.20760593204,
          H0=153517.366030941,
          Tlimit=1000,
          alow={-12037.24514,462.903119,-1.318184584,0.039304496,-4.85152902e-005,
              3.17841146e-008,-8.476938410000001e-012},
          blow={-3251.80686,34.89218118},
          ahigh={1561121.185,-7358.096350000001,20.11869185,-0.001310978834,
              2.411885716e-007,-2.38416674e-011,9.78541575e-016},
          bhigh={41222.009,-95.50252712000001},
          R=85.76635739991467);

        constant IdealGases.Common.DataRecord C2H2FCL(
          name="C2H2FCL",
          MM=0.08048868319999999,
          Hf=-2050996.406411579,
          H0=167344.1838591292,
          Tlimit=1000,
          alow={226015.4427,-2557.428772,9.2362412,0.02879408894,-5.16397547e-005,
              4.25219103e-008,-1.311612713e-011},
          blow={-8180.627839999999,-32.34787581},
          ahigh={1527690.968,-6689.712229999999,19.5055383,-0.001040920895,
              1.780587502e-007,-1.633098515e-011,6.213465560000001e-016},
          bhigh={17052.66451,-91.94078300999999},
          R=103.2998884991077);

        constant IdealGases.Common.DataRecord C2H2F2(
          name="C2H2F2",
          MM=0.06403408640000001,
          Hf=-5253452.011458697,
          H0=194891.2477964236,
          Tlimit=1000,
          alow={57029.3581,-676.28604,4.11741171,0.01822618762,-6.86133154e-006,-3.29575674e-009,
              2.180965597e-012},
          blow={-38386.5078,1.487528685},
          ahigh={-822719.275,-2915.718833,18.30163995,-0.001039630129,
              2.546725128e-007,-3.157578705e-011,1.55154096e-015},
          bhigh={-31100.28589,-84.00834700000002},
          R=129.8444698353657);

        constant IdealGases.Common.DataRecord CH2CO_ketene(
          name="CH2CO_ketene",
          MM=0.04203668,
          Hf=-1179353.245784396,
          H0=0,
          Tlimit=1000,
          alow={35495.9809,-406.306283,3.71892192,0.01583501817,-1.726195691e-005,
              1.157376959e-008,-3.30584263e-012},
          blow={-5.209992580e+003,3.839604220e+000},
          ahigh={2013564.915,-8200.88746,17.59694074,-0.001464544521,2.695886969e-007,
             -2.66567484e-011,1.094204522e-015},
          bhigh={4.177776880e+004,-8.725803580e+001},
          R=197.7908816776206);

        constant IdealGases.Common.DataRecord O_CH_2O(
          name="O_CH_2O",
          MM=0.05803608,
          Hf=-3652900.058032865,
          H0=0,
          Tlimit=1000,
          alow={-229245.9698,3724.09805,-18.93769993,0.0751174414,-8.083855420000001e-005,
              4.35823319e-008,-9.36453933e-012},
          blow={-4.454486010e+004,1.327028760e+002},
          ahigh={267806.3593,-4436.61748,17.81696797,-0.000709717378,1.272621878e-007,
              -1.237226678e-011,5.025057520e-016},
          bhigh={-4.479608280e+003,-8.156700640e+001},
          R=143.2638455250596);

        constant IdealGases.Common.DataRecord HO_CO_2OH(
          name="HO_CO_2OH",
          MM=0.09003488,
          Hf=-8127961.074641295,
          H0=0,
          Tlimit=1000,
          alow={30725.13274,-391.617469,3.17838864,0.0374128975,-4.00975396e-005,
              2.288662646e-008,-5.386771549999999e-012},
          blow={-8.797942550e+004,9.751091370e+000},
          ahigh={1805560.696,-9240.33315,26.25742604,-0.001418458557,2.526840574e-007,
              -2.521005198e-011,1.040036111e-015},
          bhigh={-3.754286460e+004,-1.326879788e+002},
          R=92.34723253921148);

        constant IdealGases.Common.DataRecord C2H3_vinyl(
          name="C2H3_vinyl",
          MM=0.02704522,
          Hf=11080953.19616553,
          H0=389044.3856622353,
          Tlimit=1000,
          alow={-33478.9687,1064.104103,-6.40385706,0.0393451548,-4.76004609e-005,
              3.17007135e-008,-8.633406430000001e-012},
          blow={30391.22649,58.0922618},
          ahigh={2718080.093,-10309.56829,18.36579807,-0.001580131153,
              2.680594939e-007,-2.439003999e-011,9.20909639e-016},
          bhigh={97650.55589999999,-97.6008686},
          R=307.4285215649937);

        constant IdealGases.Common.DataRecord CH2BrminusCOOH(
          name="CH2BrminusCOOH",
          MM=0.13894802,
          Hf=-2760024.935943672,
          H0=0,
          Tlimit=1000,
          alow={-78324.84789999999,1648.865353,-9.34953363,0.06879635440000001,-8.374880770000001e-005,
              5.40603842e-008,-1.423159923e-011},
          blow={-5.541187620e+004,8.165423200e+001},
          ahigh={2486349.85,-11402.56346,27.56020307,-0.00184318701,3.26539274e-007,
              -3.122663159e-011,1.223452495e-015},
          bhigh={1.837013127e+004,-1.420040888e+002},
          R=59.83872242296076);

        constant IdealGases.Common.DataRecord C2H3CL(
          name="C2H3CL",
          MM=0.06249792,
          Hf=352011.7149498736,
          H0=0,
          Tlimit=1000,
          alow={-1.688896130e+004,8.545105550e+002,-6.514968110e+000,4.944682090e-002,-6.117756910e-005,
              4.067294030e-008,-1.101392662e-011},
          blow={-2.069321797e+003,5.928435530e+001},
          ahigh={2.456178566e+006,-1.047452720e+004,2.178736544e+001,-1.816893523e-003,3.296374030e-007,
              -3.214400710e-011,1.302256512e-015},
          bhigh={6.346231290e+004,-1.149890773e+002},
          R=133.0359794373957);

        constant IdealGases.Common.DataRecord CH2CLminusCOOH(
          name="CH2CLminusCOOH",
          MM=0.09449671999999999,
          Hf=-4525024.783929008,
          H0=0,
          Tlimit=1000,
          alow={-1.122506431e+005,2.168288546e+003,-1.227791221e+001,7.514388060e-002,-9.083158490e-005,
              5.812363980e-008,-1.518247440e-011},
          blow={-6.314314500e+004,9.694389710e+001},
          ahigh={2.472881709e+006,-1.152275613e+004,2.766275288e+001,-1.886429520e-003,3.361772590e-007,
              -3.231268060e-011,1.273273865e-015},
          bhigh={1.370384800e+004,-1.443191119e+002},
          R=87.98688462414359);

        constant IdealGases.Common.DataRecord C2H3F(
          name="C2H3F",
          MM=0.0460436232,
          Hf=-3042766.625715937,
          H0=246199.7386860728,
          Tlimit=1000,
          alow={-45791.3496,1411.541724,-10.21500877,0.0577581657,-7.08067749e-005,
              4.64085076e-008,-1.240455865e-011},
          blow={-24027.88827,78.6082839},
          ahigh={2478832.34,-10759.32307,21.94796688,-0.00186911411,3.39528067e-007,-3.31538293e-011,
              1.345081799e-015},
          bhigh={45634.5555,-118.0410277},
          R=180.5781435549581);

        constant IdealGases.Common.DataRecord CH3CN(
          name="CH3CN",
          MM=0.04105192000000001,
          Hf=1618194.715375066,
          H0=294594.9422097675,
          Tlimit=1000,
          alow={-99659.88380000001,1739.278534,-7.89842082,0.0429489432,-4.49997388e-005,
              2.717105086e-008,-7.026117590000001e-012},
          blow={-1461.161333,68.52508274},
          ahigh={2923231.393,-12337.92258,23.24477222,-0.002411565845,
              4.622157170000001e-007,-4.74060124e-011,2.010639467e-015},
          bhigh={80585.65550000001,-129.2249102},
          R=202.5355208721054);

        constant IdealGases.Common.DataRecord CH3CO_acetyl(
          name="CH3CO_acetyl",
          MM=0.04304462,
          Hf=-232317.0700542832,
          H0=302859.3817299352,
          Tlimit=1000,
          alow={-71938.94130000001,1464.465167,-6.63227613,0.04108468379999999,-4.22625664e-005,
              2.485766819e-008,-6.29255848e-012},
          blow={-9309.37081,64.22897619999999},
          ahigh={2485388.15,-11207.14204,22.77525438,-0.00231426055,4.53618917e-007,-4.74263555e-011,
              2.044663903e-015},
          bhigh={63800.8841,-121.5350925},
          R=193.1593774088376);

        constant IdealGases.Common.DataRecord C2H4(
          name="C2H4",
          MM=0.02805316,
          Hf=1871446.924339362,
          H0=374955.5843263291,
          Tlimit=1000,
          alow={-116360.5836,2554.85151,-16.09746428,0.0662577932,-7.885081859999999e-005,
              5.12522482e-008,-1.370340031e-011},
          blow={-6176.19107,109.3338343},
          ahigh={3408763.67,-13748.47903,23.65898074,-0.002423804419,4.43139566e-007,
              -4.35268339e-011,1.775410633e-015},
          bhigh={88204.2938,-137.1278108},
          R=296.3827247982046);

        constant IdealGases.Common.DataRecord C2H4O_ethylen_o(
          name="C2H4O_ethylen_o",
          MM=0.04405256,
          Hf=-1194816.373895183,
          H0=245856.6539606325,
          Tlimit=1000,
          alow={-172823.3345,3816.6788,-26.29851977,0.1014103162,-0.0001240578373,
              8.03404035e-008,-2.120942544e-011},
          blow={-24375.19333,165.4885056},
          ahigh={3151809.957,-14236.46316,27.08080476,-0.002606238456,
              4.853891929999999e-007,-4.85214476e-011,2.011778721e-015},
          bhigh={76625.61440000001,-156.3952401},
          R=188.7398144398419);

        constant IdealGases.Common.DataRecord CH3CHO_ethanal(
          name="CH3CHO_ethanal",
          MM=0.04405256,
          Hf=-3772538.98524853,
          H0=292757.4697134514,
          Tlimit=1000,
          alow={-137390.4369,2559.937679,-13.40470172,0.05922128619999999,-6.24000605e-005,
              3.70332441e-008,-9.34269741e-012},
          blow={-33187.3131,100.7417652},
          ahigh={3321176.59,-14497.19957,27.08421279,-0.002879320054,5.55630992e-007,
              -5.73267488e-011,2.443965239e-015},
          bhigh={65077.5564,-153.6236027},
          R=188.7398144398419);

        constant IdealGases.Common.DataRecord CH3COOH(
          name="CH3COOH",
          MM=0.06005196,
          Hf=-7197917.270310578,
          H0=226427.097466927,
          Tlimit=1000,
          alow={-32191.9198,1196.329795,-8.70582402,0.0569625759,-5.75788716e-005,
              3.35211522e-008,-8.614438229999999e-012},
          blow={-58401.12869999999,72.82413919999999},
          ahigh={2103514.223,-14678.22192,33.8280283,-0.00569485868,1.343221353e-006,
              -1.606041158e-010,7.652794250000001e-015},
          bhigh={29242.28407,-193.527885},
          R=138.4546316223484);

        constant IdealGases.Common.DataRecord OHCH2COOH(
          name="OHCH2COOH",
          MM=0.07605136,
          Hf=-7665872.115896415,
          H0=223625.7050498505,
          Tlimit=1000,
          alow={-313897.858,5693.06877,-36.8516029,0.1563502811,-0.0002039487993,
              1.340232412e-007,-3.50913026e-011},
          blow={-98016.40089999999,226.9492355},
          ahigh={1946628.253,-9804.020200000001,28.44111243,-0.000787640475,
              6.416275950000001e-008,1.069321262e-012,-3.23717828e-016},
          bhigh={-16946.5047,-147.4109363},
          R=109.3270652885103);

        constant IdealGases.Common.DataRecord C2H5(
          name="C2H5",
          MM=0.0290611,
          Hf=4083060.861426443,
          H0=419296.7919314823,
          Tlimit=1000,
          alow={-141131.2551,2714.285088,-15.34977725,0.06451672580000001,-7.259143960000001e-005,
              4.59911601e-008,-1.218367535e-011},
          blow={598.141884,109.096652},
          ahigh={4169220.4,-16629.82142,27.95442134,-0.003051715761,
              5.685160040000001e-007,-5.6828636e-011,2.355648561e-015},
          bhigh={113701.0087,-163.9357995},
          R=286.1031413126138);

        constant IdealGases.Common.DataRecord C2H5Br(
          name="C2H5Br",
          MM=0.1089651,
          Hf=-583673.1210268242,
          H0=124526.1097360531,
          Tlimit=1000,
          alow={-137417.2662,2861.429418,-18.24108956,0.08566230600000001,-0.0001047174473,
              6.906074570000001e-008,-1.862276022e-011},
          blow={-21984.80205,125.8435579},
          ahigh={2378649.403,-12670.33647,27.77558646,-0.002010898783,4.43608341e-007,
              -5.34819809e-011,2.63983585e-015},
          bhigh={64140.6205,-152.8277085},
          R=76.30399091085127);

        constant IdealGases.Common.DataRecord C2H6(
          name="C2H6",
          MM=0.03006904,
          Hf=-2788633.890539904,
          H0=395476.3437741943,
          Tlimit=1000,
          alow={-186204.4161,3406.19186,-19.51705092,0.0756583559,-8.20417322e-005,
              5.0611358e-008,-1.319281992e-011},
          blow={-27029.3289,129.8140496},
          ahigh={5025782.13,-20330.22397,33.2255293,-0.00383670341,7.23840586e-007,-7.3191825e-011,
              3.065468699e-015},
          bhigh={111596.395,-203.9410584},
          R=276.5127187299628);

        constant IdealGases.Common.DataRecord CH3N2CH3(
          name="CH3N2CH3",
          MM=0.05808244,
          Hf=2560143.134482642,
          H0=284509.3801155737,
          Tlimit=1000,
          alow={-373849.232,5880.45313,-29.86398524,0.1087380861,-0.0001167950177,
              6.916894889999999e-008,-1.719950055e-011},
          blow={-11899.84084,194.8246321},
          ahigh={4993357.09,-21609.96161,39.6444992,-0.00419645011,
              8.023361980000001e-007,-8.212260020000001e-011,3.47723744e-015},
          bhigh={144996.261,-237.2109745},
          R=143.1494957856454);

        constant IdealGases.Common.DataRecord C2H5OH(
          name="C2H5OH",
          MM=0.04606844,
          Hf=-5100020.751733725,
          H0=315659.1801241805,
          Tlimit=1000,
          alow={-234279.1392,4479.18055,-27.44817302,0.1088679162,-0.0001305309334,
              8.437346399999999e-008,-2.234559017e-011},
          blow={-50222.29,176.4829211},
          ahigh={4694817.65,-19297.98213,34.4758404,-0.00323616598,5.78494772e-007,-5.56460027e-011,
              2.2262264e-015},
          bhigh={86016.22709999999,-203.4801732},
          R=180.4808671619877);

        constant IdealGases.Common.DataRecord CH3OCH3(
          name="CH3OCH3",
          MM=0.04606844,
          Hf=-3996445.288792067,
          H0=311588.1284454173,
          Tlimit=1000,
          alow={-269310.3242,4300.709709999999,-21.52788028,0.08131833390000001,-8.29567132e-005,
              4.80191151e-008,-1.188699808e-011},
          blow={-44102.3709,146.7666934},
          ahigh={4933577.19,-20830.94065,36.2905061,-0.004108351640000001,
              7.90322031e-007,-8.13143563e-011,3.45816611e-015},
          bhigh={101330.1012,-218.5447466},
          R=180.4808671619877);

        constant IdealGases.Common.DataRecord CH3O2CH3(
          name="CH3O2CH3",
          MM=0.06206784,
          Hf=-2021981.109701901,
          H0=276365.9247687692,
          Tlimit=1000,
          alow={-228578.4757,3820.14257,-19.76647823,0.0884074386,-9.641284560000001e-005,
              5.90720083e-008,-1.526491225e-011},
          blow={-34920.1696,138.6769151},
          ahigh={5316368.47,-22212.67874,40.3433509,-0.00461274809,
              8.792987200000001e-007,-9.068221189999999e-011,3.865664890000001e-015},
          bhigh={116159.6028,-239.5296055},
          R=133.9578113238676);

        constant IdealGases.Common.DataRecord CCN(
          name="CCN",
          MM=0.0380281,
          Hf=21157945.62441983,
          H0=290272.8245692001,
          Tlimit=1000,
          alow={-16962.81385,98.3789163,3.81266294,0.00534689423,-2.473598508e-006,-3.73056422e-010,
              4.48175686e-013},
          blow={94800.72570000001,5.553165572},
          ahigh={79486.74890000001,-1344.786906,8.309986459999999,-0.0002220105361,
              1.753683113e-008,2.545998719e-012,-2.645649117e-016},
          bhigh={102318.7495,-22.5979394},
          R=218.6402160507625);

        constant IdealGases.Common.DataRecord CNC(
          name="CNC",
          MM=0.0380281,
          Hf=18010748.86728498,
          H0=298637.3497492644,
          Tlimit=1000,
          alow={-70751.9271,1007.523898,-1.576789967,0.02052532634,-2.278935009e-005,
              1.283362343e-008,-2.933174091e-012},
          blow={76133.2485,34.87094132},
          ahigh={-90313.13559999999,-831.32365,8.11473595,-0.0002447691991,
              5.39750877e-008,-6.18398486e-012,2.865172411e-016},
          bhigh={84518.33600000001,-21.02937255},
          R=218.6402160507625);

        constant IdealGases.Common.DataRecord OCCN(
          name="OCCN",
          MM=0.05402754,
          Hf=3886906.566539954,
          H0=251618.9150940428,
          Tlimit=1000,
          alow={24288.01276,-552.586462,8.58783817,-0.00337938777,1.119841826e-005,-1.008408077e-008,
              3.086448824e-012},
          blow={25996.20072,-16.59592359},
          ahigh={935913.1680000001,-4441.082289999999,13.68959297,-0.001647530917,
              3.81987344e-007,-3.945161e-011,1.509598839e-015},
          bhigh={49512.2278,-54.1708968},
          R=153.8932181624409);

        constant IdealGases.Common.DataRecord C2N2(
          name="C2N2",
          MM=0.0520348,
          Hf=5940255.367561709,
          H0=244358.6407558019,
          Tlimit=1000,
          alow={108240.4484,-1928.137871,15.53891898,-0.01821159329,2.77884084e-005,-1.899434373e-008,
              4.94967772e-012},
          blow={44490.9759,-60.90964741},
          ahigh={793442.372,-3997.37627,13.1449743,-0.0008747782000000001,
              2.059156733e-007,-2.200469389e-011,9.97448577e-016},
          bhigh={58636.323,-54.73201251},
          R=159.7867580926611);

        constant IdealGases.Common.DataRecord C2O(
          name="C2O",
          MM=0.0400208,
          Hf=7272185.113740855,
          H0=262006.7065126135,
          Tlimit=1000,
          alow={-3959.92942,-111.7516348,4.59396006,0.00371060202,-7.01476018e-007,-1.371129839e-009,
              7.123853999999999e-013},
          blow={34101.0974,0.4622805600000001},
          ahigh={-634805.659,1184.133091,4.87917334,0.001757538773,-3.95755227e-007,
              3.98917994e-011,-1.546043135e-015},
          bhigh={24898.03938,0.980904059},
          R=207.7537680406189);

        constant IdealGases.Common.DataRecord C3(
          name="C3",
          MM=0.0360321,
          Hf=23311121.08370037,
          H0=336065.5082551392,
          Tlimit=1000,
          alow={-43546.1448,666.018322,1.451033157,0.00743451312,-3.81015299e-006,-2.336961396e-011,
              4.40705453e-013},
          blow={96351.70199999999,20.25173297},
          ahigh={4508098.93,-14610.33761,22.81974644,-0.008544340610000001,
              2.146069341e-006,-2.103867761e-010,6.351589060000001e-015},
          bhigh={191197.6065,-127.1869723},
          R=230.7518018655588);

        constant IdealGases.Common.DataRecord C3H3_1_propynl(
          name="C3H3_1_propynl",
          MM=0.03905592,
          Hf=11521940.84789195,
          H0=317493.4811419114,
          Tlimit=1000,
          alow={-65058.5935,1350.858921,-5.82543393,0.0375661048,-3.73490334e-005,
              2.117676603e-008,-5.139113250000001e-012},
          blow={46565.1053,57.8147755},
          ahigh={4550654.87,-16405.74172,27.12605991,-0.00447460038,1.037712415e-006,
              -1.250211369e-010,6.02658205e-015},
          bhigh={153408.7662,-156.5931809},
          R=212.8863434787863);

        constant IdealGases.Common.DataRecord C3H3_2_propynl(
          name="C3H3_2_propynl",
          MM=0.03905592,
          Hf=8495511.051845662,
          H0=338745.0609280232,
          Tlimit=1000,
          alow={61885.78320000001,-890.957867,6.34755882,0.01633173115,-1.949975695e-005,
              1.417349778e-008,-4.19986632e-012},
          blow={42717.8583,-12.31400729},
          ahigh={2989723.833,-11189.54446,22.22225052,-0.002068106902,4.12188364e-007,
              -4.43898059e-011,1.970824701e-015},
          bhigh={106187.8289,-118.6744583},
          R=212.8863434787863);

        constant IdealGases.Common.DataRecord C3H4_allene(
          name="C3H4_allene",
          MM=0.04006386,
          Hf=4765392.051589637,
          H0=314611.9470265721,
          Tlimit=1000,
          alow={-16451.55745,962.945781,-7.53232668,0.05518219110000001,-6.73358512e-005,
              4.53270905e-008,-1.251837614e-011},
          blow={17724.94269,61.5196976},
          ahigh={3479355.1,-14304.12453,27.02534756,-0.002557412369,4.70664675e-007,-4.65168807e-011,
              1.908219044e-015},
          bhigh={107231.2354,-154.8846158},
          R=207.5304775925235);

        constant IdealGases.Common.DataRecord C3H4_propyne(
          name="C3H4_propyne",
          MM=0.04006386,
          Hf=4615131.941854829,
          H0=325243.6485151456,
          Tlimit=1000,
          alow={-35638.844,832.81391,-4.07375944,0.04113929609999999,-4.47044495e-005,
              2.847458197e-008,-7.69529824e-012},
          blow={17102.06236,45.1672095},
          ahigh={3710441.42,-14891.45507,27.32397127,-0.00264526477,
              4.858300350000001e-007,-4.79412848e-011,1.964338121e-015},
          bhigh={110489.8462,-156.7992462},
          R=207.5304775925235);

        constant IdealGases.Common.DataRecord C3H4_cyclo(
          name="C3H4_cyclo",
          MM=0.04006386,
          Hf=6916457.875002559,
          H0=283888.3472536096,
          Tlimit=1000,
          alow={-19695.20627,1505.379338,-14.18206573,0.07642632960000001,-9.765583660000001e-005,
              6.61200382e-008,-1.811251145e-011},
          blow={26256.31782,96.0463189},
          ahigh={3168399.58,-13710.44699,26.64303646,-0.00242040805,4.42799413e-007,-4.3518202e-011,
              1.775948955e-015},
          bhigh={113368.3702,-152.2619086},
          R=207.5304775925235);

        constant IdealGases.Common.DataRecord C3H5_allyl(
          name="C3H5_allyl",
          MM=0.04107180000000001,
          Hf=3983131.97863254,
          H0=310157.4072721429,
          Tlimit=1000,
          alow={-43159.9614,1441.600907,-11.97014426,0.0731979646,-9.066357849999999e-005,
              6.077059450000001e-008,-1.658826363e-011},
          blow={12321.5746,85.63173239999999},
          ahigh={4094570.59,-16766.76186,31.23006342,-0.002885449982,5.21134354e-007,
              -5.05828422e-011,2.039932554e-015},
          bhigh={118572.0481,-182.3070197},
          R=202.437487521852);

        constant IdealGases.Common.DataRecord C3H6_propylene(
          name="C3H6_propylene",
          MM=0.04207974,
          Hf=475288.1077687267,
          H0=322020.9535515191,
          Tlimit=1000,
          alow={-191246.2174,3542.07424,-21.14878626,0.0890148479,-0.0001001429154,
              6.267959389999999e-008,-1.637870781e-011},
          blow={-15299.61824,140.7641382},
          ahigh={5017620.34,-20860.84035,36.4415634,-0.00388119117,7.27867719e-007,-7.321204500000001e-011,
              3.052176369e-015},
          bhigh={126124.5355,-219.5715757},
          R=197.588483198803);

        constant IdealGases.Common.DataRecord C3H6_cyclo(
          name="C3H6_cyclo",
          MM=0.04207974,
          Hf=1266642.807203657,
          H0=271151.4139583562,
          Tlimit=1000,
          alow={-156578.777,4111.12987,-32.3344746,0.1306337881,-0.0001645563833,
              1.095708326e-007,-2.956394783e-011},
          blow={-12452.71686,193.1559109},
          ahigh={4785000.67,-20421.18175,36.3149578,-0.00356131944,6.47624124e-007,-6.328430100000001e-011,
              2.568705857e-015},
          bhigh={126827.4126,-222.3729099},
          R=197.588483198803);

        constant IdealGases.Common.DataRecord C3H6O_propylox(
          name="C3H6O_propylox",
          MM=0.05807914,
          Hf=-1613660.25736607,
          H0=248031.4446804825,
          Tlimit=1000,
          alow={-229280.8804,4495.75054,-29.41117945,0.1213113827,-0.0001440060464,
              9.202051750000001e-008,-2.416278343e-011},
          blow={-33176.9721,184.6878218},
          ahigh={4789729.989999999,-21068.95971,39.5464773,-0.00391092998,
              7.32553151e-007,-7.35708597e-011,3.0606185e-015},
          bhigh={112034.454,-237.2004192},
          R=143.1576294001599);

        constant IdealGases.Common.DataRecord C3H6O_acetone(
          name="C3H6O_acetone",
          MM=0.05807914,
          Hf=-3738857.014756073,
          H0=278812.5478442002,
          Tlimit=1000,
          alow={-227780.2525,4215.28001,-24.15785316,0.0990748332,-0.0001084940903,
              6.583355959999999e-008,-1.676046146e-011},
          blow={-47262.4394,160.7926432},
          ahigh={5001601.92,-21701.55542,39.6449399,-0.00417994505,7.96242953e-007,-8.122558050000001e-011,
              3.42878096e-015},
          bhigh={101514.5028,-236.8533477},
          R=143.1576294001599);

        constant IdealGases.Common.DataRecord C3H6O_propanal(
          name="C3H6O_propanal",
          MM=0.05807914,
          Hf=-3202526.759177219,
          H0=298339.0594282216,
          Tlimit=1000,
          alow={-265578.1702,4250.64045,-21.09249262,0.09194256120000001,-0.0001004653044,
              6.13331482e-008,-1.576298535e-011},
          blow={-44503.7105,145.6678605},
          ahigh={4830933.489999999,-20754.51152,39.2485518,-0.004095514,
              7.88169216e-007,-8.107684080000001e-011,3.43710543e-015},
          bhigh={99449.37879999999,-231.6690627},
          R=143.1576294001599);

        constant IdealGases.Common.DataRecord C3H7_n_propyl(
          name="C3H7_n_propyl",
          MM=0.04308768,
          Hf=2332453.267384088,
          H0=344879.5108021598,
          Tlimit=1000,
          alow={-189533.7073,3949.51726,-26.06216089,0.1121920441,-0.0001365292213,
              9.02366272e-008,-2.44105699e-011},
          blow={-7227.87744,167.3705556},
          ahigh={5646512.94,-22910.87136,39.8727518,-0.004106232870000001,
              7.56255777e-007,-7.47826302e-011,3.068983677e-015},
          bhigh={148300.6853,-240.378119},
          R=192.9663421191394);

        constant IdealGases.Common.DataRecord C3H7_i_propyl(
          name="C3H7_i_propyl",
          MM=0.04308768,
          Hf=2165352.137780452,
          H0=343652.9188853984,
          Tlimit=1000,
          alow={-295206.3445,5294.4323,-31.05287013,0.1143871563,-0.0001291752393,
              8.05784376e-008,-2.093908432e-011},
          blow={-14768.15514,198.808236},
          ahigh={5807002.520000001,-24112.19997,40.852884,-0.00451785133,
              8.499427170000001e-007,-8.573514339999999e-011,3.58338396e-015},
          bhigh={154650.405,-248.7098372},
          R=192.9663421191394);

        constant IdealGases.Common.DataRecord C3H8(
          name="C3H8",
          MM=0.04409562,
          Hf=-2373931.923397381,
          H0=334301.1845620949,
          Tlimit=1000,
          alow={-243314.4337,4656.27081,-29.39466091,0.1188952745,-0.0001376308269,
              8.814823909999999e-008,-2.342987994e-011},
          blow={-35403.3527,184.1749277},
          ahigh={6420731.680000001,-26597.91134,45.3435684,-0.00502066392,
              9.471216939999999e-007,-9.57540523e-011,4.00967288e-015},
          bhigh={145558.2459,-281.8374734},
          R=188.5555073270316);

        constant IdealGases.Common.DataRecord C3H8O_1propanol(
          name="C3H8O_1propanol",
          MM=0.06009502,
          Hf=-4246608.121604752,
          H0=291517.6498818038,
          Tlimit=1000,
          alow={-261697.3337,5192.37666,-32.9648116,0.1354568128,-0.0001593156164,
              1.01949816e-007,-2.688552974e-011},
          blow={-56128.5435,208.5024431},
          ahigh={6308672.12,-26422.10376,47.1511259,-0.004642511930000001,
              8.59346536e-007,-8.68209182e-011,3.64222401e-015},
          bhigh={125500.3155,-285.9463804},
          R=138.3554244594644);

        constant IdealGases.Common.DataRecord C3H8O_2propanol(
          name="C3H8O_2propanol",
          MM=0.06009502,
          Hf=-4537813.615837053,
          H0=287291.2763819697,
          Tlimit=1000,
          alow={-338651.024,6106.048000000001,-37.9141804,0.1530494531,-0.0001864354461,
              1.213257738e-007,-3.22043349e-011},
          blow={-62799.5935,233.432261},
          ahigh={6001074.75,-25058.7683,46.22096120000001,-0.00427246631,
              7.69367877e-007,-7.45058484e-011,2.998959935e-015},
          bhigh={114851.8732,-279.6132222},
          R=138.3554244594644);

        constant IdealGases.Common.DataRecord CNCOCN(
          name="CNCOCN",
          MM=0.08004498,
          Hf=3092011.516524834,
          H0=214226.5261356802,
          Tlimit=1000,
          alow={113105.2075,-1978.834961,16.26886206,-0.008330803440000001,
              1.884127045e-005,-1.530681289e-008,4.4181253e-012},
          blow={36802.6174,-59.6332728},
          ahigh={700052.2440000001,-5086.002009999999,19.4675349,-0.001302852727,
              2.75360075e-007,-3.056290852e-011,1.382140838e-015},
          bhigh={55393.3888,-86.2755086},
          R=103.8724976881748);

        constant IdealGases.Common.DataRecord C3O2(
          name="C3O2",
          MM=0.06803090000000001,
          Hf=-1376403.957613379,
          H0=221737.2252902725,
          Tlimit=1000,
          alow={157987.3382,-2529.493506,18.01761578,-0.01786032042,2.978671986e-005,
              -2.182900022e-008,6.013797219999999e-012},
          blow={-1121.054014,-72.77721170000001},
          ahigh={696869.9889999999,-4624.73319,16.63905725,-0.001175486554,
              2.478106444e-007,-2.745165984e-011,1.239566766e-015},
          bhigh={12525.80069,-72.75968780000001},
          R=122.2161106203211);

        constant IdealGases.Common.DataRecord C4(
          name="C4",
          MM=0.0480428,
          Hf=21520472.20395147,
          H0=273042.8284779405,
          Tlimit=1000,
          alow={39037.805,-894.8280779999999,10.50952925,-0.00655289446,
              1.243940464e-005,-8.645341370000001e-009,2.263638846e-012},
          blow={126642.5869,-30.77594475},
          ahigh={920068.513,-1530.3118,6.0500692,0.00525274367,-1.779154772e-006,
              2.589873632e-010,-1.385553481e-014},
          bhigh={133438.9611,-7.26114882},
          R=173.0638513991691);

        constant IdealGases.Common.DataRecord C4H2_butadiyne(
          name="C4H2_butadiyne",
          MM=0.05005868,
          Hf=8989449.98150171,
          H0=287539.743357196,
          Tlimit=1000,
          alow={246754.2569,-3897.85564,23.66080456,-0.02208077805,2.78110114e-005,-1.57734001e-008,
              3.42316546e-012},
          blow={70869.0782,-110.917356},
          ahigh={2328179.913,-8925.186090000001,21.14326883,-0.001368871276,
              2.327503159e-007,-2.124517624e-011,8.053313019999999e-016},
          bhigh={105778.8416,-108.8313574},
          R=166.0945114813255);

        constant IdealGases.Common.DataRecord C4H4_1_3minuscyclo(
          name="C4H4_1_3minuscyclo",
          MM=0.05207456,
          Hf=7393245.377397331,
          H0=232427.0046640816,
          Tlimit=1000,
          alow={-27784.28049,1768.176915,-17.57895171,0.09383512919999999,-0.0001195524281,
              7.97808619e-008,-2.1527511e-011},
          blow={38116.2712,112.8478124},
          ahigh={2991498.949,-14167.81502,30.01978876,-0.002579200423,4.78999045e-007,
              -4.77532971e-011,1.974923662e-015},
          bhigh={127466.692,-172.7532057},
          R=159.6647576090898);

        constant IdealGases.Common.DataRecord C4H6_butadiene(
          name="C4H6_butadiene",
          MM=0.05409044,
          Hf=2033631.081573749,
          H0=279716.7114928257,
          Tlimit=1000,
          alow={-91811.30530000001,3312.57053,-29.85828611,0.1479201147,-0.0002056618326,
              1.466496826e-007,-4.14528573e-011},
          blow={-2077.309444,178.0687329},
          ahigh={-23619031.88,56513.2337,-32.7573832,0.02293070572,-2.297106441e-006,
              4.29259621e-011,4.23676604e-015},
          bhigh={-367135.862,301.3437302},
          R=153.7142607824969);

        constant IdealGases.Common.DataRecord C4H6_1butyne(
          name="C4H6_1butyne",
          MM=0.05409044,
          Hf=3054144.133418031,
          H0=296170.635698286,
          Tlimit=1000,
          alow={-55970.3997,1433.191711,-9.691210720000001,0.0715000239,-8.1579678e-005,
              5.29036497e-008,-1.435655372e-011},
          blow={11849.87013,76.6022536},
          ahigh={6364402.7,-23920.87731,40.7375041,-0.00317672649,1.199856984e-007,
              3.20180251e-011,-2.854392633e-015},
          bhigh={163433.5546,-246.0284791},
          R=153.7142607824969);

        constant IdealGases.Common.DataRecord C4H6_2butyne(
          name="C4H6_2butyne",
          MM=0.05409044,
          Hf=2693636.805320866,
          H0=307632.9199762472,
          Tlimit=1000,
          alow={-265075.6405,4490.72869,-24.00723889,0.0981957955,-0.0001079717182,
              6.675555770000001e-008,-1.740766886e-011},
          blow={-5328.36371,159.5035268},
          ahigh={3981304.33,-18730.32899,36.5456149,-0.002369686378,3.99021181e-007,-3.69870727e-011,
              1.442072006e-015},
          bhigh={126146.0214,-215.5866205},
          R=153.7142607824969);

        constant IdealGases.Common.DataRecord C4H6_cyclo(
          name="C4H6_cyclo",
          MM=0.05409044,
          Hf=2896999.913478241,
          H0=232158.6587204689,
          Tlimit=1000,
          alow={-204670.7734,4919.47057,-37.5327816,0.1497293031,-0.0001860139375,
              1.219909019e-007,-3.25407359e-011},
          blow={-3915.95054,223.3282138},
          ahigh={4517367.819999999,-20973.11985,40.0803917,-0.00394979398,
              7.44848499e-007,-7.52975417e-011,3.153253502e-015},
          bhigh={140646.9848,-243.4836999},
          R=153.7142607824969);

        constant IdealGases.Common.DataRecord C4H8_1_butene(
          name="C4H8_1_butene",
          MM=0.05610631999999999,
          Hf=-9624.584182316718,
          H0=305134.9651875226,
          Tlimit=1000,
          alow={-272149.2014,5100.079250000001,-31.8378625,0.1317754442,-0.0001527359339,
              9.714761109999999e-008,-2.56020447e-011},
          blow={-25230.96386,200.6932108},
          ahigh={6257948.609999999,-26603.76305,47.6492005,-0.00438326711,
              7.12883844e-007,-5.991020839999999e-011,2.051753504e-015},
          bhigh={156925.2657,-291.3869761},
          R=148.1913623991023);

        constant IdealGases.Common.DataRecord C4H8_cis2_buten(
          name="C4H8_cis2_buten",
          MM=0.05610631999999999,
          Hf=-131892.4499058217,
          H0=299431.5078942979,
          Tlimit=1000,
          alow={-277387.0877,5382.38404,-33.751881,0.1322980623,-0.0001490975922,
              9.277722e-008,-2.408282948e-011},
          blow={-27158.84347,211.4462085},
          ahigh={6461018.35,-27753.76432,48.6353236,-0.00486238635,
              8.412626100000001e-007,-7.63389037e-011,2.861702826e-015},
          bhigh={163085.6187,-300.3105998},
          R=148.1913623991023);

        constant IdealGases.Common.DataRecord C4H8_isobutene(
          name="C4H8_isobutene",
          MM=0.05610631999999999,
          Hf=-304778.4991066961,
          H0=303174.4017429766,
          Tlimit=1000,
          alow={-232720.5032,3941.99424,-22.24581184,0.1012790864,-0.0001073194065,
              6.45469691e-008,-1.646330345e-011},
          blow={-22337.66063,147.9597621},
          ahigh={6484970.99,-27325.04764,48.3632108,-0.00476800405,8.23387584e-007,-7.449252999999999e-011,
              2.782303056e-015},
          bhigh={159594.1773,-298.2986237},
          R=148.1913623991023);

        constant IdealGases.Common.DataRecord C4H8_cyclo(
          name="C4H8_cyclo",
          MM=0.05610631999999999,
          Hf=506181.8347736941,
          H0=241223.5020938818,
          Tlimit=1000,
          alow={-304765.5983,6519.48273,-46.6298759,0.1743593052,-0.0002090964176,
              1.343528679e-007,-3.5427274e-011},
          blow={-27000.31171,273.8348195},
          ahigh={4456213.810000001,-23010.18492,44.9244846,-0.003080145176,
              5.317165260000001e-007,-5.08107938e-011,2.048919092e-015},
          bhigh={135548.7603,-277.1801965},
          R=148.1913623991023);

        constant IdealGases.Common.DataRecord C4H9_n_butyl(
          name="C4H9_n_butyl",
          MM=0.05711426,
          Hf=1164857.95316266,
          H0=346620.9664626662,
          Tlimit=1000,
          alow={-223956.0407,4676.554099999999,-29.85424449,0.1345493704,-0.000160066035,
              1.045338096e-007,-2.812951048e-011},
          blow={-15252.97704,190.1651559},
          ahigh={7198686.94,-29592.41524,52.4204281,-0.00544157244,
              9.917758369999999e-007,-9.464455870000001e-011,3.72948704e-015},
          bhigh={183456.6472,-321.420917},
          R=145.5761135660341);

        constant IdealGases.Common.DataRecord C4H9_i_butyl(
          name="C4H9_i_butyl",
          MM=0.05711426,
          Hf=1003602.252747387,
          H0=320707.9983177581,
          Tlimit=1000,
          alow={-239946.1281,4697.44454,-30.8747256,0.1391655831,-0.0001670233968,
              1.092423088e-007,-2.936209962e-011},
          blow={-16381.51036,193.6662372},
          ahigh={6752936.06,-28374.23721,51.4068761,-0.00498239901,8.80150663e-007,-8.12573869e-011,
              3.099140009e-015},
          bhigh={174344.848,-314.9940745},
          R=145.5761135660341);

        constant IdealGases.Common.DataRecord C4H9_s_butyl(
          name="C4H9_s_butyl",
          MM=0.05711426,
          Hf=1243122.120465187,
          H0=307062.5269416079,
          Tlimit=1000,
          alow={-335106.289,6312.945949999999,-40.0302526,0.1563875047,-0.0001842331788,
              1.182727848e-007,-3.131156589e-011},
          blow={-22160.45659,248.1295714},
          ahigh={7224744.35,-30352.91099,52.8855183,-0.00565208355,1.060032692e-006,-1.066129835e-010,
              4.443810960000001e-015},
          bhigh={188349.4279,-325.571988},
          R=145.5761135660341);

        constant IdealGases.Common.DataRecord C4H9_t_butyl(
          name="C4H9_t_butyl",
          MM=0.05711426,
          Hf=905203.0088457768,
          H0=297818.3556961081,
          Tlimit=1000,
          alow={-472346.195,8090.198770000001,-46.8367534,0.1575300095,-0.0001686559436,
              9.98104013e-008,-2.487608823e-011},
          blow={-33193.6741,289.4838706},
          ahigh={7151064.95,-31712.2441,54.4251032,-0.006392331160000001,
              1.241097612e-006,-1.2872483e-010,5.51261874e-015},
          bhigh={193450.6997,-339.9325290000001},
          R=145.5761135660341);

        constant IdealGases.Common.DataRecord C4H10_n_butane(
          name="C4H10_n_butane",
          MM=0.0581222,
          Hf=-2164233.28779709,
          H0=330832.0228759407,
          Tlimit=1000,
          alow={-317587.254,6176.331819999999,-38.9156212,0.1584654284,-0.0001860050159,
              1.199676349e-007,-3.20167055e-011},
          blow={-45403.63390000001,237.9488665},
          ahigh={7682322.45,-32560.5151,57.3673275,-0.00619791681,1.180186048e-006,-1.221893698e-010,
              5.250635250000001e-015},
          bhigh={177452.656,-358.791876},
          R=143.0515706563069);

        constant IdealGases.Common.DataRecord C4H10_isobutane(
          name="C4H10_isobutane",
          MM=0.0581222,
          Hf=-2322520.482707124,
          H0=308599.8121199817,
          Tlimit=1000,
          alow={-383446.933,7000.03964,-44.400269,0.1746183447,-0.0002078195348,
              1.339792433e-007,-3.55168163e-011},
          blow={-50340.18889999999,265.8966497},
          ahigh={7528018.92,-32025.1706,57.00161,-0.00606001309,1.143975809e-006,-1.157061835e-010,
              4.84604291e-015},
          bhigh={172850.0802,-357.617689},
          R=143.0515706563069);

        constant IdealGases.Common.DataRecord C4N2(
          name="C4N2",
          MM=0.0760562,
          Hf=6958012.627504397,
          H0=234029.5860166561,
          Tlimit=1000,
          alow={158780.2866,-2987.184206,23.48081602,-0.02607502448,4.04283003e-005,-2.804912444e-008,
              7.39765205e-012},
          blow={75052.9947,-101.757825},
          ahigh={1167686.152,-6198.644179999999,20.62070093,-0.001518619449,
              3.16236168e-007,-3.4699228e-011,1.555154128e-015},
          bhigh={96674.09389999999,-96.69734738000001},
          R=109.3201080253812);

        constant IdealGases.Common.DataRecord C5(
          name="C5",
          MM=0.0600535,
          Hf=17499801.5436236,
          H0=269623.4357697719,
          Tlimit=1000,
          alow={-12008.01119,-555.3702910000001,11.23828271,-0.00434788452,
              1.73898749e-005,-1.707945418e-008,5.57454191e-012},
          blow={126240.4627,-32.6230899},
          ahigh={217205.5356,-2958.510027,15.61080967,-0.0008200361920000001,
              1.776898025e-007,-2.009853583e-011,9.222677770000001e-016},
          bhigh={139520.8064,-64.33077179999999},
          R=138.4510811193353);

        constant IdealGases.Common.DataRecord C5H6_1_3cyclo(
          name="C5H6_1_3cyclo",
          MM=0.06610114,
          Hf=2031735.004872836,
          H0=204769.9782484841,
          Tlimit=1000,
          alow={-188625.9728,4738.22087,-38.8895801,0.1667438533,-0.0002141149581,
              1.438132328e-007,-3.90647811e-011},
          blow={-5667.022010000001,227.9898557},
          ahigh={4428478.19,-21235.47976,43.0981901,-0.003914783460000001,
              7.31184701e-007,-7.32724119e-011,3.044403403e-015},
          bhigh={138254.2782,-260.5959678},
          R=125.78409389006);

        constant IdealGases.Common.DataRecord C5H8_cyclo(
          name="C5H8_cyclo",
          MM=0.06811702,
          Hf=497672.9751242788,
          H0=218112.5803800577,
          Tlimit=1000,
          alow={-263111.4588,5987.75349,-45.222446,0.1804626339,-0.0002177216062,
              1.402022671e-007,-3.6990943e-011},
          blow={-23795.04749,266.0136401},
          ahigh={4569848.1,-24060.18294,48.8100646,-0.00341305498,6.04700166e-007,-5.927495780000001e-011,
              2.44786539e-015},
          bhigh={141398.3093,-298.9533527},
          R=122.0615934167408);

        constant IdealGases.Common.DataRecord C5H10_1_pentene(
          name="C5H10_1_pentene",
          MM=0.07013290000000001,
          Hf=-303423.9279995551,
          H0=309127.3852927798,
          Tlimit=1000,
          alow={-534054.813,9298.917380000001,-56.6779245,0.2123100266,-0.000257129829,
              1.666834304e-007,-4.43408047e-011},
          blow={-47906.8218,339.60364},
          ahigh={3744014.97,-21044.85321,47.3612699,-0.00042442012,-3.89897505e-008,
              1.367074243e-011,-9.31319423e-016},
          bhigh={115409.1373,-278.6177449000001},
          R=118.5530899192818);

        constant IdealGases.Common.DataRecord C5H10_cyclo(
          name="C5H10_cyclo",
          MM=0.07013290000000001,
          Hf=-1099341.393269065,
          H0=214212.4024530569,
          Tlimit=1000,
          alow={-414111.971,8627.5928,-62.0295998,0.2259910921,-0.000268230333,
              1.706289935e-007,-4.46405092e-011},
          blow={-49315.2214,358.391623},
          ahigh={7501938.73,-35058.6485,63.2248075,-0.00694035658,1.337306593e-006,-1.377905033e-010,
              5.86735764e-015},
          bhigh={195492.5511,-402.65509},
          R=118.5530899192818);

        constant IdealGases.Common.DataRecord C5H11_pentyl(
          name="C5H11_pentyl",
          MM=0.07114084,
          Hf=643933.9203754131,
          H0=343290.8579656918,
          Tlimit=1000,
          alow={-465371.592,8564.22042,-52.9524289,0.2094288859,-0.0002561602906,
              1.692755961e-007,-4.596788110000001e-011},
          blow={-36417.0427,319.686224},
          ahigh={5697252.899999999,-28917.06175,58.1102968,-0.00359399501,
              4.41996763e-007,-1.509664551e-011,-6.62696443e-016},
          bhigh={171700.955,-352.247712},
          R=116.873402113329);

        constant IdealGases.Common.DataRecord C5H11_t_pentyl(
          name="C5H11_t_pentyl",
          MM=0.07114084,
          Hf=458245.9245631623,
          H0=276124.417423241,
          Tlimit=1000,
          alow={-515218.198,9144.32783,-56.0239789,0.1998204194,-0.0002239112591,
              1.375455547e-007,-3.52383305e-011},
          blow={-40362.6661,340.2811},
          ahigh={8602108.26,-38052.05770000001,66.4969037,-0.007533860630000001,
              1.451612787e-006,-1.495593207e-010,6.368022329999999e-015},
          bhigh={228185.8805,-416.940855},
          R=116.873402113329);

        constant IdealGases.Common.DataRecord C5H12_n_pentane(
          name="C5H12_n_pentane",
          MM=0.07214878,
          Hf=-2034130.029641527,
          H0=335196.2430965569,
          Tlimit=1000,
          alow={-276889.4625,5834.28347,-36.1754148,0.1533339707,-0.0001528395882,
              8.191092e-008,-1.792327902e-011},
          blow={-46653.7525,226.5544053},
          ahigh={-2530779.286,-8972.59326,45.3622326,-0.002626989916,3.135136419e-006,
              -5.31872894e-010,2.886896868e-014},
          bhigh={14846.16529,-251.6550384},
          R=115.2406457877736);

        constant IdealGases.Common.DataRecord C5H12_i_pentane(
          name="C5H12_i_pentane",
          MM=0.07214878,
          Hf=-2130320.152329672,
          H0=305036.3429568733,
          Tlimit=1000,
          alow={-423190.339,6497.1891,-36.8112697,0.1532424729,-0.0001548790714,
              8.74989712e-008,-2.07054771e-011},
          blow={-51554.1659,230.9518218},
          ahigh={11568885.94,-45562.4687,74.9544363,-0.007845415580000001,
              1.444393314e-006,-1.464370213e-010,6.230285000000001e-015},
          bhigh={254492.7135,-480.198578},
          R=115.2406457877736);

        constant IdealGases.Common.DataRecord CH3C_CH3_2CH3(
          name="CH3C_CH3_2CH3",
          MM=0.07214878,
          Hf=-2327412.882102788,
          H0=321266.6936294696,
          Tlimit=1000,
          alow={-8973222.270000001,128922.5617,-719.934483,2.056862183,-0.002953159699,
              2.158893146e-006,-6.26831877e-010},
          blow={-639493.2019999999,4020.80636},
          ahigh={16847055.2,-59794.3057,86.85451479999999,-0.0096219176,
              1.653363091e-006,-1.674727926e-010,7.37211936e-015},
          bhigh={345849.682,-576.046697},
          R=115.2406457877736);

        constant IdealGases.Common.DataRecord C6D5_phenyl(
          name="C6D5_phenyl",
          MM=0.08213471,
          Hf=3844172.579412528,
          H0=193816.6823746014,
          Tlimit=1000,
          alow={201283.7008,-1979.349332,2.6282675,0.0595186526,-6.08128045e-005,
              3.38139165e-008,-8.125429080000001e-012},
          blow={46972.47489999999,0.335470098},
          ahigh={1411628.125,-13625.69472,40.2898494,-0.00349098927,7.37961213e-007,-8.19224405e-011,
              3.70533097e-015},
          bhigh={108807.3731,-229.3621057},
          R=101.2296993560944);

        constant IdealGases.Common.DataRecord C6D6(
          name="C6D6",
          MM=0.084148812,
          Hf=691125.3601536288,
          H0=193997.8190066427,
          Tlimit=1000,
          alow={276291.1236,-2865.868902,5.39507043,0.05939315170000001,-6.02363118e-005,
              3.38139857e-008,-8.306046370000001e-012},
          blow={20470.83778,-20.11790696},
          ahigh={1758057.871,-15721.21558,44.6816249,-0.004003361919999999,
              8.4454344e-007,-9.36055698e-011,4.22847553e-015},
          bhigh={89620.45359999999,-261.5332268},
          R=98.80676627971884);

        constant IdealGases.Common.DataRecord C6H2(
          name="C6H2",
          MM=0.07408007999999999,
          Hf=9044266.690856706,
          H0=264682.6785284249,
          Tlimit=1000,
          alow={290372.2964,-4929.7515,31.8932321,-0.03119447315,4.32576368e-005,-2.732517022e-008,
              6.67444611e-012},
          blow={101189.8682,-153.0593012},
          ahigh={2592848.577,-10833.61978,28.47459495,-0.001876727704,3.41213428e-007,
              -3.33739289e-011,1.356853889e-015},
          bhigh={141851.7294,-149.4853494},
          R=112.2362718830757);

        constant IdealGases.Common.DataRecord C6H5_phenyl(
          name="C6H5_phenyl",
          MM=0.07710389999999999,
          Hf=4373319.637528064,
          H0=183578.6905720723,
          Tlimit=1000,
          alow={-121127.8245,3529.04558,-31.16903422,0.146755063,-0.0001831398296,
              1.192576957e-007,-3.14926586e-011},
          blow={24209.72928,186.8799946},
          ahigh={3670279.23,-18946.01209,41.8058182,-0.00350391415,6.56182174e-007,-6.594714449999999e-011,
              2.748094212e-015},
          bhigh={147674.4628,-247.5301142},
          R=107.8346490903833);

        constant IdealGases.Common.DataRecord C6H5O_phenoxy(
          name="C6H5O_phenoxy",
          MM=0.0931033,
          Hf=512334.1492729044,
          H0=174087.2128055611,
          Tlimit=1000,
          alow={-129226.4217,3406.74068,-29.11367361,0.1459180378,-0.0001780202758,
              1.138615885e-007,-2.967142152e-011},
          blow={-10550.26758,177.0682011},
          ahigh={3678640.34,-19729.80806,45.4118441,-0.00375106439,7.11445078e-007,-7.233328850000001e-011,
              3.045637067e-015},
          bhigh={116359.5961,-268.1058539},
          R=89.30373037260763);

        constant IdealGases.Common.DataRecord C6H6(
          name="C6H6",
          MM=0.07811184,
          Hf=1061042.730525872,
          H0=181735.4577743912,
          Tlimit=1000,
          alow={-167734.0902,4404.50004,-37.1737791,0.1640509559,-0.0002020812374,
              1.307915264e-007,-3.4442841e-011},
          blow={-10354.55401,216.9853345},
          ahigh={4538575.72,-22605.02547,46.940073,-0.004206676830000001,
              7.90799433e-007,-7.9683021e-011,3.32821208e-015},
          bhigh={139146.4686,-286.8751333},
          R=106.4431717393932);

        constant IdealGases.Common.DataRecord C6H5OH_phenol(
          name="C6H5OH_phenol",
          MM=0.09411124,
          Hf=-1024309.104842312,
          H0=185915.0936700016,
          Tlimit=1000,
          alow={-120941.8144,3378.29227,-29.91846148,0.1567802942,-0.0001970937198,
              1.291815064e-007,-3.42435126e-011},
          blow={-27793.87017,179.9708977},
          ahigh={4462081.569999999,-21655.21026,48.1501505,-0.00356828243,
              6.32717573e-007,-6.039905720000001e-011,2.399168678e-015},
          bhigh={111372.6204,-286.0454446},
          R=88.34727924103434);

        constant IdealGases.Common.DataRecord C6H10_cyclo(
          name="C6H10_cyclo",
          MM=0.08214360000000001,
          Hf=-55999.49356979728,
          H0=210251.1212072517,
          Tlimit=1000,
          alow={-375028.221,7643.87675,-55.1043476,0.2166231405,-0.0002545452198,
              1.607607304e-007,-4.18524841e-011},
          blow={-36610.7301,320.240946},
          ahigh={7510128.98,-35568.5821,67.03034940000001,-0.00704535187,
              1.3581664e-006,-1.400074492e-010,5.964551700000001e-015},
          bhigh={206027.4332,-423.819766},
          R=101.218743760926);

        constant IdealGases.Common.DataRecord C6H12_1_hexene(
          name="C6H12_1_hexene",
          MM=0.08415948000000001,
          Hf=-498458.4030224521,
          H0=311788.9986962847,
          Tlimit=1000,
          alow={-666883.165,11768.64939,-72.70998330000001,0.2709398396,-0.00033332464,
              2.182347097e-007,-5.85946882e-011},
          blow={-62157.8054,428.682564},
          ahigh={733290.696,-14488.48641,46.7121549,0.00317297847,-5.24264652e-007,
              4.28035582e-011,-1.472353254e-015},
          bhigh={66977.4041,-262.3643854},
          R=98.79424159940152);

        constant IdealGases.Common.DataRecord C6H12_cyclo(
          name="C6H12_cyclo",
          MM=0.08415948000000001,
          Hf=-1465075.5921971,
          H0=208471.0361803566,
          Tlimit=1000,
          alow={-567998.704,10342.38704,-68.0004125,0.2387797658,-0.0002511890049,
              1.425293184e-007,-3.40783319e-011},
          blow={-64046.3516,393.480821},
          ahigh={5225149.47,-33641.9458,71.74607469999999,-0.006698979119999999,
              1.318443254e-006,-1.390794789e-010,6.06010224e-015},
          bhigh={173253.7609,-454.681417},
          R=98.79424159940152);

        constant IdealGases.Common.DataRecord C6H13_n_hexyl(
          name="C6H13_n_hexyl",
          MM=0.08516742000000001,
          Hf=294713.635801108,
          H0=340306.1875069128,
          Tlimit=1000,
          alow={-1427278.22,22488.28093,-129.749224,0.427979733,-0.000555601318,
              3.79125694e-007,-1.048462404e-010},
          blow={-106026.1015,749.718676},
          ahigh={5967938.62,-32990.2316,68.6907344,-0.00422500906,
              5.496523820000001e-007,-2.292851471e-011,-5.08634189e-016},
          bhigh={190697.8683,-418.5362},
          R=97.62503079229123);

        constant IdealGases.Common.DataRecord C6H14_n_hexane(
          name="C6H14_n_hexane",
          MM=0.08617535999999999,
          Hf=-1936980.593988816,
          H0=333065.0431863586,
          Tlimit=1000,
          alow={-581592.67,10790.97724,-66.3394703,0.2523715155,-0.0002904344705,
              1.802201514e-007,-4.617223680000001e-011},
          blow={-72715.4457,393.828354},
          ahigh={-3106625.684,-7346.087920000001,46.94131760000001,0.001693963977,
              2.068996667e-006,-4.21214168e-010,2.452345845e-014},
          bhigh={523.750312,-254.9967718},
          R=96.48317105956971);

        constant IdealGases.Common.DataRecord C7H7_benzyl(
          name="C7H7_benzyl",
          MM=0.09113048,
          Hf=2309874.808077385,
          H0=203607.9695838319,
          Tlimit=1000,
          alow={-183676.4826,4102.46566,-32.024061,0.1588249575,-0.0001894466924,
              1.203649671e-007,-3.136589637e-011},
          blow={5266.33323,193.875172},
          ahigh={5297322.16,-25999.09398,55.0975079,-0.00497766147,9.46315243e-007,-9.639008860000001e-011,
              4.06447042e-015},
          bhigh={173838.2912,-334.382955},
          R=91.23700434805129);

        constant IdealGases.Common.DataRecord C7H8(
          name="C7H8",
          MM=0.09213842,
          Hf=544506.8409030674,
          H0=194710.794910527,
          Tlimit=1000,
          alow={-287796.222,6133.941519999999,-45.74706759999999,0.1936895724,-0.0002304305304,
              1.459301178e-007,-3.7907961e-011},
          blow={-23084.02499,269.3915042},
          ahigh={6184538.350000001,-29902.84056,59.8200597,-0.00569698396,
              1.080748416e-006,-1.098702235e-010,4.62474022e-015},
          bhigh={178204.7857,-369.808225},
          R=90.23892530390688);

        constant IdealGases.Common.DataRecord C7H8O_cresol_mx(
          name="C7H8O_cresol_mx",
          MM=0.10813782,
          Hf=-1223420.261292488,
          H0=201949.1792973078,
          Tlimit=1000,
          alow={-244141.7503,5080.87784,-37.8904804,0.186494507,-0.0002269511868,
              1.458989279e-007,-3.82240335e-011},
          blow={-40936.57829999999,228.1352234},
          ahigh={6017373.45,-28498.82774,60.81543070000001,-0.004996807109999999,
              9.13427995e-007,-8.979444109999999e-011,3.66775697e-015},
          bhigh={147221.84,-367.485014},
          R=76.88773455947235);

        constant IdealGases.Common.DataRecord C7H14_1_heptene(
          name="C7H14_1_heptene",
          MM=0.09818605999999999,
          Hf=-639194.6066478277,
          H0=313588.3036756949,
          Tlimit=1000,
          alow={-744940.284,13321.79893,-82.81694379999999,0.3108065994,-0.000378677992,
              2.446841042e-007,-6.488763869999999e-011},
          blow={-72178.8501,485.667149},
          ahigh={-1927608.174,-9125.024420000002,47.4817797,0.00606766053,-8.684859080000001e-007,
              5.81399526e-011,-1.473979569e-015},
          bhigh={26009.14656,-256.2880707},
          R=84.68077851377274);

        constant IdealGases.Common.DataRecord C7H15_n_heptyl(
          name="C7H15_n_heptyl",
          MM=0.099194,
          Hf=44256.70907514567,
          H0=338155.5336008226,
          Tlimit=1000,
          alow={-1671733.521,26400.1025,-152.6867707,0.5027121410000001,-0.000652101403,
              4.44348811e-007,-1.227815006e-010},
          blow={-127375.4623,878.3933319999999},
          ahigh={5444527.57,-34568.2929,76.38651949999999,-0.003298972,
              2.343496957e-007,2.467674021e-011,-3.162012849e-015},
          bhigh={193907.9354,-464.142466},
          R=83.82031171240196);

        constant IdealGases.Common.DataRecord C7H16_n_heptane(
          name="C7H16_n_heptane",
          MM=0.10020194,
          Hf=-1874015.612871368,
          H0=331540.487140269,
          Tlimit=1000,
          alow={-612743.289,11840.85437,-74.87188599999999,0.2918466052,-0.000341679549,
              2.159285269e-007,-5.65585273e-011},
          blow={-80134.0894,440.721332},
          ahigh={9135632.469999999,-39233.1969,78.8978085,-0.00465425193,
              2.071774142e-006,-3.4425393e-010,1.976834775e-014},
          bhigh={205070.8295,-485.110402},
          R=82.97715593131233);

        constant IdealGases.Common.DataRecord C7H16_2_methylh(
          name="C7H16_2_methylh",
          MM=0.10020194,
          Hf=-1942078.167348856,
          H0=308576.8598891399,
          Tlimit=1000,
          alow={-710477.777,11912.5112,-73.45339440000001,0.2902952369,-0.000346276768,
              2.260184498e-007,-6.12881392e-011},
          blow={-82021.477,432.004229},
          ahigh={1289912.969,-1784.340963,10.83537673,0.05270609239999999,-1.886832314e-005,
              2.432255843e-009,-1.135553789e-013},
          bhigh={-16375.29884,-29.8186241},
          R=82.97715593131233);

        constant IdealGases.Common.DataRecord C8H8_styrene(
          name="C8H8_styrene",
          MM=0.10414912,
          Hf=1423919.85645198,
          H0=201057.8677957144,
          Tlimit=1000,
          alow={-268693.052,6167.99947,-48.3605494,0.2182873229,-0.0002738561832,
              1.810084981e-007,-4.86775027e-011},
          blow={-11406.39978,281.7679014},
          ahigh={-6629183.62,15145.94166,1.609822364,0.033833186,-1.093737395e-005,
              1.338825116e-009,-6.03253492e-014},
          bhigh={-89973.2415,43.1128279},
          R=79.83237880454487);

        constant IdealGases.Common.DataRecord C8H10_ethylbenz(
          name="C8H10_ethylbenz",
          MM=0.106165,
          Hf=281825.4603682946,
          H0=209862.0072528611,
          Tlimit=1000,
          alow={-469494,9307.16836,-65.2176947,0.2612080237,-0.000318175348,
              2.051355473e-007,-5.40181735e-011},
          blow={-40738.7021,378.090436},
          ahigh={5551564.100000001,-28313.80598,60.6124072,0.001042112857,-1.327426719e-006,
              2.166031743e-010,-1.142545514e-014},
          bhigh={164224.1062,-369.176982},
          R=78.31650732350586);

        constant IdealGases.Common.DataRecord C8H16_1_octene(
          name="C8H16_1_octene",
          MM=0.11221264,
          Hf=-744924.9924072726,
          H0=315026.8989304592,
          Tlimit=1000,
          alow={-928190.522,16409.74476,-101.5939534,0.374800141,-0.00045908294,
              2.96533534e-007,-7.84044521e-011},
          blow={-89524.2608,590.759427},
          ahigh={-4409336.07,-4383.678800000001,49.39154259999999,
              0.007912339629999999,-7.88866951e-007,9.97021235e-012,1.913144872e-015},
          bhigh={-11226.19342,-257.7650649},
          R=74.09568119955115);

        constant IdealGases.Common.DataRecord C8H17_n_octyl(
          name="C8H17_n_octyl",
          MM=0.11322058,
          Hf=-144143.4057306543,
          H0=336537.7566516617,
          Tlimit=1000,
          alow={-1934340.995,30549.7983,-176.7903454,0.5801596649999999,-0.000751741401,
              5.11246903e-007,-1.410193662e-010},
          blow={-149889.4706,1013.724329},
          ahigh={5632173.390000001,-38211.4367,86.37927500000001,-0.00360893158,
              2.544260445e-007,2.908638837e-011,-3.67954974e-015},
          bhigh={210313.547,-526.242283},
          R=73.43604846398067);

        constant IdealGases.Common.DataRecord C8H18_n_octane(
          name="C8H18_n_octane",
          MM=0.11422852,
          Hf=-1827477.060895125,
          H0=330740.51909278,
          Tlimit=1000,
          alow={-698664.715,13385.01096,-84.1516592,0.327193666,-0.000377720959,
              2.339836988e-007,-6.01089265e-011},
          blow={-90262.2325,493.922214},
          ahigh={6365406.949999999,-31053.64657,69.6916234,0.01048059637,-4.12962195e-006,
              5.543226319999999e-010,-2.651436499e-014},
          bhigh={150096.8785,-416.989565},
          R=72.78805678301707);

        constant IdealGases.Common.DataRecord C8H18_isooctane(
          name="C8H18_isooctane",
          MM=0.11422852,
          Hf=-1961068.916939482,
          H0=281628.440953275,
          Tlimit=1000,
          alow={-168875.8565,3126.903227,-21.23502828,0.1489151508,-0.0001151180135,
              4.47321617e-008,-5.55488207e-012},
          blow={-44680.6062,141.7455793},
          ahigh={13527650.32,-46633.7034,77.95313179999999,0.01423729984,-5.073593909999999e-006,
              7.24823297e-010,-3.81919011e-014},
          bhigh={254117.8017,-493.388719},
          R=72.78805678301707);

        constant IdealGases.Common.DataRecord C9H19_n_nonyl(
          name="C9H19_n_nonyl",
          MM=0.12724716,
          Hf=-291008.4594422383,
          H0=335284.496722756,
          Tlimit=1000,
          alow={-2194880.612,34685.6578,-200.9261419,0.658050311,-0.000852593001,
              5.79463896e-007,-1.597637099e-010},
          blow={-172319.4608,1149.114017},
          ahigh={5277361.74,-40257.0196,94.57296720000001,-0.002940301447,
              6.97810699e-009,6.80525024e-011,-5.90709533e-015},
          bhigh={216532.0614,-575.44495},
          R=65.34112038335474);

        constant IdealGases.Common.DataRecord C10H8_naphthale(
          name="C10H8_naphthale",
          MM=0.12817052,
          Hf=1174841.141317052,
          H0=161605.6172667475,
          Tlimit=1000,
          alow={-260284.5316,6237.40957,-52.2609504,0.2397692776,-0.0002912244803,
              1.854944401e-007,-4.81661927e-011},
          blow={-11147.0088,297.2139517},
          ahigh={5906172.11,-31632.2924,70.3034203,-0.00601886554,1.142052144e-006,-1.161605689e-010,
              4.89284402e-015},
          bhigh={196256.7046,-434.7848950000001},
          R=64.87039297336079);

        constant IdealGases.Common.DataRecord C10H21_n_decyl(
          name="C10H21_n_decyl",
          MM=0.14127374,
          Hf=-408710.0688351565,
          H0=334273.0220067792,
          Tlimit=1000,
          alow={-2446511.152,38700.813,-224.4388176,0.734362497,-0.00095135256,
              6.46297033e-007,-1.781502862e-010},
          blow={-194163.3889,1280.987834},
          ahigh={4967237.76,-42424.6844,102.8853417,-0.00232484818,-2.2842339e-007,
              1.056127364e-010,-8.0680659e-015},
          bhigh={223542.989,-625.5191159999999},
          R=58.85362700810497);

        constant IdealGases.Common.DataRecord C12H9_o_bipheny(
          name="C12H9_o_bipheny",
          MM=0.15319986,
          Hf=2791973.830785485,
          H0=173559.8648719392,
          Tlimit=1000,
          alow={-359584.082,7661.37856,-58.7329046,0.2697557882,-0.000322975668,
              2.0329071e-007,-5.23131672e-011},
          blow={14584.14642,339.268711},
          ahigh={6736469.42,-36321.9435,82.102396,-0.00750234286,1.456251733e-006,-1.507145019e-010,
              6.43647043e-015},
          bhigh={255552.4521,-504.246297},
          R=54.27206003974155);

        constant IdealGases.Common.DataRecord C12H10_biphenyl(
          name="C12H10_biphenyl",
          MM=0.1542078,
          Hf=1181068.66189648,
          H0=173684.6190659617,
          Tlimit=1000,
          alow={-367103.405,8128.41259,-63.9099457,0.2901422744,-0.000350959074,
              2.230989996e-007,-5.78847029e-011},
          blow={-16792.63066,363.346419},
          ahigh={7480385.359999999,-39280.8723,86.61482219999999,-0.007946398570000001,
              1.531868544e-006,-1.576450171e-010,6.70060273e-015},
          bhigh={243805.0641,-538.138149},
          R=53.91732454519163);

        constant IdealGases.Common.DataRecord Ca(
          name="Ca",
          MM=0.040078,
          Hf=4436349.119217526,
          H0=154634.1633814063,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={20638.92786,4.38454833},
          ahigh={7547341.239999999,-21486.42662,25.30849567,-0.01103773705,
              2.293249636e-006,-1.209075383e-010,-4.015333268e-015},
          bhigh={158586.2323,-160.9512955},
          R=207.4572583462249);

        constant IdealGases.Common.DataRecord Caplus(
          name="Caplus",
          MM=0.0400774514,
          Hf=19308306.81513845,
          H0=154636.2800904052,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={92324.1779,5.07767498},
          ahigh={3747070.82,-11747.07738,16.72546969,-0.00833479771,2.394593294e-006,
              -2.988243468e-010,1.356563002e-014},
          bhigh={166432.9088,-95.8282126},
          R=207.4600981239042);

        constant IdealGases.Common.DataRecord CaBr(
          name="CaBr",
          MM=0.119982,
          Hf=-207270.0988481606,
          H0=82146.64699704957,
          Tlimit=1000,
          alow={569.3832620000001,-125.7513537,5.00150833,-0.001039868753,
              1.377594927e-006,-8.94901396e-010,2.395658928e-013},
          blow={-3728.10398,1.784864847},
          ahigh={2783236.402,-8458.203729999999,14.3175656,-0.00543078168,
              1.522218659e-006,-1.831824807e-010,7.86428866e-015},
          bhigh={49312.7068,-65.37001100000001},
          R=69.29766131586405);

        constant IdealGases.Common.DataRecord CaBr2(
          name="CaBr2",
          MM=0.199886,
          Hf=-1937090.641665749,
          H0=78060.49448185465,
          Tlimit=1000,
          alow={1572.504318,-223.8551236,8.38845789,-0.001944164774,2.397926088e-006,
              -1.55657235e-009,4.12430958e-013},
          blow={-47721.0661,-10.74965233},
          ahigh={-22198.46426,-4.46315533,7.50375511,-1.641654626e-006,
              3.87942806e-010,-4.68342426e-014,2.259325541e-018},
          bhigh={-48854.3682,-5.59032425},
          R=41.59606975976306);

        constant IdealGases.Common.DataRecord CaCL(
          name="CaCL",
          MM=0.075531,
          Hf=-1373911.175543816,
          H0=127035.4556407303,
          Tlimit=1000,
          alow={6395.335260000001,-224.9042269,5.28327839,-0.001447983237,
              1.643742771e-006,-9.43010428e-010,2.237516133e-013},
          blow={-12701.69,-1.391964289},
          ahigh={1629182.545,-4766.22302,9.65892977,-0.002523044131,5.83354216e-007,-4.10172699e-011,
              8.813177639999999e-017},
          bhigh={16625.99241,-33.98731174},
          R=110.0802584369332);

        constant IdealGases.Common.DataRecord CaCLplus(
          name="CaCLplus",
          MM=0.0755304514,
          Hf=6185459.034606007,
          H0=123938.2636603705,
          Tlimit=1000,
          alow={2285.284542,-200.2872721,4.93699019,-0.000386097303,
              8.686661880000001e-008,1.47020568e-010,-7.68931587e-014},
          blow={55882.7795,-0.6359815341},
          ahigh={177028.0396,-589.137239,5.1033688,-0.0002356761168,5.48373287e-008,
              2.137973112e-014,-5.57288731e-016},
          bhigh={58534.17249999999,-2.191253644},
          R=110.0810579823968);

        constant IdealGases.Common.DataRecord CaCL2(
          name="CaCL2",
          MM=0.110984,
          Hf=-4372193.081885677,
          H0=133866.3501045195,
          Tlimit=1000,
          alow={11068.0203,-424.910825,9.13471186,-0.00349718531,
              4.242184629999999e-006,-2.719673231e-009,7.13826863e-013},
          blow={-58503.4676,-18.08678294},
          ahigh={-35957.6878,-8.796495630000001,7.50725691,-3.129465934e-006,
              7.322886480000001e-010,-8.776403220000001e-014,4.21048604e-018},
          bhigh={-60667.7966,-8.553523451},
          R=74.91595184891516);

        constant IdealGases.Common.DataRecord CaF(
          name="CaF",
          MM=0.0590764032,
          Hf=-4678751.159989374,
          H0=154581.3472950229,
          Tlimit=1000,
          alow={31842.354,-491.8235089999999,5.70112089,-0.001465138218,
              9.09293081e-007,-1.367585222e-010,-5.10632338e-014},
          blow={-31976.9411,-5.99666226},
          ahigh={519588.2669999999,-1512.321567,5.86927625,-0.000388252448,-2.484582298e-008,
              3.74991596e-011,-3.47097645e-015},
          bhigh={-24888.14584,-8.6146637},
          R=140.7409989374573);

        constant IdealGases.Common.DataRecord CaFplus(
          name="CaFplus",
          MM=0.0590758546,
          Hf=4412371.344688089,
          H0=152399.1156955688,
          Tlimit=1000,
          alow={41583.408,-562.766166,5.68752215,-0.001264710572,6.66908648e-007,-6.92675282e-011,
              -3.97871462e-014},
          blow={33051.195,-6.97448501},
          ahigh={-139867.0845,219.1526375,4.21432434,0.0002142798048,-5.7786726e-008,
              9.98575631e-012,-6.05962188e-016},
          bhigh={28416.05897,2.740342729},
          R=140.7423059098666);

        constant IdealGases.Common.DataRecord CaF2(
          name="CaF2",
          MM=0.0780748064,
          Hf=-10129111.36722332,
          H0=164093.7914640798,
          Tlimit=1000,
          alow={59093.5229,-1019.733042,10.13165309,-0.00550350644,5.62931998e-006,-3.115401465e-009,
              7.205525940000001e-013},
          blow={-91926.08189999999,-26.3950595},
          ahigh={-82804.0944,-31.15950071,7.02357737,-9.521000020000001e-006,
              2.118160895e-009,-2.440713888e-013,1.135135468e-017},
          bhigh={-97294.66770000001,-7.54624334},
          R=106.4936614431362);

        constant IdealGases.Common.DataRecord CaH(
          name="CaH",
          MM=0.04108594,
          Hf=5583640.169848858,
          H0=211875.5223806489,
          Tlimit=1000,
          alow={-45137.8223,762.942921,-1.280874223,0.01318774659,-1.481595334e-005,
              8.53657322e-009,-1.989958945e-012},
          blow={23003.78814,30.53421525},
          ahigh={-2696952.529,8607.05975,-7.02745482,0.007467916309999999,-2.318610699e-006,
              3.42307242e-010,-1.892679792e-014},
          bhigh={-27738.19107,78.45822010000001},
          R=202.367817311713);

        constant IdealGases.Common.DataRecord CaI(
          name="CaI",
          MM=0.16698247,
          Hf=72961.67076699728,
          H0=59995.04019793216,
          Tlimit=1000,
          alow={-826.179018,-85.08975899999999,4.86417169,-0.000786316965,
              1.100493506e-006,-7.34803061e-010,2.010892767e-013},
          blow={523.675344,3.58539168},
          ahigh={1771071.309,-5683.64373,11.53857476,-0.0041940202,1.291359961e-006,-1.730043579e-010,
              8.38076235e-015},
          bhigh={35832.932,-44.0591757},
          R=49.79248420507854);

        constant IdealGases.Common.DataRecord CaI2(
          name="CaI2",
          MM=0.29388694,
          Hf=-882378.4581921197,
          H0=54616.22418471539,
          Tlimit=1000,
          alow={-1097.851401,-145.9821761,8.08934184,-0.001305332923,1.624199331e-006,
              -1.061194001e-009,2.825551217e-013},
          blow={-32726.9298,-6.98171494},
          ahigh={-16237.27104,-2.859530722,7.50243219,-1.071178707e-006,
              2.544559095e-010,-3.083631004e-014,1.491836724e-018},
          bhigh={-33463.4117,-3.56730574},
          R=28.29139668472509);

        constant IdealGases.Common.DataRecord CaO(
          name="CaO",
          MM=0.0560774,
          Hf=677729.4953047038,
          H0=159656.2608109506,
          Tlimit=1000,
          alow={38897.3307,-483.567735,5.07771325,0.000307623525,-1.159759897e-006,
              8.493433339999999e-010,-1.495333366e-013},
          blow={5937.643480000001,-3.95532073},
          ahigh={-49131061.7,149586.595,-168.1654149,0.09381950259999999,-2.455529428e-005,
              3.07498072e-009,-1.485914237e-013},
          bhigh={-946151.172,1235.694769},
          R=148.2677870229362);

        constant IdealGases.Common.DataRecord CaOplus(
          name="CaOplus",
          MM=0.0560768514,
          Hf=12665431.88977975,
          H0=163402.7191476731,
          Tlimit=1000,
          alow={109806.0332,-1459.992448,9.88077794,-0.009157564600000001,
              8.707582560000001e-006,-4.39041108e-009,9.264854659999999e-013},
          blow={91500.57350000001,-30.09947701},
          ahigh={939784.313,-2993.362243,8.33619182,-0.002303295087,7.37396753e-007,-1.052888279e-010,
              5.25713841e-015},
          bhigh={102809.8401,-24.61547836},
          R=148.2692375271269);

        constant IdealGases.Common.DataRecord CaOH(
          name="CaOH",
          MM=0.05708534000000001,
          Hf=-3035934.444815429,
          H0=193564.5298775482,
          Tlimit=1000,
          alow={46200.289,-928.567282,9.175828770000001,-0.0039628288,
              2.505447308e-006,3.85206821e-011,-3.35277847e-013},
          blow={-17980.09717,-25.3370485},
          ahigh={1979972.994,-5598.88099,11.51348706,-0.001668264707,3.31257391e-007,
              -1.789056647e-011,-3.58071641e-016},
          bhigh={13401.96822,-46.46084260000001},
          R=145.6498638704788);

        constant IdealGases.Common.DataRecord CaOHplus(
          name="CaOHplus",
          MM=0.0570847914,
          Hf=6533055.317427332,
          H0=194407.6299103372,
          Tlimit=1000,
          alow={48843.4266,-983.2415100000001,9.61018295,-0.00520436066,
              4.26304982e-006,-1.197590878e-009,9.028411889999999e-015},
          blow={47950.56340000001,-28.27077334},
          ahigh={863761.537,-2347.302046,7.9819112,0.0001003160947,-6.24007417e-008,
              1.019540904e-011,-5.69892528e-016},
          bhigh={58305.80119999999,-21.52181937},
          R=145.6512636043372);

        constant IdealGases.Common.DataRecord Ca_OH_2(
          name="Ca_OH_2",
          MM=0.07409268000000001,
          Hf=-8075546.315776401,
          H0=223939.5443652463,
          Tlimit=1000,
          alow={83892.57539999999,-1791.902135,16.21891031,-0.00784085717,
              5.09511161e-006,-6.95548755e-011,-6.13215264e-013},
          blow={-66004.0563,-60.7091392},
          ahigh={1721854.884,-4702.21767,13.96947691,0.0001983791405,-1.243050592e-007,
              2.033402404e-011,-1.137157819e-015},
          bhigh={-44437.6135,-52.8744486},
          R=112.2171852873995);

        constant IdealGases.Common.DataRecord CaS(
          name="CaS",
          MM=0.072143,
          Hf=1683812.885519038,
          H0=129743.8836754779,
          Tlimit=1000,
          alow={23209.90615,-451.8446080000001,6.17233375,-0.00359885202,
              4.823731709999999e-006,-3.63173354e-009,1.212849867e-012},
          blow={15545.97691,-7.686936462},
          ahigh={-15683532.14,52938.5581,-63.2246724,0.0402772638,-1.114855081e-005,
              1.464389344e-009,-7.37607897e-014},
          bhigh={-317202.267,479.9606012},
          R=115.2498787131115);

        constant IdealGases.Common.DataRecord Ca2(
          name="Ca2",
          MM=0.08015600000000001,
          Hf=4263752.382853436,
          H0=140639.9520934178,
          Tlimit=1000,
          alow={-85822.2862,158.818896,11.03952055,-0.0333319676,5.34593881e-005,-4.011573239999999e-008,
              1.160486682e-011},
          blow={37703.508,-23.97744561},
          ahigh={240596.6267,57.7580382,2.347436675,0.0001199275034,-4.32915031e-008,
              7.01530269e-012,-3.70566032e-016},
          bhigh={40818.754,18.95399607},
          R=103.7286291731124);

        constant IdealGases.Common.DataRecord Cd(
          name="Cd",
          MM=0.112411,
          Hf=994564.5888747543,
          H0=55131.86431932818,
          Tlimit=1000,
          alow={-0.0001081751543,1.816433041e-006,2.499999989,3.129989231e-011,-4.60071016e-014,
              3.40704874e-017,-9.989497436e-021},
          blow={12700.99766,5.93154976},
          ahigh={-269975.7467,786.600114,1.628169079,0.000459412329,-1.150420443e-007,
              1.074836707e-011,8.790199554999999e-017},
          bhigh={7675.14826,12.20006052},
          R=73.96493225751928);

        constant IdealGases.Common.DataRecord Cdplus(
          name="Cdplus",
          MM=0.1124104514,
          Hf=8769240.899961371,
          H0=55132.13338097137,
          Tlimit=1000,
          alow={0.000409834494,-4.34358162e-006,2.500000019,-4.389036810000001e-011,
              5.5639692e-014,-3.63822826e-017,9.607881994999999e-021},
          blow={117812.9439,6.62468945},
          ahigh={14848.80812,-46.6915368,2.557883006,-3.6247017e-005,1.21374757e-008,
              -2.072802814e-012,1.420665367e-016},
          bhigh={118107.0109,6.21641448},
          R=73.96529323073246);

        constant IdealGases.Common.DataRecord CL(
          name="CL",
          MM=0.03545300000000001,
          Hf=3421459.396948072,
          H0=176898.6545567371,
          Tlimit=1000,
          alow={22762.15854,-216.8413293,2.745185115,0.002451101694,-5.45801199e-006,
              4.41798688e-009,-1.288134004e-012},
          blow={15013.57068,3.102963457},
          ahigh={-169793.293,608.172646,2.12866409,0.0001307367034,-2.644883596e-008,
              2.842504775e-012,-1.252911731e-016},
          bhigh={9934.3874,8.844772103},
          R=234.5209714269596);

        constant IdealGases.Common.DataRecord CLplus(
          name="CLplus",
          MM=0.0354524514,
          Hf=38891517.52705033,
          H0=180138.0369426302,
          Tlimit=1000,
          alow={103469.7859,-1293.758873,8.186702690000001,-0.0099160146,
              9.20847237e-006,-4.50742624e-009,9.18212788e-013},
          blow={171475.878,-27.66417931},
          ahigh={40564.0948,-49.6016572,3.10165363,-0.000586873829,2.252039316e-007,-3.29970302e-011,
              1.708780842e-015},
          bhigh={165298.2337,2.574942598},
          R=234.5246004624662);

        constant IdealGases.Common.DataRecord CLminus(
          name="CLminus",
          MM=0.0354535486,
          Hf=-6599000.135066875,
          H0=174804.1661477012,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-28883.89093,4.200642023},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={-28883.89093,4.200642023},
          R=234.5173425037629);

        constant IdealGases.Common.DataRecord CLCN(
          name="CLCN",
          MM=0.06147039999999999,
          Hf=2183164.580025509,
          H0=173563.8941669487,
          Tlimit=1000,
          alow={72740.43429999999,-1297.344947,11.07676527,-0.01108430216,
              1.614009477e-005,-1.088916772e-008,2.830952246e-012},
          blow={20843.88986,-35.97370046},
          ahigh={346757.312,-1957.85737,8.807806149999999,-0.0004388362779999999,
              1.024761895e-007,-1.110675026e-011,4.98617942e-016},
          bhigh={25819.23944,-26.36885363},
          R=135.2597673026367);

        constant IdealGases.Common.DataRecord CLF(
          name="CLF",
          MM=0.0544514032,
          Hf=-1022948.71622335,
          H0=163597.3818210069,
          Tlimit=1000,
          alow={33522.1081,-368.83119,4.27228862,0.002549434508,-4.45683089e-006,
              3.41385412e-009,-9.8386852e-013},
          blow={-5839.36969,0.2318014199},
          ahigh={3045867.173,-9979.32826,16.84162254,-0.007465850620000001,
              2.336213612e-006,-3.36586546e-010,1.763082415e-014},
          bhigh={54471.20800000001,-87.07987094000001},
          R=152.6952752615198);

        constant IdealGases.Common.DataRecord CLF3(
          name="CLF3",
          MM=0.0924482096,
          Hf=-1780456.330221889,
          H0=148498.8087860168,
          Tlimit=1000,
          alow={128517.5171,-2140.445721,14.93096474,-0.00604247104,3.71896861e-006,-8.0532011e-010,
              -7.98560053e-014},
          blow={-11384.5964,-55.94838353},
          ahigh={-229495.6235,-122.0741,10.09124644,-3.64972475e-005,8.05891075e-009,
              -9.23084995e-013,4.27256949e-017},
          bhigh={-22828.40447,-25.11605479},
          R=89.93653891161999);

        constant IdealGases.Common.DataRecord CLF5(
          name="CLF5",
          MM=0.130445016,
          Hf=-1824523.521849237,
          H0=137455.5851179473,
          Tlimit=1000,
          alow={245970.3939,-4315.34807,27.27005972,-0.01670193839,1.421668208e-005,-6.426479740000001e-009,
              1.183099799e-012},
          blow={-10714.23726,-126.7466837},
          ahigh={-426932.7449999999,-205.805739,16.15465278,-6.21268818e-005,
              1.376637959e-008,-1.581335709e-012,7.33642249e-017},
          bhigh={-33614.666,-57.57531175},
          R=63.73928460402045);

        constant IdealGases.Common.DataRecord CLO(
          name="CLO",
          MM=0.0514524,
          Hf=1975051.018028314,
          H0=185066.4886380422,
          Tlimit=1000,
          alow={-16872.68145,257.3812247,2.17584612,0.006432061130000001,-8.568249500000001e-006,
              5.764971250000001e-009,-1.545771209e-012},
          blow={9829.518979999999,13.86010503},
          ahigh={409376.052,-1765.985112,7.08790063,-0.001828450169,7.1038181e-007,-1.209332942e-010,
              7.07644104e-015},
          bhigh={21518.91784,-16.68645548},
          R=161.5954163459819);

        constant IdealGases.Common.DataRecord CLO2(
          name="CLO2",
          MM=0.06745180000000001,
          Hf=1556667.131195906,
          H0=160123.9107036432,
          Tlimit=1000,
          alow={-11272.77696,390.303203,-0.384301853,0.02108677947,-2.793137755e-005,
              1.841289286e-008,-4.83977915e-012},
          blow={9756.93367,29.132627},
          ahigh={-163379.3802,-316.148067,7.00978726,0.0002837971144,-1.179925338e-007,
              2.920383252e-011,-2.024030202e-015},
          bhigh={11849.46452,-10.91168827},
          R=123.2653835776065);

        constant IdealGases.Common.DataRecord CL2(
          name="CL2",
          MM=0.07090600000000001,
          Hf=0,
          H0=129482.8364313316,
          Tlimit=1000,
          alow={34628.1517,-554.7126520000001,6.20758937,-0.002989632078,
              3.17302729e-006,-1.793629562e-009,4.260043590000001e-013},
          blow={1534.069331,-9.438331107},
          ahigh={6092569.42,-19496.27662,28.54535795,-0.01449968764,4.46389077e-006,-6.35852586e-010,
              3.32736029e-014},
          bhigh={121211.7724,-169.0778824},
          R=117.2604857134798);

        constant IdealGases.Common.DataRecord CL2O(
          name="CL2O",
          MM=0.08690539999999999,
          Hf=909034.4213363037,
          H0=134577.1609129007,
          Tlimit=1000,
          alow={77988.554,-1182.537879,9.52651466,-0.002596163176,
              8.696781310000001e-007,4.484098269999999e-010,-3.044511967e-013},
          blow={13767.29572,-24.84690718},
          ahigh={-127174.3461,-67.4196322,7.05002245,-1.988084386e-005,
              4.366209050000001e-009,-4.978580680000001e-013,2.295679186e-017},
          bhigh={7387.2893,-8.797477254},
          R=95.67267396502405);

        constant IdealGases.Common.DataRecord Co(
          name="Co",
          MM=0.0589332,
          Hf=7269953.099441402,
          H0=107914.8595358813,
          Tlimit=1000,
          alow={-2598.939184,246.1989844,-0.610605837,0.01393005772,-2.210012979e-005,
              1.623755261e-008,-4.534904351e-012},
          blow={49846.1376,22.57584199},
          ahigh={1381841.305,-3756.03668,6.65713065,-0.001269246675,1.464092329e-007,
              6.57494657e-012,-1.102384178e-015},
          bhigh={74944.42909999999,-22.58500836},
          R=141.0829888755405);

        constant IdealGases.Common.DataRecord Coplus(
          name="Coplus",
          MM=0.05893265139999999,
          Hf=20243503.02691455,
          H0=106757.5758181482,
          Tlimit=1000,
          alow={102849.416,-874.473126,4.27950028,0.002225857835,-7.45727457e-006,
              7.27922195e-009,-2.347541963e-012},
          blow={147489.5959,-5.67901922},
          ahigh={2907386.174,-8619.705749999999,11.88134934,-0.00351064742,
              5.74800468e-007,-2.534065135e-011,2.976607469e-016},
          bhigh={197741.9221,-60.9653344},
          R=141.0843022073838);

        constant IdealGases.Common.DataRecord Cominus(
          name="Cominus",
          MM=0.0589337486,
          Hf=6081648.978968902,
          H0=107014.6079253475,
          Tlimit=1000,
          alow={34594.9376,-135.5041712,1.116330898,0.009042761829999999,-1.454296726e-005,
              9.99494063e-009,-2.595633259e-012},
          blow={43370.3782,12.70494975},
          ahigh={-574139.417,1763.109207,1.415561988,0.000377686969,-7.53417998e-008,
              7.99570154e-012,-3.49044e-016},
          bhigh={30834.93114,16.34360353},
          R=141.0816755681481);

        constant IdealGases.Common.DataRecord Cr(
          name="Cr",
          MM=0.0519961,
          Hf=7644419.485307553,
          H0=119190.2469608298,
          Tlimit=1000,
          alow={1335.658217,-21.02424026,2.631908173,-0.000424626325,7.43919416e-007,
              -6.76393163e-010,2.507855625e-013},
          blow={47158.6664,6.00542545},
          ahigh={-11202207.89,34011.63690000001,-36.5706217,0.02110296902,-5.51818014e-006,
              7.17360171e-010,-3.505127367e-014},
          bhigh={-168899.344,286.4481267},
          R=159.9056852340849);

        constant IdealGases.Common.DataRecord Crplus(
          name="Crplus",
          MM=0.0519955514,
          Hf=20319944.67895959,
          H0=119191.5045255199,
          Tlimit=1000,
          alow={181.9187467,-2.188843517,2.510676511,-2.706791825e-005,
              3.76849263e-008,-2.736784742e-011,8.115389931999999e-015},
          blow={126338.0825,6.50627617},
          ahigh={3342330.79,-10642.61051,15.57884307,-0.00770897148,2.158300274e-006,
              -2.36810811e-010,8.952805604e-015},
          bhigh={193299.767,-86.0435667},
          R=159.9073723833997);

        constant IdealGases.Common.DataRecord Crminus(
          name="Crminus",
          MM=0.0519966486,
          Hf=6289317.423431017,
          H0=119188.989422676,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={38586.2787,6.56683537},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={38586.2787,6.56683537},
          R=159.9039981203712);

        constant IdealGases.Common.DataRecord CrN(
          name="CrN",
          MM=0.0660028,
          Hf=7651323.883229196,
          H0=132991.1609810493,
          Tlimit=1000,
          alow={-8239.129220000001,300.8144202,0.514787492,0.01129636791,-1.515183504e-005,
              1.010997229e-008,-2.68777575e-012},
          blow={58456.2812,22.98028696},
          ahigh={1110672.49,-3690.47854,8.59905668,-0.002125587223,5.28235848e-007,-4.92113915e-011,
              1.404331106e-015},
          bhigh={82548.04580000001,-27.99968411},
          R=125.9715042392141);

        constant IdealGases.Common.DataRecord CrO(
          name="CrO",
          MM=0.0679955,
          Hf=2744024.501621431,
          H0=144849.5562206323,
          Tlimit=1000,
          alow={9373.33411,136.9743818,1.621443428,0.008814095959999999,-1.23284536e-005,
              8.497960940000001e-009,-2.315804197e-012},
          blow={20909.48871,17.81935787},
          ahigh={1092367.332,-3749.75865,9.00787021,-0.002545445236,
              6.928051680000001e-007,-6.390831950000001e-011,1.659741645e-015},
          bhigh={44470.9821,-29.42600453},
          R=122.2797391003817);

        constant IdealGases.Common.DataRecord CrO2(
          name="CrO2",
          MM=0.0839949,
          Hf=-1286307.085311132,
          H0=127315.6941671459,
          Tlimit=1000,
          alow={35486.299,-229.8628537,2.286289393,0.01616929338,-2.34519891e-005,
              1.631365714e-008,-4.44426962e-012},
          blow={-12789.1284,14.42954956},
          ahigh={-432710.914,191.5584657,7.18824737,-0.000569484619,3.54636613e-007,-5.65512306e-011,
              2.908946349e-015},
          bhigh={-17433.39545,-10.0642472},
          R=98.9878194985648);

        constant IdealGases.Common.DataRecord CrO3(
          name="CrO3",
          MM=0.09999429999999999,
          Hf=-3220554.411601461,
          H0=130408.1532647361,
          Tlimit=1000,
          alow={41830.2006,-505.934885,4.43271567,0.01995079387,-2.920597649e-005,
              2.03933028e-008,-5.580086630000001e-012},
          blow={-37697.024,0.8653827279999999},
          ahigh={-628331.401,692.8158179999999,8.971274599999999,0.000682336564,-2.235048825e-007,
              3.36678579e-011,-1.614026492e-015},
          bhigh={-47238.802,-19.45305345},
          R=83.1494595191926);

        constant IdealGases.Common.DataRecord CrO3minus(
          name="CrO3minus",
          MM=0.09999484859999999,
          Hf=-6328834.473579072,
          H0=134244.3054611516,
          Tlimit=1000,
          alow={187345.5703,-2300.722991,13.43953022,-0.001663085846,-1.443973096e-006,
              2.045898933e-009,-6.8375553e-013},
          blow={-66301.1158,-49.306442},
          ahigh={-649968.203,452.201762,9.9805759,-0.000421413673,2.631277945e-007,-4.594543650000001e-011,
              2.659097549e-015},
          bhigh={-83500.1973,-24.648109},
          R=83.14900333775795);

        constant IdealGases.Common.DataRecord Cs(
          name="Cs",
          MM=0.13290545,
          Hf=575597.1632465035,
          H0=46630.35263038498,
          Tlimit=1000,
          alow={54.6658407,-0.827934604,2.50494221,-1.49462069e-005,2.425976774e-008,
              -2.013172322e-011,6.704271991e-015},
          blow={8459.321389999999,6.848825772},
          ahigh={6166040.899999999,-18961.75522,24.83229903,-0.01251977234,
              3.30901739e-006,-3.35401202e-010,9.626500908000001e-015},
          bhigh={128511.1231,-152.2942188},
          R=62.559300615588);

        constant IdealGases.Common.DataRecord Csplus(
          name="Csplus",
          MM=0.1329049014,
          Hf=3449096.483058675,
          H0=46630.54510945222,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={54387.3782,6.182757992},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={54387.3782,6.182757992},
          R=62.55955884558522);

        constant IdealGases.Common.DataRecord Csminus(
          name="Csminus",
          MM=0.1329059986,
          Hf=186577.1918589685,
          H0=46630.16015290675,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={2237.029001,6.182770382},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={2237.029001,6.182770382},
          R=62.5590423877226);

        constant IdealGases.Common.DataRecord CsBO2(
          name="CsBO2",
          MM=0.17571525,
          Hf=-3909176.386227149,
          H0=82326.91243361063,
          Tlimit=1000,
          alow={41936.0958,-666.4237400000001,8.134835880000001,0.002902960302,-7.88146792e-007,
              -8.327694539999999e-010,4.44171911e-013},
          blow={-81223.2007,-11.21622595},
          ahigh={89755.79890000001,-1656.134283,11.16468934,-0.000447636699,
              9.621091809999999e-008,-1.081470115e-011,4.93844674e-016},
          bhigh={-76104.79670000001,-30.36616012},
          R=47.31787366207544);

        constant IdealGases.Common.DataRecord CsBr(
          name="CsBr",
          MM=0.21280945,
          Hf=-971897.0421661255,
          H0=48898.79185346327,
          Tlimit=1000,
          alow={1639.263647,-69.4747797,4.86005872,-0.0008587780150000001,
              1.37517755e-006,-9.89176698e-010,2.895433432e-013},
          blow={-25895.50471,4.46535569},
          ahigh={-152832.9963,1259.712657,1.704268408,0.002776255318,-1.228389838e-006,
              2.698111786e-010,-1.98353448e-014},
          bhigh={-33278.4203,24.84116659},
          R=39.07003189942927);

        constant IdealGases.Common.DataRecord CsCL(
          name="CsCL",
          MM=0.16835845,
          Hf=-1438768.757968489,
          H0=60175.90444673255,
          Tlimit=1000,
          alow={-25381.65292,297.2839326,2.667813848,0.00558327241,-8.52900509e-006,
              6.595191390000001e-009,-1.989715823e-012},
          blow={-31892.5145,15.11365709},
          ahigh={-3674923.48,11861.52941,-10.63287842,0.009804117919999999,-3.27779746e-006,
              5.53423339e-010,-3.4012315e-014},
          bhigh={-104865.8658,111.4096064},
          R=49.38553425741328);

        constant IdealGases.Common.DataRecord CsF(
          name="CsF",
          MM=0.1519038532,
          Hf=-2397667.184389764,
          H0=63494.87387460162,
          Tlimit=1000,
          alow={18436.85799,-404.240939,6.38317886,-0.00467432337,6.63013401e-006,-4.76090553e-009,
              1.374569797e-012},
          blow={-43184.8959,-7.22659323},
          ahigh={-1850863.231,5625.298800000001,-2.250022212,0.00410924354,-1.250243837e-006,
              1.941483152e-010,-1.071166179e-014},
          bhigh={-80798.2779,51.3555945},
          R=54.73509608115722);

        constant IdealGases.Common.DataRecord CsH(
          name="CsH",
          MM=0.13391339,
          Hf=865858.9406182609,
          H0=66058.4128293668,
          Tlimit=1000,
          alow={16205.44411,-70.8701628,2.480847135,0.00702198599,-1.007126309e-005,
              7.09063903e-009,-1.950395735e-012},
          blow={13427.77328,9.89424717},
          ahigh={-911214.6649999999,3576.47275,-1.258058765,0.00431485515,-1.407820502e-006,
              2.154598897e-010,-1.254525606e-014},
          bhigh={-9158.717270000001,39.0880003},
          R=62.08842894650043);

        constant IdealGases.Common.DataRecord CsI(
          name="CsI",
          MM=0.25980992,
          Hf=-586274.2769791085,
          H0=40607.09845105222,
          Tlimit=1000,
          alow={-4072.68565,23.30073667,4.38727769,0.000341208429,-2.175588153e-007,
              8.906786999999999e-011,-2.182639837e-015},
          blow={-19787.66885,8.074657820000001},
          ahigh={4511259.05,-13417.06362,19.80984712,-0.008359855550000002,
              2.348201245e-006,-2.874285248e-010,1.20808775e-014},
          bhigh={65734.3913,-102.1032592},
          R=32.0021344835486);

        constant IdealGases.Common.DataRecord CsLi(
          name="CsLi",
          MM=0.13984645,
          Hf=1159459.707414811,
          H0=73946.27464622805,
          Tlimit=1000,
          alow={1368.709568,-74.5129706,4.84562093,-0.0005573667210000001,
              4.95332676e-007,4.36906891e-010,-4.60814577e-013},
          blow={18505.77392,2.112012017},
          ahigh={7481630.23,-28852.97839,46.3110499,-0.02784288108,8.78741349e-006,-1.264901197e-009,
              6.72018628e-014},
          bhigh={194513.7819,-285.7846194},
          R=59.45429433496524);

        constant IdealGases.Common.DataRecord CsNO2(
          name="CsNO2",
          MM=0.17891095,
          Hf=-1175667.716257725,
          H0=89319.13893476056,
          Tlimit=1000,
          alow={-71060.1044,1272.448257,-2.447362349,0.03064441948,-3.69922594e-005,
              2.259121812e-008,-5.58063591e-012},
          blow={-33133.7092,49.54693336},
          ahigh={-163350.3154,-846.8879579999999,10.62853461,-0.0002508799215,
              5.54125577e-008,-6.35559195e-012,2.946880031e-016},
          bhigh={-24030.40739,-24.43488888},
          R=46.4726837569193);

        constant IdealGases.Common.DataRecord CsNO3(
          name="CsNO3",
          MM=0.19491035,
          Hf=-1634014.76627588,
          H0=84980.65905684332,
          Tlimit=1000,
          alow={-26772.19779,901.169269,-3.26534082,0.04298377699999999,-5.38675138e-005,
              3.38452752e-008,-8.56522366e-012},
          blow={-44053.0414,51.18862689},
          ahigh={-314751.7676,-1367.011655,14.01012848,-0.000401864713,8.8536147e-008,
              -1.013466457e-011,4.69175873e-016},
          bhigh={-35490.2667,-45.00692791},
          R=42.65792965843015);

        constant IdealGases.Common.DataRecord CsNa(
          name="CsNa",
          MM=0.15589522,
          Hf=807640.7281762712,
          H0=68649.50060688198,
          Tlimit=1000,
          alow={25217.38609,-429.5362489999999,7.22309474,-0.008460463000000001,
              1.443905157e-005,-1.143624855e-008,3.18372193e-012},
          blow={15790.99265,-8.838790299999999},
          ahigh={3879556.79,-17801.67288,34.913558,-0.02320080793,
              7.861975840000001e-006,-1.171011257e-009,6.323927369999999e-014},
          bhigh={119577.6556,-200.1754433},
          R=53.33371991777555);

        constant IdealGases.Common.DataRecord CsO(
          name="CsO",
          MM=0.14890485,
          Hf=252425.0754760506,
          H0=66049.68206206849,
          Tlimit=1000,
          alow={8683.95881,425.027817,-3.4840553,0.0380196983,-6.651927559999999e-005,
              5.17347219e-008,-1.512567066e-011},
          blow={1969.690015,42.4079614},
          ahigh={837554.4350000001,-2418.205772,8.908065349999999,-0.00337818004,
              1.312755917e-006,-2.150508925e-010,1.21913898e-014},
          bhigh={18094.93447,-24.6085858},
          R=55.83748279522124);

        constant IdealGases.Common.DataRecord CsOH(
          name="CsOH",
          MM=0.14991279,
          Hf=-1707659.499899908,
          H0=78943.82460629277,
          Tlimit=1000,
          alow={9386.960789999999,-500.935426,8.30135198,-0.00323559684,
              2.612406777e-006,-4.95061341e-010,-1.038364927e-013},
          blow={-30257.22427,-17.42194837},
          ahigh={896717.113,-2323.978587,7.95964487,0.0001101149275,-6.466013969999999e-008,
              1.045968201e-011,-5.82251417e-016},
          bhigh={-17362.58234,-18.64239624},
          R=55.46205897442107);

        constant IdealGases.Common.DataRecord CsRb(
          name="CsRb",
          MM=0.21837325,
          Hf=510489.8699817858,
          H0=50244.85370804345,
          Tlimit=1000,
          alow={-4910.92268,-9.20901555,5.19337789,-0.00439024699,1.254790436e-005,-1.414878514e-008,
              5.10144131e-012},
          blow={12004.98171,5.36154293},
          ahigh={-13286933.78,34145.7947,-23.73696406,0.0070704654,3.86345097e-007,-3.158132986e-010,
              2.667747207e-014},
          bhigh={-212400.8997,223.9970251},
          R=38.07459017988696);

        constant IdealGases.Common.DataRecord Cs2(
          name="Cs2",
          MM=0.2658109,
          Hf=411587.083148208,
          H0=41492.40305796338,
          Tlimit=1000,
          alow={-46741.5873,595.201951,1.895333975,0.00408206581,2.531487119e-006,-9.085139030000001e-009,
              4.29017993e-012},
          blow={8857.282570000001,23.91592727},
          ahigh={-25927395.9,75398.1891,-74.840868,0.0369286679,-8.08249724e-006,
              8.171850729999999e-010,-3.0892859e-014},
          bhigh={-471504.572,586.093375},
          R=31.279650307794);

        constant IdealGases.Common.DataRecord Cs2Br2(
          name="Cs2Br2",
          MM=0.4256189,
          Hf=-1329426.08751632,
          H0=51955.23507062304,
          Tlimit=1000,
          alow={-6321.28518,-12.13153529,10.04967112,-0.0001102100044,
              1.365293456e-007,-8.85695707e-011,2.339447704e-014},
          blow={-70997.71709999999,-7.53942479},
          ahigh={-7545.84665,-0.2087093009,10.00018042,-8.03426073e-008,
              1.923604258e-011,-2.34469814e-015,1.139365834e-019},
          bhigh={-71058.8354,-7.25179304},
          R=19.53501594971464);

        constant IdealGases.Common.DataRecord Cs2CO3(
          name="Cs2CO3",
          MM=0.3258198,
          Hf=-2475134.841406201,
          H0=65002.37554623753,
          Tlimit=1000,
          alow={-46731.3,943.6549060000001,-0.2374670436,0.0416848461,-5.09437221e-005,
              3.132078394e-008,-7.78042167e-012},
          blow={-103916.2411,40.55853980000001},
          ahigh={-303714.9985,-1517.0784,17.11941656,-0.000444970012,
              9.798325240000001e-008,-1.121256063e-011,5.189734780000001e-016},
          bhigh={-94204.1477,-56.8200626},
          R=25.51862102917011);

        constant IdealGases.Common.DataRecord Cs2CL2(
          name="Cs2CL2",
          MM=0.3367169,
          Hf=-1914541.260031796,
          H0=62202.73470087186,
          Tlimit=1000,
          alow={-10779.56357,-53.4610695,10.21710683,-0.000478968703,5.90894653e-007,
              -3.82141652e-010,1.006995985e-013},
          blow={-80295.1517,-12.07856486},
          ahigh={-16251.43966,-0.900613735,10.00077173,-3.41619408e-007,
              8.14496808e-011,-9.897475279999999e-015,4.79833081e-019},
          bhigh={-80565.13219999999,-10.81977337},
          R=24.69276712870664);

        constant IdealGases.Common.DataRecord Cs2F2(
          name="Cs2F2",
          MM=0.3038077064,
          Hf=-2935601.985111462,
          H0=63818.65762968019,
          Tlimit=1000,
          alow={-9942.67748,-253.6723355,11.00684073,-0.002185640152,2.664791874e-006,
              -1.708229209e-009,4.47115198e-013},
          blow={-109058.2601,-20.00699602},
          ahigh={-36779.4642,-4.35575348,10.00366687,-1.603814186e-006,
              3.79146974e-010,-4.57868743e-014,2.209385787e-018},
          bhigh={-110345.6448,-14.15086452},
          R=27.36754804057861);

        constant IdealGases.Common.DataRecord Cs2I2(
          name="Cs2I2",
          MM=0.5196198399999999,
          Hf=-873779.3710879093,
          H0=43464.2815024153,
          Tlimit=1000,
          alow={-4449.28697,-5.32179366,10.02183919,-4.85337485e-005,
              6.019338399999999e-008,-3.90822639e-011,1.032981014e-014},
          blow={-57578.2338,-5.27126709},
          ahigh={-4983.37601,-0.09461179879999999,10.00008229,-3.68096204e-008,
              8.844660910000001e-012,-1.081178562e-015,5.26614198e-020},
          bhigh={-57605.01040000001,-5.14486489},
          R=16.0010672417743);

        constant IdealGases.Common.DataRecord Cs2O(
          name="Cs2O",
          MM=0.2818103,
          Hf=-506920.240317689,
          H0=49997.65799901566,
          Tlimit=1000,
          alow={19105.33804,-496.218153,8.7596063,-0.00351162279,4.01647983e-006,-2.450899853e-009,
              6.17240489e-013},
          blow={-16776.64956,-11.59258822},
          ahigh={-41191.4741,-10.79255391,7.00850047,-3.54295578e-006,8.08169912e-010,
              -9.499419930000001e-014,4.48912254e-018},
          bhigh={-19343.7785,-1.20397045},
          R=29.503790315684);

        constant IdealGases.Common.DataRecord Cs2Oplus(
          name="Cs2Oplus",
          MM=0.2818097514,
          Hf=1006707.271805216,
          H0=51267.65815670069,
          Tlimit=1000,
          alow={683.705609,-243.5575007,7.78303747,-0.001414552725,1.470799739e-006,-8.218821330000001e-010,
              1.911749489e-013},
          blow={33241.9487,-4.75042356},
          ahigh={-31530.85844,-5.77155903,7.00448263,-1.848241331e-006,4.1808823e-010,
              -4.88237627e-014,2.295419936e-018},
          bhigh={31962.2731,-0.0543435069},
          R=29.50384775081279);

        constant IdealGases.Common.DataRecord Cs2O2(
          name="Cs2O2",
          MM=0.2978097,
          Hf=-829620.7410302619,
          H0=58515.54197193711,
          Tlimit=1000,
          alow={22745.0518,-566.7912570000001,10.01728332,0.002547081016,-4.90921669e-006,
              3.84878891e-009,-1.124566008e-012},
          blow={-29473.3436,-18.41275291},
          ahigh={-119003.2094,-92.6107526,10.06915777,-2.766227147e-005,
              6.11075296e-009,-7.003595480000001e-013,3.24374252e-017},
          bhigh={-32556.1074,-17.24868948},
          R=27.91874139761062);

        constant IdealGases.Common.DataRecord Cs2O2H2(
          name="Cs2O2H2",
          MM=0.29982558,
          Hf=-2177932.916864532,
          H0=79837.59424396011,
          Tlimit=1000,
          alow={-10859.81041,-688.306842,16.43543354,-0.00403922058,2.331117156e-006,
              8.43965163e-010,-6.85930973e-013},
          blow={-79394.7623,-49.0619681},
          ahigh={1802857.941,-4656.35475,16.93566597,0.0002117402535,-1.272249096e-007,
              2.066555839e-011,-1.152390667e-015},
          bhigh={-51908.1369,-58.4971916},
          R=27.73102948721054);

        constant IdealGases.Common.DataRecord Cs2SO4(
          name="Cs2SO4",
          MM=0.3618735,
          Hf=-3088515.279510658,
          H0=66288.81639578473,
          Tlimit=1000,
          alow={61536.3787,-638.137433,6.89477209,0.0396018291,-5.529862010000001e-005,
              3.73633252e-008,-9.973241829999999e-012},
          blow={-133976.031,-1.284432588},
          ahigh={-522339.752,-944.415525,19.70476453,-0.000282122599,
              6.240792279999999e-008,-7.16346407e-012,3.32266719e-016},
          bhigh={-136417.9983,-68.20406795},
          R=22.97618366639171);

        constant IdealGases.Common.DataRecord Cu(
          name="Cu",
          MM=0.06354600000000001,
          Hf=5309539.54615554,
          H0=97526.64211752116,
          Tlimit=1000,
          alow={77.1313315,-1.169236206,2.506987803,-2.116434879e-005,3.44171471e-008,
              -2.862608999e-011,9.559250991000001e-015},
          blow={39839.8121,5.73081322},
          ahigh={2308090.411,-8503.261,14.67859102,-0.00846713652,2.887821016e-006,-4.27065918e-010,
              2.304265084e-014},
          bhigh={92075.3562,-78.5470156},
          R=130.8417839045731);

        constant IdealGases.Common.DataRecord Cuplus(
          name="Cuplus",
          MM=0.06354545139999999,
          Hf=17138594.56508637,
          H0=97527.48408362082,
          Tlimit=1000,
          alow={-0.002452340093,2.606893531e-005,2.49999989,2.351922485e-010,-2.669362382e-013,
              1.510315123e-016,-3.278224814e-020},
          blow={130240.0621,5.07594077},
          ahigh={-2181443.016,7217.85819,-6.94115475,0.00620824892,-2.139340497e-006,
              3.56643144e-010,-2.081198501e-014},
          bhigh={85164.56659999999,71.16800670000001},
          R=130.842913486645);

        constant IdealGases.Common.DataRecord Cuminus(
          name="Cuminus",
          MM=0.0635465486,
          Hf=3347445.812344244,
          H0=97525.80016595896,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={24838.64954,5.07596603},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={24838.64954,5.07596603},
          R=130.8406543420047);

        constant IdealGases.Common.DataRecord CuCL(
          name="CuCL",
          MM=0.09899899999999999,
          Hf=920110.3041444863,
          H0=95669.40070101718,
          Tlimit=1000,
          alow={14698.47736,-339.316725,5.72345959,-0.002417296132,2.858019864e-006,-1.757900548e-009,
              4.455047290000001e-013},
          blow={11317.14015,-4.527352594},
          ahigh={-25771.2241,-7.10634606,4.50562318,5.39454827e-005,5.38641796e-010,-6.348482770000001e-014,
              3.006622062e-018},
          bhigh={9566.192870000001,2.680067564},
          R=83.98541399408076);

        constant IdealGases.Common.DataRecord CuF(
          name="CuF",
          MM=0.08254440320000001,
          Hf=-152039.3813932136,
          H0=110038.847552053,
          Tlimit=1000,
          alow={37613.8541,-546.8104900000001,5.83235172,-0.001695312068,
              1.21815088e-006,-3.71328528e-010,2.002276589e-014},
          blow={58.6514072,-7.15693009},
          ahigh={509415.483,-1415.00987,5.63234938,-0.000162912841,-1.156611499e-007,
              5.06603408e-011,-4.15320511e-015},
          bhigh={6305.506600000001,-7.40777361},
          R=100.7272652981032);

        constant IdealGases.Common.DataRecord CuF2(
          name="CuF2",
          MM=0.1015428064,
          Hf=-2628842.056506328,
          H0=118727.3665897026,
          Tlimit=1000,
          alow={65733.1128,-896.243084,7.91756094,0.001345667904,-4.16240001e-006,
              3.71618109e-009,-1.155537597e-012},
          blow={-29168.87325,-15.87076153},
          ahigh={-1650355.082,3775.36212,3.88911655,0.000682191264,1.875979026e-007,-5.67736811e-011,
              3.82324873e-015},
          bhigh={-59533.717,15.22659664},
          R=81.88144778318831);

        constant IdealGases.Common.DataRecord CuO(
          name="CuO",
          MM=0.0795454,
          Hf=3850254.068745647,
          H0=122583.317199989,
          Tlimit=1000,
          alow={4689.76224,-118.4808464,4.56615524,0.000430905802,-8.309886399999999e-007,
              6.94663802e-010,-2.108693366e-013},
          blow={36151.9068,1.733847344},
          ahigh={358228.017,-913.9366409999999,5.13689867,6.240577240000001e-005,-1.558613495e-007,
              5.23680312e-011,-4.026745619999999e-015},
          bhigh={41507.9286,-2.63407096},
          R=104.5248625313343);

        constant IdealGases.Common.DataRecord Cu2(
          name="Cu2",
          MM=0.127092,
          Hf=3818808.422245302,
          H0=78133.58826676737,
          Tlimit=1000,
          alow={-852.918348,-97.2004493,4.8822337,-0.00073713694,1.000575401e-006,-6.391989439999999e-010,
              1.668655797e-013},
          blow={57493.0702,1.105391325},
          ahigh={-86993.995,320.910387,3.97380288,0.000508080967,-1.707470385e-007,
              3.21910819e-011,-1.958830868e-015},
          bhigh={55060.9019,6.91450217},
          R=65.42089195228652);

        constant IdealGases.Common.DataRecord Cu3CL3(
          name="Cu3CL3",
          MM=0.296997,
          Hf=-870614.854695502,
          H0=96713.73784920386,
          Tlimit=1000,
          alow={4487.88532,-873.6644439999999,19.36189091,-0.00713744786,
              8.56045487e-006,-5.419978740000001e-009,1.40517535e-012},
          blow={-31626.8996,-59.76797945000001},
          ahigh={-91885.59679999999,-15.7193643,16.0129417,-5.57299237e-006,
              1.302748507e-009,-1.560175322e-013,7.48082757e-018},
          bhigh={-36087.6074,-40.13211395},
          R=27.99513799802692);

        constant IdealGases.Common.DataRecord D(
          name="D",
          MM=0.002014102,
          Hf=110083912.3341321,
          H0=3077017.946459514,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={25921.287,0.591714338},
          ahigh={60.50019210000001,-0.1810766064,2.500210817,-1.220711706e-007,
              3.71517217e-011,-5.66068021e-015,3.393920393e-019},
          bhigh={25922.43752,0.590212537},
          R=4128.128565484767);

        constant IdealGases.Common.DataRecord Dplus(
          name="Dplus",
          MM=0.0020135534,
          Hf=764978136.6612874,
          H0=3077856.291270944,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={184512.0037,-0.1018414521},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={184512.0037,-0.1018414521},
          R=4129.253289234842);

        constant IdealGases.Common.DataRecord Dminus(
          name="Dminus",
          MM=0.0020146506,
          Hf=70857312.92562591,
          H0=3076180.058219525,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={16423.73393,-0.1010243437},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={16423.73393,-0.1010243437},
          R=4127.004454271128);

        constant IdealGases.Common.DataRecord DBr(
          name="DBr",
          MM=0.08191810200000001,
          Hf=-452116.1391166021,
          H0=105814.2680112388,
          Tlimit=1000,
          alow={-19182.82458,202.0175399,3.044629038,-0.00148815745,6.8708978e-006,-6.59116028e-009,
              2.093769216e-012},
          blow={-6560.0744,8.008690039999999},
          ahigh={665400.044,-2594.092228,6.8858794,-0.001103284901,2.894201105e-007,-3.152037514e-011,
              1.011011776e-015},
          bhigh={10378.1314,-19.73703653},
          R=101.4973711182908);

        constant IdealGases.Common.DataRecord DCL(
          name="DCL",
          MM=0.037467102,
          Hf=-2496777.119297884,
          H0=231165.5702648153,
          Tlimit=1000,
          alow={10464.21033,-231.3813446,5.42069326,-0.007508012650000001,
              1.398672495e-005,-1.066249569e-008,3.011167635e-012},
          blow={-11284.03374,-6.711842349},
          ahigh={411728.4899999999,-1764.535217,5.6688771,-0.000347596417,
              5.88268803e-008,3.76025313e-013,-5.16460056e-016},
          bhigh={-1541.258092,-12.75659404},
          R=221.9139339893436);

        constant IdealGases.Common.DataRecord DF(
          name="DF",
          MM=0.0210125052,
          Hf=-13145866.87169505,
          H0=411093.4854164842,
          Tlimit=1000,
          alow={57213.7075,-731.17338,7.22087087,-0.00942396935,1.208025139e-005,-6.94181269e-009,
              1.538525476e-012},
          blow={-30692.30024,-19.32760992},
          ahigh={800117.2800000001,-2438.386832,5.62066445,-0.0002020416838,
              1.714418979e-008,2.697462563e-012,-2.88829741e-016},
          bhigh={-18574.47029,-14.73004444},
          R=395.6916093945809);

        constant IdealGases.Common.DataRecord DOCL(
          name="DOCL",
          MM=0.053466502,
          Hf=-1487635.865910959,
          H0=193108.0884999733,
          Tlimit=1000,
          alow={68528.3429,-767.344455,5.93397014,0.002868820667,-5.207166370000001e-006,
              4.927572739999999e-009,-1.709526276e-012},
          blow={-6824.03505,-7.757833983},
          ahigh={604306.633,-2646.500381,8.61247421,-0.0005532268239999999,
              1.086845232e-007,-1.13738129e-011,4.90429552e-016},
          bhigh={4845.79518,-25.88861801},
          R=155.5080599811822);

        constant IdealGases.Common.DataRecord DO2(
          name="DO2",
          MM=0.034012902,
          Hf=190731.8581637051,
          H0=295927.2337303062,
          Tlimit=1000,
          alow={-21114.79735,602.337175,-1.294877674,0.0181294797,-2.161807666e-005,
              1.391729127e-008,-3.69774028e-012},
          blow={-2976.943856,32.7283448},
          ahigh={-1267224.927,2799.947016,2.325174609,0.00272632507,-6.31450732e-007,
              6.7292892e-011,-2.765192818e-015},
          bhigh={-19594.11733,17.89922833},
          R=244.4505323303493);

        constant IdealGases.Common.DataRecord DO2minus(
          name="DO2minus",
          MM=0.0340134506,
          Hf=-3081002.019830355,
          H0=296350.11509241,
          Tlimit=1000,
          alow={104870.5051,-890.6236769999999,5.66655356,0.001904603784,-1.21526321e-006,
              6.57751333e-010,-2.147376147e-013},
          blow={-8942.37725,-7.7972192},
          ahigh={552766.192,-2796.895783,8.772206669999999,-0.0006291116630000001,
              1.272331622e-007,-1.364440687e-011,6.00519944e-016},
          bhigh={2512.066767,-28.90020381},
          R=244.4465896088767);

        constant IdealGases.Common.DataRecord D2(
          name="D2",
          MM=0.004028204,
          Hf=0,
          H0=2127276.324634999,
          Tlimit=1000,
          alow={21257.90482,-299.6945907,5.13031498,-0.004172970890000001,
              5.014345719999999e-006,-2.126389969e-009,2.386536969e-013},
          blow={394.49859,-11.64191209},
          ahigh={821516.856,-2365.623159,5.34297451,6.92814599e-005,-8.52367102e-008,
              2.456447415e-011,-1.960597698e-015},
          bhigh={14342.14587,-17.12600356},
          R=2064.064282742384);

        constant IdealGases.Common.DataRecord D2plus(
          name="D2plus",
          MM=0.004027655400000001,
          Hf=372069647.517511,
          H0=2147899.743359374,
          Tlimit=1000,
          alow={-96409.59090000001,1243.052385,-2.557714366,0.01343064234,-1.285600289e-005,
              6.46342167e-009,-1.337616868e-012},
          blow={173096.6171,33.5631492},
          ahigh={925595.135,-4505.21994,11.03203365,-0.00470608903,1.83806846e-006,-3.135924623e-010,
              1.857684975e-014},
          bhigh={205829.889,-52.8391224},
          R=2064.345425380731);

        constant IdealGases.Common.DataRecord D2minus(
          name="D2minus",
          MM=0.004028752599999999,
          Hf=58370578.77418436,
          H0=2162915.389741232,
          Tlimit=1000,
          alow={-4365.33206,311.2987057,0.548195003,0.009956988109999999,-1.167000612e-005,
              6.97565641e-009,-1.682718179e-012},
          blow={25978.97625,14.42223161},
          ahigh={-57988.05190000001,-312.2959355,4.73038828,5.6959008e-005,
              2.01897543e-008,-2.311492448e-012,1.070266527e-016},
          bhigh={28512.00896,-9.15752792},
          R=2063.783216671086);

        constant IdealGases.Common.DataRecord D2O(
          name="D2O",
          MM=0.020027604,
          Hf=-12443325.72183872,
          H0=497314.4565870186,
          Tlimit=1000,
          alow={6958.27847,-12.80889437,3.59587887,0.001502093683,3.59467505e-007,
              5.3404172e-010,-5.18194127e-013},
          blow={-31019.44566,2.895556576},
          ahigh={1544193.253,-5474.238899999999,10.17542424,-0.0009619415540000001,
              2.036545675e-007,-2.050566442e-011,8.510770689999999e-016},
          bhigh={2983.24898,-44.6501157},
          R=415.1506091292798);

        constant IdealGases.Common.DataRecord D2O2(
          name="D2O2",
          MM=0.036027004,
          Hf=-4005328.891628069,
          H0=321026.9441222478,
          Tlimit=1000,
          alow={29577.11324,-68.9303757,2.043905473,0.01570281822,-1.935478714e-005,
              1.384941336e-008,-4.1041849e-012},
          blow={-18025.02679,13.47156482},
          ahigh={1147867.936,-5225.76093,13.11088701,-0.001179811896,2.729336904e-007,
              -2.961433535e-011,1.310306129e-015},
          bhigh={12195.80532,-56.905382},
          R=230.7844415816536);

        constant IdealGases.Common.DataRecord D2S(
          name="D2S",
          MM=0.036093204,
          Hf=-665126.5983479882,
          H0=279513.9217898196,
          Tlimit=1000,
          alow={3988.38648,-66.2079256,4.39335445,-0.002325113084,1.189503465e-005,-1.146524521e-008,
              3.62619045e-012},
          blow={-3787.38555,0.9238754374999999},
          ahigh={423581.463,-2823.776231,8.96282184,-0.000646923123,1.634615644e-007,
              -1.797991376e-011,8.16093957e-016},
          bhigh={12046.03509,-31.91047376},
          R=230.3611505368158);

        constant IdealGases.Common.DataRecord eminus(
          name="eminus",
          MM=5.48579903e-007,
          Hf=0,
          H0=11297220270.20738,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-745.375,-11.72081224},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={-745.375,-11.72081224},
          R=15156355.44527048);

        constant IdealGases.Common.DataRecord F(
          name="F",
          MM=0.0189984032,
          Hf=4178245.885422623,
          H0=343105.677428722,
          Tlimit=1000,
          alow={1137.409088,-145.3392797,4.07740361,-0.004303360139999999,
              5.72889774e-006,-3.8193129e-009,1.018322509e-012},
          blow={9311.110120000001,-3.55898265},
          ahigh={14735.06226,81.4992736,2.444371819,2.120210026e-005,-4.54691862e-009,
              5.10952873e-013,-2.333894647e-017},
          bhigh={8388.37465,5.47871064},
          R=437.6405697085111);

        constant IdealGases.Common.DataRecord Fplus(
          name="Fplus",
          MM=0.0189978546,
          Hf=93000834.52581009,
          H0=353236.3070091083,
          Tlimit=1000,
          alow={-38716.8019,321.881566,2.200920452,-0.0002455492688,7.85835506e-007,-6.43598792e-010,
              1.839793564e-013},
          blow={209883.0937,7.81699924},
          ahigh={16496.35664,133.7351478,2.332522942,0.0001215277877,-4.8010377e-008,
              9.027225149999999e-012,-5.47066494e-016},
          bhigh={211074.5327,6.62581709},
          R=437.653207431117);

        constant IdealGases.Common.DataRecord Fminus(
          name="Fminus",
          MM=0.0189989518,
          Hf=-13426639.25280341,
          H0=326198.4169042421,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-31425.72443,3.26488271},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={-31425.72443,3.26488271},
          R=437.6279327157407);

        constant IdealGases.Common.DataRecord FCN(
          name="FCN",
          MM=0.0450158032,
          Hf=762573.3977795602,
          H0=225008.9808460865,
          Tlimit=1000,
          alow={39844.5412,-698.865536,7.05883966,-0.001404863382,3.96465251e-006,-3.045609294e-009,
              7.9230459e-013},
          blow={6172.627570000001,-15.05643174},
          ahigh={398187.355,-2302.971079,9.027081389999999,-0.000522871026,
              1.191059272e-007,-1.280287231e-011,5.73380719e-016},
          bhigh={15884.49451,-29.84971982},
          R=184.7011806733685);

        constant IdealGases.Common.DataRecord FCO(
          name="FCO",
          MM=0.0470085032,
          Hf=-3816716.929629871,
          H0=220980.3395739688,
          Tlimit=1000,
          alow={11326.62744,-53.979185,2.966927601,0.00755995935,-6.21177358e-006,
              2.40378155e-009,-3.36950775e-013},
          blow={-22403.69579,10.92652142},
          ahigh={-60858.5158,-1022.397533,7.52732256,-0.0001057942328,-1.365311093e-009,
              2.484612871e-012,-9.9979168e-017},
          bhigh={-18050.98416,-16.30331278},
          R=176.8716601042511);

        constant IdealGases.Common.DataRecord FO(
          name="FO",
          MM=0.0349978032,
          Hf=3114826.932908749,
          H0=268245.4080432112,
          Tlimit=1000,
          alow={-39121.8244,796.703694,-1.634777767,0.01601810071,-2.095210771e-005,
              1.382740666e-008,-3.66452495e-012},
          blow={8375.525229999999,33.83325720000001},
          ahigh={-1597940.503,4377.376380000001,-0.489750764,0.002682336321,-6.90080485e-007,
              7.24647968e-011,-2.726912632e-015},
          bhigh={-16442.48211,35.5992361},
          R=237.5712541866057);

        constant IdealGases.Common.DataRecord FO2_FOO(
          name="FO2_FOO",
          MM=0.0509972032,
          Hf=498066.529264099,
          H0=220714.2998775274,
          Tlimit=1000,
          alow={5821.564,-234.7363967,5.43733876,0.002165855252,3.67147219e-007,-2.071530827e-009,
              9.43106685e-013},
          blow={2694.856027,-1.168202057},
          ahigh={-1213166.895,2493.397189,4.46506574,0.0009416104040000001,-6.426472259999999e-008,
              -1.085643277e-011,1.216995394e-015},
          bhigh={-15968.00286,8.65519318},
          R=163.0378036103753);

        constant IdealGases.Common.DataRecord FO2_OFO(
          name="FO2_OFO",
          MM=0.0509972032,
          Hf=7423936.534621569,
          H0=206646.2734960336,
          Tlimit=1000,
          alow={-77341.064,1663.800209,-9.61281516,0.04989156870000001,-6.94621713e-005,
              4.7077878e-008,-1.258890729e-011},
          blow={36970.9273,77.9594304},
          ahigh={-621186.7340000001,936.947459,6.40155875,0.0002136110846,-4.33797765e-008,
              4.66731224e-012,-2.059767432e-016},
          bhigh={36383.5727,-6.15026433},
          R=163.0378036103753);

        constant IdealGases.Common.DataRecord F2(
          name="F2",
          MM=0.0379968064,
          Hf=0,
          H0=232259.1511269747,
          Tlimit=1000,
          alow={10181.76308,22.74241183,1.97135304,0.008151604010000001,-1.14896009e-005,
              7.95865253e-009,-2.167079526e-012},
          blow={-958.6943,11.30600296},
          ahigh={-2941167.79,9456.5977,-7.73861615,0.00764471299,-2.241007605e-006,
              2.915845236e-010,-1.425033974e-014},
          bhigh={-60710.0561,84.23835080000001},
          R=218.8202848542556);

        constant IdealGases.Common.DataRecord F2O(
          name="F2O",
          MM=0.0539962064,
          Hf=453735.5794684124,
          H0=202079.4001557858,
          Tlimit=1000,
          alow={30829.19995,-229.9506259,2.603805825,0.01586111264,-2.345633734e-005,
              1.679619314e-008,-4.70356033e-012},
          blow={3055.185332,10.50933022},
          ahigh={-188537.4518,-210.0729689,7.15123916,0.0001327687906,
              1.804705706e-008,-1.416973671e-012,6.489389390000001e-017},
          bhigh={1449.129965,-12.57858336},
          R=153.9825212609751);

        constant IdealGases.Common.DataRecord F2O2(
          name="F2O2",
          MM=0.06999560639999999,
          Hf=274302.9311051158,
          H0=196847.3981246915,
          Tlimit=1000,
          alow={56122.70460000001,-998.595223,8.98064939,0.00642190087,-9.88851602e-006,
              6.85806101e-009,-1.842137493e-012},
          blow={5298.71259,-22.39292195},
          ahigh={-219056.3532,-391.092081,10.29107144,-0.0001163345202,
              2.570922521e-008,-2.949199983e-012,1.367386916e-016},
          bhigh={827.8020939999999,-27.56752555},
          R=118.7856270933028);

        constant IdealGases.Common.DataRecord FS2F(
          name="FS2F",
          MM=0.1021268064,
          Hf=-3294286.895472725,
          H0=142913.5063994325,
          Tlimit=1000,
          alow={114446.228,-1853.247564,13.94098518,-0.00404368937,1.370970316e-006,
              6.7119031e-010,-4.624954960000001e-013},
          blow={-33510.6833,-48.49215357},
          ahigh={-207709.7921,-109.4539831,10.08136946,-3.23953791e-005,
              7.12522527e-009,-8.13478741e-013,3.75502241e-017},
          bhigh={-43494.4606,-23.46916058},
          R=81.41321845936034);

        constant IdealGases.Common.DataRecord Fe(
          name="Fe",
          MM=0.055845,
          Hf=7439717.07404423,
          H0=122666.7920136091,
          Tlimit=1000,
          alow={67908.2266,-1197.218407,9.84339331,-0.01652324828,1.917939959e-005,-1.149825371e-008,
              2.832773807e-012},
          blow={54669.9594,-33.8394626},
          ahigh={-1954923.682,6737.161099999999,-5.48641097,0.004378803450000001,-1.116286672e-006,
              1.544348856e-010,-8.023578182e-015},
          bhigh={7137.37006,65.0497986},
          R=148.8848061599069);

        constant IdealGases.Common.DataRecord Feplus(
          name="Feplus",
          MM=0.0558444514,
          Hf=21205649.25094779,
          H0=124197.6387290645,
          Tlimit=1000,
          alow={-56912.3162,184.713439,4.19697212,-0.00597827597,1.054267912e-005,-8.059804319999999e-009,
              2.256925874e-012},
          blow={140120.6571,-0.360254258},
          ahigh={-817645.009,1925.359408,1.717387154,0.000338533898,-9.813533120000001e-008,
              2.228179208e-011,-1.483964439e-015},
          bhigh={128635.2466,15.00256262},
          R=148.8862687618774);

        constant IdealGases.Common.DataRecord Fe_CO_5(
          name="Fe_CO_5",
          MM=0.1958955,
          Hf=-3715501.377009681,
          H0=169199.3894704064,
          Tlimit=1000,
          alow={379780.571,-7285.92816,54.0023618,-0.06935400750000001,
              0.0001026705717,-7.20737313e-008,1.958981996e-011},
          blow={-58545.8048,-260.4377836},
          ahigh={1116600.852,-8067.07473,36.5294241,-0.0020471903,4.44196775e-007,-4.93250713e-011,
              2.235704865e-015},
          bhigh={-48606.6125,-175.4566113},
          R=42.44340477448436);

        constant IdealGases.Common.DataRecord FeCL(
          name="FeCL",
          MM=0.091298,
          Hf=2749676.882297531,
          H0=113662.435102631,
          Tlimit=1000,
          alow={11173.40353,-54.0214429,3.48605792,0.00687983714,-1.273679557e-005,
              1.025321859e-008,-3.051544011e-012},
          blow={29286.8199,9.428962979},
          ahigh={528870.022,-1282.897413,5.79844169,-0.0002896589776,3.34390381e-008,
              -1.469606582e-013,-1.213444602e-016},
          bhigh={37261.9673,-4.075134191},
          R=91.06959626716905);

        constant IdealGases.Common.DataRecord FeCL2(
          name="FeCL2",
          MM=0.126751,
          Hf=-1112423.570622717,
          H0=112640.8312360455,
          Tlimit=1000,
          alow={23011.21607,-585.804406,9.322903480000001,-0.003006298824,
              2.590788666e-006,-1.080178662e-009,2.341239608e-013},
          blow={-16210.41276,-18.16752393},
          ahigh={164412.3697,692.800269,4.63827014,0.002754339782,-8.624218250000001e-007,
              1.170827576e-010,-5.93806195e-015},
          bhigh={-22197.21855,11.16897701},
          R=65.59689469905563);

        constant IdealGases.Common.DataRecord FeCL3(
          name="FeCL3",
          MM=0.162204,
          Hf=-6529458.509038001,
          H0=112291.1457177382,
          Tlimit=1000,
          alow={4284.772099999999,-574.170537,12.20667256,-0.00468043412,
              5.609500470000001e-006,-3.5495995e-009,9.198543490000001e-013},
          blow={-127568.8456,-28.87584081},
          ahigh={-59157.40590000001,-10.33382228,10.00849967,-3.65765187e-006,
              8.545873639999999e-010,-1.023070527e-013,4.90406364e-018},
          bhigh={-130501.205,-15.98494171},
          R=51.25935242040887);

        constant IdealGases.Common.DataRecord FeO(
          name="FeO",
          MM=0.07184439999999999,
          Hf=3494218.060141083,
          H0=123002.363440992,
          Tlimit=1000,
          alow={15692.82213,-64.6018888,2.45892547,0.00701604736,-1.021405947e-005,
              7.179297870000001e-009,-1.978966365e-012},
          blow={29645.72665,13.26115545},
          ahigh={-119597.148,-362.486478,5.51888075,-0.0009978856889999999,
              4.37691383e-007,-6.79062946e-011,3.63929268e-015},
          bhigh={30379.85806,-3.63365542},
          R=115.7288807478384);

        constant IdealGases.Common.DataRecord Fe_OH_2(
          name="Fe_OH_2",
          MM=0.08985968,
          Hf=-3678357.189787456,
          H0=158129.4413690323,
          Tlimit=1000,
          alow={444302.72,-6795.14089,38.9472621,-0.0597300568,7.046165430000001e-005,
              -4.087859510000001e-008,9.368766340000001e-012},
          blow={-9051.42086,-193.1304058},
          ahigh={1612519.19,-6533.24199,18.42922816,-0.002073249635,4.26587436e-007,-4.56406313e-011,
              1.990105746e-015},
          bhigh={-2992.568633,-84.45940589999999},
          R=92.52728253650581);

        constant IdealGases.Common.DataRecord Fe2CL4(
          name="Fe2CL4",
          MM=0.253502,
          Hf=-1701644.957436233,
          H0=117747.3984426158,
          Tlimit=1000,
          alow={1501.308814,-661.709651,18.26924882,-0.00418149466,
              4.196535049999999e-006,-2.188670747e-009,5.395194700000001e-013},
          blow={-53400.5758,-49.3564068},
          ahigh={140245.0973,693.606441,13.1380041,0.00275433307,-8.623996010000001e-007,
              1.170782491e-010,-5.93777808e-015},
          bhigh={-59741.72730000001,-17.52491511},
          R=32.79844734952781);

        constant IdealGases.Common.DataRecord Fe2CL6(
          name="Fe2CL6",
          MM=0.324408,
          Hf=-2017143.843555029,
          H0=124682.0485314789,
          Tlimit=1000,
          alow={-10345.44447,-823.48766,25.20090594,-0.00684579679,8.25582075e-006,-5.24896566e-009,
              1.365242237e-012},
          blow={-81318.4719,-80.10768938},
          ahigh={-99991.17999999999,-14.57716085,22.0120846,-5.22948113e-006,
              1.226831608e-009,-1.473195806e-013,7.07827233e-018},
          bhigh={-85514.9619,-61.43757198},
          R=25.62967621020443);

        constant IdealGases.Common.DataRecord Ga(
          name="Ga",
          MM=0.06972299999999999,
          Hf=3901151.700299758,
          H0=93959.16698937224,
          Tlimit=1000,
          alow={238794.789,-3121.634631,16.30171272,-0.02347922342,1.932327565e-005,-7.31631187e-009,
              8.857387735e-013},
          blow={47327.1738,-75.47172759999999},
          ahigh={-55441.8652,880.8624419999999,1.760717716,0.000299325946,-5.61082731e-008,
              2.682832239e-012,3.132134914e-016},
          bhigh={26843.51822,12.52212023},
          R=119.2500609554953);

        constant IdealGases.Common.DataRecord Gaplus(
          name="Gaplus",
          MM=0.0697224514,
          Hf=12287124.31645799,
          H0=88887.12137278639,
          Tlimit=1000,
          alow={0.000409834494,-4.34358162e-006,2.500000019,-4.389036810000001e-011,
              5.5639692e-014,-3.63822826e-017,9.607881994999999e-021},
          blow={102289.9726,5.21509046},
          ahigh={35666.0714,-110.8845546,2.635517951,-8.33897352e-005,
              2.734243614e-008,-4.55567374e-012,3.035050101e-016},
          bhigh={102989.743,4.25707541},
          R=119.2509992555999);

        constant IdealGases.Common.DataRecord GaBr(
          name="GaBr",
          MM=0.149627,
          Hf=-120084.4767321406,
          H0=66379.18958476746,
          Tlimit=1000,
          alow={-2185.275415,-76.72232969999999,4.77080567,-0.000449788106,
              5.5798536e-007,-3.065156457e-010,7.042946040000001e-014},
          blow={-3138.004818,2.948144294},
          ahigh={335980.503,-840.683668,5.14508473,-3.265526e-005,-7.67102275e-008,
              3.63512382e-011,-3.35817783e-015},
          bhigh={2035.179445,-0.427789408},
          R=55.56799240778737);

        constant IdealGases.Common.DataRecord GaBr2(
          name="GaBr2",
          MM=0.229531,
          Hf=-649938.1434316061,
          H0=61102.63101716108,
          Tlimit=1000,
          alow={7081.68162,-370.57661,8.418425360000001,-0.003001930915,
              3.59547767e-006,-2.276883735e-009,5.91322177e-013},
          blow={-18211.16655,-9.512572049999999},
          ahigh={-330229.436,476.672265,7.1047254,-0.0005522771210000001,
              3.159876015e-007,-5.51363715e-011,3.17329323e-015},
          bhigh={-23656.8362,-1.162714892},
          R=36.22374319808653);

        constant IdealGases.Common.DataRecord GaBr3(
          name="GaBr3",
          MM=0.309435,
          Hf=-946766.4065151,
          H0=61522.89495370594,
          Tlimit=1000,
          alow={6363.80734,-514.204045,11.96065138,-0.00413463765,
              4.933978330000001e-006,-3.111868526e-009,8.04363148e-013},
          blow={-35704.155,-25.56896053},
          ahigh={-51030.6375,-9.39520969,10.00768765,-3.2959543e-006,
              7.679838140000001e-010,-9.175147259999999e-014,4.39118694e-018},
          bhigh={-38334.0215,-14.10315914},
          R=26.86984988769855);

        constant IdealGases.Common.DataRecord GaCL(
          name="GaCL",
          MM=0.105176,
          Hf=-661951.7760705864,
          H0=91362.24994295275,
          Tlimit=1000,
          alow={6417.143,-225.7949147,5.31167369,-0.001562280975,1.836579731e-006,-1.100421873e-009,
              2.725812445e-013},
          blow={-8593.892329999999,-1.695911735},
          ahigh={-486484.224,1452.870183,2.719542959,0.001144285628,-3.43145286e-007,
              5.47044048e-011,-3.019622103e-015},
          bhigh={-18950.84035,15.70926145},
          R=79.05293983418271);

        constant IdealGases.Common.DataRecord GaCL2(
          name="GaCL2",
          MM=0.140629,
          Hf=-1571360.878623897,
          H0=96092.49159135029,
          Tlimit=1000,
          alow={22254.81851,-604.621844,9.220388910000001,-0.00455440079,
              5.32485518e-006,-3.30860557e-009,8.462235559999999e-013},
          blow={-25645.50386,-16.85409262},
          ahigh={-344540.53,471.443716,7.10877548,-0.000553943356,3.16363824e-007,-5.51802393e-011,
              3.17535303e-015},
          bhigh={-32309.3616,-3.74484074},
          R=59.12345248846255);

        constant IdealGases.Common.DataRecord GaCL3(
          name="GaCL3",
          MM=0.176082,
          Hf=-2456950.47193921,
          H0=98677.01979759432,
          Tlimit=1000,
          alow={47849.484,-1162.678125,14.08954213,-0.008106134290000001,
              9.21943016e-006,-5.59971055e-009,1.4048526e-012},
          blow={-49159.0973,-42.82179383},
          ahigh={-94669.1731,-25.61468254,10.02010048,-8.35407307e-006,
              1.901439055e-009,-2.231168493e-013,1.052949609e-017},
          bhigh={-55182.0143,-18.64958383},
          R=47.21931827216866);

        constant IdealGases.Common.DataRecord GaF(
          name="GaF",
          MM=0.08872140319999999,
          Hf=-2621785.528748265,
          H0=102355.3356063241,
          Tlimit=1000,
          alow={36703.9801,-533.6572219999999,5.75929192,-0.001506128492,
              9.509038450000001e-007,-1.83094113e-010,-3.135959193e-014},
          blow={-26470.7569,-6.58932188},
          ahigh={-298339.2279,722.5157870000001,3.63955743,0.000554673676,-1.46490145e-007,
              2.177385396e-011,-1.031058874e-015},
          bhigh={-34085.2871,7.55396},
          R=93.71438796179906);

        constant IdealGases.Common.DataRecord GaF2(
          name="GaF2",
          MM=0.1077198064,
          Hf=-4796819.250503221,
          H0=112473.8282114105,
          Tlimit=1000,
          alow={68425.3953,-889.761774,7.70745549,0.00207215089,-5.28998193e-006,
              4.56412742e-009,-1.406942753e-012},
          blow={-59198.5615,-13.41142116},
          ahigh={410025.1359999999,-1723.259472,8.95132922,-0.001059205682,
              2.745755154e-007,-2.907681311e-011,1.084834142e-015},
          bhigh={-53765.716,-21.13835528},
          R=77.18610233224483);

        constant IdealGases.Common.DataRecord GaF3(
          name="GaF3",
          MM=0.1267182096,
          Hf=-7271859.237190485,
          H0=120132.8289600455,
          Tlimit=1000,
          alow={95932.66699999999,-1355.507494,10.97760197,0.00346157172,-8.469551949999999e-006,
              7.22246893e-009,-2.213328653e-012},
          blow={-106147.9087,-32.1265185},
          ahigh={-209696.176,-143.1211274,10.10568378,-4.18493682e-005,
              9.16475945e-009,-1.042661957e-012,4.79916345e-017},
          bhigh={-113667.8134,-23.9253933},
          R=65.61386896362842);

        constant IdealGases.Common.DataRecord GaH(
          name="GaH",
          MM=0.07073094000000001,
          Hf=3030122.376431021,
          H0=122621.0764341602,
          Tlimit=1000,
          alow={-43918.762,625.445712,0.327686289,0.0064966415,-3.80297001e-006,
              2.852103704e-010,3.62680913e-013},
          blow={21712.60108,22.24032244},
          ahigh={3257993.99,-11090.99502,18.01126796,-0.008167719110000001,
              2.601293566e-006,-3.81345935e-010,2.028049649e-014},
          bhigh={93697.78240000001,-98.2090022},
          R=117.5507069466347);

        constant IdealGases.Common.DataRecord GaI(
          name="GaI",
          MM=0.19662747,
          Hf=228203.7296212986,
          H0=51412.56203927151,
          Tlimit=1000,
          alow={-3661.85503,-32.0692418,4.59996192,-8.899475459999999e-005,
              1.162792633e-007,-1.812351457e-011,-7.584619639999999e-015},
          blow={4198.64937,4.92896465},
          ahigh={1498356.654,-4551.96724,9.803005349999999,-0.002943735609,
              8.658040509999999e-007,-1.106638204e-010,5.00783686e-015},
          bhigh={32918.1191,-32.2735977},
          R=42.28540396720764);

        constant IdealGases.Common.DataRecord GaI2(
          name="GaI2",
          MM=0.32353194,
          Hf=-89496.46517125944,
          H0=44727.99501650439,
          Tlimit=1000,
          alow={-983.13959,-215.2621259,7.84431876,-0.001819797849,2.210706958e-006,-1.416110855e-009,
              3.71376293e-013},
          blow={-4534.090230000001,-4.25051681},
          ahigh={-320287.975,479.650233,7.10233396,-0.000551265783,3.157543452e-007,-5.51087194e-011,
              3.17197773e-015},
          bhigh={-9180.919610000001,0.727520488},
          R=25.69907626430948);

        constant IdealGases.Common.DataRecord GaI3(
          name="GaI3",
          MM=0.45043641,
          Hf=-257255.4914022159,
          H0=44673.91967714155,
          Tlimit=1000,
          alow={-5663.47265,-242.5937116,10.95451119,-0.002059175489,2.499117622e-006,
              -1.596502506e-009,4.16764406e-013},
          blow={-15767.22832,-16.46129942},
          ahigh={-31640.4013,-4.20866283,10.00352001,-1.53265018e-006,3.61153154e-010,
              -4.35097887e-014,2.095704875e-018},
          bhigh={-17000.58453,-10.90291552},
          R=18.45870319408682);

        constant IdealGases.Common.DataRecord GaO(
          name="GaO",
          MM=0.08572239999999999,
          Hf=1712779.938499156,
          H0=104116.3919815591,
          Tlimit=1000,
          alow={73255.4391,-980.4269509999999,7.84412276,-0.00717107285,
              7.87278051e-006,-2.401464112e-009,-2.594919458e-013},
          blow={21405.81724,-17.99742951},
          ahigh={2937313.804,-11183.14112,18.59366773,-0.00685475345,1.665399251e-006,
              -1.887560878e-010,7.97268692e-015},
          bhigh={85302.48080000001,-99.04040480000001},
          R=96.9929913301541);

        constant IdealGases.Common.DataRecord GaOH(
          name="GaOH",
          MM=0.08673034,
          Hf=-1656058.249051024,
          H0=122028.9001518961,
          Tlimit=1000,
          alow={69631.0187,-1247.828695,10.22001611,-0.00592253439,4.6433874e-006,-1.215936978e-009,
              -2.945243614e-014},
          blow={-12753.97794,-32.17063},
          ahigh={842905.101,-2372.324595,8.009071090000001,8.77723071e-005,-5.94306891e-008,
              9.841943439999999e-012,-5.53155279e-016},
          bhigh={-3751.78825,-21.71053719},
          R=95.86578353088434);

        constant IdealGases.Common.DataRecord Ga2Br2(
          name="Ga2Br2",
          MM=0.299254,
          Hf=-457683.7469173344,
          H0=69483.80974022068,
          Tlimit=1000,
          alow={-11171.83241,-74.7147162,10.30246084,-0.0006657929850000001,
              8.20051585e-007,-5.29702152e-010,1.394553192e-013},
          blow={-19132.97856,-13.17110316},
          ahigh={-18853.73131,-1.263621802,10.00108034,-4.774975660000001e-007,
              1.137227648e-010,-1.380820486e-014,6.69024243e-019},
          bhigh={-19510.53843,-11.41667594},
          R=27.78399620389368);

        constant IdealGases.Common.DataRecord Ga2Br4(
          name="Ga2Br4",
          MM=0.459062,
          Hf=-905803.647437601,
          H0=66639.72622434443,
          Tlimit=1000,
          alow={-13155.45939,-413.655302,17.62849229,-0.00351465216,4.26693773e-006,-2.726515882e-009,
              7.11892449e-013},
          blow={-52831.0181,-44.2752069},
          ahigh={-57421.6721,-7.16013737,16.00598947,-2.60818227e-006,6.14645595e-010,
              -7.40543865e-014,3.56712663e-018},
          bhigh={-54933.8976,-34.79271660000001},
          R=18.11187159904327);

        constant IdealGases.Common.DataRecord Ga2Br6(
          name="Ga2Br6",
          MM=0.61887,
          Hf=-1088578.75159565,
          H0=66494.20072066832,
          Tlimit=1000,
          alow={-6725.11689,-806.752655,25.11671424,-0.00663651457,7.9775557e-006,-5.05968521e-009,
              1.313546388e-012},
          blow={-83706.352,-75.8527872},
          ahigh={-95261.73,-14.4468188,22.01192546,-5.14500674e-006,1.204348449e-009,
              -1.443806473e-013,6.928270740000001e-018},
          bhigh={-87822.23300000001,-57.6589512},
          R=13.43492494384927);

        constant IdealGases.Common.DataRecord Ga2CL2(
          name="Ga2CL2",
          MM=0.210352,
          Hf=-1050490.064273218,
          H0=92646.73024264089,
          Tlimit=1000,
          alow={-9246.1337,-259.2159934,11.02847129,-0.002231983927,2.720723456e-006,
              -1.743798624e-009,4.56366604e-013},
          blow={-28340.59821,-20.67773272},
          ahigh={-36689.542,-4.43458068,10.00373051,-1.630793333e-006,3.85375332e-010,
              -4.65252773e-014,2.244498791e-018},
          bhigh={-29656.33085,-14.69535817},
          R=39.52646991709135);

        constant IdealGases.Common.DataRecord Ga2CL4(
          name="Ga2CL4",
          MM=0.281258,
          Hf=-2141545.584481152,
          H0=97118.63129226546,
          Tlimit=1000,
          alow={16373.43702,-1140.637354,20.30139827,-0.0089977462,1.067254867e-005,-6.700290619999999e-009,
              1.725749144e-012},
          blow={-71623.85010000001,-66.663619},
          ahigh={-112711.0409,-21.38517542,16.01738077,-7.41556464e-006,
              1.721694751e-009,-2.051361953e-013,9.797311499999999e-018},
          bhigh={-77468.53380000001,-41.4728087},
          R=29.56172624423128);

        constant IdealGases.Common.DataRecord Ga2CL6(
          name="Ga2CL6",
          MM=0.352164,
          Hf=-2732998.069081451,
          H0=103246.7799093604,
          Tlimit=1000,
          alow={60894.69839999999,-2104.456302,29.59653878,-0.01537809796,
              1.779096808e-005,-1.095619429e-008,2.779706493e-012},
          blow={-111840.0535,-112.1945814},
          ahigh={-189844.5426,-44.1365524,22.03505047,-1.470071128e-005,
              3.36951281e-009,-3.9754628e-013,1.884231868e-017},
          bhigh={-122696.9998,-67.45332883},
          R=23.60965913608433);

        constant IdealGases.Common.DataRecord Ga2F2(
          name="Ga2F2",
          MM=0.1774428064,
          Hf=-3416488.705850406,
          H0=96638.77813871186,
          Tlimit=1000,
          alow={29781.3065,-1013.97552,13.74933053,-0.00772805096,9.06400733e-006,-5.64119322e-009,
              1.443106716e-012},
          blow={-70860.8337,-41.09833949999999},
          ahigh={-87732.34929999999,-19.8377587,10.0159403,-6.744402830000001e-006,
              1.556129063e-009,-1.845316975e-013,8.780884020000001e-018},
          bhigh={-76073.6863,-19.08325521},
          R=46.85719398089953);

        constant IdealGases.Common.DataRecord Ga2F4(
          name="Ga2F4",
          MM=0.2154396128,
          Hf=-6150229.016750257,
          H0=105148.9171632971,
          Tlimit=1000,
          alow={142207.9998,-2798.829941,23.95904235,-0.01293904774,1.223101326e-005,
              -6.25120982e-009,1.334919195e-012},
          blow={-149601.371,-97.34153640000001},
          ahigh={-270436.609,-104.9957196,16.07903965,-3.17889592e-005,
              7.04958272e-009,-8.10237952e-013,3.76054053e-017},
          bhigh={-164416.9589,-48.9659173},
          R=38.59305116612241);

        constant IdealGases.Common.DataRecord Ga2F6(
          name="Ga2F6",
          MM=0.2534364192,
          Hf=-7961065.143552976,
          H0=118891.6576990526,
          Tlimit=1000,
          alow={240904.5572,-4142.3798,31.9577372,-0.0129791429,8.95928219e-006,-2.733621068e-009,
              1.554030994e-013},
          blow={-227278.524,-139.8403732},
          ahigh={-436866.48,-212.8208368,22.15886373,-6.34628791e-005,
              1.399738556e-008,-1.601732039e-012,7.407584420000001e-017},
          bhigh={-249429.8707,-77.87635830000001},
          R=32.80693448181421);

        constant IdealGases.Common.DataRecord Ga2I2(
          name="Ga2I2",
          MM=0.39325494,
          Hf=34382.14151867996,
          H0=54666.69280746988,
          Tlimit=1000,
          alow={-8960.25267,-31.7205721,10.12930491,-0.0002860191165,3.53533301e-007,
              -2.289632389e-010,6.04008536e-014},
          blow={-1233.174068,-9.80196838},
          ahigh={-12190.56501,-0.528755447,10.00045392,-2.011599344e-007,
              4.79946781e-011,-5.83478108e-015,2.829565069e-019},
          bhigh={-1393.258606,-9.052614910000001},
          R=21.14270198360382);

        constant IdealGases.Common.DataRecord Ga2I4(
          name="Ga2I4",
          MM=0.64706388,
          Hf=-246139.5109861487,
          H0=50356.40839664856,
          Tlimit=1000,
          alow={-17694.95991,-135.4871509,16.54625333,-0.001199014713,
              1.473754848e-006,-9.504796569999999e-010,2.499380837e-013},
          blow={-23334.05795,-33.2571289},
          ahigh={-31712.9976,-2.287068836,16.00194812,-8.58896438e-007,
              2.041966602e-010,-2.476145769e-014,1.198551944e-018},
          bhigh={-24019.40505,-30.08672521},
          R=12.84953813215474);

        constant IdealGases.Common.DataRecord Ga2I6(
          name="Ga2I6",
          MM=0.90087282,
          Hf=-352208.0097832234,
          H0=48367.95719955232,
          Tlimit=1000,
          alow={-21108.91458,-369.540416,23.46811836,-0.00318917821,3.89033904e-006,-2.494830378e-009,
              6.53200728e-013},
          blow={-43011.8809,-60.148115},
          ahigh={-60156.9815,-6.32920923,22.0053304,-2.332008629e-006,5.51386848e-010,
              -6.659445350000001e-014,3.21367043e-018},
          bhigh={-44886.9938,-51.6100875},
          R=9.22935159704341);

        constant IdealGases.Common.DataRecord Ga2O(
          name="Ga2O",
          MM=0.1554454,
          Hf=-639822.4521278854,
          H0=78243.51830288963,
          Tlimit=1000,
          alow={56971.9718,-807.4085990000001,7.73306154,0.001478450874,-4.097743430000001e-006,
              3.58115892e-009,-1.107073202e-012},
          blow={-9512.216820000002,-12.56149299},
          ahigh={-119387.4986,-87.19341610000001,7.0646782,-2.571524542e-005,
              5.65110849e-009,-6.44819054e-013,2.975374645e-017},
          bhigh={-13936.94796,-6.9428013},
          R=53.4880543264709);

        constant IdealGases.Common.DataRecord Ge(
          name="Ge",
          MM=0.07264,
          Hf=5063325.991189428,
          H0=101852.7533039648,
          Tlimit=1000,
          alow={-20592.15242,-143.2022103,4.50600233,0.00154718784,-8.518296550000001e-006,
              8.24382446e-009,-2.566167305e-012},
          blow={43630.7086,-6.224648889},
          ahigh={-856541.384,3917.95866,-1.809888212,0.002276482224,-5.36562755e-007,
              5.984958090000001e-011,-2.541700646e-015},
          bhigh={19565.18798,38.41408752},
          R=114.4613436123348);

        constant IdealGases.Common.DataRecord Geplus(
          name="Geplus",
          MM=0.0726394514,
          Hf=15624903.03994779,
          H0=85432.70743919742,
          Tlimit=1000,
          alow={-345366.643,4008.44971,-15.22395737,0.0362603002,-3.35136726e-005,
              1.431059219e-008,-2.236976459e-012},
          blow={115705.8042,109.0158182},
          ahigh={-2244860.57,5165.53114,-0.386751651,0.000852873094,-1.386040003e-007,
              1.155945775e-011,-3.784413134e-016},
          bhigh={100682.3985,29.65845411},
          R=114.4622080667311);

        constant IdealGases.Common.DataRecord Geminus(
          name="Geminus",
          MM=0.07264054860000001,
          Hf=3378313.417638478,
          H0=96102.52310236543,
          Tlimit=1000,
          alow={2989.142308,86.5741723,2.191868507,0.0005900795269999999,-6.37580058e-007,
              3.66113215e-010,-8.689778450000001e-014},
          blow={28356.9519,9.417623637},
          ahigh={13520.40246,-0.504851878,2.500140247,-3.65294416e-009,-6.7167222e-012,
              1.378119925e-015,-8.475212940000001e-020},
          bhigh={28817.39757,7.577953867},
          R=114.4604791709957);

        constant IdealGases.Common.DataRecord GeBr(
          name="GeBr",
          MM=0.152544,
          Hf=900973.6141703377,
          H0=64664.09036081393,
          Tlimit=1000,
          alow={-56807.7463,917.336126,-2.224809366,0.02171239242,-3.035490868e-005,
              2.011776305e-008,-5.20291504e-012},
          blow={11041.92901,41.07865983},
          ahigh={225675.0476,-731.071546,6.26328381,-0.001198085447,4.00037777e-007,-5.42993788e-011,
              2.510481953e-015},
          bhigh={19428.63606,-6.106507844},
          R=54.50540172015943);

        constant IdealGases.Common.DataRecord GeBr2(
          name="GeBr2",
          MM=0.232448,
          Hf=-262264.6656456497,
          H0=61060.80929928413,
          Tlimit=1000,
          alow={-1649.285325,-229.6262116,7.90014468,-0.001936685504,2.345776175e-006,
              -1.496279368e-009,3.9014535e-013},
          blow={-8316.62421,-6.918156136},
          ahigh={-26366.55245,-3.99050902,7.00332744,-1.445749787e-006,
              3.40159136e-010,-4.09345703e-014,1.969987842e-018},
          bhigh={-9484.999249999999,-1.673617098},
          R=35.76916987885463);

        constant IdealGases.Common.DataRecord GeBr3(
          name="GeBr3",
          MM=0.312352,
          Hf=-381080.665403135,
          H0=59386.49984632723,
          Tlimit=1000,
          alow={2725.568677,-518.621326,11.99957754,-0.00425102453,5.10362972e-006,-3.23370625e-009,
              8.38835886e-013},
          blow={-14779.88251,-25.34555678},
          ahigh={-54339.267,-9.28032795,10.00765019,-3.29732215e-006,7.71292926e-010,
              -9.24157185e-014,4.43287623e-018},
          bhigh={-17426.97092,-13.66946296},
          R=26.61891711914763);

        constant IdealGases.Common.DataRecord GeBr4(
          name="GeBr4",
          MM=0.392256,
          Hf=-741862.4571708272,
          H0=61090.76215532714,
          Tlimit=1000,
          alow={5431.940390000001,-677.7748800000001,15.60015305,-0.00550778888,
              6.59476429e-006,-4.17014614e-009,1.080116643e-012},
          blow={-35576.064,-42.09122927},
          ahigh={-69777.5791,-11.79873115,13.00953955,-4.02493875e-006,
              9.203567209999999e-010,-1.076853369e-013,5.0409548e-018},
          bhigh={-39041.4816,-26.8943607},
          R=21.19654511339533);

        constant IdealGases.Common.DataRecord GeCL(
          name="GeCL",
          MM=0.108093,
          Hf=638615.960330456,
          H0=88804.2241403236,
          Tlimit=1000,
          alow={10697.24739,-22.41238266,1.98737107,0.01368270905,-2.358294414e-005,
              1.78675602e-008,-5.10250325e-012},
          blow={7440.68339,15.05837189},
          ahigh={-378419.325,1429.309204,3.19485464,0.0008119939119999999,-2.652459954e-007,
              5.15195788e-011,-3.53421457e-015},
          bhigh={-2087.046335,13.8503382},
          R=76.91961551626839);

        constant IdealGases.Common.DataRecord GeCL2(
          name="GeCL2",
          MM=0.143546,
          Hf=-1191255.764702604,
          H0=92491.54278071142,
          Tlimit=1000,
          alow={18385.36673,-582.720534,9.161404660000001,-0.00446478603,
              5.24487355e-006,-3.26806721e-009,8.36757542e-013},
          blow={-19757.98598,-17.3432163},
          ahigh={-48901.28920000001,-11.26210418,7.00906353,-3.83918073e-006,
              8.86563357e-010,-1.05200054e-013,5.00842222e-018},
          bhigh={-22752.54424,-4.656641298},
          R=57.9220040962479);

        constant IdealGases.Common.DataRecord GeCL3(
          name="GeCL3",
          MM=0.178999,
          Hf=-1491352.404203376,
          H0=98097.96144112539,
          Tlimit=1000,
          alow={19358.59579,-834.202,13.1270253,-0.006511390020000001,7.69627748e-006,
              -4.81854173e-009,1.238399959e-012},
          blow={-30972.18753,-35.52547183999999},
          ahigh={-75744.9982,-15.7921342,10.01278835,-5.44173831e-006,
              1.260936724e-009,-1.500137106e-013,7.15640081e-018},
          bhigh={-35251.3172,-17.19719944},
          R=46.44982374203208);

        constant IdealGases.Common.DataRecord GeCL4(
          name="GeCL4",
          MM=0.214452,
          Hf=-2331524.070654505,
          H0=98561.09991979557,
          Tlimit=1000,
          alow={65028.7041,-1652.48276,18.81327,-0.0115242681,1.31080998e-005,-7.96195611e-009,
              1.99750504e-012},
          blow={-55700.5239,-67.54438135},
          ahigh={-137626.121,-36.037695,13.0281667,-1.16495696e-005,2.63619338e-009,-3.07292672e-013,
              1.43980875e-017},
          bhigh={-64262.8178,-33.18158305},
          R=38.77078320556581);

        constant IdealGases.Common.DataRecord GeF(
          name="GeF",
          MM=0.0916384032,
          Hf=-770342.8642894556,
          H0=99784.69376035572,
          Tlimit=1000,
          alow={50170.9782,-439.555252,2.990864513,0.01252766738,-2.337593226e-005,
              1.841631179e-008,-5.398492260000001e-012},
          blow={-7093.5164,7.064248931},
          ahigh={-515048.058,1659.711777,2.999610299,0.0008198511679999999,-2.271982948e-007,
              3.62418386e-011,-2.133840473e-015},
          bhigh={-20515.29487,13.7315423},
          R=90.73130597718665);

        constant IdealGases.Common.DataRecord GeF2(
          name="GeF2",
          MM=0.1106368064,
          Hf=-5188146.862489335,
          H0=106542.1660616552,
          Tlimit=1000,
          alow={75430.9708,-1108.456469,9.07889827,-0.001445630636,-6.57532232e-007,
              1.475344103e-009,-5.81122027e-013},
          blow={-65106.8555,-22.00457134},
          ahigh={-127532.7716,-71.6259135,7.05300237,-2.101910441e-005,4.6078937e-009,
              -5.24639467e-013,2.416218951e-017},
          bhigh={-71126.3763,-8.483841439000001},
          R=75.15104846699552);

        constant IdealGases.Common.DataRecord GeF3(
          name="GeF3",
          MM=0.1296352096,
          Hf=-6220014.111042869,
          H0=113226.8543807716,
          Tlimit=1000,
          alow={111412.1569,-1776.90803,13.52166477,-0.002983622949,-3.61274975e-008,
              1.621528436e-009,-7.19901178e-013},
          blow={-90382.62960000002,-45.68760023},
          ahigh={-206958.0129,-111.0233803,10.08234122,-3.27167626e-005,
              7.1838967e-009,-8.19038812e-013,3.77632244e-017},
          bhigh={-99997.4909,-23.0346594},
          R=64.13745174366579);

        constant IdealGases.Common.DataRecord GeF4(
          name="GeF4",
          MM=0.1486336128,
          Hf=-8007273.574123873,
          H0=116346.6639492194,
          Tlimit=1000,
          alow={111981.8968,-1636.85963,12.31371005,0.01025446325,-1.893783072e-005,
              1.476849261e-008,-4.32517411e-012},
          blow={-137426.5128,-41.04202391000001},
          ahigh={-325303.268,-253.8279448,13.18792173,-7.46005855e-005,
              1.637384721e-008,-1.866482733e-012,8.605530500000001e-017},
          bhigh={-146617.6526,-41.22237561},
          R=55.93937900969867);

        constant IdealGases.Common.DataRecord GeH4(
          name="GeH4",
          MM=0.07667176000000001,
          Hf=1184177.85114102,
          H0=0,
          Tlimit=1000,
          alow={-256839.8191,-41.3281145,7.75511628,0.002129640783,
              7.255053610000001e-007,-5.09631401e-010,1.431608261e-013},
          blow={7881.53804,-20.30107999},
          ahigh={-3809805.88,10931.67093,-5.14967541,0.009485931369999999,-1.649459859e-006,
              1.419674126e-010,-5.00463975e-015},
          bhigh={-61585.1852,71.68961272999999},
          R=108.4424304333173);

        constant IdealGases.Common.DataRecord GeI(
          name="GeI",
          MM=0.19954447,
          Hf=1057253.653784542,
          H0=50139.80091755988,
          Tlimit=1000,
          alow={-74383.08219999999,1033.759595,-1.520491112,0.01555125152,-1.683415215e-005,
              8.383557809999999e-009,-1.550875391e-012},
          blow={19129.20413,39.59395473},
          ahigh={-213314.8437,-295.3079008,6.87660736,-0.002102579132,8.59629938e-007,
              -1.44769276e-010,8.401042789999999e-015},
          bhigh={24523.26136,-8.549783749},
          R=41.66726344257999);

        constant IdealGases.Common.DataRecord GeO(
          name="GeO",
          MM=0.08863939999999999,
          Hf=-425254.5369215045,
          H0=99076.77624171645,
          Tlimit=1000,
          alow={-6781.22563,279.1946972,0.619895286,0.01111378013,-1.501027092e-005,
              1.006783003e-008,-2.687101932e-012},
          blow={-6711.84743,21.56441027},
          ahigh={-1044508.485,2734.866048,1.298071298,0.001832638634,-5.06098635e-007,
              6.37495802e-011,-2.172371872e-015},
          bhigh={-23621.04658,23.50906051},
          R=93.80108619868818);

        constant IdealGases.Common.DataRecord GeO2(
          name="GeO2",
          MM=0.1046388,
          Hf=-1014652.289590477,
          H0=107589.1734232426,
          Tlimit=1000,
          alow={-3824.17383,156.3451633,1.694198285,0.01756205059,-2.418270032e-005,
              1.632388154e-008,-4.36895786e-012},
          blow={-14775.3488,15.56926515},
          ahigh={-172734.7526,-296.1154443,7.72072625,-8.82493339e-005,
              1.949874702e-008,-2.235834829e-012,1.036128507e-016},
          bhigh={-13879.83288,-16.69845695},
          R=79.45878584234529);

        constant IdealGases.Common.DataRecord GeS(
          name="GeS",
          MM=0.104705,
          Hf=883674.2275918056,
          H0=87303.47165846905,
          Tlimit=1000,
          alow={36610.1843,-565.9653500000001,6.15293641,-0.002746908039,
              2.733435196e-006,-1.460209187e-009,3.27870947e-013},
          blow={12741.75754,-7.70565946},
          ahigh={-2351367.441,7211.58186,-4.36252631,0.00545173775,-1.721002774e-006,
              2.632908084e-010,-1.39437404e-014},
          bhigh={-35833.1725,65.05566890999999},
          R=79.40854782484124);

        constant IdealGases.Common.DataRecord GeS2(
          name="GeS2",
          MM=0.13677,
          Hf=868741.9097755356,
          H0=95546.03348687578,
          Tlimit=1000,
          alow={55436.836,-1024.826697,10.57594552,-0.00528788391,5.29580308e-006,-2.87252953e-009,
              6.51902755e-013},
          blow={17355.79668,-29.91719536},
          ahigh={-89709.8036,-33.64377,7.52543372,-1.026368137e-005,2.282230718e-009,
              -2.62874877e-013,1.222218614e-017},
          bhigh={11952.32103,-11.35170616},
          R=60.79163559260072);

        constant IdealGases.Common.DataRecord Ge2(
          name="Ge2",
          MM=0.14528,
          Hf=3245449.676486785,
          H0=73624.23595814979,
          Tlimit=1000,
          alow={216197.8929,-3079.621733,18.88047728,-0.02604825861,2.27915135e-005,-9.02835127e-009,
              1.146806387e-012},
          blow={70324.02549999999,-79.01095968},
          ahigh={1969461.258,-5248.6871,10.58277303,-0.00333655151,1.052745838e-006,-1.484534793e-010,
              7.475431760000001e-015},
          bhigh={89256.65990000001,-37.50233948},
          R=57.23067180616741);

        constant IdealGases.Common.DataRecord H(
          name="H",
          MM=0.00100794,
          Hf=216281552.4733615,
          H0=6148608.052066591,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={25473.70801,-0.446682853},
          ahigh={60.78774250000001,-0.1819354417,2.500211817,-1.226512864e-007,
              3.73287633e-011,-5.68774456e-015,3.410210197e-019},
          bhigh={25474.86398,-0.448191777},
          R=8248.975137408972);

        constant IdealGases.Common.DataRecord Hplus(
          name="Hplus",
          MM=0.0010073914,
          Hf=1524974233.450872,
          H0=6151956.429248851,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={184021.4877,-1.140646644},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={184021.4877,-1.140646644},
          R=8253.46732163884);

        constant IdealGases.Common.DataRecord Hminus(
          name="Hminus",
          MM=0.0010084886,
          Hf=137861080.4326395,
          H0=6145263.317800519,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={15976.15494,-1.139013868},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={15976.15494,-1.139013868},
          R=8244.487840516989);

        constant IdealGases.Common.DataRecord HALO(
          name="HALO",
          MM=0.043988878,
          Hf=41399.41918955059,
          H0=225857.476974066,
          Tlimit=1000,
          alow={26686.71568,-466.321459,5.38380021,0.002902425002,-2.24367761e-007,-1.516294323e-009,
              6.95173766e-013},
          blow={1235.914473,-6.50883752},
          ahigh={78474.67049999999,-1515.62885,8.572776230000001,-0.0004142611439999999,
              8.9350817e-008,-1.007036446e-011,4.60801725e-016},
          bhigh={6663.24189,-26.72948642},
          R=189.0130500714294);

        constant IdealGases.Common.DataRecord HALO2(
          name="HALO2",
          MM=0.059988278,
          Hf=-5925716.870886008,
          H0=199715.7511339132,
          Tlimit=1000,
          alow={3544.59891,115.9819104,0.863797069,0.02460875785,-3.42316012e-005,
              2.373182987e-008,-6.46760883e-012},
          blow={-44495.06140000001,20.12317065},
          ahigh={698570.544,-2864.935042,10.86721494,-5.3683127e-005,-2.836877559e-008,
              6.29164119e-012,-3.88903311e-016},
          bhigh={-27643.92495,-37.7588634},
          R=138.6016114681605);

        constant IdealGases.Common.DataRecord HBO(
          name="HBO",
          MM=0.02781834,
          Hf=-7571307.454003366,
          H0=329527.139290123,
          Tlimit=1000,
          alow={63609.7503,-800.1557590000001,6.21881613,-0.000780167998,
              3.141286759e-006,-2.031853478e-009,3.73855289e-013},
          blow={-22402.8291,-13.26952393},
          ahigh={886186.0229999999,-3913.06805,9.8886448,-0.0008222269139999999,
              1.621530554e-007,-1.703550237e-011,7.372740020000001e-016},
          bhigh={-3161.852029,-40.3681272},
          R=298.8845488264217);

        constant IdealGases.Common.DataRecord HBOplus(
          name="HBOplus",
          MM=0.0278177914,
          Hf=42247053.76861803,
          H0=326935.6962681085,
          Tlimit=1000,
          alow={65244.7147,-704.733736,5.29427187,0.001308494598,2.088343622e-006,-2.564100339e-009,
              8.198981249999999e-013},
          blow={143929.3436,-6.81674923},
          ahigh={18360.83606,-1212.975446,6.82290196,0.0009142272500000001,-2.665355457e-007,
              3.29704981e-011,-1.530684082e-015},
          bhigh={146361.7504,-16.99646159},
          R=298.8904431859389);

        constant IdealGases.Common.DataRecord HBO2(
          name="HBO2",
          MM=0.04381774,
          Hf=-12785005.63926848,
          H0=249170.8152907932,
          Tlimit=1000,
          alow={6225.08747,75.6615369,1.253406833,0.01748006535,-1.982688351e-005,
              1.22965646e-008,-3.153609847e-012},
          blow={-68785.8878,17.67793507},
          ahigh={1049369.185,-4479.145479999999,11.97755861,-0.00047357434,
              6.08020714e-008,-3.64156544e-012,6.15597317e-017},
          bhigh={-42211.4947,-49.11366819999999},
          R=189.7512742555869);

        constant IdealGases.Common.DataRecord HBS(
          name="HBS",
          MM=0.04388394,
          Hf=1144108.755959469,
          H0=211609.5090823659,
          Tlimit=1000,
          alow={56499.66209999999,-546.640995,3.63645839,0.009963657670000001,-1.395090386e-005,
              1.032834167e-008,-3.047186722e-012},
          blow={7919.86053,1.182455314},
          ahigh={-202183.6183,-505.202662,6.41521828,0.001049432932,-3.68314669e-007,
              5.34296831e-011,-2.154140451e-015},
          bhigh={6485.47562,-13.31379864},
          R=189.4650298036138);

        constant IdealGases.Common.DataRecord HBSplus(
          name="HBSplus",
          MM=0.0438833914,
          Hf=25737731.99762314,
          H0=230975.5394155794,
          Tlimit=1000,
          alow={148950.9163,-1847.661736,11.4745802,-0.009476828369999999,
              1.110746739e-005,-6.175558610000001e-009,1.336853512e-012},
          blow={143782.2395,-41.13512498},
          ahigh={661065.836,-2791.498527,9.131267640000001,-0.000506379529,
              7.751213140000001e-008,-4.19113293e-012,2.687149095e-017},
          bhigh={151073.4114,-30.81426166},
          R=189.4673983652048);

        constant IdealGases.Common.DataRecord HCN(
          name="HCN",
          MM=0.02702534,
          Hf=4924358.398451231,
          H0=341733.4620026983,
          Tlimit=1000,
          alow={90982.86930000001,-1238.657512,8.72130787,-0.00652824294,
              8.87270083e-006,-4.808886669999999e-009,9.317898499999999e-013},
          blow={20989.1545,-27.46678076},
          ahigh={1236889.278,-4446.732410000001,9.73887485,-0.000585518264,
              1.07279144e-007,-1.013313244e-011,3.34824798e-016},
          bhigh={42215.1377,-40.05774072000001},
          R=307.6546678043644);

        constant IdealGases.Common.DataRecord HCO(
          name="HCO",
          MM=0.02901804,
          Hf=1461085.931372346,
          H0=344249.6460822303,
          Tlimit=1000,
          alow={-11898.51887,215.1536111,2.730224028,0.001806516108,4.98430057e-006,-5.81456792e-009,
              1.869689894e-012},
          blow={2905.75564,11.3677254},
          ahigh={694960.6120000001,-3656.22338,9.604731170000001,-0.001117129278,
              2.875328019e-007,-3.62624774e-011,1.808329595e-015},
          bhigh={25437.0444,-35.8247372},
          R=286.5276910501192);

        constant IdealGases.Common.DataRecord HCOplus(
          name="HCOplus",
          MM=0.0290174914,
          Hf=28707995.06810571,
          H0=311742.7304553281,
          Tlimit=1000,
          alow={157344.2506,-1867.692159,10.99235423,-0.01211637888,1.659091514e-005,
              -1.016592642e-008,2.391234771e-012},
          blow={108493.028,-40.7826162},
          ahigh={1219060.653,-4714.29489,10.21192493,-0.000885451707,1.667408026e-007,
              -1.683285548e-011,7.04005178e-016},
          bhigh={127798.9027,-43.5115846},
          R=286.5331080963119);

        constant IdealGases.Common.DataRecord HCCN(
          name="HCCN",
          MM=0.03903604,
          Hf=15637616.62299762,
          H0=303968.6146443133,
          Tlimit=1000,
          alow={2994.114377,-440.466068,6.94003641,0.00384630496,-1.264728529e-006,-3.63923513e-010,
              2.748929104e-013},
          blow={73708.7864,-13.15302591},
          ahigh={939562.031,-4091.06775,12.72233302,-0.000687440531,1.231169968e-007,
              -1.186956238e-011,4.76061035e-016},
          bhigh={95851.6482,-52.48695794},
          R=212.9947607390504);

        constant IdealGases.Common.DataRecord HCCO(
          name="HCCO",
          MM=0.04102874,
          Hf=4303522.360179718,
          H0=284312.7524754599,
          Tlimit=1000,
          alow={69596.12700000001,-1164.594402,9.456616260000001,-0.002331240632,
              5.1618736e-006,-3.52616997e-009,8.59914323e-013},
          blow={25350.03992,-27.26355351},
          ahigh={1093922.002,-4498.228209999999,12.46446433,-0.00063433174,
              1.108549019e-007,-1.125488678e-011,5.68915194e-016},
          bhigh={46522.803,-50.9907043},
          R=202.6499473296036);

        constant IdealGases.Common.DataRecord HCL(
          name="HCL",
          MM=0.03646094,
          Hf=-2531750.415650282,
          H0=236968.7671244899,
          Tlimit=1000,
          alow={20625.88287,-309.3368855,5.27541885,-0.00482887422,6.1957946e-006,-3.040023782e-009,
              4.916790029999999e-013},
          blow={-10677.82299,-7.309305408},
          ahigh={915774.951,-2770.550211,5.97353979,-0.000362981006,4.73552919e-008,
              2.810262054e-012,-6.65610422e-016},
          bhigh={5674.95805,-16.42825822},
          R=228.0377850927595);

        constant IdealGases.Common.DataRecord HD(
          name="HD",
          MM=0.003022042,
          Hf=106981.3060175868,
          H0=2815679.596775955,
          Tlimit=1000,
          alow={25191.20338,-276.1004999,4.64444129,-0.002082376844,1.418070803e-006,
              2.839893835e-010,-3.20233103e-013},
          blow={391.361643,-9.395396119999999},
          ahigh={845583.0000000001,-1956.578537,4.40437387,0.000575168109,-2.131983152e-007,
              4.03612668e-011,-2.727170705e-015},
          bhigh={12272.54163,-10.84742878},
          R=2751.276123892388);

        constant IdealGases.Common.DataRecord HDplus(
          name="HDplus",
          MM=0.0030214934,
          Hf=495381726.7977484,
          H0=2850908.097300494,
          Tlimit=1000,
          alow={-80700.73049999999,879.643258,0.0596893216,0.005418181009999999,-2.021515155e-006,
              -4.94526165e-010,4.09293565e-013},
          blow={174499.2497,19.34281193},
          ahigh={1340083.03,-5730.069570000001,12.13836576,-0.00524333812,
              1.976302344e-006,-3.30657353e-010,1.937902763e-014},
          bhigh={213534.8051,-61.2875839},
          R=2751.775661664527);

        constant IdealGases.Common.DataRecord HDO(
          name="HDO",
          MM=0.019021442,
          Hf=-12894946.50300435,
          H0=521817.5888032044,
          Tlimit=1000,
          alow={-27377.95356,431.0503899999999,1.558479899,0.005764969149999999,-4.85512936e-006,
              3.38299017e-009,-1.040863879e-012},
          blow={-32732.2645,14.87751891},
          ahigh={1711376.798,-5322.8723,9.124351519999999,-0.000340066415,
              4.152343519999999e-008,-4.78076857e-014,-1.46803517e-016},
          bhigh={3245.22468,-37.7460068},
          R=437.1104987729112);

        constant IdealGases.Common.DataRecord HDO2(
          name="HDO2",
          MM=0.035020842,
          Hf=-4004519.223152887,
          H0=323663.4059226788,
          Tlimit=1000,
          alow={-32164.7665,749.2334460000001,-1.957676212,0.02412802791,-2.915946684e-005,
              1.930016324e-008,-5.22698631e-012},
          blow={-21510.59175,36.7240674},
          ahigh={1313180.619,-5175.63712,12.16490975,-0.000613669948,1.227560176e-007,
              -1.079624939e-011,3.87401372e-016},
          bhigh={13032.0967,-50.85276870000001},
          R=237.4149656367485);

        constant IdealGases.Common.DataRecord HF(
          name="HF",
          MM=0.0200063432,
          Hf=-13660667.38273289,
          H0=429818.8286603021,
          Tlimit=1000,
          alow={-3192.09897,59.8680772,3.055113902,0.001684673783,-3.28739483e-006,
              3.095923617e-009,-9.76469161e-013},
          blow={-34184.4316,3.29490412},
          ahigh={725708.904,-1484.797741,3.85552747,0.000713898985,-2.106757333e-007,
              3.050092453e-011,-1.639495583e-015},
          bhigh={-23554.5666,-3.20385683},
          R=415.5917909075958);

        constant IdealGases.Common.DataRecord HI(
          name="HI",
          MM=0.12791241,
          Hf=206070.7010367485,
          H0=67675.21618895305,
          Tlimit=1000,
          alow={18728.8173,-343.178884,5.95671243,-0.008543439599999999,
              1.454780274e-005,-1.049104164e-008,2.839734003e-012},
          blow={3682.95072,-8.14975609},
          ahigh={472492.145,-1923.465741,5.75804897,-0.000406626638,
              9.474332049999999e-008,-1.033534431e-011,4.61161479e-016},
          bhigh={13948.57037,-11.82487652},
          R=65.00129268145288);

        constant IdealGases.Common.DataRecord HNC(
          name="HNC",
          MM=0.02702534,
          Hf=7192439.429069164,
          H0=370049.8865139163,
          Tlimit=1000,
          alow={48706.2064,-989.1456249999999,9.72215389,-0.01113593916,
              1.668862707e-005,-1.113940941e-008,2.893600868e-012},
          blow={26646.79758,-31.04826344},
          ahigh={1198791.66,-3918.94186,9.11802009,-0.00034177611,3.31480968e-008,-5.70157474e-013,
              -7.789455389999999e-017},
          bhigh={46588.103,-34.68575882},
          R=307.6546678043644);

        constant IdealGases.Common.DataRecord HNCO(
          name="HNCO",
          MM=0.04302474,
          Hf=-2743921.962108313,
          H0=254879.5413987394,
          Tlimit=1000,
          alow={75424.6008,-955.0937770000001,6.72570587,0.0047056875,-4.95947551e-006,
              3.69425512e-009,-1.164859121e-012},
          blow={-10681.49742,-13.65584762},
          ahigh={1253216.926,-5021.091539999999,12.47789314,-0.000689165525,
              1.097738448e-007,-9.3064038e-012,3.24260695e-016},
          bhigh={14531.55559,-53.06419819},
          R=193.2486285797427);

        constant IdealGases.Common.DataRecord HNO(
          name="HNO",
          MM=0.03101404,
          Hf=3289888.224816889,
          H0=320560.6235111581,
          Tlimit=1000,
          alow={-68547.6486,955.16272,-0.600072021,0.007995176749999999,-6.54707916e-007,
              -3.6705134e-009,1.783392519e-012},
          blow={6435.35126,30.48166179},
          ahigh={-5795614.98,19454.57427,-21.52568374,0.01797428992,-4.97604067e-006,
              6.397924169999999e-010,-3.142619368e-014},
          bhigh={-110419.2372,181.8650338},
          R=268.0873565649622);

        constant IdealGases.Common.DataRecord HNO2(
          name="HNO2",
          MM=0.04701344,
          Hf=-1668712.648978675,
          H0=246680.2046393542,
          Tlimit=1000,
          alow={8591.985060000001,120.3644046,0.9412979119999999,0.01942891839,-2.253174194e-005,
              1.384587594e-008,-3.47355046e-012},
          blow={-11063.37202,20.73967331},
          ahigh={878790.4129999999,-3990.45503,11.87349269,-0.000488190061,
              7.13363679e-008,-5.37630334e-012,1.581778986e-016},
          bhigh={12463.43241,-46.08874688},
          R=176.8530871172158);

        constant IdealGases.Common.DataRecord HNO3(
          name="HNO3",
          MM=0.06301284,
          Hf=-2125167.965766977,
          H0=188475.7138386399,
          Tlimit=1000,
          alow={9202.86901,109.3774496,-0.452104245,0.02984914503,-3.1906355e-005,
              1.720931528e-008,-3.78264983e-012},
          blow={-17640.48507,27.46644879},
          ahigh={-94978.0964,-2733.024468,14.49426995,-0.000782186805,
              1.702693665e-007,-1.930543961e-011,8.870455120000001e-016},
          bhigh={-4882.51778,-59.28392985000001},
          R=131.9488535987269);

        constant IdealGases.Common.DataRecord HOCL(
          name="HOCL",
          MM=0.05246034,
          Hf=-1443757.932182674,
          H0=194902.0155035213,
          Tlimit=1000,
          alow={-9739.307430000001,354.756952,0.1539514254,0.01617051795,-2.179693631e-005,
              1.509103049e-008,-4.12538351e-012},
          blow={-11763.23791,24.73257759},
          ahigh={853045.781,-2847.760552,7.94832904,-0.0001048782013,-1.482405043e-008,
              4.59167827e-012,-3.060073987e-016},
          bhigh={7250.964950000001,-22.4983169},
          R=158.4906235834537);

        constant IdealGases.Common.DataRecord HOF(
          name="HOF",
          MM=0.0360057432,
          Hf=-2691187.915821163,
          H0=280189.6059737493,
          Tlimit=1000,
          alow={-36968.883,780.900666,-2.077685317,0.02038690173,-2.586919999e-005,
              1.713797538e-008,-4.55128187e-012},
          blow={-16317.20064,36.450525},
          ahigh={881201.823,-3120.013169,8.223710069999999,-0.0002298036315,
              1.459115709e-008,1.095883303e-012,-1.404445608e-016},
          bhigh={6300.54671,-25.90150427},
          R=230.9207160039958);

        constant IdealGases.Common.DataRecord HO2(
          name="HO2",
          MM=0.03300674,
          Hf=364168.0456779433,
          H0=0,
          Tlimit=1000,
          alow={-75988.8254,1329.383918,-4.67738824,0.02508308202,-3.006551588e-005,
              1.895600056e-008,-4.82856739e-012},
          blow={-5.873350960e+003,5.193602140e+001},
          ahigh={-1810669.724,4963.19203,-1.039498992,0.004560148530000001,-1.061859447e-006,
              1.144567878e-010,-4.763064160e-015},
          bhigh={-3.200817190e+004,4.066850920e+001},
          R=251.9022478439252);

        constant IdealGases.Common.DataRecord HO2minus(
          name="HO2minus",
          MM=0.0330072886,
          Hf=-2966710.813077812,
          H0=0,
          Tlimit=1000,
          alow={110383.9835,-1047.963653,6.36001399,0.002942520461,-6.284141339999999e-006,
              5.43825424e-009,-1.64730582e-012},
          blow={-7.417741590e+003,-1.251878002e+001},
          ahigh={793330.6,-2503.312417,7.54896233,8.308390149999999e-005,-5.96973091e-008,
              9.955377000000001e-012,-5.606477280e-016},
          bhigh={2.512079084e+003,-2.070065846e+001},
          R=251.8980610846054);

        constant IdealGases.Common.DataRecord HPO(
          name="HPO",
          MM=0.04798110100000001,
          Hf=-1185232.473093937,
          H0=209777.241251717,
          Tlimit=1000,
          alow={-38163.1412,792.764187,-1.889940652,0.01800907425,-1.857631793e-005,
              1.018768867e-008,-2.355583619e-012},
          blow={-11576.4124,36.9292591},
          ahigh={384245.945,-2434.951707,8.582173920000001,-0.000405844857,-1.66948874e-008,
              2.253640566e-011,-1.943063011e-015},
          bhigh={5761.63212,-26.49097544},
          R=173.2863945743971);

        constant IdealGases.Common.DataRecord HSO3F(
          name="HSO3F",
          MM=0.1000695432,
          Hf=-7525966.202272021,
          H0=150037.3991914055,
          Tlimit=1000,
          alow={6896.24213,-93.05810749999999,1.570331788,0.0378082075,-4.87272078e-005,
              3.160796011e-008,-8.189782929999999e-012},
          blow={-91802.40820000001,17.16315977},
          ahigh={554404.708,-3974.42432,17.78869264,-0.000440932203,5.94441139e-008,-3.92701581e-012,
              8.891284000000001e-017},
          bhigh={-71534.3827,-76.13127849},
          R=83.08693868405707);

        constant IdealGases.Common.DataRecord H2(
          name="H2",
          MM=0.00201588,
          Hf=0,
          H0=4200697.462150524,
          Tlimit=1000,
          alow={40783.2321,-800.918604,8.21470201,-0.01269714457,1.753605076e-005,-1.20286027e-008,
              3.36809349e-012},
          blow={2682.484665,-30.43788844},
          ahigh={560812.801,-837.150474,2.975364532,0.001252249124,-3.74071619e-007,
              5.936625200000001e-011,-3.6069941e-015},
          bhigh={5339.82441,-2.202774769},
          R=4124.487568704486);

        constant IdealGases.Common.DataRecord H2plus(
          name="H2plus",
          MM=0.0020153314,
          Hf=741650941.3786734,
          H0=4258904.01945804,
          Tlimit=1000,
          alow={-31208.8606,230.4622909,3.33556442,-0.002419056763,
              7.006022340000001e-006,-5.61001066e-009,1.564169746e-012},
          blow={177410.4638,-0.8278523760000001},
          ahigh={1672225.964,-6595.18499,12.79321925,-0.00550934526,2.030669412e-006,
              -3.35102748e-010,1.946089104e-014},
          bhigh={218999.9548,-67.9271078},
          R=4125.610309053885);

        constant IdealGases.Common.DataRecord H2minus(
          name="H2minus",
          MM=0.0020164286,
          Hf=116626178.5812798,
          H0=4275178.402052024,
          Tlimit=1000,
          alow={-97535.65670000001,1221.166236,-2.264588838,0.01237202227,-1.12710002e-005,
              5.36723995e-009,-1.04942016e-012},
          blow={21213.99948,30.50556136},
          ahigh={95992.7562,-914.4682879999999,5.14941881,-0.0001016559478,
              5.446919560000001e-008,-6.155174449999999e-012,2.822451181e-016},
          bhigh={32341.0518,-14.4078098},
          R=4123.365439272186);

        constant IdealGases.Common.DataRecord HBOH(
          name="HBOH",
          MM=0.02882628,
          Hf=-1690275.817760738,
          H0=379533.3979965504,
          Tlimit=1000,
          alow={-61596.4419,1223.483035,-5.46037051,0.0355538868,-4.67502014e-005,
              3.23600885e-008,-8.98605332e-012},
          blow={-12636.59051,54.2235229},
          ahigh={1534611.049,-5753.66643,12.70893665,-0.000705962825,1.027679375e-007,
              -7.67092674e-012,2.211854768e-016},
          bhigh={27793.70419,-56.0886008},
          R=288.4337486488024);

        constant IdealGases.Common.DataRecord HCOOH(
          name="HCOOH",
          MM=0.04602538,
          Hf=-8225244.419492028,
          H0=237426.589416535,
          Tlimit=1000,
          alow={-29062.79097,765.837888,-3.32841413,0.02817542991,-2.370050804e-005,
              1.166063663e-008,-2.79137317e-012},
          blow={-50064.4347,43.8709423},
          ahigh={487233.645,-7632.238079999999,21.32788153,-0.004402546540000001,
              1.102001695e-006,-1.364343517e-010,6.64842975e-015},
          bhigh={-5781.43191,-111.1790688},
          R=180.6497197850404);

        constant IdealGases.Common.DataRecord H2F2(
          name="H2F2",
          MM=0.0400126864,
          Hf=-14243576.95713228,
          H0=346625.8141567821,
          Tlimit=1000,
          alow={52592.1471,-991.3544890000001,10.43577115,-0.002407796033,-6.376956159999999e-007,
              2.7357849e-009,-1.10434859e-012},
          blow={-65724.60829999999,-30.38432132},
          ahigh={1464995.601,-3335.07492,9.187487040000001,0.001051127249,-3.27860557e-007,
              4.45604623e-011,-2.281370136e-015},
          bhigh={-48254.42090000001,-26.39128168},
          R=207.7958954537979);

        constant IdealGases.Common.DataRecord H2O(
          name="H2O",
          MM=0.01801528,
          Hf=-13423382.81725291,
          H0=549760.6476280135,
          Tlimit=1000,
          alow={-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,
              4.95504349e-009,-1.336933246e-012},
          blow={-33039.7431,17.24205775},
          ahigh={1034972.096,-2412.698562,4.64611078,0.002291998307,-6.836830479999999e-007,
              9.426468930000001e-011,-4.82238053e-015},
          bhigh={-13842.86509,-7.97814851},
          R=461.5233290850878);

        constant IdealGases.Common.DataRecord H2Oplus(
          name="H2Oplus",
          MM=0.0180147314,
          Hf=54488837.17466918,
          H0=551463.4539596855,
          Tlimit=1000,
          alow={-1753.89272,224.9850054,1.989400675,0.00611789516,-7.09543664e-006,
              5.54765947e-009,-1.704344789e-012},
          blow={115958.5952,11.35409642},
          ahigh={622871.426,-2864.257487,7.71756556,-0.000902780167,6.17743686e-007,-1.201457479e-010,
              7.407709940000001e-015},
          bhigh={134208.6651,-26.3661792},
          R=461.5373837880259);

        constant IdealGases.Common.DataRecord H2O2(
          name="H2O2",
          MM=0.03401468,
          Hf=-3994745.79799075,
          H0=328059.3849479107,
          Tlimit=1000,
          alow={-92795.3358,1564.748385,-5.97646014,0.0327074452,-3.93219326e-005,
              2.509255235e-008,-6.46504529e-012},
          blow={-24940.04728,58.7717418},
          ahigh={1489428.027,-5170.82178,11.2820497,-8.04239779e-005,-1.818383769e-008,
              6.94726559e-012,-4.8278319e-016},
          bhigh={14182.51038,-46.50855660000001},
          R=244.4377545224592);

        constant IdealGases.Common.DataRecord H2S(
          name="H2S",
          MM=0.03408088,
          Hf=-604444.4861752396,
          H0=292199.6439059085,
          Tlimit=1000,
          alow={9543.80881,-68.7517508,4.05492196,-0.0003014557336,3.76849775e-006,-2.239358925e-009,
              3.086859108e-013},
          blow={-3278.45728,1.415194691},
          ahigh={1430040.22,-5284.02865,10.16182124,-0.000970384996,2.154003405e-007,
              -2.1696957e-011,9.318163070000001e-016},
          bhigh={29086.96214,-43.49160391},
          R=243.9629493135154);

        constant IdealGases.Common.DataRecord H2SO4(
          name="H2SO4",
          MM=0.09807848,
          Hf=-7470871.500047717,
          H0=168320.1962346888,
          Tlimit=1000,
          alow={-41291.5005,668.158989,-2.632753507,0.0541538248,-7.067502229999999e-005,
              4.68461142e-008,-1.236791238e-011},
          blow={-93156.60120000001,39.61096201},
          ahigh={1437877.914,-6614.90253,21.57662058,-0.000480625597,3.010775121e-008,
              2.334842469e-012,-2.946330375e-016},
          bhigh={-52590.92950000001,-102.3603724},
          R=84.77366288710837);

        constant IdealGases.Common.DataRecord H2BOH(
          name="H2BOH",
          MM=0.02983422,
          Hf=-9708110.284096584,
          H0=356044.3678433691,
          Tlimit=1000,
          alow={-86867.6678,1820.335089,-10.32373881,0.0492280106,-5.97861991e-005,
              3.94606273e-008,-1.068442257e-011},
          blow={-44152.3815,79.86177289999999},
          ahigh={2294795.193,-9382.923559999999,17.98228329,-0.001506116214,
              2.635641095e-007,-2.483163637e-011,9.736759120000001e-016},
          bhigh={20397.38953,-94.48201210000001},
          R=278.689102647899);

        constant IdealGases.Common.DataRecord HB_OH_2(
          name="HB_OH_2",
          MM=0.04583362000000001,
          Hf=-14060393.30954003,
          H0=265253.5845957617,
          Tlimit=1000,
          alow={-20670.44022,953.4459160000001,-8.08895652,0.0597242529,-8.071336320000001e-005,
              5.61211835e-008,-1.553607566e-011},
          blow={-82642.70809999999,65.3957164},
          ahigh={2122674.609,-8615.948939999998,19.6617952,-0.00081484115,
              8.955082040000001e-008,-3.34483051e-012,-6.919578139999999e-017},
          bhigh={-27887.90377,-99.8355961},
          R=181.4055272090662);

        constant IdealGases.Common.DataRecord H3BO3(
          name="H3BO3",
          MM=0.06183302,
          Hf=-16243108.32626322,
          H0=219299.6234050998,
          Tlimit=1000,
          alow={25689.01843,113.8029495,-4.04509658,0.0592452168,-8.148028410000001e-005,
              5.65859329e-008,-1.54927705e-011},
          blow={-122170.205,41.3222014},
          ahigh={2297369.132,-8933.57179,21.93496552,-0.000309478349,-5.06405299e-008,
              1.482296684e-011,-9.7644209e-016},
          bhigh={-69702.9847,-112.2292829},
          R=134.4665358412059);

        constant IdealGases.Common.DataRecord H3B3O3(
          name="H3B3O3",
          MM=0.08345502000000001,
          Hf=-14424069.24113133,
          H0=186966.8355480593,
          Tlimit=1000,
          alow={-198528.4188,4104.13209,-28.27215617,0.1269639253,-0.0001558505781,
              9.96630407e-008,-2.60367765e-011},
          blow={-164849.4375,176.3917407},
          ahigh={1286220.713,-10932.58784,32.1351867,-0.002595402269,5.35376647e-007,
              -5.833567379999999e-011,2.600757913e-015},
          bhigh={-87528.5689,-177.0847815},
          R=99.62818294214057);

        constant IdealGases.Common.DataRecord H3B3O6(
          name="H3B3O6",
          MM=0.13145322,
          Hf=-17220480.49488632,
          H0=180268.3342408805,
          Tlimit=1000,
          alow={-20670.31503,708.339154,-7.12382095,0.1025049979,-0.0001295004602,
              8.322737589999999e-008,-2.145746724e-011},
          blow={-277804.9216,60.6359763},
          ahigh={1952433.352,-11549.32896,38.9267611,-0.00111385228,1.280317726e-007,
              -5.72846482e-012,-2.214529572e-017},
          bhigh={-212092.7136,-207.5566801},
          R=63.25042475186231);

        constant IdealGases.Common.DataRecord H3F3(
          name="H3F3",
          MM=0.0600190296,
          Hf=-14723276.86550934,
          H0=254303.0452461697,
          Tlimit=1000,
          alow={98885.62650000001,-1380.21288,8.98045847,0.01871609057,-3.127862508e-005,
              2.589436165e-008,-8.04037227e-012},
          blow={-101366.1491,-25.85302557},
          ahigh={2515790.373,-8789.42332,20.23933445,-0.001131704646,1.692779921e-007,
              -1.308662105e-011,3.978322e-016},
          bhigh={-54717.1365,-99.07787640000001},
          R=138.5305969691986);

        constant IdealGases.Common.DataRecord H3Oplus(
          name="H3Oplus",
          MM=0.0190226714,
          Hf=31436173.57549476,
          H0=528129.1354273196,
          Tlimit=1000,
          alow={-64476.4015,1181.817922,-3.80189306,0.02220628313,-2.445343237e-005,
              1.573297747e-008,-4.15883641e-012},
          blow={65306.1332,42.8272313},
          ahigh={2955126.2,-9185.669409999999,13.41398696,-0.000559033921,
              1.138387119e-008,7.25992721e-012,-6.13373436e-016},
          bhigh={129053.4257,-70.2182818},
          R=437.0822491314233);

        constant IdealGases.Common.DataRecord H4F4(
          name="H4F4",
          MM=0.08002537279999999,
          Hf=-14831950.09870669,
          H0=270590.1796186322,
          Tlimit=1000,
          alow={131510.9024,-1840.36156,12.64093152,0.0249540736,-4.17039461e-005,
              3.45252384e-008,-1.07203436e-011},
          blow={-136400.3454,-41.2291353},
          ahigh={3354037.99,-11719.2204,27.65243565,-0.001508934621,2.257027572e-007,
              -1.744867255e-011,5.304351740000001e-016},
          bhigh={-74202.13160000001,-138.8603332},
          R=103.897947726899);

        constant IdealGases.Common.DataRecord H5F5(
          name="H5F5",
          MM=0.100031716,
          Hf=-14897154.03862511,
          H0=280362.4602421096,
          Tlimit=1000,
          alow={164136.1897,-2300.510396,16.30140545,0.03119205422,-5.21292635e-005,
              4.31561124e-008,-1.340031413e-011},
          blow={-171434.5408,-56.8215738},
          ahigh={4192290.73,-14649.03043,35.0655492,-0.001886170471,2.821289954e-007,
              -2.181090984e-011,6.63047416e-016},
          bhigh={-93687.042,-178.8592044},
          R=83.11835818151914);

        constant IdealGases.Common.DataRecord H6F6(
          name="H6F6",
          MM=0.1200380592,
          Hf=-15041438.88224411,
          H0=286030.0577068977,
          Tlimit=1000,
          alow={195688.6618,-2753.90988,19.75625055,0.0380771701,-6.341218879999999e-005,
              5.21923329e-008,-1.612185649e-011},
          blow={-207926.941,-71.13607980000001},
          ahigh={5024520.319999999,-17428.17868,42.148705,-0.002084564791,
              2.930051519e-007,-2.052079159e-011,5.2069373e-016},
          bhigh={-115449.7653,-216.3947001},
          R=69.26529848459929);

        constant IdealGases.Common.DataRecord H7F7(
          name="H7F7",
          MM=0.1400444024,
          Hf=-14993094.60440098,
          H0=291530.7809546553,
          Tlimit=1000,
          alow={229386.7477,-3220.80786,23.62235212,0.0436680188,-7.29799034e-005,
              6.041786420000001e-008,-1.876025627e-011},
          blow={-241863.7479,-88.38812259999999},
          ahigh={5868789.83,-20508.63473,49.8917611,-0.002640634895,3.94979633e-007,-3.053515088e-011,
              9.28260178e-016},
          bhigh={-133017.7809,-259.2385142},
          R=59.37025584394225);

        constant IdealGases.Common.DataRecord He(
          name="He",
          MM=0.004002602,
          Hf=0,
          H0=1548349.798456104,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-745.375,0.9287239740000001},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={-745.375,0.9287239740000001},
          R=2077.26673798694);

        constant IdealGases.Common.DataRecord Heplus(
          name="Heplus",
          MM=0.0040020534,
          Hf=594325271.3719412,
          H0=1548562.045673853,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={285323.3739,1.621665557},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={285323.3739,1.621665557},
          R=2077.551488943151);

        constant IdealGases.Common.DataRecord Hg(
          name="Hg",
          MM=0.20059,
          Hf=305997.3079415724,
          H0=30895.99680941224,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={6636.90008,6.80020154},
          ahigh={51465.7351,-168.1269855,2.718343098,-0.0001445026192,5.15897766e-008,
              -9.47248501e-012,7.034797406e-016},
          bhigh={7688.68493,5.27123609},
          R=41.45008225734085);

        constant IdealGases.Common.DataRecord Hgplus(
          name="Hgplus",
          MM=0.2005894514,
          Hf=5357425.928928983,
          H0=30896.08130809215,
          Tlimit=1000,
          alow={0.000409834494,-4.34358162e-006,2.500000019,-4.389036810000001e-011,
              5.5639692e-014,-3.63822826e-017,9.607881994999999e-021},
          blow={128503.7483,7.4933445},
          ahigh={-12299.84728,27.32269908,2.48418216,-4.42679761e-006,
              7.489685859999999e-009,-2.549887287e-012,2.819873366e-016},
          bhigh={128318.8257,7.62524457},
          R=41.45019562080521);

        constant IdealGases.Common.DataRecord HgBr2(
          name="HgBr2",
          MM=0.3603980000000001,
          Hf=-253363.2706063851,
          H0=43447.47751097397,
          Tlimit=1000,
          alow={-1991.826537,-190.2186083,8.246401260000001,-0.001607089392,
              1.947654549e-006,-1.242873546e-009,3.24181831e-013},
          blow={-12307.23096,-8.7166593},
          ahigh={-22436.4929,-3.31265227,7.50276517,-1.202360213e-006,
              2.830526999e-010,-3.4076867e-014,1.640497921e-018},
          bhigh={-13274.83366,-4.3685556},
          R=23.07025011237576);

        constant IdealGases.Common.DataRecord I(
          name="I",
          MM=0.12690447,
          Hf=841262.7230545938,
          H0=48835.37987274995,
          Tlimit=1000,
          alow={169.8199675,-2.716437233,2.517385557,-5.73069207e-005,
              1.031716184e-007,-9.670641930000001e-011,3.706471651e-014},
          blow={12107.5009,7.40582313},
          ahigh={-778586.0569999999,2303.279568,0.002886686091,0.001180878463,-2.264074866e-007,
              1.963511339e-011,-6.243525940999999e-016},
          bhigh={-2616.792742,25.58922997},
          R=65.51756608730962);

        constant IdealGases.Common.DataRecord Iplus(
          name="Iplus",
          MM=0.1269039214,
          Hf=8836220.470016144,
          H0=48835.59098592204,
          Tlimit=1000,
          alow={-801.496901,8.13905261,2.47017476,4.16139382e-005,
              7.133397859999999e-009,-7.10595014e-011,4.873766102e-014},
          blow={134079.4213,7.90342009},
          ahigh={-778838.5329999999,2404.962651,-0.1791751142,0.001227311979,-1.80149403e-007,
              9.923983959999999e-012,-9.775286439000001e-017},
          bhigh={118853.1631,27.10544347},
          R=65.5178493168297);

        constant IdealGases.Common.DataRecord Iminus(
          name="Iminus",
          MM=0.1269050186,
          Hf=-1533395.401905721,
          H0=48835.1687614031,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-24149.70936,6.11346538},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={-24149.70936,6.11346538},
          R=65.51728286023828);

        constant IdealGases.Common.DataRecord IF5(
          name="IF5",
          MM=0.221896486,
          Hf=-3790055.512641151,
          H0=90331.04742361714,
          Tlimit=1000,
          alow={202618.453,-3598.18317,25.30349738,-0.01348602458,1.105687229e-005,-4.70793951e-009,
              7.86441147e-013},
          blow={-87001.4725,-111.2719941},
          ahigh={-362050.626,-163.9236093,16.12272743,-4.91443155e-005,
              1.086015052e-008,-1.244672691e-012,5.76359362e-017},
          bhigh={-106164.2293,-53.9877336},
          R=37.47004808359156);

        constant IdealGases.Common.DataRecord IF7(
          name="IF7",
          MM=0.2598932924,
          Hf=-3699595.288208369,
          H0=92820.14467257561,
          Tlimit=1000,
          alow={299985.3564,-5501.55413,36.2713398,-0.02095765818,1.76197268e-005,-7.82914233e-009,
              1.405939372e-012},
          blow={-93313.0766,-175.421615},
          ahigh={-561442.264,-264.6288326,22.19879891,-7.984221469999999e-005,
              1.768835964e-008,-2.031523755e-012,9.423767390000001e-017},
          bhigh={-122524.5322,-87.74010730000001},
          R=31.99186836728072);

        constant IdealGases.Common.DataRecord I2(
          name="I2",
          MM=0.25380894,
          Hf=245933.0234782116,
          H0=39857.23276729338,
          Tlimit=1000,
          alow={-5087.96877,-12.4958521,4.50421909,0.0001370962533,-1.390523014e-007,
              1.174813853e-010,-2.337541043e-014},
          blow={6213.469810000001,5.58383694},
          ahigh={-5632594.16,17939.6156,-17.23055169,0.0124421408,-3.33276858e-006,
              4.12547794e-010,-1.960461713e-014},
          bhigh={-106850.5292,160.0531883},
          R=32.75878304365481);

        constant IdealGases.Common.DataRecord In(
          name="In",
          MM=0.114818,
          Hf=2096361.197721611,
          H0=53986.73552927241,
          Tlimit=1000,
          alow={51495.1805,-917.799902,8.93868795,-0.02224112602,3.82388194e-005,-2.890116948e-008,
              8.047481221e-012},
          blow={32390.3162,-27.64567028},
          ahigh={-1683608.899,2210.473186,3.47221937,-0.001082267422,3.47969998e-007,
              -5.15809241e-011,3.183043089e-015},
          bhigh={10959.65206,2.557189088},
          R=72.41436011775157);

        constant IdealGases.Common.DataRecord Inplus(
          name="Inplus",
          MM=0.1148174514,
          Hf=60935.2055344437,
          H0=53976.35920701163,
          Tlimit=1000,
          alow={0.2150488908,-0.002523854672,2.500011877,-2.869063919e-008,
              3.7538704e-011,-2.525942419e-014,6.84293266e-018},
          blow={96.1093017,5.9632544},
          ahigh={45369.9514,-144.5142103,2.681812441,-0.000115748006,3.94771481e-008,
              -6.87924362e-012,4.81920492e-016},
          bhigh={1004.26144,4.68375918},
          R=72.4147061149626);

        constant IdealGases.Common.DataRecord InBr(
          name="InBr",
          MM=0.194722,
          Hf=-277913.5331395528,
          H0=51787.27108390423,
          Tlimit=1000,
          alow={-2540.851435,-52.94704710000001,4.71743809,-0.000434466949,
              6.51351364e-007,-4.40399515e-010,1.234046209e-013},
          blow={-7607.59428,4.258881},
          ahigh={794837.442,-2318.183711,7.03288958,-0.001245920568,3.27669335e-007,-3.003771106e-011,
              5.85319277e-016},
          bhigh={6957.627289999999,-12.7350266},
          R=42.69919166812174);

        constant IdealGases.Common.DataRecord InBr2(
          name="InBr2",
          MM=0.274626,
          Hf=-545210.7921318448,
          H0=52523.58116128844,
          Tlimit=1000,
          alow={-66.19878900000001,-236.589731,7.92654516,-0.001994547959,
              2.420414153e-006,-1.548924922e-009,4.05814839e-013},
          blow={-18953.55588,-5.33886754},
          ahigh={-321716.203,479.2682100000001,7.10264948,-0.000551401978,
              3.157862421e-007,-5.51125451e-011,3.17216139e-015},
          bhigh={-23709.23659,0.1193263347},
          R=30.27561847749303);

        constant IdealGases.Common.DataRecord InBr3(
          name="InBr3",
          MM=0.35453,
          Hf=-723739.2237610358,
          H0=56166.56700420276,
          Tlimit=1000,
          alow={-4990.1153,-280.5930452,11.1035606,-0.002379995808,2.887825281e-006,-1.844500707e-009,
              4.81439587e-013},
          blow={-32505.0491,-18.71748987},
          ahigh={-35057.831,-4.85872132,10.00406131,-1.767620958e-006,4.16401606e-010,
              -5.01552887e-014,2.415414123e-018},
          bhigh={-33931.7924,-12.29069868},
          R=23.45209714269597);

        constant IdealGases.Common.DataRecord InCL(
          name="InCL",
          MM=0.150271,
          Hf=-480118.4726261222,
          H0=64896.86632816712,
          Tlimit=1000,
          alow={6430.71303,-217.8267726,5.4188309,-0.0020480051,2.702295936e-006,-1.795319798e-009,
              4.84746909e-013},
          blow={-8959.84107,-1.202999253},
          ahigh={-274575.1636,894.0986909999999,3.26811839,0.0009180277780000001,-3.083262431e-007,
              5.74545881e-011,-3.64527575e-015},
          bhigh={-15616.0343,12.66880374},
          R=55.32985073633636);

        constant IdealGases.Common.DataRecord InCL2(
          name="InCL2",
          MM=0.185724,
          Hf=-1084853.955331567,
          H0=75145.82929508302,
          Tlimit=1000,
          alow={9935.164869999999,-417.210186,8.58849491,-0.00334838561,
              3.99786664e-006,-2.525301853e-009,6.54449033e-013},
          blow={-24264.80269,-11.64521725},
          ahigh={-332871.984,475.769161,7.10544369,-0.000552578696,3.160567738e-007,-5.51445368e-011,
              3.17368038e-015},
          bhigh={-29950.95917,-2.294555511},
          R=44.76789214102647);

        constant IdealGases.Common.DataRecord InCL3(
          name="InCL3",
          MM=0.221177,
          Hf=-1671481.333954254,
          H0=82769.78618934158,
          Tlimit=1000,
          alow={26147.43044,-841.460456,13.1178479,-0.00643528247,7.55487475e-006,-4.70507856e-009,
              1.204213663e-012},
          blow={-43264.6958,-35.0008094},
          ahigh={-71140.4363,-16.28425068,10.01309622,-5.54452888e-006,
              1.279877732e-009,-1.518261505e-013,7.22656277e-018},
          bhigh={-47589.7417,-16.69761011},
          R=37.59193767887258);

        constant IdealGases.Common.DataRecord InF(
          name="InF",
          MM=0.1338164032,
          Hf=-1445413.150964142,
          H0=68878.7830160421,
          Tlimit=1000,
          alow={31901.2332,-529.525426,6.17288626,-0.002986035832,3.23377803e-006,-1.856975575e-009,
              4.46502497e-013},
          blow={-21871.76282,-7.59121662},
          ahigh={-468900.12,1321.019051,2.881329353,0.001041591078,-3.090754867e-007,
              4.92664656e-011,-2.699156425e-015},
          bhigh={-33083.6981,13.96688303},
          R=62.13342909518585);

        constant IdealGases.Common.DataRecord InF2(
          name="InF2",
          MM=0.1528148064,
          Hf=-2991770.462367971,
          H0=82379.29489010562,
          Tlimit=1000,
          alow={75224.8021,-1088.616881,9.481705209999999,-0.002893229367,
              1.516224649e-006,-7.98951781e-011,-1.466781026e-013},
          blow={-51243.36150000001,-21.4666609},
          ahigh={431896.034,-1688.47242,8.925863010000001,-0.001049188835,
              2.72393419e-007,-2.882959902e-011,1.073493779e-015},
          bhigh={-46736.91940000001,-19.32464363},
          R=54.40881152731022);

        constant IdealGases.Common.DataRecord InF3(
          name="InF3",
          MM=0.1718132096,
          Hf=-5023359.775475611,
          H0=94989.40179277113,
          Tlimit=1000,
          alow={107160.8336,-1660.071901,13.95972813,-0.00501869326,3.22636753e-006,-7.823385970000001e-010,
              -3.7269998e-014},
          blow={-97952.1499,-46.06353470000001},
          ahigh={-165685.5506,-79.6588929,10.05913347,-2.350816639e-005,
              5.16351293e-009,-5.88804881e-013,2.715090697e-017},
          bhigh={-106868.2627,-21.32968218},
          R=48.39250730113827);

        constant IdealGases.Common.DataRecord InH(
          name="InH",
          MM=0.11582594,
          Hf=1856379.529490544,
          H0=74975.46749890395,
          Tlimit=1000,
          alow={-51528.2872,781.3792590000001,-0.8433385339999999,0.01044471274,-9.761074819999999e-006,
              4.540635199999999e-009,-8.169906900000001e-013},
          blow={21100.48908,29.39346222},
          ahigh={779740.666,-3646.88208,9.54296735,-0.00348128172,1.304805603e-006,-2.182950701e-010,
              1.274009748e-014},
          bhigh={46432.9546,-36.5932923},
          R=71.78419618265131);

        constant IdealGases.Common.DataRecord InI(
          name="InI",
          MM=0.24172247,
          Hf=109287.0017421219,
          H0=42491.39105685955,
          Tlimit=1000,
          alow={-468.634874,-56.8553099,4.78184969,-0.000661936831,1.027666742e-006,-7.27059207e-010,
              2.077991102e-013},
          blow={2095.570254,4.88551513},
          ahigh={1529221.772,-4690.373680000001,10.04593462,-0.00314043411,
              9.460834390000001e-007,-1.253862848e-010,5.94980564e-015},
          bhigh={31524.78143,-32.9769749},
          R=34.39676915431156);

        constant IdealGases.Common.DataRecord InI2(
          name="InI2",
          MM=0.36862694,
          Hf=-107047.637375608,
          H0=40454.87559862011,
          Tlimit=1000,
          alow={-4513.8906,-118.372687,7.47311008,-0.00103447409,1.271465534e-006,-8.2278203e-010,
              2.178307019e-013},
          blow={-6278.53604,-0.66672975},
          ahigh={-313067.1665,481.38107,7.10091418,-0.000550655992,3.156120735e-007,-5.50917054e-011,
              3.17116283e-015},
          bhigh={-10430.1275,2.141662307},
          R=22.55524786115741);

        constant IdealGases.Common.DataRecord InI3(
          name="InI3",
          MM=0.49553141,
          Hf=-212773.4223749813,
          H0=42080.25077562692,
          Tlimit=1000,
          alow={-8728.397169999998,-126.5914859,10.5065912,-0.001106109314,
              1.354335766e-006,-8.709453460000001e-010,2.28518635e-013},
          blow={-15082.69063,-12.11411745},
          ahigh={-21967.42567,-2.151167521,10.001822,-8.002214699999999e-007,
              1.897343164e-010,-2.29625246e-014,1.109838196e-018},
          bhigh={-15724.06335,-9.17088869},
          R=16.7789000499484);

        constant IdealGases.Common.DataRecord InO(
          name="InO",
          MM=0.1308174,
          Hf=1116006.807962855,
          H0=69120.07882743428,
          Tlimit=1000,
          alow={-115472.7169,1753.668703,-6.96503381,0.02961698958,-3.123332334e-005,
              1.43724472e-008,-2.235519898e-012},
          blow={8188.67959,66.0862126},
          ahigh={-805213.0950000001,1693.064203,4.76086358,-0.00073407184,
              3.22959776e-007,-4.58015038e-011,1.954611725e-015},
          bhigh={4005.51981,3.50074246},
          R=63.55784475153917);

        constant IdealGases.Common.DataRecord InOH(
          name="InOH",
          MM=0.13182534,
          Hf=-944032.0351155552,
          H0=81447.45919107813,
          Tlimit=1000,
          alow={61234.6302,-1195.863129,10.41427981,-0.0068700025,6.21412878e-006,-2.408203181e-009,
              3.17764178e-013},
          blow={-10798.5217,-31.8989084},
          ahigh={852512.8929999999,-2350.317172,7.98451514,9.91581562e-005,-6.21238545e-008,
              1.016169575e-011,-5.682557639999999e-016},
          bhigh={-1536.21361,-20.43107643},
          R=63.07187980702344);

        constant IdealGases.Common.DataRecord In2Br2(
          name="In2Br2",
          MM=0.389444,
          Hf=-504065.321329896,
          H0=55039.85938928319,
          Tlimit=1000,
          alow={-9221.1883,-36.1667703,10.14728771,-0.00032557752,4.02232748e-007,-2.604080237e-010,
              6.86768955e-014},
          blow={-26448.83479,-10.00360073},
          ahigh={-12907.81804,-0.607540124,10.00052163,-2.312058331e-007,
              5.51731572e-011,-6.708620190000001e-015,3.25384165e-019},
          bhigh={-26631.36878,-9.149949469999999},
          R=21.34959583406087);

        constant IdealGases.Common.DataRecord In2Br4(
          name="In2Br4",
          MM=0.549252,
          Hf=-794732.9877724615,
          H0=57893.49333275072,
          Tlimit=1000,
          alow={-14255.55379,-286.6009341,17.13866292,-0.002473506655,
              3.017273071e-006,-1.93490043e-009,5.06587425e-013},
          blow={-55937.5306,-38.3710598},
          ahigh={-44534.6371,-4.91152398,16.00413764,-1.810579975e-006,
              4.28171574e-010,-5.17199802e-014,2.496142837e-018},
          bhigh={-57391.7541,-31.7490639},
          R=15.13780923874652);

        constant IdealGases.Common.DataRecord In2Br6(
          name="In2Br6",
          MM=0.7090599999999999,
          Hf=-886643.4857416863,
          H0=60780.08631145462,
          Tlimit=1000,
          alow={-17589.40752,-485.903448,23.91654505,-0.00414206149,5.03384932e-006,-3.21910365e-009,
              8.410220069999999e-013},
          blow={-79888.4446,-64.3787188},
          ahigh={-69450.3948,-8.402368170000001,22.00703884,-3.068251799e-006,
              7.23596573e-010,-8.722870580000001e-014,4.20346991e-018},
          bhigh={-82357.59850000001,-53.221928},
          R=11.72604857134799);

        constant IdealGases.Common.DataRecord In2CL2(
          name="In2CL2",
          MM=0.300542,
          Hf=-772528.8811547139,
          H0=67291.41018559803,
          Tlimit=1000,
          alow={-11428.48747,-141.6015827,10.56853314,-0.00124425344,1.526076784e-006,
              -9.82640281e-010,2.58076699e-013},
          blow={-30263.27087,-15.6510496},
          ahigh={-26166.06332,-2.401955489,10.00203984,-8.97519003e-007,
              2.130755553e-010,-2.5811409e-014,1.248404822e-018},
          bhigh={-30980.16735,-12.34946505},
          R=27.66492536816818);

        constant IdealGases.Common.DataRecord In2CL4(
          name="In2CL4",
          MM=0.371448,
          Hf=-1559103.443819862,
          H0=79301.88074777628,
          Tlimit=1000,
          alow={9814.08308,-848.895901,19.2341036,-0.00681567424,
              8.129220730000001e-006,-5.12507685e-009,1.324324755e-012},
          blow={-70276.8814,-55.82665695},
          ahigh={-85037.7179,-15.52464614,16.01269668,-5.44154987e-006,
              1.267594997e-009,-1.514110365e-013,7.24540454e-018},
          bhigh={-74619.21740000001,-36.91150615},
          R=22.38394607051324);

        constant IdealGases.Common.DataRecord In2CL6(
          name="In2CL6",
          MM=0.442354,
          Hf=-1994646.886882452,
          H0=86861.3418212563,
          Tlimit=1000,
          alow={30046.63159,-1585.621359,27.9648947,-0.01245506052,1.475341213e-005,-9.2526892e-009,
              2.381233885e-012},
          blow={-104882.83,-97.88404639999999},
          ahigh={-149940.0484,-29.88680816,22.02425362,-1.033652301e-005,
              2.397911922e-009,-2.855307516e-013,1.363051661e-017},
          bhigh={-113011.0233,-62.93985679999999},
          R=18.79596883943629);

        constant IdealGases.Common.DataRecord In2F2(
          name="In2F2",
          MM=0.2676328064,
          Hf=-1988673.612772758,
          H0=67405.41356890992,
          Tlimit=1000,
          alow={7255.7171,-644.826565,12.47539512,-0.00524608962,6.28361621e-006,-3.97434234e-009,
              1.029559356e-012},
          blow={-63848.92449999999,-31.08004586},
          ahigh={-64097.1544,-11.63740672,10.00956511,-4.11408691e-006,
              9.60882832e-010,-1.150013486e-013,5.511437479999999e-018},
          bhigh={-67142.7785,-16.61718474},
          R=31.06671454759293);

        constant IdealGases.Common.DataRecord In2F4(
          name="In2F4",
          MM=0.3056296128,
          Hf=-4203742.282135299,
          H0=81023.15012323308,
          Tlimit=1000,
          alow={122521.3611,-2444.998374,23.42425457,-0.0129142712,1.308700476e-005,-7.18167393e-009,
              1.648386404e-012},
          blow={-146694.2111,-89.43560050000001},
          ahigh={-220597.7486,-78.2208377,16.05923872,-2.39402324e-005,
              5.32958279e-009,-6.14460957e-013,2.859099598e-017},
          bhigh={-159571.6347,-44.6957458},
          R=27.20440576365511);

        constant IdealGases.Common.DataRecord In2F6(
          name="In2F6",
          MM=0.3436264192,
          Hf=-5703868.767026397,
          H0=97684.86974356599,
          Tlimit=1000,
          alow={182549.0583,-3552.11171,32.75425230000001,-0.01868064635,
              1.892443162e-005,-1.038916311e-008,2.386637271e-012},
          blow={-223964.876,-136.3626758},
          ahigh={-317096.638,-116.7440973,22.08847456,-3.57773393e-005,
              7.96895904e-009,-9.191681699999999e-013,4.278494150000001e-017},
          bhigh={-242666.1118,-71.5532856},
          R=24.19625365056914);

        constant IdealGases.Common.DataRecord In2I2(
          name="In2I2",
          MM=0.48344494,
          Hf=-57531.93734947356,
          H0=45627.69030119541,
          Tlimit=1000,
          alow={-6681.92501,-14.49103222,10.05929122,-0.0001314921486,
              1.628373589e-007,-1.056087811e-010,2.788963879e-014},
          blow={-6279.602599999999,-7.29113098},
          ahigh={-8148.157299999999,-0.2444544443,10.00021086,-9.37678925e-008,
              2.24298818e-011,-2.732299303e-015,1.327135699e-019},
          bhigh={-6352.6515,-6.94772542},
          R=17.19838457715578);

        constant IdealGases.Common.DataRecord In2I4(
          name="In2I4",
          MM=0.73725388,
          Hf=-270114.7954623175,
          H0=45396.81635856565,
          Tlimit=1000,
          alow={-15010.28064,-97.447979,16.3938395,-0.000865938021,1.065671801e-006,-6.87925268e-010,
              1.810240886e-013},
          blow={-28303.88443,-29.86294828},
          ahigh={-25056.99251,-1.642155234,16.00140149,-6.18706628e-007,
              1.472308565e-010,-1.786593333e-014,8.652338779999999e-019},
          bhigh={-28796.55333,-27.57790375},
          R=11.2776239305787);

        constant IdealGases.Common.DataRecord In2I6(
          name="In2I6",
          MM=0.99106282,
          Hf=-322603.2028928297,
          H0=45494.71445210709,
          Tlimit=1000,
          alow={-22326.40607,-200.0786874,22.80417927,-0.001761331313,
              2.161510393e-006,-1.392400447e-009,3.65817188e-013},
          blow={-44125.4768,-52.7380203},
          ahigh={-43119.0585,-3.39035059,22.00288128,-1.268348706e-006,3.0121219e-010,
              -3.64967671e-014,1.765530622e-018},
          bhigh={-45138.2027,-48.0686837},
          R=8.389450024974199);

        constant IdealGases.Common.DataRecord In2O(
          name="In2O",
          MM=0.2456354,
          Hf=-141525.6392197542,
          H0=52095.52043394397,
          Tlimit=1000,
          alow={50656.535,-807.036367,8.64206727,-0.001533035446,2.866419382e-007,
              4.98113497e-010,-2.554320291e-013},
          blow={-1924.908459,-14.90718759},
          ahigh={-92327.8636,-52.0112728,7.03872362,-1.543821179e-005,3.39970087e-009,
              -3.8854571e-013,1.79512527e-017},
          bhigh={-6270.9268,-4.42182041},
          R=33.84883449209683);

        constant IdealGases.Common.DataRecord K(
          name="K",
          MM=0.0390983,
          Hf=2276313.803924979,
          H0=158508.8865756312,
          Tlimit=1000,
          alow={9.665143929999999,-0.1458059455,2.500865861,-2.601219276e-006,
              4.187306579999999e-009,-3.43972211e-012,1.131569009e-015},
          blow={9959.493490000001,5.03582226},
          ahigh={-3566422.36,10852.89825,-10.54134898,0.00800980135,-2.696681041e-006,
              4.71529415e-010,-2.97689735e-014},
          bhigh={-58753.3701,97.3855124},
          R=212.6555886061542);

        constant IdealGases.Common.DataRecord Kplus(
          name="Kplus",
          MM=0.0390977514,
          Hf=13146728.63769859,
          H0=158511.1106926727,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={61075.1686,4.34740444},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={61075.1686,4.34740444},
          R=212.6585724825086);

        constant IdealGases.Common.DataRecord Kminus(
          name="Kminus",
          MM=0.0390988486,
          Hf=880284.9503859814,
          H0=158506.6625210033,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={3394.15071,4.34744653},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={3394.15071,4.34744653},
          R=212.6526048135341);

        constant IdealGases.Common.DataRecord KALF4(
          name="KALF4",
          MM=0.1420734508,
          Hf=-13428665.32245868,
          H0=150776.8754779904,
          Tlimit=1000,
          alow={119932.7246,-2156.457352,18.15348004,0.003115762809,-9.51199167e-006,
              8.43175623e-009,-2.615583061e-012},
          blow={-222254.5809,-68.23299969999999},
          ahigh={-343513.537,-242.0680834,16.1802925,-7.19381768e-005,
              1.585712708e-008,-1.814017733e-012,8.388391179999999e-017},
          bhigh={-233965.8121,-52.338987},
          R=58.5223484977814);

        constant IdealGases.Common.DataRecord KBO2(
          name="KBO2",
          MM=0.08190810000000001,
          Hf=-8155765.998722958,
          H0=172030.641658151,
          Tlimit=1000,
          alow={42963.08650000001,-720.961643,8.34963935,0.002407820401,-1.680003427e-007,
              -1.231930486e-009,5.479951640000001e-013},
          blow={-78685.2347,-14.76077068},
          ahigh={88907.266,-1671.432436,11.1748393,-0.000451376026,9.69900346e-008,-1.09002769e-011,
              4.9768458e-016},
          bhigh={-73753.36080000001,-32.7474937},
          R=101.5097652124759);

        constant IdealGases.Common.DataRecord KBr(
          name="KBr",
          MM=0.1190023,
          Hf=-1506280.786169679,
          H0=84948.96317130004,
          Tlimit=1000,
          alow={9203.30919,-213.7880361,5.58850915,-0.002753854319,
              4.013672610000001e-006,-2.856323127e-009,8.13520974e-013},
          blow={-21883.87013,-1.707501588},
          ahigh={1562614.367,-4384.89478,9.045464600000001,-0.0020456809,
              4.40192385e-007,-1.448178289e-011,-2.27333876e-015},
          bhigh={5315.34201,-28.64647026},
          R=69.86816221199086);

        constant IdealGases.Common.DataRecord KCN(
          name="KCN",
          MM=0.0651157,
          Hf=1220842.285347466,
          H0=191295.4018769667,
          Tlimit=1000,
          alow={17986.27669,-630.055897,9.988695,-0.01076486132,1.75101498e-005,-1.265592431e-008,
              3.46976281e-012},
          blow={10580.25371,-25.94060289},
          ahigh={361566.387,-1749.018011,8.680702670000001,-0.000440235004,
              9.249499710000001e-008,-1.021916855e-011,4.604767189999999e-016},
          bhigh={18137.34856,-22.81619241},
          R=127.6876697939207);

        constant IdealGases.Common.DataRecord KCL(
          name="KCL",
          MM=0.0745513,
          Hf=-2878217.831211528,
          H0=132594.8575008082,
          Tlimit=1000,
          alow={9058.35151,-245.6801212,5.68069619,-0.002900127425,4.13098306e-006,-2.907340629e-009,
              8.22385087e-013},
          blow={-25973.04884,-3.677976854},
          ahigh={-212294.5722,934.61589,2.866264958,0.001468386693,-5.83426078e-007,
              1.255777709e-010,-9.150147999999999e-015},
          bhigh={-32737.8764,14.01864636},
          R=111.5268546624942);

        constant IdealGases.Common.DataRecord KF(
          name="KF",
          MM=0.0580967032,
          Hf=-5653416.939500278,
          H0=162747.8579541842,
          Tlimit=1000,
          alow={14357.04906,-339.184823,5.72790672,-0.002518371562,3.26591564e-006,-2.21011086e-009,
              6.21204205e-013},
          blow={-39142.5442,-5.81099962},
          ahigh={-1483743.237,4550.04804,-1.081464319,0.00350396588,-1.093902537e-006,
              1.771028824e-010,-1.029032783e-014},
          bhigh={-69633.2981,40.8863592},
          R=143.1143514525623);

        constant IdealGases.Common.DataRecord KH(
          name="KH",
          MM=0.04010624,
          Hf=3126673.205964957,
          H0=219295.2019436377,
          Tlimit=1000,
          alow={223.778215,179.3554623,1.130735415,0.009966112559999999,-1.341218171e-005,
              9.034529940000001e-009,-2.40988777e-012},
          blow={13382.50358,15.52739897},
          ahigh={-3752276.52,11727.78444,-10.14137678,0.008854548899999998,-2.517188074e-006,
              3.34407236e-010,-1.701157835e-014},
          bhigh={-60251.033,101.030459},
          R=207.3111815019309);

        constant IdealGases.Common.DataRecord KI(
          name="KI",
          MM=0.16600277,
          Hf=-773817.6718376447,
          H0=61710.55458893849,
          Tlimit=1000,
          alow={-457.281174,-63.31769730000001,4.82329242,-0.0007876668320000001,
              1.336737911e-006,-1.000530992e-009,3.004503956e-013},
          blow={-16503.40769,3.55259482},
          ahigh={3293747.78,-10028.24194,16.29302044,-0.00669639675,2.001412089e-006,
              -2.677673023e-010,1.273359646e-014},
          bhigh={46763.4867,-78.5912337},
          R=50.08634494472592);

        constant IdealGases.Common.DataRecord KLi(
          name="KLi",
          MM=0.0460393,
          Hf=3707752.355053183,
          H0=221487.3597122459,
          Tlimit=1000,
          alow={-3426.04369,-19.86063081,4.48760705,0.0005249535550000001,-1.207990165e-006,
              1.705161047e-009,-7.879994210000001e-013},
          blow={19278.68247,1.912285942},
          ahigh={12112968.43,-40810.0487,56.8379212,-0.03128695515,
              8.975062200000001e-006,-1.189303691e-009,5.88012918e-014},
          bhigh={273879.2595,-366.96936},
          R=180.5951002730276);

        constant IdealGases.Common.DataRecord KNO2(
          name="KNO2",
          MM=0.08510380000000001,
          Hf=-2261913.028560417,
          H0=180281.0920311431,
          Tlimit=1000,
          alow={-72462.36930000001,1226.722811,-2.258926457,0.03019643903,-3.64025995e-005,
              2.219135205e-008,-5.471654230000001e-012},
          blow={-30772.6896,45.37172549},
          ahigh={-168941.4093,-851.5973150000001,10.63209586,-0.000252325481,
              5.57364441e-008,-6.39318592e-012,2.964484049e-016},
          bhigh={-21877.01436,-27.55200432},
          R=97.69801113463794);

        constant IdealGases.Common.DataRecord KNO3(
          name="KNO3",
          MM=0.1011032,
          Hf=-3123866.386029324,
          H0=157434.304749998,
          Tlimit=1000,
          alow={-25961.12303,820.060661,-2.886015624,0.042072889,-5.27032309e-005,
              3.30856173e-008,-8.36586037e-012},
          blow={-43350.5447,46.03187331},
          ahigh={-318368.287,-1375.234449,14.01587531,-0.000404066008,8.90084778e-008,
              -1.018771993e-011,4.71598202e-016},
          bhigh={-35138.5322,-48.04256439},
          R=82.23747616297011);

        constant IdealGases.Common.DataRecord KNa(
          name="KNa",
          MM=0.06208807,
          Hf=2132524.444712164,
          H0=170308.5149852459,
          Tlimit=1000,
          alow={25424.05292,-411.920741,6.84108795,-0.00625048138,8.86101314e-006,-4.922415349999999e-009,
              6.493212469999999e-013},
          blow={16525.9989,-9.13616691},
          ahigh={6260326.62,-25635.93614,43.7333545,-0.0267265511,8.23270579e-006,-1.12850359e-009,
              5.66326489e-014},
          bhigh={169727.4909,-266.4117219},
          R=133.9141641864532);

        constant IdealGases.Common.DataRecord KO(
          name="KO",
          MM=0.05509770000000001,
          Hf=1174882.327211481,
          H0=172078.2174210539,
          Tlimit=1000,
          alow={14625.62908,-338.476565,5.71660764,-0.002363265083,2.848716276e-006,-1.739858233e-009,
              4.431006520000001e-013},
          blow={8141.83538,-4.02210152},
          ahigh={696010.338,-3304.83529,10.05743444,-0.004331112,1.747281632e-006,-3.012370548e-010,
              1.79082787e-014},
          bhigh={26049.72496,-34.4878152},
          R=150.9041575238168);

        constant IdealGases.Common.DataRecord KOH(
          name="KOH",
          MM=0.05610564,
          Hf=-4135056.653840862,
          H0=208083.3584644966,
          Tlimit=1000,
          alow={17706.84196,-615.320522,8.684075719999999,-0.00396284951,
              3.40865059e-006,-9.60197222e-010,8.494054970000001e-015},
          blow={-26779.03261,-21.74495666},
          ahigh={891727.195,-2334.179072,7.97257871,0.0001038863156,-6.315893469999999e-008,
              1.027938106e-011,-5.73668582e-016},
          bhigh={-14436.96469,-20.76401416},
          R=148.1931584774721);

        constant IdealGases.Common.DataRecord K2(
          name="K2",
          MM=0.07819660000000001,
          Hf=1618309.862577145,
          H0=137360.5629912298,
          Tlimit=1000,
          alow={15241.69293,-330.178936,7.07079595,-0.00976707246,2.021535863e-005,-1.886092452e-008,
              6.11297464e-012},
          blow={15334.02849,-9.1010358},
          ahigh={-27344707.45,65621.80009999999,-44.7635044,0.008938859150000001,
              2.984557092e-006,-1.064158914e-009,8.334936929999999e-014},
          bhigh={-422624.383,386.714251},
          R=106.3277943030771);

        constant IdealGases.Common.DataRecord K2plus(
          name="K2plus",
          MM=0.07819605140000001,
          Hf=6709555.298594016,
          H0=138896.1565903314,
          Tlimit=1000,
          alow={51960.3657,-611.338253,7.26499054,-0.00581063482,6.5674965e-006,-2.378020865e-009,
              -1.318637581e-013},
          blow={64798.2027,-10.42370517},
          ahigh={11079507.39,-41774.8382,64.48659840000001,-0.0402499803,
              1.360587923e-005,-2.361920107e-009,1.67343061e-013},
          bhigh={317761.205,-410.50631},
          R=106.3285402669322);

        constant IdealGases.Common.DataRecord K2Br2(
          name="K2Br2",
          MM=0.2380046,
          Hf=-2263587.31301832,
          H0=88031.0968779595,
          Tlimit=1000,
          alow={-10930.40504,-48.5665148,10.19754923,-0.00043631571,5.38717366e-007,-3.4861165e-010,
              9.19070295e-014},
          blow={-67580.73239999999,-12.94944706},
          ahigh={-15892.29976,-0.810137946,10.00069442,-3.074491521e-007,
              7.33102416e-011,-8.908944780000001e-015,4.319245429999999e-019},
          bhigh={-67825.9544,-11.80425726},
          R=34.93408110599543);

        constant IdealGases.Common.DataRecord K2CO3(
          name="K2CO3",
          MM=0.1382055,
          Hf=-5872770.352844134,
          H0=141208.8303287496,
          Tlimit=1000,
          alow={-44074.067,706.981544,0.693148247,0.0396783132,-4.8509583e-005,
              2.976635787e-008,-7.374761529999999e-012},
          blow={-103391.3232,29.80651689},
          ahigh={-326426.316,-1521.168973,17.12283562,-0.000446458071,9.83337963e-008,
              -1.125478371e-011,5.21006912e-016},
          bhigh={-94882.75099999999,-62.1522063},
          R=60.16021070073188);

        constant IdealGases.Common.DataRecord K2C2N2(
          name="K2C2N2",
          MM=0.1302314,
          Hf=-64254.85712355085,
          H0=190324.6221725329,
          Tlimit=1000,
          alow={4627.78948,-972.9810620000001,19.9666591,-0.01953015081,
              3.27533046e-005,-2.39398512e-008,6.59654824e-012},
          blow={-777.4411259999999,-67.55613632000001},
          ahigh={726959.95,-3492.10868,18.35676822,-0.000878547514,1.845532919e-007,-2.038717568e-011,
              9.18542099e-016},
          bhigh={15826.00773,-67.28484052},
          R=63.84383489696034);

        constant IdealGases.Common.DataRecord K2CL2(
          name="K2CL2",
          MM=0.1491026,
          Hf=-4127316.780525624,
          H0=133890.6766213332,
          Tlimit=1000,
          alow={-13285.26456,-124.1832429,10.5003573,-0.001097776004,1.348871402e-006,
              -8.69721512e-010,2.28658408e-013},
          blow={-76443.6315,-17.90150052},
          ahigh={-26146.11331,-2.096229095,10.00178456,-7.864803710000001e-007,
              1.869281152e-010,-2.266272348e-014,1.096790704e-018},
          bhigh={-77071.8933,-14.99720802},
          R=55.76342733124707);

        constant IdealGases.Common.DataRecord K2F2(
          name="K2F2",
          MM=0.1161934064,
          Hf=-7400381.034013649,
          H0=155995.3061157522,
          Tlimit=1000,
          alow={-1611.833856,-513.564489,11.99922511,-0.004280109549999999,
              5.16538754e-006,-3.2858149e-009,8.549648749999999e-013},
          blow={-103924.8602,-30.39925079},
          ahigh={-57408.9253,-9.04618211,10.00750685,-3.25076484e-006,7.63006459e-010,
              -9.165649529999999e-014,4.40504844e-018},
          bhigh={-106541.3546,-18.7403762},
          R=71.55717572628115);

        constant IdealGases.Common.DataRecord K2I2(
          name="K2I2",
          MM=0.33200554,
          Hf=-1261772.475242431,
          H0=64627.07821080335,
          Tlimit=1000,
          alow={-8977.75244,-27.76460169,10.11331014,-0.0002508421994,
              3.102352114e-007,-2.010096209e-010,5.30443715e-014},
          blow={-53262.0839,-10.32092509},
          ahigh={-11796.34729,-0.472476155,10.00040695,-1.807689054e-007,
              4.32056097e-011,-5.259699430000001e-015,2.553419144e-019},
          bhigh={-53402.10230000001,-9.6644405},
          R=25.04317247236296);

        constant IdealGases.Common.DataRecord K2O(
          name="K2O",
          MM=0.094196,
          Hf=-786518.5570512548,
          H0=147121.93723725,
          Tlimit=1000,
          alow={23920.44068,-544.535839,8.82640323,-0.00348142943,3.83454207e-006,-2.268494189e-009,
              5.56921225e-013},
          blow={-8234.29168,-16.63099064},
          ahigh={-46114.6458,-13.63119524,7.01053044,-4.32365826e-006,
              9.747788419999999e-010,-1.135283694e-013,5.325860600000001e-018},
          bhigh={-11072.22244,-5.76871872},
          R=88.26778207142554);

        constant IdealGases.Common.DataRecord K2Oplus(
          name="K2Oplus",
          MM=0.09419545139999999,
          Hf=3910914.12084894,
          H0=150093.4576974701,
          Tlimit=1000,
          alow={7201.10273,-333.65264,8.05073035,-0.001869353797,1.921291874e-006,-1.064020951e-009,
              2.457514799e-013},
          blow={43899.8636,-10.7320415},
          ahigh={-37800.335,-8.84953739,7.00684789,-2.815510856e-006,6.3550015e-010,-7.408551990000001e-014,
              3.478334960000001e-018},
          bhigh={42145.19680000001,-4.41827661},
          R=88.26829614832124);

        constant IdealGases.Common.DataRecord K2O2(
          name="K2O2",
          MM=0.1101954,
          Hf=-1738423.754530588,
          H0=147826.5245191723,
          Tlimit=1000,
          alow={48108.7061,-1003.601504,11.54229002,-0.000454633252,-1.516606209e-006,
              1.79942609e-009,-6.12833729e-013},
          blow={-20571.5192,-31.8119979},
          ahigh={-147607.3073,-102.193204,10.07664713,-3.076517991e-005,
              6.81525281e-009,-7.82865445e-013,3.6325061e-017},
          bhigh={-25920.56324,-21.62287184},
          R=75.45207876190838);

        constant IdealGases.Common.DataRecord K2O2H2(
          name="K2O2H2",
          MM=0.11221128,
          Hf=-5712438.179120673,
          H0=199489.1511798101,
          Tlimit=1000,
          alow={8174.78837,-1130.63068,18.15303256,-0.00773743108,6.83761401e-006,-2.054691111e-009,
              7.67287751e-014},
          blow={-75749.6517,-63.9175947},
          ahigh={1773523.196,-4665.292469999999,16.94308128,0.0002085297143,-1.264714762e-007,
              2.057506565e-011,-1.148042134e-015},
          bhigh={-50512.63310000001,-63.3477392},
          R=74.09657923873607);

        constant IdealGases.Common.DataRecord K2SO4(
          name="K2SO4",
          MM=0.1742592,
          Hf=-6288627.06244491,
          H0=127877.7763240047,
          Tlimit=1000,
          alow={62714.9231,-815.204992,7.45541372,0.0384990978,-5.40063098e-005,
              3.6546568e-008,-9.760223570000001e-012},
          blow={-130469.2568,-10.3463477},
          ahigh={-544612.564,-959.0667229999999,19.71591285,-0.0002866586009,
              6.342480639999999e-008,-7.281462539999999e-012,3.37788693e-016},
          bhigh={-133787.3384,-73.99103550999999},
          R=47.71324555604525);

        constant IdealGases.Common.DataRecord Kr(
          name="Kr",
          MM=0.0838,
          Hf=0,
          H0=73954.98806682577,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-745.375,5.49095651},
          ahigh={264.3639057,-0.7910050820000001,2.500920585,-5.32816411e-007,
              1.620730161e-010,-2.467898017e-014,1.47858504e-018},
          bhigh={-740.348894,5.48439815},
          R=99.21804295942721);

        constant IdealGases.Common.DataRecord Krplus(
          name="Krplus",
          MM=0.08379945139999999,
          Hf=16192873.52518396,
          H0=73955.472219237,
          Tlimit=1000,
          alow={-5650.40286,69.3074081,2.157028132,0.0008711228930000001,-1.18160973e-006,
              7.86219863e-010,-1.832589387e-013},
          blow={162116.4118,8.81824226},
          ahigh={-221656.7015,1166.16784,0.486965532,0.001429223599,-3.94962861e-007,
              4.98285351e-011,-2.406719258e-015},
          bhigh={155600.2861,20.59230986},
          R=99.21869249850485);

        constant IdealGases.Common.DataRecord Li(
          name="Li",
          MM=0.006941,
          Hf=22950583.48941075,
          H0=892872.4967583921,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={18413.90197,2.447622965},
          ahigh={1125610.652,-3463.53673,6.56661192,-0.002260983356,5.92228916e-007,-6.2816351e-011,
              2.884948238e-015},
          bhigh={40346.374,-26.55918195},
          R=1197.878115545311);

        constant IdealGases.Common.DataRecord Liplus(
          name="Liplus",
          MM=0.0069404514,
          Hf=98800407.70835166,
          H0=892943.0728381731,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={81727.24550000001,1.754357228},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={81727.24550000001,1.754357228},
          R=1197.972800443499);

        constant IdealGases.Common.DataRecord Liminus(
          name="Liminus",
          MM=0.0069415486,
          Hf=13465976.16560662,
          H0=892801.9318340579,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={10496.98659,1.754594332},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={10496.98659,1.754594332},
          R=1197.783445613274);

        constant IdealGases.Common.DataRecord LiALF4(
          name="LiALF4",
          MM=0.1099161508,
          Hf=-16897315.00313783,
          H0=177720.8249908984,
          Tlimit=1000,
          alow={176152.936,-2999.300134,20.7973957,-0.001742914656,-4.266642090000001e-006,
              5.362829770000001e-009,-1.866817087e-012},
          blow={-211794.7828,-87.6272589},
          ahigh={-402070.0930000001,-278.3355146,16.20791185,-8.316341570000001e-005,
              1.83690569e-008,-2.104932808e-012,9.74725302e-017},
          bhigh={-227869.6416,-55.9730484},
          R=75.64376972342085);

        constant IdealGases.Common.DataRecord LiBO2(
          name="LiBO2",
          MM=0.0497508,
          Hf=-13112397.71018758,
          H0=269899.6599049664,
          Tlimit=1000,
          alow={65189.8757,-1060.320845,9.54804996,-5.46957607e-005,2.658687599e-006,
              -2.931603694e-009,9.66302973e-013},
          blow={-75062.0411,-24.90883998},
          ahigh={85544.04520000001,-1731.920898,11.2146209,-0.000465916217,
              9.999875689999999e-008,-1.122880592e-011,5.12352946e-016},
          bhigh={-71547.4382,-36.1239729},
          R=167.1223779316112);

        constant IdealGases.Common.DataRecord LiBr(
          name="LiBr",
          MM=0.08684500000000001,
          Hf=-1740605.561632794,
          H0=105626.2306407968,
          Tlimit=1000,
          alow={38056.2047,-612.961499,6.57736955,-0.00421989176,
              5.391423370000001e-006,-3.69314481e-009,1.049158761e-012},
          blow={-16374.87617,-11.28654012},
          ahigh={63801.9142,-259.7050764,4.65676887,0.0001022867706,-5.178252340000001e-008,
              2.058203991e-011,-1.942190308e-015},
          bhigh={-17933.63752,-0.2290806613},
          R=95.73921354136679);

        constant IdealGases.Common.DataRecord LiCL(
          name="LiCL",
          MM=0.042394,
          Hf=-4570927.277444921,
          H0=213712.0583101382,
          Tlimit=1000,
          alow={49643.995,-718.734662,6.78514703,-0.00452214546,
              5.748483700000001e-006,-3.96625567e-009,1.137911398e-012},
          blow={-20910.14703,-14.06383901},
          ahigh={-235276.9705,612.004692,3.63429373,0.0006810973320000001,-2.174238799e-007,
              4.22040361e-011,-2.848628426e-015},
          bhigh={-28623.58494,5.618511135},
          R=196.1237911025145);

        constant IdealGases.Common.DataRecord LiF(
          name="LiF",
          MM=0.0259394032,
          Hf=-13143898.93133702,
          H0=340335.7406464926,
          Tlimit=1000,
          alow={29125.3732,-253.1413159,3.53972798,0.00369591704,-4.82946615e-006,
              2.944090711e-009,-6.83879474e-013},
          blow={-40648.4966,2.325294408},
          ahigh={-378424.649,766.806246,3.5854734,0.0006031084350000001,-1.588764206e-007,
              2.569397177e-011,-1.406798386e-015},
          bhigh={-47564.6945,4.38516329},
          R=320.5344369680795);

        constant IdealGases.Common.DataRecord LiH(
          name="LiH",
          MM=0.00794894,
          Hf=17519833.33626873,
          H0=1092737.396432732,
          Tlimit=1000,
          alow={-49137.31570000001,775.6092190000001,-1.011102377,0.01145479597,-1.151038734e-005,
              5.87506896e-009,-1.196789735e-012},
          blow={12048.5891,25.68801877},
          ahigh={-2633686.357,6996.429169999999,-3.23353306,0.00403393598,-9.09957964e-007,
              8.775909869999999e-011,-2.889490251e-015},
          bhigh={-29900.43016,49.71984499999999},
          R=1045.984999257763);

        constant IdealGases.Common.DataRecord LiI(
          name="LiI",
          MM=0.13384547,
          Hf=-637077.1308136167,
          H0=69409.2373839772,
          Tlimit=1000,
          alow={40719.7637,-666.7289470000001,7.06425753,-0.00548004102,
              6.90579016e-006,-4.53716852e-009,1.226373296e-012},
          blow={-8235.487020000001,-12.96236234},
          ahigh={1616342.632,-4877.71708,9.987186550000001,-0.002889137815,
              8.03731377e-007,-9.028172610000001e-011,3.078321954e-015},
          bhigh={19377.18764,-37.2927631},
          R=62.11993577369485);

        constant IdealGases.Common.DataRecord LiN(
          name="LiN",
          MM=0.0209477,
          Hf=15978842.5459597,
          H0=429600.7676260401,
          Tlimit=1000,
          alow={37649.592,-488.345763,5.18737345,0.0002275252171,-1.416337564e-006,
              1.450236258e-009,-4.79001433e-013},
          blow={41619.1531,-5.952157244},
          ahigh={-59934.8998,-40.3113455,4.52962421,8.744156930000001e-005,
              2.557428364e-009,-2.9057518e-013,1.336125922e-017},
          bhigh={38948.3113,-1.214952896},
          R=396.9157473135476);

        constant IdealGases.Common.DataRecord LiNO2(
          name="LiNO2",
          MM=0.0529465,
          Hf=-3815761.343998187,
          H0=252496.2367673028,
          Tlimit=1000,
          alow={-31337.73859,538.9940809999999,-0.02059877081,0.02610777454,-3.20923504e-005,
              1.974344044e-008,-4.89219916e-012},
          blow={-28382.14963,27.10019529},
          ahigh={-219667.116,-861.004271,10.63956465,-0.0002554392587,5.64447854e-008,
              -6.47614005e-012,3.003536591e-016},
          bhigh={-23135.47535,-32.38277103},
          R=157.0353470012182);

        constant IdealGases.Common.DataRecord LiNO3(
          name="LiNO3",
          MM=0.06894589999999999,
          Hf=-4519263.291943394,
          H0=201829.6229362443,
          Tlimit=1000,
          alow={19672.05518,90.52795259999999,-0.51097704,0.0375660595,-4.78273865e-005,
              3.029277805e-008,-7.70801315e-012},
          blow={-39075.6399,27.46873033},
          ahigh={-355940.245,-1447.644737,14.06684061,-0.000423637128,
              9.320824509999999e-008,-1.065894872e-011,4.93078062e-016},
          bhigh={-34348.2746,-52.75382697000001},
          R=120.5941470051156);

        constant IdealGases.Common.DataRecord LiO(
          name="LiO",
          MM=0.0229404,
          Hf=3178423.785112727,
          H0=408105.9179438893,
          Tlimit=1000,
          alow={36270.2976,-349.936323,4.39493318,0.001079712984,-8.72403881e-007,
              5.60796297e-010,-2.054288457e-013},
          blow={9533.330530000001,-0.9058149609999999},
          ahigh={1612392.133,-5551.31234,11.20573851,-0.00343722688,
              9.133194659999999e-007,-1.027902258e-010,3.822991e-015},
          bhigh={42015.7547,-48.5735458},
          R=362.4379696953846);

        constant IdealGases.Common.DataRecord LiOF(
          name="LiOF",
          MM=0.0419388032,
          Hf=-2194817.042370918,
          H0=258170.5288147088,
          Tlimit=1000,
          alow={55101.10690000001,-577.068817,4.42495493,0.01102425422,-1.710493381e-005,
              1.234361201e-008,-3.453693e-012},
          blow={-9278.986980000002,0.1238830687},
          ahigh={-183356.3281,-211.0049301,7.15681817,-6.24946201e-005,
              1.376567002e-008,-1.574099067e-012,7.277167140000001e-017},
          bhigh={-12545.30277,-12.72130479},
          R=198.2524861367527);

        constant IdealGases.Common.DataRecord LiOH(
          name="LiOH",
          MM=0.02394834,
          Hf=-9562249.408518503,
          H0=473392.3520377612,
          Tlimit=1000,
          alow={4574.19012,-103.0949027,4.27240737,0.008465219230000001,-1.386148524e-005,
              1.101099795e-008,-3.29124821e-012},
          blow={-28487.28855,-0.8775745779999999},
          ahigh={850075.137,-2430.540791,8.055314620000001,6.895680879999999e-005,-5.527207459999999e-008,
              9.368054029999999e-012,-5.31378568e-016},
          bhigh={-13658.94396,-24.57598093},
          R=347.1836461316316);

        constant IdealGases.Common.DataRecord LiON(
          name="LiON",
          MM=0.0369471,
          Hf=4869448.48174823,
          H0=305869.1751179389,
          Tlimit=1000,
          alow={-9412.67267,100.93323,3.006187607,0.0098904622,-1.128294343e-005,
              6.41029174e-009,-1.466806373e-012},
          blow={19783.48318,10.16334813},
          ahigh={-97406.29139999999,-511.1560940000001,7.37849387,-0.0001508777884,
              3.32991498e-008,-3.81751429e-012,1.769558455e-016},
          bhigh={22110.06635,-14.5410504},
          R=225.0372018372214);

        constant IdealGases.Common.DataRecord Li2(
          name="Li2",
          MM=0.013882,
          Hf=15552514.04696729,
          H0=696954.0412044374,
          Tlimit=1000,
          alow={6778.481580000001,-224.6205832,5.29603744,-0.001272412017,
              1.205843729e-006,-9.81854459e-011,-2.416702607e-013},
          blow={25736.38186,-6.86925758},
          ahigh={37676454,-118574.7185,148.2167789,-0.0837853211,2.424919798e-005,-3.27582024e-009,
              1.652000081e-013},
          bhigh={772307.201,-1021.697298},
          R=598.9390577726553);

        constant IdealGases.Common.DataRecord Li2plus(
          name="Li2plus",
          MM=0.0138814514,
          Hf=51983859.55520473,
          H0=719601.9862879757,
          Tlimit=1000,
          alow={-10400.56453,26.75405642,4.24727175,0.001057450777,-1.281715096e-006,
              1.067477239e-009,-2.759413508e-013},
          blow={85298.11309999999,0.529818996},
          ahigh={12799310.73,-34928.6139,38.4478536,-0.01380635397,2.53139425e-006,-2.197815991e-010,
              7.08766925e-015},
          bhigh={311796.445,-250.9543641},
          R=598.9627280617069);

        constant IdealGases.Common.DataRecord Li2Br2(
          name="Li2Br2",
          MM=0.17369,
          Hf=-2854703.920778398,
          H0=97590.39668374689,
          Tlimit=1000,
          alow={27863.12863,-1005.641437,13.70963066,-0.0076336633,8.94290592e-006,-5.56113509e-009,
              1.421736784e-012},
          blow={-57628.4584,-41.2184376},
          ahigh={-89009.8336,-19.88916335,10.01596418,-6.74913405e-006,
              1.556299963e-009,-1.844693069e-013,8.774879919999999e-018},
          bhigh={-62799.8996,-19.43063525},
          R=47.8696067706834);

        constant IdealGases.Common.DataRecord Li2F2(
          name="Li2F2",
          MM=0.05187880640000001,
          Hf=-18029001.4536649,
          H0=265349.7826040963,
          Tlimit=1000,
          alow={144316.6185,-2466.874678,17.0286329,-0.0114554121,1.086098792e-005,-5.569754279999999e-009,
              1.193819664e-012},
          blow={-102607.0133,-70.0038661},
          ahigh={-218893.1683,-92.5981453,10.06970757,-2.803632163e-005,
              6.217549520000001e-009,-7.14626702e-013,3.3168573e-017},
          bhigh={-115661.1527,-27.29853181},
          R=160.2672184840397);

        constant IdealGases.Common.DataRecord Li2I2(
          name="Li2I2",
          MM=0.26769094,
          Hf=-1355299.320178711,
          H0=65966.56577170672,
          Tlimit=1000,
          alow={10148.72266,-712.042101,12.7039296,-0.00568553681,
              6.770340380000001e-006,-4.26330489e-009,1.100658186e-012},
          blow={-43130.6386,-33.03950980000001},
          ahigh={-69735.8706,-13.16825508,10.01074855,-4.60020378e-006,
              1.070510527e-009,-1.277717768e-013,6.11061224e-018},
          bhigh={-46774.7005,-17.21894034},
          R=31.05996788684742);

        constant IdealGases.Common.DataRecord Li2O(
          name="Li2O",
          MM=0.0298814,
          Hf=-5600103.074153152,
          H0=428095.0691734658,
          Tlimit=1000,
          alow={26366.01597,-179.8629279,4.05111522,0.01189981375,-1.730095793e-005,
              1.20558455e-008,-3.29273388e-012},
          blow={-20619.07963,1.60599561},
          ahigh={726148.7039999999,-9543.783720000001,28.87491643,-0.01959494099,
              8.086339840000001e-006,-1.370211764e-009,8.11172719e-014},
          bhigh={29907.26399,-156.4517822},
          R=278.2490780217794);

        constant IdealGases.Common.DataRecord Li2Oplus(
          name="Li2Oplus",
          MM=0.0298808514,
          Hf=14694865.38793871,
          H0=436021.3444252797,
          Tlimit=1000,
          alow={108104.4623,-1261.961355,9.69201129,-0.001793477428,3.3803269e-007,
              4.14339515e-010,-1.990530222e-013},
          blow={57549.7604,-29.15719946},
          ahigh={-130216.6086,-146.6759528,7.61072945,-4.46942669e-005,
              9.947160640000001e-009,-1.147038806e-012,5.33924147e-017},
          bhigh={50987.6231,-15.28011047},
          R=278.2541865590885);

        constant IdealGases.Common.DataRecord Li2O2(
          name="Li2O2",
          MM=0.0458808,
          Hf=-6089649.439416925,
          H0=295287.1789506722,
          Tlimit=1000,
          alow={139261.973,-1764.036747,10.29649198,0.00760594995,-1.538519312e-005,
              1.238199941e-008,-3.68543157e-012},
          blow={-26380.56746,-34.3771056},
          ahigh={-293923.2153,-235.9107937,10.17463402,-6.931624359999999e-005,
              1.521202834e-008,-1.733841909e-012,7.99315462e-017},
          bhigh={-36184.8191,-29.04221044},
          R=181.2189848476923);

        constant IdealGases.Common.DataRecord Li2O2H2(
          name="Li2O2H2",
          MM=0.04789668,
          Hf=-15387287.80366405,
          H0=325263.4629373059,
          Tlimit=1000,
          alow={189441.3579,-2779.117524,15.30234911,0.01070738317,-2.510075145e-005,
              2.224910575e-008,-6.94935958e-012},
          blow={-77027.7692,-65.1411694},
          ahigh={1215377.492,-3982.05744,15.85877373,0.000750914568,-2.585218184e-007,
              3.6468417e-011,-1.904139406e-015},
          bhigh={-67387.4838,-66.472084},
          R=173.5918230658158);

        constant IdealGases.Common.DataRecord Li2SO4(
          name="Li2SO4",
          MM=0.1099446,
          Hf=-9475826.916465202,
          H0=178749.4610922228,
          Tlimit=1000,
          alow={100631.8702,-1543.457217,9.670054909999999,0.0339075738,-4.82348381e-005,
              3.26736892e-008,-8.702518510000001e-012},
          blow={-120193.9538,-29.11716635},
          ahigh={-603875.0870000001,-1064.550976,19.79557349,-0.000318897825,
              7.062411120000001e-008,-8.11443907e-012,3.76683021e-016},
          bhigh={-126890.8595,-80.14316674},
          R=75.62419618607918);

        constant IdealGases.Common.DataRecord Li3plus(
          name="Li3plus",
          MM=0.0208224514,
          Hf=36335339.26749855,
          H0=638224.9978501572,
          Tlimit=1000,
          alow={-6873.222290000001,-282.0780467,7.92269748,-0.001687949474,
              1.771718993e-006,-9.972535399999999e-010,2.332934849e-013},
          blow={90279.63650000001,-16.19319856},
          ahigh={-43550.9806,-6.05643275,7.00472289,-1.953320933e-006,
              4.429152229999999e-010,-5.18198319e-014,2.439894871e-018},
          bhigh={88799.02870000001,-10.66880792},
          R=399.303225171653);

        constant IdealGases.Common.DataRecord Li3Br3(
          name="Li3Br3",
          MM=0.260535,
          Hf=-3165176.245034256,
          H0=99935.92799431937,
          Tlimit=1000,
          alow={64319.66250000001,-1823.743601,22.43492856,-0.0127941826,
              1.459200355e-005,-8.884688150000001e-009,2.23370805e-012},
          blow={-94806.7767,-82.06864420000001},
          ahigh={-158467.0201,-40.4136094,16.03177633,-1.322713911e-005,
              3.014221791e-009,-3.54029216e-013,1.672030783e-017},
          bhigh={-104247.0448,-44.05478160000001},
          R=31.9130711804556);

        constant IdealGases.Common.DataRecord Li3CL3(
          name="Li3CL3",
          MM=0.127182,
          Hf=-7674884.189586578,
          H0=193113.3808243305,
          Tlimit=1000,
          alow={98674.28999999999,-2324.074851,23.78484564,-0.014835224,
              1.634495612e-005,-9.675366520000001e-009,2.377033859e-012},
          blow={-110383.9177,-94.74114379},
          ahigh={-200593.0356,-59.3940019,16.04590929,-1.885890854e-005,
              4.25351737e-009,-4.95556094e-013,2.325408214e-017},
          bhigh={-122492.7071,-48.44413629},
          R=65.37459703417152);

        constant IdealGases.Common.DataRecord Li3F3(
          name="Li3F3",
          MM=0.07781820960000001,
          Hf=-19591775.93312298,
          H0=263906.5342875737,
          Tlimit=1000,
          alow={182387.4443,-3163.78624,22.87811928,-0.007544903889999999,
              3.44679023e-006,2.690705228e-010,-5.25084096e-013},
          blow={-171244.6093,-99.7365499},
          ahigh={-361866.499,-193.7051395,16.14457133,-5.7756285e-005,
              1.274057038e-008,-1.458168875e-012,6.744850030000001e-017},
          bhigh={-188208.1974,-56.3361288},
          R=106.8448123226932);

        constant IdealGases.Common.DataRecord Li3I3(
          name="Li3I3",
          MM=0.40153641,
          Hf=-1525284.611176356,
          H0=67821.2319525395,
          Tlimit=1000,
          alow={36117.6469,-1392.033487,21.10791892,-0.01046866587,1.222589173e-005,-7.58413543e-009,
              1.93519918e-012},
          blow={-71530.8458,-70.9388203},
          ahigh={-126669.6511,-27.83891914,16.02228068,-9.399364930000001e-006,
              2.163919735e-009,-2.561731922e-013,1.217394107e-017},
          bhigh={-78695.5068,-40.9172406},
          R=20.70664525789828);

        constant IdealGases.Common.DataRecord Mg(
          name="Mg",
          MM=0.024305,
          Hf=6052252.622917095,
          H0=254985.7231022423,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={16946.58761,3.63433014},
          ahigh={-536483.155,1973.709576,-0.36337769,0.002071795561,-7.738051719999999e-007,
              1.359277788e-010,-7.766898397000001e-015},
          bhigh={4829.188109999999,23.39104998},
          R=342.0889528903518);

        constant IdealGases.Common.DataRecord Mgplus(
          name="Mgplus",
          MM=0.0243044514,
          Hf=36661884.90886899,
          H0=254991.4786391763,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={106422.3354,4.32744346},
          ahigh={-19147.58821,48.7734792,2.457662661,1.218104674e-005,
              1.897261686e-009,-1.580433756e-012,2.135732238e-016},
          bhigh={106102.2394,4.64644286},
          R=342.0966745211126);

        constant IdealGases.Common.DataRecord MgBr(
          name="MgBr",
          MM=0.104209,
          Hf=59143.78796457119,
          H0=92008.51174082852,
          Tlimit=1000,
          alow={7361.41914,-239.5789881,5.36056042,-0.001667141829,1.981137765e-006,-1.201637202e-009,
              3.032148099e-013},
          blow={591.563444,-1.421771179},
          ahigh={24776.04216,-641.7687520000001,6.01993209,-0.001391004302,
              6.44333096e-007,-1.197734078e-010,7.421644240000001e-015},
          bhigh={2824.060334,-6.26443992},
          R=79.78650596397624);

        constant IdealGases.Common.DataRecord MgBr2(
          name="MgBr2",
          MM=0.184113,
          Hf=-1666059.534090477,
          H0=80153.38949449523,
          Tlimit=1000,
          alow={21484.77999,-515.45289,9.27325875,-0.00347004904,3.92184079e-006,-2.377174864e-009,
              5.967025559999999e-013},
          blow={-36524.4385,-17.91077763},
          ahigh={-43268.9901,-12.83036001,7.5100243,-4.1523324e-006,9.42649918e-010,-1.103873928e-013,
              5.20110431e-018},
          bhigh={-39198.8602,-7.40916803},
          R=45.15961393274782);

        constant IdealGases.Common.DataRecord MgCL(
          name="MgCL",
          MM=0.05975800000000001,
          Hf=-915440.3929181029,
          H0=156683.8414940259,
          Tlimit=1000,
          alow={20439.9528,-407.215516,5.8803723,-0.002594175042,2.945953528e-006,-1.750648628e-009,
              4.337959330000001e-013},
          blow={-5851.44495,-6.02354575},
          ahigh={1041328.453,-3380.15833,8.637775469999999,-0.002447789643,
              7.84196944e-007,-1.12640938e-010,5.81062073e-015},
          bhigh={13271.88977,-27.03802395},
          R=139.1357140466548);

        constant IdealGases.Common.DataRecord MgCLplus(
          name="MgCLplus",
          MM=0.0597574514,
          Hf=10816045.81282394,
          H0=159239.2543032717,
          Tlimit=1000,
          alow={8182.385119999999,-262.225376,5.41986343,-0.001774129606,
              2.185811127e-006,-1.418143432e-009,3.91889858e-013},
          blow={77704.0371,-3.78093884},
          ahigh={-12683919.21,34788.2454,-30.0422295,0.01481739497,-2.470965605e-006,
              1.424433718e-010,2.789613105e-016},
          bhigh={-148701.374,255.2015117},
          R=139.1369913744347);

        constant IdealGases.Common.DataRecord MgCL2(
          name="MgCL2",
          MM=0.095211,
          Hf=-4192476.667611936,
          H0=145997.8783964038,
          Tlimit=1000,
          alow={36378.2468,-730.784496,9.66103051,-0.00366021294,3.61081935e-006,-1.928769286e-009,
              4.309912350000001e-013},
          blow={-46469.1457,-23.60112274},
          ahigh={-68352.1701,-24.90899393,7.5187832,-7.56451826e-006,1.67929377e-009,
              -1.931706275e-013,8.971657820000001e-018},
          bhigh={-50326.8691,-10.53268382},
          R=87.32680047473507);

        constant IdealGases.Common.DataRecord MgF(
          name="MgF",
          MM=0.0433034032,
          Hf=-5363707.580377886,
          H0=207122.473921403,
          Tlimit=1000,
          alow={38230.0162,-480.331039,5.06846894,0.00052120293,-1.874026347e-006,
              1.759241129e-009,-5.60940319e-013},
          blow={-26591.14296,-3.76896921},
          ahigh={-169588.3782,358.875763,3.93600165,0.000481304414,-1.658385409e-007,
              3.33605229e-011,-2.270104205e-015},
          bhigh={-31693.2399,4.4105659},
          R=192.0050477695481);

        constant IdealGases.Common.DataRecord MgFplus(
          name="MgFplus",
          MM=0.0433028546,
          Hf=11936113.21411591,
          H0=207131.2638128019,
          Tlimit=1000,
          alow={641329.384,-8518.53261,48.1421691,-0.1163071535,0.0001622560562,-1.06348459e-007,
              2.634809398e-011},
          blow={102430.848,-245.0074295},
          ahigh={-10568523.62,20771.22379,-6.11952356,0.002245834831,-9.51573861e-008,
              -2.263502341e-011,2.284524246e-015},
          bhigh={-83315.4988,87.2710238},
          R=192.0074802643611);

        constant IdealGases.Common.DataRecord MgF2(
          name="MgF2",
          MM=0.0623018064,
          Hf=-11805405.05162624,
          H0=202601.5091594519,
          Tlimit=1000,
          alow={43384.2955,-661.651177,7.45344852,0.00352081405,-6.95576458e-006,
              5.61992348e-009,-1.688028906e-012},
          blow={-86871.8367,-15.4547679},
          ahigh={-124441.9584,-86.87343749999999,7.56358123,-2.499267978e-005,
              5.44012914e-009,-6.15824576e-013,2.822792666e-017},
          bhigh={-90600.19439999999,-14.2079699},
          R=133.4547500375527);

        constant IdealGases.Common.DataRecord MgF2plus(
          name="MgF2plus",
          MM=0.0623012578,
          Hf=9352815.409771709,
          H0=199274.6926531554,
          Tlimit=1000,
          alow={78322.2026,-1176.632752,10.25829767,-0.00375527289,3.016621585e-006,-1.327098871e-009,
              2.465289749e-013},
          blow={74132.2855,-29.90883551},
          ahigh={-150231.687,77.2528956,7.27156936,0.000223752977,-1.003070865e-007,
              1.996274309e-011,-1.233278721e-015},
          bhigh={66991.175,-10.94528006},
          R=133.4559251867945);

        constant IdealGases.Common.DataRecord MgH(
          name="MgH",
          MM=0.02531294,
          Hf=9077811.743716849,
          H0=342990.7391239421,
          Tlimit=1000,
          alow={-49586.7915,750.027865,-0.64420475,0.00982630101,-8.789822439999999e-006,
              3.82335352e-009,-6.00372576e-013},
          blow={23022.79383,26.57165344},
          ahigh={-100574.8598,1952.890106,-1.317191549,0.0056036658,-2.13733498e-006,
              3.3248805e-010,-1.824672746e-014},
          bhigh={15985.82755,34.3123316},
          R=328.4672582481529);

        constant IdealGases.Common.DataRecord MgI(
          name="MgI",
          MM=0.15120947,
          Hf=404778.3316745968,
          H0=64421.34212890238,
          Tlimit=1000,
          alow={2943.889099,-169.0248574,5.14725183,-0.001321186997,1.623056505e-006,
              -1.005114222e-009,2.567337785e-013},
          blow={6845.89027,0.859313225},
          ahigh={-2370562.811,6916.45248,-3.18389449,0.00405155114,-9.774290750000001e-007,
              1.0233294e-010,-3.79030487e-015},
          bhigh={-38185.5111,59.9310438},
          R=54.98645025341336);

        constant IdealGases.Common.DataRecord MgI2(
          name="MgI2",
          MM=0.27811394,
          Hf=-617394.5434018878,
          H0=54993.54329380253,
          Tlimit=1000,
          alow={15947.39709,-416.041272,9.01063832,-0.003090359024,3.62126426e-006,-2.260138392e-009,
              5.80905555e-013},
          blow={-20804.414,-14.12175736},
          ahigh={-33402.9918,-9.34351178,7.50746854,-3.14770789e-006,
              7.241336470000001e-010,-8.56766495e-014,4.0696917e-018},
          bhigh={-22945.55505,-5.24127259},
          R=29.89591963639075);

        constant IdealGases.Common.DataRecord MgN(
          name="MgN",
          MM=0.0383117,
          Hf=7535452.616302591,
          H0=234624.9579110298,
          Tlimit=1000,
          alow={37595.3864,-485.316428,5.16305424,0.0002591539493,-1.518993975e-006,
              1.522840476e-009,-4.992531450000001e-013},
          blow={36072.9461,-3.813908776},
          ahigh={-60185.891,-40.1086478,4.52949895,4.76049091e-005,2.547271298e-009,-2.894058118e-013,
              1.330639131e-017},
          bhigh={33412.857,0.7925250209},
          R=217.0217453153997);

        constant IdealGases.Common.DataRecord MgO(
          name="MgO",
          MM=0.0403044,
          Hf=800441.3165808199,
          H0=221045.5186034279,
          Tlimit=1000,
          alow={351365.974,-5287.19716,33.8206006,-0.08400489629999999,0.000121001616,
              -7.630795020000001e-008,1.701022862e-011},
          blow={27906.79519,-162.4886199},
          ahigh={-15867383.67,34204.681,-17.74087677,0.00700496305,-1.104138249e-006,
              8.957488529999999e-011,-3.052513649e-015},
          bhigh={-230050.4434,173.8984472},
          R=206.2919185002134);

        constant IdealGases.Common.DataRecord MgOH(
          name="MgOH",
          MM=0.04131234,
          Hf=-3205555.047232862,
          H0=269272.6676823439,
          Tlimit=1000,
          alow={38398.5162,-736.7383640000001,7.92066446,-0.000595094059,-2.112941162e-006,
              3.22828211e-009,-1.214159329e-012},
          blow={-13923.26188,-19.16078109},
          ahigh={664866.475,-1770.750355,7.26999927,0.000533684276,-1.980894443e-007,
              3.025677088e-011,-1.554849476e-015},
          bhigh={-6149.11456,-16.71027009},
          R=201.2588006392279);

        constant IdealGases.Common.DataRecord MgOHplus(
          name="MgOHplus",
          MM=0.0413117914,
          Hf=14905414.38975217,
          H0=246621.3556645719,
          Tlimit=1000,
          alow={117022.4573,-1735.933343,11.64059613,-0.008449876219999999,
              7.35171374e-006,-2.790223071e-009,3.51498213e-013},
          blow={81188.07670000001,-42.7117437},
          ahigh={829633.954,-2459.700177,8.11873202,3.5005791e-005,-4.67057475e-008,
              8.312358260000001e-012,-4.80283622e-016},
          bhigh={88016.61709999999,-24.38155217},
          R=201.261473255793);

        constant IdealGases.Common.DataRecord Mg_OH_2(
          name="Mg_OH_2",
          MM=0.05831968,
          Hf=-9465000.631004833,
          H0=293752.6063243146,
          Tlimit=1000,
          alow={52458.9467,-1289.056383,13.89327642,-0.000780669367,-4.15125723e-006,
              6.10947304e-009,-2.274138833e-012},
          blow={-62950.8915,-50.1535334},
          ahigh={1713709.254,-4730.00535,14.48925967,0.0001907819857,-1.226834131e-007,
              2.015343753e-011,-1.128993279e-015},
          bhigh={-38877.2467,-58.4049812},
          R=142.5671745798331);

        constant IdealGases.Common.DataRecord MgS(
          name="MgS",
          MM=0.05637,
          Hf=2140310.643959553,
          H0=163812.5066524748,
          Tlimit=1000,
          alow={-9565.78809,144.3637798,1.813794717,0.01147168775,-2.220170412e-005,
              1.995344981e-008,-6.09068874e-012},
          blow={12765.01517,14.61333093},
          ahigh={26507943.28,-77113.5586,84.63771680000001,-0.0364425068,
              8.403084420000002e-006,-9.53988217e-010,4.264658029999999e-014},
          bhigh={507893.117,-583.4656096},
          R=147.4981727869434);

        constant IdealGases.Common.DataRecord Mg2(
          name="Mg2",
          MM=0.04861,
          Hf=5894122.917095248,
          H0=196299.423986834,
          Tlimit=1000,
          alow={4545.195589999999,411.585004,0.484119617,0.00489196965,-6.39553684e-006,
              4.29976455e-009,-1.164624418e-012},
          blow={31816.4179,26.40432143},
          ahigh={30382.24994,59.4524046,2.352706666,0.0001378537924,-5.89569204e-008,
              1.104045317e-011,-6.558868290000001e-016},
          bhigh={33510.3656,15.88177377},
          R=171.0444764451759);

        constant IdealGases.Common.DataRecord Mg2F4(
          name="Mg2F4",
          MM=0.1246036128,
          Hf=-13790683.60367798,
          H0=169684.5984228156,
          Tlimit=1000,
          alow={151195.6137,-3122.595912,25.17715088,-0.01558723757,1.552195619e-005,
              -8.40872905e-009,1.911618525e-012},
          blow={-195307.8883,-108.5103537},
          ahigh={-298061.0166,-120.1299868,16.09110864,-3.68745629e-005,
              8.22031705e-009,-9.48886978e-013,4.41979533e-017},
          bhigh={-211734.969,-53.08655469999999},
          R=66.72737501877634);

        constant IdealGases.Common.DataRecord Mn(
          name="Mn",
          MM=0.054938049,
          Hf=5140335.434918703,
          H0=112807.5734906421,
          Tlimit=1000,
          alow={0.1034061359,-0.001551537349,2.500009148,-2.723162066e-008,
              4.33389743e-011,-3.51109389e-014,1.136032201e-017},
          blow={33219.3519,6.649325463},
          ahigh={5855.15582,883.8588440000001,-0.0364866258,0.002703720687,-1.324971998e-006,
              2.87260329e-010,-1.92363357e-014},
          bhigh={28678.03487,22.92541198},
          R=151.3426878337088);

        constant IdealGases.Common.DataRecord Mnplus(
          name="Mnplus",
          MM=0.0549375004,
          Hf=18309375.57544937,
          H0=112808.6999749992,
          Tlimit=1000,
          alow={345.80177,-4.25115133,2.521281028,-5.56508728e-005,8.03716221e-008,-6.09355097e-011,
              1.900014268e-014},
          blow={120253.3602,6.683468162},
          ahigh={647131.41,-2403.796253,5.93771575,-0.002341014594,7.46416564e-007,-9.075969730000001e-011,
              4.467879847e-015},
          bhigh={134990.2108,-17.02666341},
          R=151.344199125594);

        constant IdealGases.Common.DataRecord Mo(
          name="Mo",
          MM=0.09594,
          Hf=6863664.790494058,
          H0=64596.91473837815,
          Tlimit=1000,
          alow={76.46367910000001,-1.159269043,2.506929462,-2.099249725e-005,
              3.41477943e-008,-2.841269591e-011,9.492443320999999e-015},
          blow={78458.99799999999,7.60183566},
          ahigh={5573271,-16623.65811,21.35147077,-0.01003069377,2.409784357e-006,-1.811267352e-010,
              1.034189087e-015},
          bhigh={184264.6473,-127.5326434},
          R=86.66324786324788);

        constant IdealGases.Common.DataRecord Moplus(
          name="Moplus",
          MM=0.0959394514,
          Hf=14061086.53233346,
          H0=64597.28411580224,
          Tlimit=1000,
          alow={129.8236623,-1.560279908,2.507600281,-1.923789063e-005,
              2.673316651e-008,-1.937174292e-011,5.729735412e-015},
          blow={161510.3759,7.44254346},
          ahigh={12988911.2,-39482.7623,48.6659978,-0.02605352326,7.21543192e-006,-8.719164960000001e-010,
              3.78842304e-014},
          bhigh={411894.857,-321.679103},
          R=86.66374342015469);

        constant IdealGases.Common.DataRecord Mominus(
          name="Mominus",
          MM=0.0959405486,
          Hf=6048794.138331621,
          H0=64596.54536517837,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={69051.2369,7.48565954},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={69051.2369,7.48565954},
          R=86.66275231200837);

        constant IdealGases.Common.DataRecord MoO(
          name="MoO",
          MM=0.1119394,
          Hf=3198206.556404626,
          H0=91595.30067161338,
          Tlimit=1000,
          alow={-28011.52706,513.988348,1.075385931,0.008681048470000001,-1.111118984e-005,
              7.23434933e-009,-1.893138381e-012},
          blow={39413.7408,22.72230239},
          ahigh={1573131.992,-5241.48358,11.02656868,-0.00390299662,1.147334134e-006,
              -1.358975691e-010,5.77526858e-015},
          bhigh={74489.72,-42.5361293},
          R=74.27654605974304);

        constant IdealGases.Common.DataRecord MoO2(
          name="MoO2",
          MM=0.1279388,
          Hf=-121605.6348816778,
          H0=83688.64644658228,
          Tlimit=1000,
          alow={32471.8322,-190.4783783,2.120771647,0.01650280086,-2.381696822e-005,
              1.652371586e-008,-4.49445243e-012},
          blow={-1862.932837,16.40582056},
          ahigh={309614.3654,-1932.750274,9.428673180000001,-0.001630508855,
              5.752760170000001e-007,-7.59045747e-011,3.46133778e-015},
          bhigh={7327.72518,-25.33315948},
          R=64.98788483243551);

        constant IdealGases.Common.DataRecord MoO3(
          name="MoO3",
          MM=0.1439382,
          Hf=-2531727.99854382,
          H0=91655.89815629208,
          Tlimit=1000,
          alow={59773.8536,-768.455783,5.88184444,0.01686119817,-2.582485043e-005,
              1.850382718e-008,-5.15224985e-012},
          blow={-41558.7239,-6.52916216},
          ahigh={-409759.727,237.9066513,9.3111008,0.000657933891,-2.895307725e-007,
              5.69263726e-011,-3.48965731e-015},
          bhigh={-49237.38720000001,-21.14864892},
          R=57.76417934919292);

        constant IdealGases.Common.DataRecord MoO3minus(
          name="MoO3minus",
          MM=0.1439387486,
          Hf=-4552231.469101435,
          H0=94207.31479111943,
          Tlimit=1000,
          alow={182161.7352,-2224.65697,13.20405967,-0.001249800352,-1.864166983e-006,
              2.27657947e-009,-7.366564570000001e-013},
          blow={-69389.86,-46.9937721},
          ahigh={-488109.872,18.48536991,10.42644941,-0.000626555791,3.020554347e-007,
              -4.73319589e-011,2.527517727e-015},
          bhigh={-83378.155,-27.01522825},
          R=57.763959190069);

        constant IdealGases.Common.DataRecord Mo2O6(
          name="Mo2O6",
          MM=0.2878764,
          Hf=-3992848.364784332,
          H0=89495.00202170099,
          Tlimit=1000,
          alow={156837.5811,-2159.930184,15.22500503,0.031941989,-5.06387715e-005,
              3.68937182e-008,-1.037872908e-011},
          blow={-130993.1161,-54.089185},
          ahigh={-631223.816,-664.282755,22.4938357,-0.0001968470329,4.33674061e-008,
              -4.959777990000001e-012,2.293212733e-016},
          bhigh={-143057.325,-86.69628539999999},
          R=28.88208967459646);

        constant IdealGases.Common.DataRecord Mo3O9(
          name="Mo3O9",
          MM=0.4318146,
          Hf=-4404740.712796649,
          H0=94448.21689678858,
          Tlimit=1000,
          alow={148338.6187,-1863.895133,17.38405871,0.0623301232,-9.32844135e-005,
              6.61363879e-008,-1.830607518e-011},
          blow={-224894.5631,-58.2666947},
          ahigh={-923029.054,-1076.171759,34.8000726,-0.00031896338,7.02839704e-008,-8.03964264e-012,
              3.71787953e-016},
          bhigh={-235742.2166,-144.8769485},
          R=19.25472644973097);

        constant IdealGases.Common.DataRecord Mo4O12(
          name="Mo4O12",
          MM=0.5757528,
          Hf=-4560163.273196414,
          H0=95342.7408429451,
          Tlimit=1000,
          alow={223487.6437,-2996.203728,26.82458827,0.0759734572,-0.0001155247012,
              8.25647257e-008,-2.296764551e-011},
          blow={-308461.9476,-106.5236386},
          ahigh={-1225283.388,-1368.141197,47.0168781,-0.00040529102,
              8.928472389999999e-008,-1.021091158e-011,4.721091689999999e-016},
          bhigh={-325647.777,-204.7486535},
          R=14.44104483729823);

        constant IdealGases.Common.DataRecord Mo5O15(
          name="Mo5O15",
          MM=0.7196910000000001,
          Hf=-4625746.934448255,
          H0=95759.62739564618,
          Tlimit=1000,
          alow={276890.3251,-3757.9331,34.0819776,0.09485414959999999,-0.00014426721,
              1.0311639e-007,-2.868600013e-011},
          blow={-391350.703,-142.6449143},
          ahigh={-1535389.516,-1710.367122,59.2712578,-0.0005066836290000001,
              1.116223706e-007,-1.276562233e-011,5.90231891e-016},
          bhigh={-412897.2380000001,-265.1287167},
          R=11.55283586983858);

        constant IdealGases.Common.DataRecord N(
          name="N",
          MM=0.0140067,
          Hf=33746706.93311058,
          H0=442461.6790535958,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={56104.6378,4.193905036},
          ahigh={88765.0138,-107.12315,2.362188287,0.0002916720081,-1.7295151e-007,
              4.01265788e-011,-2.677227571e-015},
          bhigh={56973.5133,4.865231506},
          R=593.6067739010616);

        constant IdealGases.Common.DataRecord Nplus(
          name="Nplus",
          MM=0.0140061514,
          Hf=134378643.3723685,
          H0=508099.891023597,
          Tlimit=1000,
          alow={5237.07921,2.299958315,2.487488821,2.737490756e-005,-3.134447576e-008,
              1.850111332e-011,-4.447350984e-015},
          blow={225628.4738,5.076830786},
          ahigh={290497.0374,-855.7908610000001,3.47738929,-0.000528826719,
              1.352350307e-007,-1.389834122e-011,5.046166279e-016},
          bhigh={231080.9984,-1.994146545},
          R=593.6300245904811);

        constant IdealGases.Common.DataRecord Nminus(
          name="Nminus",
          MM=0.0140072486,
          Hf=33806606.74502486,
          H0=463927.2983275246,
          Tlimit=1000,
          alow={1445.682471,7.33520511,2.476680939,4.22786918e-005,-4.42629332e-008,
              2.490985431e-011,-5.83160809e-015},
          blow={56176.25,5.145753977},
          ahigh={2404.189576,0.2954965336,2.499789368,8.30756497e-008,-1.82994277e-011,
              2.100136461e-015,-9.754986710000001e-020},
          bhigh={56214.13890000001,5.006484157},
          R=593.583525032889);

        constant IdealGases.Common.DataRecord NCO(
          name="NCO",
          MM=0.04201680000000001,
          Hf=3137964.837874374,
          H0=242718.2698349232,
          Tlimit=1000,
          alow={11365.03036,-244.4613367,4.6713761,0.002309387548,2.798649599e-006,-4.54635738e-009,
              1.692880931e-012},
          blow={15776.49188,-0.2171476903},
          ahigh={108944.5289,-1735.459316,8.65561033,-0.000405322926,7.59971641e-008,
              -7.25380415e-012,3.24487241e-016},
          bhigh={23657.92776,-26.1953297},
          R=197.8844652615144);

        constant IdealGases.Common.DataRecord ND(
          name="ND",
          MM=0.016020802,
          Hf=22204805.78937309,
          H0=539798.1948718922,
          Tlimit=1000,
          alow={22901.55757,-395.738851,6.17901033,-0.00884780697,1.44158297e-005,-1.006647227e-008,
              2.654403586e-012},
          blow={43559.13430000001,-11.80414072},
          ahigh={543965.796,-2084.583507,5.83408972,-0.000418939336,
              9.768929529999999e-008,-1.056317654e-011,4.68307921e-016},
          bhigh={54666.3341,-14.80810939},
          R=518.9797614376608);

        constant IdealGases.Common.DataRecord ND2(
          name="ND2",
          MM=0.018034904,
          Hf=10248824.72343629,
          H0=552391.3517920583,
          Tlimit=1000,
          alow={19352.22164,-213.0631713,4.8440176,-0.002516949288,7.61638154e-006,-5.46450177e-009,
              1.292736999e-012},
          blow={22119.98374,-3.171712417},
          ahigh={1631308.357,-6564.63749,12.80547961,-0.003094456779,
              9.181660230000001e-007,-1.241119284e-010,6.22629986e-015},
          bhigh={61089.2958,-61.24502693},
          R=461.0211398962811);

        constant IdealGases.Common.DataRecord ND3(
          name="ND3",
          MM=0.020049006,
          Hf=-2730913.742057836,
          H0=510449.2462120068,
          Tlimit=1000,
          alow={10451.2037,161.0166943,0.857496323,0.01319688794,-1.153090144e-005,
              7.14249556e-009,-2.109194351e-012},
          blow={-8220.948899999999,16.75921299},
          ahigh={2599516.958,-10134.20124,17.98028169,-0.0035826098,1.009922e-006,-1.537638609e-010,
              9.106175650000001e-015},
          bhigh={53972.0566,-98.10988569},
          R=414.7074423540001);

        constant IdealGases.Common.DataRecord NF(
          name="NF",
          MM=0.0330051032,
          Hf=7059226.525914937,
          H0=264750.1190058391,
          Tlimit=1000,
          alow={-35049.2775,667.450299,-1.201665982,0.01452074253,-1.822873148e-005,
              1.160136864e-008,-2.973416333e-012},
          blow={23954.14002,30.89260431},
          ahigh={800298.733,-3237.69658,8.703408870000001,-0.002701025798,
              9.15004211e-007,-1.36525663e-010,7.23462441e-015},
          bhigh={46428.19450000001,-30.19933248},
          R=251.9147402635602);

        constant IdealGases.Common.DataRecord NF2(
          name="NF2",
          MM=0.0520035064,
          Hf=661906.270997142,
          H0=203478.6831220289,
          Tlimit=1000,
          alow={15118.31104,91.9638994,0.494730179,0.02001847323,-2.767712684e-005,
              1.872924867e-008,-5.020318040000001e-012},
          blow={2839.279606,22.7051567},
          ahigh={-194501.0078,-353.603407,7.26349436,-8.4023804e-005,2.326721111e-008,
              -2.667577562e-012,1.236070614e-016},
          bhigh={3435.44059,-13.36102511},
          R=159.8829112799979);

        constant IdealGases.Common.DataRecord NF3(
          name="NF3",
          MM=0.07100190960000001,
          Hf=-1854879.689038673,
          H0=166960.4531312493,
          Tlimit=1000,
          alow={87571.49280000001,-903.1832890000001,4.02741727,0.02314439555,-3.41510647e-005,
              2.409483651e-008,-6.63346419e-012},
          blow={-12372.32074,0.3026430713},
          ahigh={-349626.876,-497.372867,10.36866128,8.90068765e-005,5.88265436e-008,
              -3.157737664e-012,1.714329953e-016},
          bhigh={-17131.83352,-30.98920858},
          R=117.1020898851994);

        constant IdealGases.Common.DataRecord NH(
          name="NH",
          MM=0.01501464,
          Hf=23778925.16903503,
          H0=572847.7672458348,
          Tlimit=1000,
          alow={13596.5132,-190.0296604,4.51849679,-0.002432776899,2.377587464e-006,-2.592797084e-010,
              -2.659680792e-013},
          blow={42809.7219,-3.886561616},
          ahigh={1958141.991,-5782.861300000001,9.33574202,-0.002292910311,
              6.07609248e-007,-6.647942750000001e-011,2.384234783e-015},
          bhigh={78989.1234,-41.169704},
          R=553.7576658514623);

        constant IdealGases.Common.DataRecord NHplus(
          name="NHplus",
          MM=0.0150140914,
          Hf=110948299.8085385,
          H0=632413.493899471,
          Tlimit=1000,
          alow={4253.656849999999,-245.8222206,6.70891949,-0.0103848943,
              1.509008623e-005,-9.58051219e-009,2.333206758e-012},
          blow={200107.7797,-13.95057632},
          ahigh={1405709.438,-4136.21571,7.63201448,-0.001228325778,2.721187746e-007,
              -2.010098289e-011,3.71719018e-017},
          bhigh={225897.596,-27.86785234},
          R=553.7778996070318);

        constant IdealGases.Common.DataRecord NHF(
          name="NHF",
          MM=0.0340130432,
          Hf=3292854.43062031,
          H0=294878.8775242552,
          Tlimit=1000,
          alow={-51106.59820000001,961.225643,-2.706446594,0.0203656268,-2.425558952e-005,
              1.551553017e-008,-4.05845826e-012},
          blow={7909.62834,40.99317124},
          ahigh={901390.2720000001,-3463.39705,8.705804860000001,-0.0004018963409999999,
              2.322774501e-008,6.28048733e-012,-6.28309569e-016},
          bhigh={33370.6534,-29.00483634},
          R=244.4495175309689);

        constant IdealGases.Common.DataRecord NHF2(
          name="NHF2",
          MM=0.0530114464,
          Hf=-1942976.602124933,
          H0=203869.9136494416,
          Tlimit=1000,
          alow={-56261.1342,1205.756556,-6.01752942,0.0376002769,-4.6191986e-005,
              2.94247557e-008,-7.59873236e-012},
          blow={-18970.14374,59.01714907},
          ahigh={739427.899,-4004.47177,12.2132232,-0.000697043773,1.271073981e-007,-1.247136898e-011,
              5.08651759e-016},
          bhigh={9134.195979999999,-48.67843963},
          R=156.8429568448825);

        constant IdealGases.Common.DataRecord NH2(
          name="NH2",
          MM=0.01602258,
          Hf=11804260.79944678,
          H0=620241.371863957,
          Tlimit=1000,
          alow={-31182.40659,475.424339,1.372395176,0.006306429719999999,-5.98789356e-006,
              4.49275234e-009,-1.414073548e-012},
          blow={19289.39662,15.40126885},
          ahigh={2111053.74,-6880.62723,11.32305924,-0.001829236741,5.64389009e-007,-7.88645248e-011,
              4.078593449999999e-015},
          bhigh={65037.7856,-53.59155744},
          R=518.9221710860547);

        constant IdealGases.Common.DataRecord NH2F(
          name="NH2F",
          MM=0.0350209832,
          Hf=-2141573.226876166,
          H0=288540.6141310162,
          Tlimit=1000,
          alow={-109237.476,1844.91978,-7.6738716,0.0322953344,-3.38810867e-005,
              1.97187155e-008,-4.81020515e-012},
          blow={-18783.1896,68.61483738999999},
          ahigh={1927205.34,-7500.447160000001,13.9558958,-0.00118480442,
              2.05067867e-007,-1.90876131e-011,7.38923621e-016},
          bhigh={35529.2734,-67.31185490999999},
          R=237.4140084108204);

        constant IdealGases.Common.DataRecord NH3(
          name="NH3",
          MM=0.01703052,
          Hf=-2697510.117130892,
          H0=589713.1150428759,
          Tlimit=1000,
          alow={-76812.26149999999,1270.951578,-3.89322913,0.02145988418,-2.183766703e-005,
              1.317385706e-008,-3.33232206e-012},
          blow={-12648.86413,43.66014588},
          ahigh={2452389.535,-8040.89424,12.71346201,-0.000398018658,3.55250275e-008,
              2.53092357e-012,-3.32270053e-016},
          bhigh={43861.91959999999,-64.62330602},
          R=488.2101075011215);

        constant IdealGases.Common.DataRecord NH2OH(
          name="NH2OH",
          MM=0.03302992,
          Hf=-1513779.022171413,
          H0=340169.7006835016,
          Tlimit=1000,
          alow={-56175.8667,1209.290057,-6.17959906,0.0405311644,-5.19010554e-005,
              3.59454458e-008,-9.933681639999999e-012},
          blow={-12658.88352,57.27932928000001},
          ahigh={4878285.05,-15336.04636,22.2723999,-0.002514583678,3.33958973e-007,-1.881744532e-011,
              1.918174365e-016},
          bhigh={89230.2071,-126.9053624},
          R=251.7254658806319);

        constant IdealGases.Common.DataRecord NH4plus(
          name="NH4plus",
          MM=0.0180379114,
          Hf=35752750.45424605,
          H0=553211.0552444559,
          Tlimit=1000,
          alow={-266831.5752,3763.02069,-15.71327725,0.0454882021,-4.37996212e-005,
              2.464478293e-008,-5.96153233e-012},
          blow={58232.8472,111.2087156},
          ahigh={4141889,-14420.72042,20.11893564,-0.001971492619,3.112721421e-007,-2.602979969e-011,
              8.894342129999999e-016},
          bhigh={166419.6236,-120.1535761},
          R=460.944275399867);

        constant IdealGases.Common.DataRecord NO(
          name="NO",
          MM=0.0300061,
          Hf=3041758.509103149,
          H0=305908.1320131574,
          Tlimit=1000,
          alow={-11439.16503,153.6467592,3.43146873,-0.002668592368,8.48139912e-006,-7.685111050000001e-009,
              2.386797655e-012},
          blow={9098.214410000001,6.72872549},
          ahigh={223901.8716,-1289.651623,5.43393603,-0.00036560349,
              9.880966450000001e-008,-1.416076856e-011,9.380184619999999e-016},
          bhigh={17503.17656,-8.50166909},
          R=277.0927244793559);

        constant IdealGases.Common.DataRecord NOCL(
          name="NOCL",
          MM=0.06545910000000001,
          Hf=805064.9642295723,
          H0=173612.0417176527,
          Tlimit=1000,
          alow={23088.35209,-549.598384,7.73046336,-0.0050739109,1.062996184e-005,-8.7932497e-009,
              2.648180166e-012},
          blow={7389.89839,-13.18393021},
          ahigh={-613341.333,-391.929883,9.13891722,-0.002605664613,1.295687247e-006,
              -2.215378352e-010,1.280394898e-014},
          bhigh={4517.32842,-23.07323335},
          R=127.0178172324398);

        constant IdealGases.Common.DataRecord NOF(
          name="NOF",
          MM=0.0490045032,
          Hf=-1326408.712577255,
          H0=218760.9362398352,
          Tlimit=1000,
          alow={47550.2426,-725.3904170000001,7.21399636,-0.002532427181,
              6.3777439e-006,-5.51830588e-009,1.681935713e-012},
          blow={-5609.72252,-12.89663616},
          ahigh={1889069.274,-6731.02266,14.19018767,-0.00369312462,9.93857514e-007,-1.080748188e-010,
              4.21035443e-015},
          bhigh={32099.0078,-63.70266962},
          R=169.667509250456);

        constant IdealGases.Common.DataRecord NOF3(
          name="NOF3",
          MM=0.08700130959999999,
          Hf=-2149392.932816267,
          H0=157441.9174030456,
          Tlimit=1000,
          alow={148836.0135,-2241.049812,13.02355027,0.00546397668,-8.641865250000001e-006,
              5.91365903e-009,-1.577009169e-012},
          blow={-13283.42568,-48.77320739},
          ahigh={-278562.5217,-1252.321663,13.90824337,-0.00035666875,7.78501106e-008,
              -8.85041197e-012,4.07598003e-016},
          bhigh={-20256.51446,-51.06881858999999},
          R=95.56720511710552);

        constant IdealGases.Common.DataRecord NO2(
          name="NO2",
          MM=0.0460055,
          Hf=743237.6346306421,
          H0=221890.3174620426,
          Tlimit=1000,
          alow={-56420.3878,963.308572,-2.434510974,0.01927760886,-1.874559328e-005,
              9.145497730000001e-009,-1.777647635e-012},
          blow={-1547.925037,40.6785121},
          ahigh={721300.157,-3832.6152,11.13963285,-0.002238062246,6.54772343e-007,-7.6113359e-011,
              3.32836105e-015},
          bhigh={25024.97403,-43.0513004},
          R=180.7277825477389);

        constant IdealGases.Common.DataRecord NO2minus(
          name="NO2minus",
          MM=0.0460060486,
          Hf=-4348028.07646471,
          H0=221210.2388641132,
          Tlimit=1000,
          alow={-12820.67858,699.013818,-2.812596273,0.02412894252,-2.831606689e-005,
              1.670509365e-008,-3.98333013e-012},
          blow={-28099.15579,40.6327151},
          ahigh={132571.0335,-1557.032129,8.12672192,-0.000272862678,-4.7075418e-008,
              2.826729008e-011,-2.353985481e-015},
          bhigh={-17157.95217,-22.28576043},
          R=180.7256274558646);

        constant IdealGases.Common.DataRecord NO2CL(
          name="NO2CL",
          MM=0.0814585,
          Hf=153452.3714529484,
          H0=149828.9190201145,
          Tlimit=1000,
          alow={8508.370340000001,-180.5383762,3.78538856,0.01414934934,-1.423946765e-005,
              7.02822618e-009,-1.374688214e-012},
          blow={915.6246469999999,6.958904458},
          ahigh={-108677.3327,-1452.231167,11.05656962,-0.000400009928,
              9.101543039999999e-008,-1.036656913e-011,4.78166481e-016},
          bhigh={6294.26732,-35.21239681},
          R=102.0700356623311);

        constant IdealGases.Common.DataRecord NO2F(
          name="NO2F",
          MM=0.06500390319999999,
          Hf=-1676822.385028719,
          H0=174552.3028838675,
          Tlimit=1000,
          alow={56678.5695,-653.825195,4.47277152,0.01368870672,-1.460533236e-005,
              7.779227940000001e-009,-1.689355106e-012},
          blow={-11021.79443,0.329207431},
          ahigh={-100857.7842,-1704.722752,11.22954945,-0.000468521597,
              1.047692566e-007,-1.189150595e-011,5.470307120000001e-016},
          bhigh={-6891.71918,-38.49788492},
          R=127.9072731127937);

        constant IdealGases.Common.DataRecord NO3(
          name="NO3",
          MM=0.0620049,
          Hf=1147135.145770738,
          H0=176742.7090439627,
          Tlimit=1000,
          alow={34053.9841,226.6670652,-3.79308163,0.041707327,-5.709913270000001e-005,
              3.83415811e-008,-1.021969284e-011},
          blow={7088.112200000001,42.73091713},
          ahigh={-394387.271,-824.426353,10.61325843,-0.0002448749816,5.40606032e-008,
              -6.19546675e-012,2.870000149e-016},
          bhigh={8982.01173,-34.44666597},
          R=134.0937893618085);

        constant IdealGases.Common.DataRecord NO3minus(
          name="NO3minus",
          MM=0.0620054486,
          Hf=-5012132.611197655,
          H0=173744.4892867044,
          Tlimit=1000,
          alow={92048.1361,-391.117115,-0.2354356764,0.02836042108,-3.46132408e-005,
              2.08178746e-008,-5.02160127e-012},
          blow={-35764.115,22.99942308},
          ahigh={-311000.5758,-1369.087552,11.01342913,-0.000403687882,
              8.90208647e-008,-1.01973348e-011,4.72333079e-016},
          bhigh={-33643.2109,-38.78432657},
          R=134.0926029523154);

        constant IdealGases.Common.DataRecord NO3F(
          name="NO3F",
          MM=0.0810033032,
          Hf=185177.6335955643,
          H0=178315.6418243448,
          Tlimit=1000,
          alow={64728.3203,-821.3134309999999,6.19491744,0.01805438628,-1.99669324e-005,
              1.124482018e-008,-2.680013077e-012},
          blow={4206.66179,-7.016104301},
          ahigh={-341179.33,-2353.908798,16.28114887,-0.001910415273,4.69087356e-007,
              -5.68604014e-011,2.720906921e-015},
          bhigh={9760.583979999999,-65.58153684},
          R=102.6436166371052);

        constant IdealGases.Common.DataRecord N2(
          name="N2",
          MM=0.0280134,
          Hf=0,
          H0=309498.4543111511,
          Tlimit=1000,
          alow={22103.71497,-381.846182,6.08273836,-0.00853091441,1.384646189e-005,-9.62579362e-009,
              2.519705809e-012},
          blow={710.846086,-10.76003744},
          ahigh={587712.406,-2239.249073,6.06694922,-0.00061396855,1.491806679e-007,-1.923105485e-011,
              1.061954386e-015},
          bhigh={12832.10415,-15.86640027},
          R=296.8033869505308);

        constant IdealGases.Common.DataRecord N2plus(
          name="N2plus",
          MM=0.0280128514,
          Hf=53886282.4938985,
          H0=309540.07059774,
          Tlimit=1000,
          alow={-34740.4747,269.6222703,3.16491637,-0.002132239781,
              6.730476399999999e-006,-5.63730497e-009,1.621756e-012},
          blow={179000.4424,6.832974166},
          ahigh={-2845599.002,7058.89303,-2.884886385,0.003068677059,-4.36165231e-007,
              2.102514545e-011,5.41199647e-016},
          bhigh={134038.8483,50.90897022},
          R=296.809199509051);

        constant IdealGases.Common.DataRecord N2minus(
          name="N2minus",
          MM=0.0280139486,
          Hf=5289624.969184102,
          H0=309641.5333609915,
          Tlimit=1000,
          alow={-81462.2711,906.360079,-0.1520054079,0.00602319084,-2.897138445e-006,
              -4.12910668e-011,3.20698977e-013},
          blow={12188.08548,26.38068855},
          ahigh={216963.7706,-1275.098516,5.3910957,-0.000319890751,
              7.311051349999999e-008,-8.202017370000001e-012,3.7400447e-016},
          bhigh={24249.64308,-9.014934294},
          R=296.7975746196665);

        constant IdealGases.Common.DataRecord NCN(
          name="NCN",
          MM=0.0400241,
          Hf=12503880.73685604,
          H0=254351.178415005,
          Tlimit=1000,
          alow={-56346.80699999999,732.380458,-0.782140184,0.01838552441,-1.950836491e-005,
              1.035712021e-008,-2.208158483e-012},
          blow={55397.897,29.05308985},
          ahigh={-164188.0975,-776.784075,7.99998187,-0.0001659081508,
              2.983403318e-008,-3.120157047e-012,1.99269872e-016},
          bhigh={61844.24479999999,-21.4910882},
          R=207.7366386751982);

        constant IdealGases.Common.DataRecord N2D2_cis(
          name="N2D2_cis",
          MM=0.032041604,
          Hf=6331060.392607061,
          H0=321707.8957720095,
          Tlimit=1000,
          alow={-27437.33656,714.980883,-2.22324762,0.02088722282,-1.821711897e-005,
              8.84407994e-009,-1.918010649e-012},
          blow={20111.15649,36.37100195},
          ahigh={879807.471,-5299.36204,13.55007485,-0.001316635227,2.755816197e-007,
              -3.036294387e-011,1.365324117e-015},
          bhigh={53563.11889999999,-62.71215875},
          R=259.4898807188304);

        constant IdealGases.Common.DataRecord N2F2(
          name="N2F2",
          MM=0.06601020640000001,
          Hf=944907.6044700869,
          H0=194951.0038193124,
          Tlimit=1000,
          alow={15438.9315,-218.363513,3.89028425,0.0167401774,-2.05639309e-005,
              1.25869211e-008,-3.11049829e-012},
          blow={7052.0387,5.265866442},
          ahigh={-182488.386,-953.402996,10.6979548,-0.00027599687,6.0554397e-008,-6.91121508e-012,
              3.19258723e-016},
          bhigh={9283.46696,-32.46968772},
          R=125.9573701317801);

        constant IdealGases.Common.DataRecord N2F4(
          name="N2F4",
          MM=0.1040070128,
          Hf=-211524.1982990593,
          H0=171253.5580100807,
          Tlimit=1000,
          alow={116291.4512,-1538.660418,9.054033049999999,0.02862113563,-4.33228699e-005,
              3.067642499e-008,-8.45547411e-012},
          blow={2865.277526,-24.76493006},
          ahigh={-518859.471,-670.225651,16.50109262,-0.0002006404436,4.43675251e-008,
              -5.08980888e-012,2.359374159e-016},
          bhigh={-5281.4889,-60.40513435},
          R=79.94145563999894);

        constant IdealGases.Common.DataRecord N2H2(
          name="N2H2",
          MM=0.03002928,
          Hf=7055072.782297812,
          H0=332907.1159881289,
          Tlimit=1000,
          alow={-150400.5163,2346.687716,-9.40543029,0.032842998,-3.121920401e-005,
              1.72128319e-008,-4.014537220000001e-012},
          blow={13193.84041,78.32382629999999},
          ahigh={6217567.87,-17539.52096,20.22730509,-0.000975729766,-4.20841674e-007,
              1.117921171e-010,-7.627102210000001e-015},
          bhigh={137415.2574,-119.9559168},
          R=276.8788329257312);

        constant IdealGases.Common.DataRecord NH2NO2(
          name="NH2NO2",
          MM=0.06202808,
          Hf=-419164.9975301508,
          H0=196102.3620270045,
          Tlimit=1000,
          alow={-45730.3506,1201.365987,-8.10598411,0.054027152,-6.43807445e-005,
              4.02509792e-008,-1.02515419e-011},
          blow={-9615.78516,68.67353357},
          ahigh={1654040.575,-8125.220880000001,20.21742772,-0.001244291821,
              2.122804183e-007,-1.948359653e-011,7.43935136e-016},
          bhigh={42308.2258,-101.6190179},
          R=134.0436782824811);

        constant IdealGases.Common.DataRecord N2H4(
          name="N2H4",
          MM=0.03204516,
          Hf=2970183.328777263,
          H0=357286.5293854048,
          Tlimit=1000,
          alow={-166075.6354,3035.416736,-17.36889823,0.0715983402,-8.8667993e-005,
              5.79897028e-008,-1.530037218e-011},
          blow={-3731.92723,119.0002218},
          ahigh={3293486.7,-11998.50628,21.04406814,-0.001399381724,1.933173351e-007,
              -1.318016127e-011,3.16640017e-016},
          bhigh={83484.337,-115.5751024},
          R=259.4610855430274);

        constant IdealGases.Common.DataRecord N2O(
          name="N2O",
          MM=0.0440128,
          Hf=1854006.107314236,
          H0=217685.1961247637,
          Tlimit=1000,
          alow={42882.2597,-644.011844,6.03435143,0.0002265394436,3.47278285e-006,-3.62774864e-009,
              1.137969552e-012},
          blow={11794.05506,-10.0312857},
          ahigh={343844.804,-2404.557558,9.125636220000001,-0.000540166793,
              1.315124031e-007,-1.4142151e-011,6.38106687e-016},
          bhigh={21986.32638,-31.47805016},
          R=188.9103169986913);

        constant IdealGases.Common.DataRecord N2Oplus(
          name="N2Oplus",
          MM=0.04401225139999999,
          Hf=30286033.19756553,
          H0=241373.8598248578,
          Tlimit=1000,
          alow={-56241.4708,669.621161,0.0878145619,0.01524476027,-1.527290811e-005,
              7.827237389999999e-009,-1.646739623e-012},
          blow={155729.5192,25.62354785},
          ahigh={-29835.53254,-1179.455967,8.30018669,-0.0002887267217,
              5.70510501e-008,-5.95888512e-012,2.835725557e-016},
          bhigh={164602.1769,-22.87356617},
          R=188.9126717112227);

        constant IdealGases.Common.DataRecord N2O3(
          name="N2O3",
          MM=0.0760116,
          Hf=1139702.295439117,
          H0=225240.029153445,
          Tlimit=1000,
          alow={-92044.44170000001,929.552015,3.20366481,0.01356473078,-6.26296607e-006,
              -1.402915559e-009,1.43162093e-012},
          blow={3313.62208,18.44430953},
          ahigh={778388.186,-4483.02466,16.66668024,-0.002062143878,
              5.309541710000001e-007,-6.19045122e-011,2.692956658e-015},
          bhigh={33609.1245,-67.39212388},
          R=109.384251877345);

        constant IdealGases.Common.DataRecord N2O4(
          name="N2O4",
          MM=0.092011,
          Hf=120756.4204279923,
          H0=181948.1475041028,
          Tlimit=1000,
          alow={-38047.5144,561.2828890000001,-0.2083648324,0.0388708782,-4.42241226e-005,
              2.49881231e-008,-5.67910238e-012},
          blow={-3310.79473,29.6392484},
          ahigh={-458284.3760000001,-1604.749805,16.74102133,-0.0005091385080000001,
              1.14363467e-007,-1.316288176e-011,5.976316620000001e-016},
          bhigh={4306.90052,-65.69450380000001},
          R=90.36389127386944);

        constant IdealGases.Common.DataRecord N2O5(
          name="N2O5",
          MM=0.1080104,
          Hf=123136.2905794257,
          H0=192550.2081281062,
          Tlimit=1000,
          alow={40078.2817,-876.9675120000001,10.55932981,0.01394613859,-8.884346920000001e-006,
              8.500431150000001e-010,7.79155091e-013},
          blow={3038.962037,-23.8683186},
          ahigh={-53255.7896,-3109.277389,20.36088958,-0.000995990114,
              2.401398635e-007,-3.057161911e-011,1.495915511e-015},
          bhigh={13369.57281,-82.98623341000001},
          R=76.97843911327057);

        constant IdealGases.Common.DataRecord N3(
          name="N3",
          MM=0.0420201,
          Hf=10375986.73016009,
          H0=227769.7102101138,
          Tlimit=1000,
          alow={33374.0679,-296.5683604,3.31427915,0.00672168536,-4.18112639e-006,
              8.61844236e-010,6.88335253e-014},
          blow={52988.4062,5.312776486},
          ahigh={252926.4658,-2362.876591,9.135267130000001,-0.000621287085,
              1.324094351e-007,-1.47898964e-011,6.721230470000001e-016},
          bhigh={64126.95389999999,-31.35825973},
          R=197.8689246336872);

        constant IdealGases.Common.DataRecord N3H(
          name="N3H",
          MM=0.04302804,
          Hf=6832753.711300817,
          H0=254419.745821562,
          Tlimit=1000,
          alow={3242.57606,66.9266489,1.766142217,0.01487411419,-1.53908644e-005,
              9.172303550000001e-009,-2.337205474e-012},
          blow={33920.697,15.13752057},
          ahigh={1170469.241,-5102.45199,12.7828891,-0.000840948716,1.592142834e-007,
              -1.512289051e-011,6.102906629999999e-016},
          bhigh={64283.4447,-55.13119107999999},
          R=193.2338075357372);

        constant IdealGases.Common.DataRecord Na(
          name="Na",
          MM=0.02298977,
          Hf=4675992.843773557,
          H0=269573.2928167615,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={12183.82949,4.24402818},
          ahigh={952572.3380000001,-2623.807254,5.16259662,-0.001210218586,
              2.306301844e-007,-1.249597843e-011,7.226771190000001e-016},
          bhigh={29129.63564,-15.19717061},
          R=361.6596425279592);

        constant IdealGases.Common.DataRecord Naplus(
          name="Naplus",
          MM=0.0229892214,
          Hf=26514291.9542286,
          H0=269579.7257405159,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={72565.3707,3.55084508},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={72565.3707,3.55084508},
          R=361.6682729411619);

        constant IdealGases.Common.DataRecord Naminus(
          name="Naminus",
          MM=0.0229903186,
          Hf=2107557.917879398,
          H0=269566.8602000148,
          Tlimit=1000,
          alow={0,0,2.500000001,0,0,0,0},
          blow={5082.19967,3.55091679},
          ahigh={0,0,2.500000001,0,0,0,0},
          bhigh={5082.19967,3.55091679},
          R=361.6510125266381);

        constant IdealGases.Common.DataRecord NaALF4(
          name="NaALF4",
          MM=0.1259649208,
          Hf=-14748880.35653812,
          H0=165194.1418916051,
          Tlimit=1000,
          alow={131535.9536,-2394.685695,19.09539612,0.001044339733,-6.949754129999999e-006,
              6.769098139999999e-009,-2.176199098e-012},
          blow={-215051.2366,-75.0510213},
          ahigh={-357117.793,-249.6543879,16.18634511,-7.449049300000001e-005,
              1.644510872e-008,-1.883696066e-012,8.719877450000001e-017},
          bhigh={-227953.3538,-53.7066514},
          R=66.00624957484196);

        constant IdealGases.Common.DataRecord NaBO2(
          name="NaBO2",
          MM=0.06579957,
          Hf=-9626952.425372992,
          H0=207944.6719788594,
          Tlimit=1000,
          alow={50468.6736,-869.99706,8.942208239999999,0.001092655824,
              1.440608828e-006,-2.254633535e-009,8.12331285e-013},
          blow={-73783.1836,-19.51815135},
          ahigh={85958.14049999999,-1691.902222,11.18847517,-0.000456420231,
              9.80450516e-008,-1.101655008e-011,5.02917276e-016},
          bhigh={-69492.9206,-34.1635313},
          R=126.360582599552);

        constant IdealGases.Common.DataRecord NaBr(
          name="NaBr",
          MM=0.10289377,
          Hf=-1418247.985276465,
          H0=95449.10250640052,
          Tlimit=1000,
          alow={-14668.27136,76.22282870000001,3.92116347,0.001793780908,-2.457391648e-006,
              1.739334522e-009,-4.79670138e-013},
          blow={-19264.91755,6.40438286},
          ahigh={897851.3019999999,-2697.899721,7.54537716,-0.001566692184,
              4.47039274e-007,-4.83281021e-011,1.4239613e-015},
          bhigh={-1750.862247,-18.56478949},
          R=80.80636952072025);

        constant IdealGases.Common.DataRecord NaCN(
          name="NaCN",
          MM=0.04900717,
          Hf=1923514.457170247,
          H0=247432.6103710947,
          Tlimit=1000,
          alow={24461.6541,-753.601997,10.44966241,-0.01168769048,1.849279385e-005,-1.319387974e-008,
              3.58976656e-012},
          blow={12978.20493,-29.88519681},
          ahigh={366557.029,-1782.094358,8.69962263,-0.0004463297,9.36222931e-008,-1.03307132e-011,
              4.650466810000001e-016},
          bhigh={20109.26347,-24.19276094},
          R=169.6582765338215);

        constant IdealGases.Common.DataRecord NaCL(
          name="NaCL",
          MM=0.05844277000000001,
          Hf=-3106370.283270283,
          H0=164521.9075002776,
          Tlimit=1000,
          alow={43623.78350000001,-758.303446,8.259173000000001,-0.009640915140000001,
              1.358854616e-005,-9.667032249999999e-009,2.74626129e-012},
          blow={-19504.09477,-19.36687551},
          ahigh={331449.8760000001,-896.831565,5.27728738,-0.0001475674008,-1.491128988e-008,
              2.465673596e-011,-2.730355213e-015},
          bhigh={-17362.77667,-3.99828856},
          R=142.2669048712099);

        constant IdealGases.Common.DataRecord NaF(
          name="NaF",
          MM=0.0419881732,
          Hf=-7029524.423320232,
          H0=219707.3675022375,
          Tlimit=1000,
          alow={39598.8744,-653.4626069999999,6.9411732,-0.00530781493,
              6.97972066e-006,-4.82042573e-009,1.364849175e-012},
          blow={-33529.4089,-14.03212229},
          ahigh={-1092926.912,3293.30364,0.413591984,0.00263499447,-8.384295630000001e-007,
              1.417053025e-010,-8.600270160000001e-015},
          bhigh={-57728.8463,29.09489906},
          R=198.0193794189646);

        constant IdealGases.Common.DataRecord NaH(
          name="NaH",
          MM=0.02399771,
          Hf=5868689.345775076,
          H0=363830.757184748,
          Tlimit=1000,
          alow={-32222.0641,623.762201,-0.9216277509999999,0.01360765851,-1.659249878e-005,
              1.033284544e-008,-2.589726392e-012},
          blow={13073.81654,26.41418597},
          ahigh={-4756184.75,14520.47626,-13.27563485,0.01055828277,-2.990041189e-006,
              3.90532288e-010,-1.923931194e-014},
          bhigh={-76329.2227,122.207006},
          R=346.4693922878474);

        constant IdealGases.Common.DataRecord NaI(
          name="NaI",
          MM=0.14989424,
          Hf=-604678.8722501947,
          H0=66394.27905968903,
          Tlimit=1000,
          alow={12288.68506,-285.71928,5.961057,-0.00379253258,5.56688131e-006,-4.045013680000001e-009,
              1.172998933e-012},
          blow={-10882.50556,-3.99073992},
          ahigh={2281549.408,-7093.15663,13.04994968,-0.00501349233,1.581735155e-006,
              -2.285837754e-010,1.19588995e-014},
          bhigh={32538.9362,-56.4002332},
          R=55.46892262170982);

        constant IdealGases.Common.DataRecord NaLi(
          name="NaLi",
          MM=0.02993077,
          Hf=5967047.289461648,
          H0=333874.4709875489,
          Tlimit=1000,
          alow={-6569.99276,-5.25394043,4.32938426,0.001097919189,-1.965726597e-006,
              2.086472026e-009,-8.19598811e-013},
          blow={20162.24293,1.413253322},
          ahigh={10916648.6,-34800.1064,46.14311919999999,-0.02260951051,
              5.68532437e-006,-6.458143299999999e-010,2.696508992e-014},
          bhigh={239443.1755,-296.1780126},
          R=277.7901136522716);

        constant IdealGases.Common.DataRecord NaNO2(
          name="NaNO2",
          MM=0.06899527000000001,
          Hf=-2410205.496695643,
          H0=214612.1176132798,
          Tlimit=1000,
          alow={-69344.60610000001,1115.43267,-1.816284973,0.02916366016,-3.50578852e-005,
              2.128602855e-008,-5.226211990000001e-012},
          blow={-27072.75053,41.21853253},
          ahigh={-176555.7495,-863.521295,10.6410594,-0.0002559465044,5.65446563e-008,
              -6.48671032e-012,3.008171243e-016},
          bhigh={-18684.35672,-29.21304474},
          R=120.5078551036904);

        constant IdealGases.Common.DataRecord NaNO3(
          name="NaNO3",
          MM=0.08499466999999999,
          Hf=-3359371.958265148,
          H0=181202.997787979,
          Tlimit=1000,
          alow={-20438.52507,691.709341,-2.397485012,0.04100386430000001,-5.141702579999999e-005,
              3.22862247e-008,-8.1646916e-012},
          blow={-39064.0132,41.74749459},
          ahigh={-322559.219,-1396.782195,14.03092409,-0.000409816177,
              9.023845720000001e-008,-1.032543966e-011,4.77867155e-016},
          bhigh={-31388.89875,-49.59121431},
          R=97.82345175291582);

        constant IdealGases.Common.DataRecord NaO(
          name="NaO",
          MM=0.03898917,
          Hf=2731664.126217614,
          H0=250149.387637644,
          Tlimit=1000,
          alow={18577.48013,-337.149732,5.64456002,-0.003136926368,6.33077539e-006,-5.42946247e-009,
              1.68718377e-012},
          blow={13203.32678,-4.99613115},
          ahigh={256974.4011,-2269.334161,9.22439762,-0.0036512691,1.446811119e-006,-2.443068386e-010,
              1.428508328e-014},
          bhigh={24132.39357,-29.89159486},
          R=213.2508078525396);

        constant IdealGases.Common.DataRecord NaOH(
          name="NaOH",
          MM=0.03999711,
          Hf=-4775345.0186776,
          H0=284962.3635307651,
          Tlimit=1000,
          alow={34420.3674,-792.321818,8.9979323,-0.00407984452,3.065783937e-006,-5.11918934e-010,
              -1.541016409e-013},
          blow={-20869.51091,-25.1059009},
          ahigh={875378.776,-2342.514649,7.97846989,0.0001016451512,-6.26853195e-008,
              1.022715136e-011,-5.71328641e-016},
          bhigh={-9509.90171,-22.02310401},
          R=207.87681910018);

        constant IdealGases.Common.DataRecord NaOHplus(
          name="NaOHplus",
          MM=0.0399965614,
          Hf=17098029.10707219,
          H0=292396.9109004455,
          Tlimit=1000,
          alow={22780.39363,-667.219422,8.921593120000001,-0.004481263270000001,
              3.95188392e-006,-1.173341234e-009,2.041806631e-014},
          blow={83633.8219,-22.58912262},
          ahigh={881541.365,-2363.159755,8.053203930000001,7.27127974e-005,-5.89741789e-008,
              1.007487881e-011,-5.47440621e-016},
          bhigh={95844.41650000001,-20.79484012},
          R=207.8796703758639);

        constant IdealGases.Common.DataRecord Na2(
          name="Na2",
          MM=0.04597954,
          Hf=3095705.720413906,
          H0=226255.5258273571,
          Tlimit=1000,
          alow={6848.62868,-153.0836599,5.32523039,-0.001944906088,2.657477888e-006,-9.096841120000001e-010,
              -2.44875673e-013},
          blow={16491.70574,-2.653564394},
          ahigh={19299407.58,-62692.8012,82.67682110000001,-0.0456513781,
              1.259515667e-005,-1.560445735e-009,7.02467717e-014},
          bhigh={409082.08,-550.997089},
          R=180.8298212639796);

        constant IdealGases.Common.DataRecord Na2Br2(
          name="Na2Br2",
          MM=0.20578754,
          Hf=-2336625.691720694,
          H0=95202.78535814169,
          Tlimit=1000,
          alow={-13849.46731,-157.3241177,10.63192589,-0.001383418339,
              1.697156537e-006,-1.092992547e-009,2.87098802e-013},
          blow={-60103.9182,-18.61473856},
          ahigh={-30217.30975,-2.65923278,10.00225819,-9.935490630000001e-007,
              2.358676253e-010,-2.857194816e-014,1.381909879e-018},
          bhigh={-60900.3992,-14.94517863},
          R=40.40318476036013);

        constant IdealGases.Common.DataRecord Na2CL2(
          name="Na2CL2",
          MM=0.11688554,
          Hf=-4828670.706402178,
          H0=159979.8144406913,
          Tlimit=1000,
          alow={-10829.5525,-313.9528641,11.24411332,-0.002697665795,3.28635948e-006,
              -2.105377639e-009,5.508056609999999e-013},
          blow={-69386.7543,-25.11011582},
          ahigh={-44121.0523,-5.39349128,10.00453407,-1.981155641e-006,4.6801882e-010,
              -5.64894068e-014,2.724721177e-018},
          bhigh={-70980.6341,-17.87230397},
          R=71.13345243560495);

        constant IdealGases.Common.DataRecord Na2F2(
          name="Na2F2",
          MM=0.0839763464,
          Hf=-9932115.551052362,
          H0=198655.1060525777,
          Tlimit=1000,
          alow={23515.80802,-1000.737062,13.75845076,-0.007838346979999999,
              9.2762887e-006,-5.81361297e-009,1.49535482e-012},
          blow={-98358.31880000001,-43.8114809},
          ahigh={-90307.50689999999,-18.93938035,10.01535518,-6.53967545e-006,
              1.516333603e-009,-1.804877459e-013,8.61347492e-018},
          bhigh={-103489.6664,-21.78860202},
          R=99.00968970948229);

        constant IdealGases.Common.DataRecord Na2I2(
          name="Na2I2",
          MM=0.29978848,
          Hf=-1190405.755417953,
          H0=67534.50966494776,
          Tlimit=1000,
          alow={-13050.63983,-89.9250668,10.36367976,-0.0008000070190000001,
              9.84877798e-007,-6.35937312e-010,1.673774775e-013},
          blow={-45514.6549,-14.87509548},
          ahigh={-22312.36397,-1.515570558,10.00129413,-5.71503538e-007,
              1.360287207e-010,-1.650916036e-014,7.996149680000001e-019},
          bhigh={-45969.2175,-12.76523965},
          R=27.73446131085491);

        constant IdealGases.Common.DataRecord Na2O(
          name="Na2O",
          MM=0.06197894,
          Hf=-267184.7888976482,
          H0=232501.0721383747,
          Tlimit=1000,
          alow={39011.49290000001,-726.620789,9.62371078,-0.00355641864,
              3.47070435e-006,-1.835177736e-009,4.06213471e-013},
          blow={-459.307325,-23.49565832},
          ahigh={-66005.2516,-25.69021634,7.51938542,-7.81163524e-006,1.73501589e-009,
              -1.996634558e-013,9.27643355e-018},
          bhigh={-4297.33965,-10.63530214},
          R=134.1499548072297);

        constant IdealGases.Common.DataRecord Na2Oplus(
          name="Na2Oplus",
          MM=0.0619783914,
          Hf=8403476.699461419,
          H0=235671.9442060253,
          Tlimit=1000,
          alow={26479.69755,-596.906216,9.294129529999999,-0.003080702005,
              3.080460653e-006,-1.669452593e-009,3.78978414e-013},
          blow={63473.10249999999,-20.25274459},
          ahigh={-57409.0933,-19.89178143,7.51529526,-6.25833323e-006,
              1.407321045e-009,-1.635833952e-013,7.66244513e-018},
          bhigh={60329.77469999999,-9.42652674},
          R=134.1511422318069);

        constant IdealGases.Common.DataRecord Na2O2(
          name="Na2O2",
          MM=0.07797834000000001,
          Hf=-1589291.911061456,
          H0=199609.9814384353,
          Tlimit=1000,
          alow={73824.5892,-1355.12534,12.55579861,-0.002112046045,4.92035352e-008,
              1.003950603e-009,-4.44773207e-013},
          blow={-10588.58918,-40.2181178},
          ahigh={-173229.5239,-113.7561118,10.08529143,-3.42209894e-005,
              7.577721890000001e-009,-8.70125673e-013,4.03606139e-017},
          bhigh={-17803.00574,-23.8678919},
          R=106.6254039262698);

        constant IdealGases.Common.DataRecord Na2O2H2(
          name="Na2O2H2",
          MM=0.07999422000000001,
          Hf=-7800563.59071943,
          H0=241844.2357460327,
          Tlimit=1000,
          alow={108941.4289,-2634.822704,23.06608858,-0.01689310193,1.67348319e-005,-7.821166009999999e-009,
              1.47503447e-012},
          blow={-65931.37330000001,-98.0298758},
          ahigh={1675713.839,-4704.921170000001,16.97343934,0.0001961487616,-1.236951748e-007,
              2.025311778e-011,-1.132991623e-015},
          bhigh={-48562.4557,-68.1348098},
          R=103.93840955009);

        constant IdealGases.Common.DataRecord Na2SO4(
          name="Na2SO4",
          MM=0.14204214,
          Hf=-7322702.276944011,
          H0=147644.1991087997,
          Tlimit=1000,
          alow={83442.8321,-1210.880769,8.742353,0.0360079663,-5.11764596e-005,
              3.48156904e-008,-9.321931219999999e-012},
          blow={-121738.7045,-20.61505785},
          ahigh={-575448.311,-981.7060339999999,19.73310397,-0.000293639552,
              6.498708169999999e-008,-7.462479400000001e-012,3.46249166e-016},
          bhigh={-127059.7762,-76.67871596000001},
          R=58.53524876490879);

        constant IdealGases.Common.DataRecord Na3CL3(
          name="Na3CL3",
          MM=0.17532831,
          Hf=-5205517.061106674,
          H0=168125.4841274635,
          Tlimit=1000,
          alow={-12542.1667,-550.216046,18.16110649,-0.00465651526,5.64643822e-006,-3.60476032e-009,
              9.405556239999999e-013},
          blow={-111927.0172,-52.9010496},
          ahigh={-71602.9797,-9.57349381,16.00799614,-3.47835697e-006,
              8.190943689999999e-010,-9.86321003e-014,4.74900535e-018},
          bhigh={-114725.2948,-40.31342160000001},
          R=47.42230162373664);

        constant IdealGases.Common.DataRecord Na3F3(
          name="Na3F3",
          MM=0.1259645196,
          Hf=-10701548.26359533,
          H0=203249.8840252791,
          Tlimit=1000,
          alow={52470.3035,-1775.597273,22.50927609,-0.01333033615,1.555790239e-005,-9.64601146e-009,
              2.460254271e-012},
          blow={-158073.6389,-85.80122369999999},
          ahigh={-155399.5698,-35.5197019,16.02841159,-1.198056094e-005,
              2.75724873e-009,-3.26330097e-013,1.550483212e-017},
          bhigh={-167214.1773,-47.5378068},
          R=66.00645980632153);

        constant IdealGases.Common.DataRecord Nb(
          name="Nb",
          MM=0.09290638,
          Hf=7783244.799765098,
          H0=89919.54050948923,
          Tlimit=1000,
          alow={78896.60669999999,-1212.813914,10.34579819,-0.01676630056,
              1.979119979e-005,-1.218224409e-008,3.058098336e-012},
          blow={91653.1514,-35.9474285},
          ahigh={-1096553.196,2546.650713,2.236054882,-0.001280029198,
              8.464237990000001e-007,-1.486269508e-010,8.714309406000001e-015},
          bhigh={68791.24550000001,13.9816903},
          R=89.49301436564421);

        constant IdealGases.Common.DataRecord Nbplus(
          name="Nbplus",
          MM=0.0929058314,
          Hf=15000185.17675092,
          H0=92449.25609696444,
          Tlimit=1000,
          alow={131444.7859,-2000.135035,15.05024212,-0.02996583942,3.72986863e-005,-2.269869569e-008,
              5.449089902e-012},
          blow={176005.4029,-62.2459552},
          ahigh={-1077639.646,2159.046421,2.310604767,-0.0005363991760000001,
              5.05791509e-007,-1.032401533e-010,6.629241279999999e-015},
          bhigh={151794.5546,12.10678502},
          R=89.49354281328783);

        constant IdealGases.Common.DataRecord Nbminus(
          name="Nbminus",
          MM=0.09290692859999999,
          Hf=6792324.507001301,
          H0=93144.91535134014,
          Tlimit=1000,
          alow={-72209.2485,525.950125,3.47046839,-0.00495050553,7.40185903e-006,-5.01630207e-009,
              1.314100719e-012},
          blow={71788.28870000001,5.15551007},
          ahigh={111745.8019,134.0072834,2.391474129,4.52481343e-005,-1.025345e-008,
              1.195577988e-012,-5.606330449999999e-017},
          bhigh={74739.9675,9.67531561},
          R=89.49248592424141);

        constant IdealGases.Common.DataRecord NbCL5(
          name="NbCL5",
          MM=0.27017138,
          Hf=-2603273.522162118,
          H0=97505.37973341218,
          Tlimit=1000,
          alow={73482.7797,-1919.172996,22.90799567,-0.01404352774,1.638106985e-005,-1.018941843e-008,
              2.612266639e-012},
          blow={-79741.1881,-84.39637087},
          ahigh={-156381.6638,-44.5052128,16.0354463,-1.489949737e-005,
              3.42077792e-009,-4.04112442e-013,1.917266128e-017},
          bhigh={-89628.15120000001,-43.74582607},
          R=30.77480671712896);

        constant IdealGases.Common.DataRecord NbO(
          name="NbO",
          MM=0.10890578,
          Hf=1937350.855023489,
          H0=80621.12038497864,
          Tlimit=1000,
          alow={-6797.834360000001,283.9767438,0.56457084,0.01134928619,-1.549821141e-005,
              1.047624988e-008,-2.762937835e-012},
          blow={23179.93893,23.65708974},
          ahigh={553225.878,-1287.669306,4.98006604,0.0001116014163,4.03183868e-008,
              1.04877371e-011,-1.893595022e-015},
          bhigh={32684.5779,-1.868958549},
          R=76.34555300921586);

        constant IdealGases.Common.DataRecord NbOCL3(
          name="NbOCL3",
          MM=0.21526478,
          Hf=-3494765.841397743,
          H0=95840.10909727082,
          Tlimit=1000,
          alow={-110848.2359,117.3066983,11.65558433,0.001287422064,-1.659778281e-006,
              1.102107826e-009,-2.949903264e-013},
          blow={-95040.2392,-23.86450092},
          ahigh={-151555.1427,53.0554523,12.28915282,-0.0001527366571,
              6.778576440000001e-008,-9.36517065e-012,4.67003693e-016},
          bhigh={-94907.68120000001,-27.45263834},
          R=38.62439550027646);

        constant IdealGases.Common.DataRecord NbO2(
          name="NbO2",
          MM=0.12490518,
          Hf=-1611356.326454996,
          H0=85299.52080450147,
          Tlimit=1000,
          alow={17390.46582,38.8102944,0.902429912,0.01909523319,-2.667013583e-005,
              1.813901051e-008,-4.872365880000001e-012},
          blow={-25285.18558,22.89323379},
          ahigh={-685185.99,911.224932,6.33919984,-8.2300803e-005,1.984439605e-007,-3.26117149e-011,
              1.602430854e-015},
          bhigh={-33250.2732,-3.55955655},
          R=66.56627051015819);

        constant IdealGases.Common.DataRecord Ne(
          name="Ne",
          MM=0.0201797,
          Hf=0,
          H0=307111.9986917546,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-745.375,3.35532272},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={-745.375,3.35532272},
          R=412.0215860493466);

        constant IdealGases.Common.DataRecord Neplus(
          name="Neplus",
          MM=0.0201791514,
          Hf=103421888.4942803,
          H0=312412.2454425909,
          Tlimit=1000,
          alow={72815.5148,-869.5697989999999,6.10864697,-0.00584135693,
              5.041044170000001e-006,-2.293759207e-009,4.33906568e-013},
          blow={254599.689,-16.73449355},
          ahigh={-111274.2658,476.569797,2.196650531,0.0001102593151,-2.287564425e-008,
              2.510218183e-012,-1.126646096e-016},
          bhigh={247253.6944,7.46614054},
          R=412.0327874639962);

        constant IdealGases.Common.DataRecord Ni(
          name="Ni",
          MM=0.0586934,
          Hf=7328193.715136625,
          H0=116282.4610603577,
          Tlimit=1000,
          alow={-32358.1055,601.526462,-1.079270657,0.01089505519,-1.369578748e-005,
              8.317725790000001e-009,-2.019206968e-012},
          blow={48138.1081,27.188292},
          ahigh={-493826.221,1092.909991,2.410485014,-1.599071827e-005,-1.047414069e-008,
              4.62479521e-012,-4.448865218e-017},
          bhigh={43360.7217,9.677195599999999},
          R=141.6594029311643);

        constant IdealGases.Common.DataRecord Niplus(
          name="Niplus",
          MM=0.0586928514,
          Hf=19978490.48104008,
          H0=105733.0296956743,
          Tlimit=1000,
          alow={-89693.86030000002,1173.6015,-3.41062041,0.01390739137,-1.501714923e-005,
              7.8963379e-009,-1.648686761e-012},
          blow={134558.95,40.3149516},
          ahigh={-3961999.32,10170.84853,-6.02933129,0.002770858029,-8.9020777e-008,-5.54100058e-011,
              5.235342833e-015},
          bhigh={73403.9512,71.37503100000001},
          R=141.6607270165784);

        constant IdealGases.Common.DataRecord Niminus(
          name="Niminus",
          MM=0.0586939486,
          Hf=5311695.062887626,
          H0=105754.6331105078,
          Tlimit=1000,
          alow={-84376.2475,1135.476552,-3.38061583,0.01423003786,-1.582586302e-005,
              8.608840410000001e-009,-1.875316029e-012},
          blow={31243.0759,39.980613},
          ahigh={-543342.48,1182.64533,2.12644124,3.73045594e-005,6.95360843e-009,-1.945719381e-012,
              1.271571579e-016},
          bhigh={28547.59122,10.43462235},
          R=141.6580788705022);

        constant IdealGases.Common.DataRecord NiCL(
          name="NiCL",
          MM=0.09414640000000001,
          Hf=1933201.906817467,
          H0=100534.0724658617,
          Tlimit=1000,
          alow={-23579.97085,220.549163,2.714260287,0.00445359847,-2.849162229e-006,-1.691898007e-010,
              5.15669926e-013},
          blow={19572.2949,14.23643068},
          ahigh={-3905769.19,9961.53399,-3.83943234,0.002767979391,-7.00595938e-008,-5.74140366e-011,
              5.3076358e-015},
          bhigh={-45053.9705,67.69402548000001},
          R=88.31428498593679);

        constant IdealGases.Common.DataRecord NiCL2(
          name="NiCL2",
          MM=0.1295994,
          Hf=-570457.8879223206,
          H0=109618.9179888179,
          Tlimit=1000,
          alow={71099.7653,-1218.958288,12.08750596,-0.00867440314,1.043608104e-005,-6.298493009999999e-009,
              1.485857653e-012},
          blow={-5006.998710000001,-34.99472036},
          ahigh={158588.9817,-1161.488738,9.608015379999999,-0.0009461224509999999,
              2.608172043e-007,-3.26463725e-011,1.525950893e-015},
          bhigh={-4578.98554,-22.12397347},
          R=64.15517355790227);

        constant IdealGases.Common.DataRecord NiO(
          name="NiO",
          MM=0.0746928,
          Hf=3977143.713985819,
          H0=118707.1444637234,
          Tlimit=1000,
          alow={23206.30462,-190.7136094,3.19017862,0.00529138349,-8.080210429999999e-006,
              5.83981276e-009,-1.639499596e-012},
          blow={35767.1112,7.84126567},
          ahigh={-72340.9194,-80.3555427,4.55922102,2.30515451e-005,
              5.139832819999999e-009,-5.85347491e-013,2.697077329e-017},
          bhigh={34611.4385,1.209414814},
          R=111.3155752629437);

        constant IdealGases.Common.DataRecord NiS(
          name="NiS",
          MM=0.09075839999999999,
          Hf=3938136.85565193,
          H0=101572.1630174177,
          Tlimit=1000,
          alow={-12724.88974,143.2801381,2.471951556,0.00550527112,-3.41835528e-006,-3.099052241e-010,
              6.26815467e-013},
          blow={41177.1608,15.17981835},
          ahigh={-735812.898,1178.231095,4.83786558,-0.000393120139,1.341974852e-007,
              -1.569591708e-011,6.67704506e-016},
          bhigh={32755.6594,3.690652283},
          R=91.61104647062973);

        constant IdealGases.Common.DataRecord O(
          name="O",
          MM=0.0159994,
          Hf=15574021.71331425,
          H0=420353.4507544033,
          Tlimit=1000,
          alow={-7953.611300000001,160.7177787,1.966226438,0.00101367031,-1.110415423e-006,
              6.5175075e-010,-1.584779251e-013},
          blow={28403.62437,8.404241819999999},
          ahigh={261902.0262,-729.872203,3.31717727,-0.000428133436,1.036104594e-007,
              -9.438304329999999e-012,2.725038297e-016},
          bhigh={33924.2806,-0.667958535},
          R=519.6739877745415);

        constant IdealGases.Common.DataRecord Oplus(
          name="Oplus",
          MM=0.0159988514,
          Hf=98056240.96239808,
          H0=387367.0581126842,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={187935.2842,4.39337676},
          ahigh={-216651.3208,666.545615,1.702064364,0.000471499281,-1.427131823e-007,
              2.016595903e-011,-9.107157761999999e-016},
          bhigh={183719.1966,10.05690382},
          R=519.691807375622);

        constant IdealGases.Common.DataRecord Ominus(
          name="Ominus",
          MM=0.0159999486,
          Hf=6365407.448871429,
          H0=410675.8192960695,
          Tlimit=1000,
          alow={-5695.857110000001,109.9287334,2.184719661,0.0005326359799999999,-5.298878440000001e-007,
              2.870216236e-010,-6.52469274e-014},
          blow={10932.87498,6.72986386},
          ahigh={9769.363179999999,7.15960478,2.494961726,1.968240938e-006,-4.30417485e-010,
              4.912083080000001e-014,-2.271600083e-018},
          bhigh={11495.54438,4.83703644},
          R=519.6561693954442);

        constant IdealGases.Common.DataRecord OD(
          name="OD",
          MM=0.018013502,
          Hf=1952535.825626799,
          H0=0,
          Tlimit=1000,
          alow={2.118691536e+004,-2.785982360e+002,5.456210120e+000,-6.148119830e-003,9.117670560e-006,
          -5.527812710e-009,1.239794711e-012},
          blow={4.464878250e+003,-7.616618910e+000},
          ahigh={7.832473160e+005,-2.532992554e+003,5.952124650e+000,-3.743595280e-004,4.959527620e-008,
              3.454454730e-012,-7.380626800e-016},
          bhigh={1.930492973e+004,-1.568898441e+001},
          R=461.5688831633072);

        constant IdealGases.Common.DataRecord ODminus(
          name="ODminus",
          MM=0.0180140506,
          Hf=-8191266.876978795,
          H0=0,
          Tlimit=1000,
          alow={5.606128320e+004,-7.514156150e+002,7.544188470e+000,-1.092083064e-002,1.503688938e-005,
              -9.351665840e-009,2.246466046e-012},
          blow={-1.515707370e+004,-2.106498377e+001},
          ahigh={3.029467029e+005,-1.079684654e+003,4.211417380e+000,6.260830070e-004,-2.411665054e-007,
              4.248425540e-011,-2.387099102e-015},
          bhigh={-1.188935343e+004,-4.724898790e+000},
          R=461.5548265418994);

        constant IdealGases.Common.DataRecord OH(
          name="OH",
          MM=0.01700734,
          Hf=2191889.266634288,
          H0=518194.2620068747,
          Tlimit=1000,
          alow={-1998.85899,93.0013616,3.050854229,0.001529529288,-3.157890998e-006,
              3.31544618e-009,-1.138762683e-012},
          blow={2991.214235,4.67411079},
          ahigh={1017393.379,-2509.957276,5.11654786,0.000130529993,-8.284322259999999e-008,
              2.006475941e-011,-1.556993656e-015},
          bhigh={20196.40206,-11.01282337},
          R=488.8755090449183);

        constant IdealGases.Common.DataRecord OHplus(
          name="OHplus",
          MM=0.0170067914,
          Hf=76393787.19021624,
          H0=505862.7931427441,
          Tlimit=1000,
          alow={60316.3086,-757.35203,7.30775293,-0.00950688167,1.202555795e-005,-6.8290261e-009,
              1.501588659e-012},
          blow={158926.2158,-19.50106996},
          ahigh={504072.91,-1380.052958,4.1254622,0.000833194884,-3.44285629e-007,
              6.792853949999999e-011,-4.36387213e-015},
          bhigh={164383.9235,-3.99705849},
          R=488.8912790451466);

        constant IdealGases.Common.DataRecord OHminus(
          name="OHminus",
          MM=0.0170078886,
          Hf=-8540519.015393833,
          H0=506006.6068400753,
          Tlimit=1000,
          alow={29108.80827,-321.690494,4.85102905,-0.002579035357,2.004980024e-006,-7.956852959999999e-011,
              -2.320495634e-013},
          blow={-16888.86234,-7.1215913},
          ahigh={471133.117,-857.233669,3.16618121,0.001233581296,-3.99924458e-007,
              6.23908167e-011,-3.35434322e-015},
          bhigh={-12248.49139,1.48773626},
          R=488.8597400620322);

        constant IdealGases.Common.DataRecord O2(
          name="O2",
          MM=0.0319988,
          Hf=0,
          H0=271263.4223783392,
          Tlimit=1000,
          alow={-34255.6342,484.700097,1.119010961,0.00429388924,-6.83630052e-007,-2.0233727e-009,
              1.039040018e-012},
          blow={-3391.45487,18.4969947},
          ahigh={-1037939.022,2344.830282,1.819732036,0.001267847582,-2.188067988e-007,
              2.053719572e-011,-8.193467050000001e-016},
          bhigh={-16890.10929,17.38716506},
          R=259.8369938872708);

        constant IdealGases.Common.DataRecord O2plus(
          name="O2plus",
          MM=0.0319982514,
          Hf=36621639.76872811,
          H0=290988.1506837588,
          Tlimit=1000,
          alow={-86072.0545,1051.875934,-0.543238047,0.00657116654,-3.27426375e-006,
              5.940645339999999e-011,3.23878479e-013},
          blow={134554.4668,29.0270975},
          ahigh={73846.5488,-845.955954,4.98516416,-0.000161101089,6.42708399e-008,-1.504939874e-011,
              1.578465409e-015},
          bhigh={144632.1044,-5.81123065},
          R=259.841448711163);

        constant IdealGases.Common.DataRecord O2minus(
          name="O2minus",
          MM=0.0319993486,
          Hf=-1500903.084008404,
          H0=292181.2914654145,
          Tlimit=1000,
          alow={18838.74344,114.9551768,1.518876821,0.00801611138,-9.850571029999999e-006,
              6.04419621e-009,-1.486439845e-012},
          blow={-7101.53876,15.0121038},
          ahigh={-56552.0805,-236.7815862,4.67583367,-2.1972453e-005,1.71150928e-008,
              -1.757645062e-012,8.24817279e-017},
          bhigh={-5960.17775,-2.436885556},
          R=259.8325392161265);

        constant IdealGases.Common.DataRecord O3(
          name="O3",
          MM=0.0479982,
          Hf=2954277.45207112,
          H0=215972.786479493,
          Tlimit=1000,
          alow={-12823.14507,589.8216640000001,-2.547496763,0.02690121526,-3.52825834e-005,
              2.312290922e-008,-6.04489327e-012},
          blow={13483.68701,38.5221858},
          ahigh={-38696624.8,102334.4994,-89.615516,0.0370614497,-4.13763874e-006,-2.725018591e-010,
              5.24818811e-014},
          bhigh={-651791.818,702.9109520000001},
          R=173.2246625915139);

        constant IdealGases.Common.DataRecord P(
          name="P",
          MM=0.030973761,
          Hf=10218326.40860114,
          H0=200086.389250566,
          Tlimit=1000,
          alow={50.4086657,-0.7639418649999999,2.504563992,-1.381689958e-005,
              2.245585515e-008,-1.866399889e-011,6.227063395e-015},
          blow={37324.2191,5.359303481},
          ahigh={1261794.642,-4559.83819,8.91807931,-0.00438140146,1.454286224e-006,-2.030782763e-010,
              1.021022887e-014},
          bhigh={65417.23959999999,-39.15974795},
          R=268.4359836056074);

        constant IdealGases.Common.DataRecord Pplus(
          name="Pplus",
          MM=0.0309732124,
          Hf=43148687.41222335,
          H0=262867.7934614235,
          Tlimit=1000,
          alow={-73169.0811,962.7979140000001,-0.369393805,0.004766778340000001,-4.57476858e-006,
              2.371262331e-009,-5.131314899999999e-013},
          blow={154940.6849,23.76640762},
          ahigh={-559424.936,1722.576545,0.8430381089999999,0.0006287368940000001,-6.317195459999999e-008,
              -1.810842484e-012,4.31811257e-016},
          bhigh={149049.3431,18.45275207},
          R=268.4407381650862);

        constant IdealGases.Common.DataRecord Pminus(
          name="Pminus",
          MM=0.0309743096,
          Hf=7710479.041637784,
          H0=217853.6047176335,
          Tlimit=1000,
          alow={-10089.49093,182.6468403,1.962456304,0.0009197377539999999,-9.21499863e-007,
              5.012872360000001e-010,-1.142677121e-013},
          blow={27030.82432,9.478137822000001},
          ahigh={15434.88016,9.495009339999999,2.493170861,2.700167711e-006,-5.94921039e-010,
              6.82376629e-014,-3.16695991e-018},
          bhigh={27975.72693,6.246793872},
          R=268.4312292145488);

        constant IdealGases.Common.DataRecord PCL(
          name="PCL",
          MM=0.066426761,
          Hf=2026519.28189002,
          H0=139870.0141348153,
          Tlimit=1000,
          alow={34888.617,-560.3119340000001,6.26456848,-0.00318336437,
              3.49532684e-006,-2.091034291e-009,5.4187586e-013},
          blow={17746.53764,-8.074572148},
          ahigh={-347168.151,993.555793,3.39943027,0.00040197117,
              8.295588390000001e-008,-3.090212484e-011,2.106384858e-015},
          bhigh={8433.59115,10.64902238},
          R=125.1675059092525);

        constant IdealGases.Common.DataRecord PCL2(
          name="PCL2",
          MM=0.101879761,
          Hf=-532906.1676931104,
          H0=120227.5788613207,
          Tlimit=1000,
          alow={51900.845,-1060.9042,10.5854994,-0.00687991753,7.62077318e-006,-4.53011547e-009,
              1.11667166e-012},
          blow={-3220.33118,-27.53518359},
          ahigh={-83498.33970000001,-26.2524947,7.02036181,-8.388768680000001e-006,
              1.89678474e-009,-2.21487992e-013,1.04165355e-017},
          bhigh={-8742.99368,-6.23402319},
          R=81.61063510936191);

        constant IdealGases.Common.DataRecord PCL2minus(
          name="PCL2minus",
          MM=0.1018803096,
          Hf=-3497096.292687356,
          H0=122234.0906588686,
          Tlimit=1000,
          alow={49348.3277,-960.159054,9.8847697,-0.00495020295,4.94621787e-006,-2.678675201e-009,
              6.07672361e-013},
          blow={-39980.724,-24.13131695},
          ahigh={-85649.8676,-31.8555594,7.02449496,-1.002251172e-005,
              2.253747944e-009,-2.619657192e-013,1.227059658e-017},
          bhigh={-45038.1143,-6.721522361},
          R=81.6101956564922);

        constant IdealGases.Common.DataRecord PCL3(
          name="PCL3",
          MM=0.137332761,
          Hf=-2108018.493853772,
          H0=116013.585425549,
          Tlimit=1000,
          alow={77177.4547,-1617.65086,15.3608047,-0.0101107705,1.10340834e-005,-6.47612102e-009,
              1.57915114e-012},
          blow={-29558.9364,-52.44338688},
          ahigh={-133307.693,-41.4588321,10.0318606,-1.30194616e-005,2.92291689e-009,
              -3.39186924e-013,1.58642553e-017},
          bhigh={-38003.3668,-20.50737678},
          R=60.54252415416013);

        constant IdealGases.Common.DataRecord PCL5(
          name="PCL5",
          MM=0.208238761,
          Hf=-1805619.6559871,
          H0=111917.0412274975,
          Tlimit=1000,
          alow={102907.02,-2515.70746,24.3011497,-0.0156461069,1.70987303e-005,-1.00601143e-008,
              2.46015879e-012},
          blow={-37225.8237,-98.16335170000001},
          ahigh={-225590.689,-69.38542820000001,16.0535963,-2.20215696e-005,
              4.97139229e-009,-5.79986005e-013,2.72597077e-017},
          bhigh={-50342.3422,-48.7245487},
          R=39.92759061796377);

        constant IdealGases.Common.DataRecord PF(
          name="PF",
          MM=0.0499721642,
          Hf=-959429.9900263273,
          H0=177921.1915740883,
          Tlimit=1000,
          alow={22278.66728,-172.7508706,3.085366934,0.00548971823,-8.247972539999999e-006,
              5.86888291e-009,-1.617252113e-012},
          blow={-5809.27965,7.70971885},
          ahigh={-1132572.282,3200.03855,0.778050237,0.001969518902,-4.36581897e-007,
              5.243648570000001e-011,-2.618755712e-015},
          bhigh={-27667.73009,27.59312302},
          R=166.3820675591232);

        constant IdealGases.Common.DataRecord PFplus(
          name="PFplus",
          MM=0.0499716156,
          Hf=18040601.43294627,
          H0=188704.0850446308,
          Tlimit=1000,
          alow={-17791.38157,390.999127,1.257434156,0.007861363749999999,-9.34231268e-006,
              5.630915650000001e-009,-1.370669924e-012},
          blow={105487.3882,19.01676576},
          ahigh={-40115.2518,-159.7504413,4.62139748,-2.378072183e-005,
              1.431831329e-008,-2.300109157e-012,1.694069882e-016},
          bhigh={107863.3756,-0.04072343949999999},
          R=166.3838941400966);

        constant IdealGases.Common.DataRecord PFminus(
          name="PFminus",
          MM=0.0499727128,
          Hf=-3282711.520115834,
          H0=190416.7788145374,
          Tlimit=1000,
          alow={7705.21095,-115.2432706,4.25495231,0.001163521526,-1.627947259e-006,
              1.084382815e-009,-2.809490132e-013},
          blow={-20355.58966,2.217923793},
          ahigh={-130379.3388,271.5526386,4.13761981,0.0002728610614,-7.64441625e-008,
              1.182073001e-011,-6.083906640000001e-016},
          bhigh={-22907.99827,3.7485261},
          R=166.3802410182543);

        constant IdealGases.Common.DataRecord PFCL(
          name="PFCL",
          MM=0.0854251642,
          Hf=-3314996.484373161,
          H0=136147.0136922488,
          Tlimit=1000,
          alow={54901.8853,-865.867948,7.94446765,0.0009503779099999999,-3.33909021e-006,
              3.023977817e-009,-9.45037754e-013},
          blow={-31328.43217,-14.40426886},
          ahigh={-128214.3211,-97.3904355,7.07266166,-2.903614134e-005,
              6.408504490000001e-009,-7.33899377e-013,3.39672317e-017},
          bhigh={-36006.4926,-7.626493035},
          R=97.33047724127172);

        constant IdealGases.Common.DataRecord PFCLminus(
          name="PFCLminus",
          MM=0.0854257128,
          Hf=-6195665.094877616,
          H0=137462.042927197,
          Tlimit=1000,
          alow={89343.3685,-1266.972513,9.912194530000001,-0.0038779283,
              3.036692411e-006,-1.29655938e-009,2.32422658e-013},
          blow={-58945.0571,-26.1705046},
          ahigh={-123156.515,-97.6586111,7.07402957,-2.997070692e-005,
              6.685280620000001e-009,-7.7222622e-013,3.5993823e-017},
          bhigh={-65588.1722,-8.208878059},
          R=97.32985218942183);

        constant IdealGases.Common.DataRecord PFCL2(
          name="PFCL2",
          MM=0.1208781642,
          Hf=-4235052.239484623,
          H0=122997.8970842114,
          Tlimit=1000,
          alow={82665.60560000001,-1512.138928,13.03404207,-0.002903247162,
              7.83665297e-007,6.45834066e-010,-3.73764182e-013},
          blow={-56442.3787,-41.00905668},
          ahigh={-186458.9813,-114.8004379,10.08599754,-3.44745652e-005,
              7.62797201e-009,-8.75309743e-013,4.05778835e-017},
          bhigh={-64504.7219,-21.74054563},
          R=68.7839036523025);

        constant IdealGases.Common.DataRecord PFCL4(
          name="PFCL4",
          MM=0.1917841642,
          Hf=-3311099.44686455,
          H0=113324.5807372035,
          Tlimit=1000,
          alow={141207.1573,-2882.47108,23.87345233,-0.01239510207,1.141290085e-005,-5.705483820000001e-009,
              1.195229703e-012},
          blow={-66134.7865,-98.5969355},
          ahigh={-295437.588,-132.5154294,16.1000538,-4.03535917e-005,
              8.971130739999999e-009,-1.03328881e-012,4.80446835e-017},
          bhigh={-81357.19399999999,-50.62403920000001},
          R=43.35327702723852);

        constant IdealGases.Common.DataRecord PF2(
          name="PF2",
          MM=0.06897056739999999,
          Hf=-7439458.284056397,
          H0=160669.2161271099,
          Tlimit=1000,
          alow={55247.6572,-628.05178,5.13743792,0.009120673350000001,-1.46877376e-005,
              1.08126845e-008,-3.06494449e-012},
          blow={-59775.4147,-1.689589472},
          ahigh={-170846.712,-169.205154,7.1254916,-4.990852849999999e-005,
              1.09733523e-008,-1.25287026e-012,5.78479114e-017},
          bhigh={-63382.9584,-10.41715673},
          R=120.5510163745587);

        constant IdealGases.Common.DataRecord PF2minus(
          name="PF2minus",
          MM=0.068971116,
          Hf=-10284565.30991901,
          H0=160133.0185812856,
          Tlimit=1000,
          alow={140479.3057,-1699.945753,10.36823971,-0.00359958769,1.9619258e-006,-3.82932987e-010,
              -3.37554952e-014},
          blow={-78104.34510000001,-32.17375182},
          ahigh={-165397.6056,-164.0604822,7.12409152,-5.0154314e-005,
              1.117302152e-008,-1.289308601e-012,6.00470667e-017},
          bhigh={-87002.23319999999,-11.09074866},
          R=120.5500575052316);

        constant IdealGases.Common.DataRecord PF2CL(
          name="PF2CL",
          MM=0.1044235674,
          Hf=-7039375.308681516,
          H0=132884.9257452202,
          Tlimit=1000,
          alow={83975.9016,-1318.075883,10.17203515,0.005571231219999999,-1.100920478e-005,
              8.72638318e-009,-2.567714099e-012},
          blow={-83816.56169999999,-27.66012951},
          ahigh={-240928.1185,-203.348467,10.15150769,-6.04836731e-005,
              1.333942001e-008,-1.526772528e-012,7.063339179999999e-017},
          bhigh={-91011.1059,-24.17825549},
          R=79.62256229143155);

        constant IdealGases.Common.DataRecord PF2CL3(
          name="PF2CL3",
          MM=0.1753295674,
          Hf=-5011961.045881188,
          H0=115013.3334555869,
          Tlimit=1000,
          alow={184209.9543,-3334.40239,23.88510873,-0.01030943175,
              7.356504219999999e-006,-2.498621785e-009,2.513997646e-013},
          blow={-92795.49890000001,-102.7991502},
          ahigh={-365527.254,-202.969416,16.15238015,-6.11879657e-005,
              1.355610375e-008,-1.55712964e-012,7.22435997e-017},
          bhigh={-110494.1533,-53.87308191},
          R=47.42196152820714);

        constant IdealGases.Common.DataRecord PF3(
          name="PF3",
          MM=0.0879689706,
          Hf=-10883383.00959952,
          H0=147057.4557342837,
          Tlimit=1000,
          alow={84809.84480000001,-1102.340691,7.16071511,0.01438278338,-2.318137222e-005,
              1.702244315e-008,-4.81099195e-012},
          blow={-111183.7495,-14.57652362},
          ahigh={-295704.0675,-299.7689931,10.22297023,-8.890263450000001e-005,
              1.958901359e-008,-2.240491075e-012,1.035952523e-016},
          bhigh={-117374.3464,-27.77419177},
          R=94.51596333673592);

        constant IdealGases.Common.DataRecord PF3CL2(
          name="PF3CL2",
          MM=0.1588749706,
          Hf=-7062301.328916815,
          H0=119887.8837117469,
          Tlimit=1000,
          alow={182249.7206,-3089.610245,20.67710388,-0.001168732391,-5.02054074e-006,
              5.80457335e-009,-1.965367906e-012},
          blow={-122812.0667,-86.27977355},
          ahigh={-422383.8050000001,-320.796522,16.24013,-9.62365531e-005,
              2.129279712e-008,-2.443515401e-012,1.13290435e-016},
          bhigh={-139264.2151,-55.31285745},
          R=52.33342903919946);

        constant IdealGases.Common.DataRecord PF4CL(
          name="PF4CL",
          MM=0.1424203738,
          Hf=-9583666.708505718,
          H0=128637.5292465354,
          Tlimit=1000,
          alow={180424.0323,-2741.096618,16.80192838,0.00991931525,-2.025636171e-005,
              1.617979147e-008,-4.77261152e-012},
          blow={-153238.2587,-66.79119965},
          ahigh={-478114.004,-426.481283,16.31812121,-0.0001271374903,
              2.806715254e-008,-3.2151663e-012,1.488512118e-016},
          bhigh={-168048.8362,-57.35844805},
          R=58.37979341127105);

        constant IdealGases.Common.DataRecord PF5(
          name="PF5",
          MM=0.125965777,
          Hf=-12648673.61553289,
          H0=131286.5239580112,
          Tlimit=1000,
          alow={185577.8473,-2436.979828,12.01012406,0.02339343049,-3.81394441e-005,
              2.796136412e-008,-7.87070488e-012},
          blow={-181456.6568,-44.8648874},
          ahigh={-566872.784,-667.791791,16.49789569,-0.000199009944,4.3950071e-008,-5.03684954e-012,
              2.332945909e-016},
          bhigh={-194432.1623,-62.61721040000001},
          R=66.00580092480199);

        constant IdealGases.Common.DataRecord PH(
          name="PH",
          MM=0.031981701,
          Hf=7215129.176525038,
          H0=270407.881056733,
          Tlimit=1000,
          alow={22736.33198,-397.267406,6.23369766,-0.0091817846,1.523328123e-005,-1.085888585e-008,
              2.929760547e-012},
          blow={28527.68404,-10.95191197},
          ahigh={781473.0649999999,-3038.451204,7.46748102,-0.001837522255,
              7.1659477e-007,-1.142128853e-010,6.175410560000001e-015},
          bhigh={45362.6018,-24.6729814},
          R=259.9759156024878);

        constant IdealGases.Common.DataRecord PH2(
          name="PH2",
          MM=0.032989641,
          Hf=3623970.021377317,
          H0=302566.8269624395,
          Tlimit=1000,
          alow={15552.68372,-184.1602025,4.89589604,-0.0034954366,1.053418945e-005,-8.377562920000002e-009,
              2.27076615e-012},
          blow={14098.39468,-2.210564792},
          ahigh={1127884.913,-4715.238249999999,10.214983,-0.00116757382,
              2.150542671e-007,-1.624213739e-011,3.76622524e-016},
          bhigh={41830.7463,-42.3162325},
          R=252.0328123607044);

        constant IdealGases.Common.DataRecord PH2minus(
          name="PH2minus",
          MM=0.0329901896,
          Hf=-280853.735984591,
          H0=301910.4200601502,
          Tlimit=1000,
          alow={69506.84490000001,-771.916291,7.38353762,-0.00852294721,
              1.474476507e-005,-9.84716081e-009,2.413107871e-012},
          blow={1582.29585,-17.61306419},
          ahigh={1382525.815,-5213.40067,10.21694832,-0.001116316349,2.215004171e-007,
              -2.338005187e-011,1.015580932e-015},
          bhigh={29906.83733,-43.78711584999999},
          R=252.0286212601821);

        constant IdealGases.Common.DataRecord PH3(
          name="PH3",
          MM=0.033997581,
          Hf=159981.9704819587,
          H0=298157.1541810578,
          Tlimit=1000,
          alow={-6384.32534,405.756741,-0.1565680086,0.01338380613,-8.27539143e-006,
              3.024360831e-009,-6.421764630000001e-013},
          blow={-2159.842124,23.85561888},
          ahigh={1334801.106,-6725.46352,14.45857073,-0.001639736883,3.40921857e-007,
              -3.73627208e-011,1.672947506e-015},
          bhigh={39103.2571,-71.9878119},
          R=244.5606938917213);

        constant IdealGases.Common.DataRecord PN(
          name="PN",
          MM=0.044980461,
          Hf=3812484.380718108,
          H0=193464.1132290752,
          Tlimit=1000,
          alow={-51032.0384,820.2926679999999,-1.392772765,0.01287989789,-1.401425371e-005,
              7.775633459999999e-009,-1.75153933e-012},
          blow={15732.2652,32.51070633},
          ahigh={-249562.5593,176.043883,4.14412196,0.0002478018097,-5.674896300000001e-008,
              4.263645119999999e-012,3.063920924e-016},
          bhigh={17703.17267,1.325517397},
          R=184.8463047099495);

        constant IdealGases.Common.DataRecord PO(
          name="PO",
          MM=0.046973161,
          Hf=-593055.4045532512,
          H0=199903.7918695742,
          Tlimit=1000,
          alow={-68457.54059999999,1141.295708,-2.77955606,0.01678458047,-1.974879516e-005,
              1.19260232e-008,-2.927460912e-012},
          blow={-9847.74504,41.84328297},
          ahigh={-336666.744,622.9355840000001,3.56560546,0.0006516620719999999,-2.061770841e-007,
              3.18441323e-011,-1.573691908e-015},
          bhigh={-8939.79039,6.954859188},
          R=177.0047368113038);

        constant IdealGases.Common.DataRecord POminus(
          name="POminus",
          MM=0.0469737096,
          Hf=-2981818.876829775,
          H0=186872.743812424,
          Tlimit=1000,
          alow={54343.46320000001,-412.362355,3.74648388,0.00385863647,-5.96334304e-006,
              4.278286360000001e-009,-1.139722989e-012},
          blow={-15558.10937,3.404436468},
          ahigh={-848.0294779999999,347.054487,2.877890167,0.001622182445,-4.87019099e-007,
              6.64575227e-011,-3.39570376e-015},
          bhigh={-19872.0954,10.75444355},
          R=177.0026695954198);

        constant IdealGases.Common.DataRecord POCL3(
          name="POCL3",
          MM=0.153332161,
          Hf=-3706984.864056015,
          H0=115539.7268548246,
          Tlimit=1000,
          alow={47937.8816,-1270.38828,13.6771646,0.0010826721,-1.73610406e-006,
              8.460890640000001e-010,-1.17466133e-013},
          blow={-65075.7188,-43.14705941},
          ahigh={-218593.797,-508.026968,13.3778465,-0.000151073105,3.34098678e-008,-3.83532976e-012,
              1.77932988e-016},
          bhigh={-70093.15090000001,-39.84746301},
          R=54.2252319785671);

        constant IdealGases.Common.DataRecord POFCL2(
          name="POFCL2",
          MM=0.1368775642,
          Hf=-5799995.906122357,
          H0=120210.9936436172,
          Tlimit=1000,
          alow={46940.6156,-1069.2426,10.71284279,0.009491183299999999,-1.306412424e-005,
              8.426906020000001e-009,-2.140294969e-012},
          blow={-92748.94989999999,-28.15077719},
          ahigh={-270764.7503,-655.650227,13.48668421,-0.0001942765035,
              4.29118449e-008,-4.9218448e-012,2.282079808e-016},
          bhigh={-96543.92140000001,-41.64963494},
          R=60.74386294492521);

        constant IdealGases.Common.DataRecord POF2CL(
          name="POF2CL",
          MM=0.1204229674,
          Hf=-8491794.06618741,
          H0=123700.323298959,
          Tlimit=1000,
          alow={52264.3816,-969.1037700000001,7.96363598,0.01755599796,-2.398693997e-005,
              1.572376747e-008,-4.079746e-012},
          blow={-120265.6893,-15.93967075},
          ahigh={-334708.659,-817.6104810000001,13.6066432,-0.0002420426112,
              5.34371272e-008,-6.126461349999999e-012,2.839570116e-016},
          bhigh={-123340.1194,-44.96103437000001},
          R=69.04390565615641);

        constant IdealGases.Common.DataRecord POF3(
          name="POF3",
          MM=0.1039683706,
          Hf=-12042123.89570718,
          H0=136256.3337123223,
          Tlimit=1000,
          alow={29660.3071,-427.670575,3.6691461,0.0283949378,-3.768318e-005,
              2.44910454e-008,-6.34197287e-012},
          blow={-150112.453,5.160417996},
          ahigh={-369060.242,-1005.55254,13.7452994,-0.000297103711,6.55452664e-008,-7.50998733e-012,
              3.47896991e-016},
          bhigh={-149976.173,-48.82214181000001},
          R=79.97116769280214);

        constant IdealGases.Common.DataRecord PO2(
          name="PO2",
          MM=0.062972561,
          Hf=-4470633.439856448,
          H0=166943.5994511959,
          Tlimit=1000,
          alow={-63726.9822,1036.741044,-2.877797967,0.02278134083,-2.567920328e-005,
              1.465060412e-008,-3.3879967e-012},
          blow={-39935.4472,44.2530938},
          ahigh={492621.0990000001,-2605.465745,9.51760561,-0.001180371565,
              2.532912819e-007,-1.789964539e-011,1.800381054e-016},
          bhigh={-20288.84763,-29.69743125},
          R=132.0332517522989);

        constant IdealGases.Common.DataRecord PO2minus(
          name="PO2minus",
          MM=0.06297310960000001,
          Hf=-9490141.979585521,
          H0=168544.1463414727,
          Tlimit=1000,
          alow={27024.23135,29.39956284,1.162686114,0.01599897972,-1.979229263e-005,
              1.208847527e-008,-2.95664048e-012},
          blow={-72859.4627,19.63118182},
          ahigh={1628679.152,-5989.19998,13.69318836,-0.00362384379,
              9.488198340000001e-007,-1.040308759e-010,4.01903366e-015},
          bhigh={-36859.595,-59.5679622},
          R=132.0321015241718);

        constant IdealGases.Common.DataRecord PS(
          name="PS",
          MM=0.063038761,
          Hf=2386330.467377048,
          H0=152542.9092745018,
          Tlimit=1000,
          alow={-768.9786800000001,-46.3782407,4.10464917,0.001555262273,-2.315757288e-006,
              1.661425178e-009,-4.6312384e-013},
          blow={17078.75808,4.230652171},
          ahigh={-270272.9081,888.354822,3.16919012,0.001022480817,-3.80374048e-007,
              7.019861879999999e-011,-4.26912231e-015},
          bhigh={11215.10462,11.47334049},
          R=131.8945973573307);

        constant IdealGases.Common.DataRecord P2(
          name="P2",
          MM=0.061947522,
          Hf=2324548.187738647,
          H0=143736.2902102848,
          Tlimit=1000,
          alow={30539.2251,-324.617759,4.02246381,0.00323209479,-5.511052450000001e-006,
              4.19557293e-009,-1.21503218e-012},
          blow={17969.1087,1.645350331},
          ahigh={-780693.649,2307.91087,1.41174313,0.00210823742,-7.36085662e-007,
              1.25936012e-010,-7.07975249e-015},
          bhigh={1329.82474,21.69741365},
          R=134.2179918028037);

        constant IdealGases.Common.DataRecord P2O3(
          name="P2O3",
          MM=0.109945722,
          Hf=-6227120.633215725,
          H0=146389.3338205556,
          Tlimit=1000,
          alow={-66457.5389,758.090055,0.988843677,0.0285987873,-3.23114211e-005,
              1.83452517e-008,-4.2124893e-012},
          blow={-88200.3674,26.89914458},
          ahigh={-217534.411,-1369.902,14.0114296,-0.000402385696,8.86834578e-008,-1.01565728e-011,
              4.70435606e-016},
          bhigh={-79227.56999999999,-47.39487232000001},
          R=75.62342443846974);

        constant IdealGases.Common.DataRecord P2O4(
          name="P2O4",
          MM=0.125945122,
          Hf=-7413980.090471467,
          H0=137564.5179810934,
          Tlimit=1000,
          alow={-43760.9126,490.510283,0.964364937,0.0388607358,-4.67550922e-005,
              2.81262563e-008,-6.8244061e-012},
          blow={-116899.779,23.79582767},
          ahigh={-367011.486,-1638.42373,17.2118861,-0.000482658015,1.0644619e-007,-1.21961007e-011,
              5.65065458e-016},
          bhigh={-109043.593,-67.14276593},
          R=66.01662587614946);

        constant IdealGases.Common.DataRecord P2O5(
          name="P2O5",
          MM=0.141944522,
          Hf=-7921195.817616688,
          H0=155341.7116019454,
          Tlimit=1000,
          alow={-29991.5922,-45.9450659,6.98748683,0.0288330297,-3.10450953e-005,
              1.64386868e-008,-3.4679423e-012},
          blow={-138190.14,-3.400572711},
          ahigh={-324708.016,-2016.97508,20.4869934,-0.000591064115,1.30199302e-007,-1.49068294e-011,
              6.90357341e-016},
          bhigh={-130629.016,-80.31642952},
          R=58.57550459044837);

        constant IdealGases.Common.DataRecord P3(
          name="P3",
          MM=0.09292128300000001,
          Hf=2259977.404745907,
          H0=129201.8535732013,
          Tlimit=1000,
          alow={46933.5895,-864.358932,8.734247529999999,1.09453456e-005,-1.99857332e-006,
              2.09675051e-009,-6.92288971e-013},
          blow={27748.4734,-20.63587261},
          ahigh={-125351.306,-83.0673462,7.56195677,-2.47440395e-005,5.45727693e-009,
              -6.24466057e-013,2.88772422e-017},
          bhigh={23087.2228,-12.28310621},
          R=89.47866120186912);

        constant IdealGases.Common.DataRecord P3O6(
          name="P3O6",
          MM=0.188917683,
          Hf=-8340569.310285264,
          H0=124071.403098883,
          Tlimit=1000,
          alow={201449.3813,-3053.488073,16.02114098,0.043168899,-6.37654426e-005,
              4.42286792e-008,-1.200020334e-011},
          blow={-177650.3811,-65.5626789},
          ahigh={-878796.8100000001,-1651.988071,27.72258397,-0.00048593267,
              1.067867708e-007,-1.218015776e-011,5.61491196e-016},
          bhigh={-190916.5548,-122.0665277},
          R=44.01108391743297);

        constant IdealGases.Common.DataRecord P4(
          name="P4",
          MM=0.123895044,
          Hf=475402.3897840498,
          H0=113875.8060411198,
          Tlimit=1000,
          alow={120514.185,-2345.71179,17.7394655,-0.0145631497,1.58759409e-005,-9.314710310000001e-009,
              2.27149167e-012},
          blow={16088.4648,-70.88590647000001},
          ahigh={-185870.586,-62.8454689,10.0484488,-1.98766885e-005,
              4.482408440000001e-009,-5.22610367e-013,2.45579129e-017},
          bhigh={3848.21092,-24.77297797},
          R=67.10899590140184);

        constant IdealGases.Common.DataRecord P4O6(
          name="P4O6",
          MM=0.219891444,
          Hf=-7303603.863731961,
          H0=112771.659273837,
          Tlimit=1000,
          alow={376089.475,-5685.83262,29.1422545,0.0225153212,-4.51026963e-005,
              3.58831269e-008,-1.05757206e-011},
          blow={-168856.248,-145.1359851},
          ahigh={-1008997.24,-887.275399,28.6606483,-0.000263601894,5.81094072e-008,-6.64808696e-012,
              3.07439193e-016},
          bhigh={-199713.89,-128.1853821},
          R=37.81171221923487);

        constant IdealGases.Common.DataRecord P4O7(
          name="P4O7",
          MM=0.235890844,
          Hf=-8412569.183906095,
          H0=111798.8157268198,
          Tlimit=1000,
          alow={321858.696,-4871.44473,24.54417068,0.0401550955,-6.52419715e-005,
              4.75655418e-008,-1.332975491e-011},
          blow={-218451.7427,-118.1504792},
          ahigh={-1102947.375,-1511.077128,32.109795,-0.000437180376,
              9.516639610000001e-008,-1.075204176e-011,4.91102568e-016},
          bhigh={-242909.654,-147.3140859},
          R=35.24711624669926);

        constant IdealGases.Common.DataRecord P4O8(
          name="P4O8",
          MM=0.251890244,
          Hf=-9139750.874988236,
          H0=110946.4803249784,
          Tlimit=1000,
          alow={271932.6942,-4118.600390000001,20.28714235,0.0568541699,-8.40073963e-005,
              5.823389060000001e-008,-1.57864716e-011},
          blow={-260453.9703,-94.0716207},
          ahigh={-1173177.311,-2200.632995,35.6301013,-0.000648984974,
              1.429623989e-007,-1.635821725e-011,7.571070759999999e-016},
          bhigh={-278384.3144,-167.963696},
          R=33.00831293807473);

        constant IdealGases.Common.DataRecord P4O9(
          name="P4O9",
          MM=0.267889644,
          Hf=-9757671.375307065,
          H0=110199.6873010888,
          Tlimit=1000,
          alow={219991.6395,-3336.46494,15.86413106,0.07402452330000001,-0.0001034835052,
              6.94443832e-008,-1.84073345e-011},
          blow={-301874.2692,-69.9796767},
          ahigh={-1233696.783,-2917.032808,39.1775711,-0.000873640298,
              1.937914895e-007,-2.230510118e-011,1.037248818e-015},
          bhigh={-312963.7516,-189.717642},
          R=31.03692952012733);

        constant IdealGases.Common.DataRecord P4O10(
          name="P4O10",
          MM=0.283889044,
          Hf=-10237180.71698463,
          H0=109537.7002291078,
          Tlimit=1000,
          alow={167014.2268,-2540.2433,11.36853403,0.09137812159999999,-0.0001231990626,
              8.08103223e-008,-2.106787011e-011},
          blow={-341015.191,-46.4343134},
          ahigh={-1337201.132,-3516.38233,42.6040331,-0.001037406404,2.287613089e-007,
              -2.620219946e-011,1.213529528e-015},
          bhigh={-345951.505,-211.5498906},
          R=29.28775229522418);

        constant IdealGases.Common.DataRecord Pb(
          name="Pb",
          MM=0.2072,
          Hf=942084.942084942,
          H0=29910.36679536679,
          Tlimit=1000,
          alow={1213.382285,-19.06116019,2.619299546,-0.000382951961,6.68818045e-007,
              -6.06123108e-010,2.240022429e-013},
          blow={22820.96238,6.2013692},
          ahigh={-9084313.07,26726.7318,-26.26244039,0.01358282305,-2.685523566e-006,
              2.3524328e-010,-7.324114532e-015},
          bhigh={-148165.0666,215.4011624},
          R=40.12776061776062);

        constant IdealGases.Common.DataRecord Pbplus(
          name="Pbplus",
          MM=0.2071994514,
          Hf=4425670.636693588,
          H0=29910.44598875806,
          Tlimit=1000,
          alow={9.48668904,-0.1134955793,2.500549799,-1.382464681e-006,
              1.906022991e-009,-1.368396828e-012,4.003528117e-016},
          blow={109543.8901,7.5388559},
          ahigh={1320690.183,-4096.04801,7.38910151,-0.002807751909,7.83099165e-007,-9.31060091e-011,
              4.016371727e-015},
          bhigh={135434.7306,-27.22020908},
          R=40.12786686364751);

        constant IdealGases.Common.DataRecord Pbminus(
          name="Pbminus",
          MM=0.2072005486,
          Hf=742671.4313245792,
          H0=29910.28760239489,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={17762.2614,8.2351321},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={17762.2614,8.2351321},
          R=40.12765437243635);

        constant IdealGases.Common.DataRecord PbBr(
          name="PbBr",
          MM=0.287104,
          Hf=225776.4503455194,
          H0=35339.53549933125,
          Tlimit=1000,
          alow={-2393.487988,-45.7659121,4.69260828,-0.000384529063,5.8882135e-007,-4.08479289e-010,
              1.202515201e-013},
          blow={6662.43477,5.99170551},
          ahigh={-2581831.67,7143.49076,-2.65819364,0.00310772226,-4.63138154e-007,
              1.095529211e-011,1.508555088e-015},
          bhigh={-39704.4098,59.5923865},
          R=28.95979157378512);

        constant IdealGases.Common.DataRecord PbBr2(
          name="PbBr2",
          MM=0.367008,
          Hf=-283122.0654590636,
          H0=40930.81622198971,
          Tlimit=1000,
          alow={-6172.76636,-67.8320763,7.27315614,-0.000599059612,7.35863461e-007,-4.74360481e-010,
              1.246922291e-013},
          blow={-14278.90796,-0.698799215},
          ahigh={-13204.21479,-1.143074947,7.00097254,-4.28447161e-007,
              1.018044861e-010,-1.234016791e-014,5.97133765e-019},
          bhigh={-14622.1375,0.8868582650000001},
          R=22.65474322085622);

        constant IdealGases.Common.DataRecord PbBr3(
          name="PbBr3",
          MM=0.446912,
          Hf=-232732.5222862667,
          H0=44681.37575182587,
          Tlimit=1000,
          alow={-11644.2425,-155.5151665,10.62317321,-0.001361947117,1.668738791e-006,
              -1.073686019e-009,2.81825034e-013},
          blow={-14782.08304,-14.43758579},
          ahigh={-27879.30766,-2.633265111,10.00223199,-9.80776141e-007,
              2.326232632e-010,-2.81599446e-014,1.361283735e-018},
          bhigh={-15569.81182,-10.81765474},
          R=18.60427108692539);

        constant IdealGases.Common.DataRecord PbBr4(
          name="PbBr4",
          MM=0.5268160000000001,
          Hf=-346298.3489491587,
          H0=49109.15575836725,
          Tlimit=1000,
          alow={-11764.58199,-256.7166983,14.02223292,-0.002224117068,
              2.716201994e-006,-1.743340164e-009,4.567359749999999e-013},
          blow={-24621.25551,-28.8202075},
          ahigh={-38802.1603,-4.38293377,13.00369823,-1.620061335e-006,
              3.83413088e-010,-4.63396718e-014,2.237427066e-018},
          bhigh={-25923.27065,-22.87710636},
          R=15.78249711474215);

        constant IdealGases.Common.DataRecord PbCL(
          name="PbCL",
          MM=0.242653,
          Hf=36344.56610880558,
          H0=40333.80176630827,
          Tlimit=1000,
          alow={-2902.700749,-82.93459710000001,4.71482448,-0.0001931473228,
              9.10557902e-008,5.419385229999999e-011,-3.2849697e-014},
          blow={125.4460217,4.323194455},
          ahigh={-385428.553,692.21975,4.50997124,-0.0006853421299999999,
              5.0873955e-007,-9.772753809999999e-011,5.807471579999999e-015},
          bhigh={-5269.68472,6.646491015},
          R=34.26486381787986);

        constant IdealGases.Common.DataRecord PbCL2(
          name="PbCL2",
          MM=0.278106,
          Hf=-631225.0400926265,
          H0=50349.61129928876,
          Tlimit=1000,
          alow={2830.580143,-313.4256659,8.21282729,-0.002585096173,3.109456077e-006,
              -1.972978208e-009,5.12354248e-013},
          blow={-21675.69042,-9.219412244000001},
          ahigh={-31491.92744,-5.56547758,7.00459954,-1.986025455e-006,
              4.65171959e-010,-5.57913701e-014,2.67814357e-018},
          bhigh={-23274.39309,-2.140739285},
          R=29.896773172819);

        constant IdealGases.Common.DataRecord PbCL3(
          name="PbCL3",
          MM=0.313559,
          Hf=-566571.2258299076,
          H0=58220.91855121364,
          Tlimit=1000,
          alow={862.3588970000001,-525.315275,12.03336337,-0.00433518498,
              5.21569835e-006,-3.31002238e-009,8.596970609999999e-013},
          blow={-21805.76379,-26.94206962},
          ahigh={-56644.1279,-9.329514789999999,10.00771099,-3.32972757e-006,
              7.79933081e-010,-9.3546061e-014,4.4905897e-018},
          bhigh={-24485.08643,-15.0749087},
          R=26.51645144932851);

        constant IdealGases.Common.DataRecord PbCL4(
          name="PbCL4",
          MM=0.349012,
          Hf=-938163.6218811962,
          H0=67188.05657112076,
          Tlimit=1000,
          alow={17394.05796,-890.213932,16.37565058,-0.00708899226,8.43256734e-006,-5.30530939e-009,
              1.368671294e-012},
          blow={-38882.1562,-48.50133784},
          ahigh={-82666.7956,-16.39486405,13.01336711,-5.7161414e-006,1.32936839e-009,
              -1.585922492e-013,7.58176361e-018},
          bhigh={-43439.84220000001,-28.74559263},
          R=23.82288288081785);

        constant IdealGases.Common.DataRecord PbF(
          name="PbF",
          MM=0.2261984032,
          Hf=-437084.3807972558,
          H0=40973.37058478404,
          Tlimit=1000,
          alow={26848.64255,-475.172564,6.01964437,-0.002718531008,2.942882954e-006,-1.687543009e-009,
              4.08612208e-013},
          blow={-10790.38653,-4.98304884},
          ahigh={-473420.275,1027.785283,3.88865873,-0.0001649813448,2.93116326e-007,
              -5.76645965e-011,3.24748619e-015},
          bhigh={-20261.65076,9.319483890000001},
          R=36.75743012495325);

        constant IdealGases.Common.DataRecord PbF2(
          name="PbF2",
          MM=0.2451968064,
          Hf=-1808454.997886954,
          H0=51275.5862712574,
          Tlimit=1000,
          alow={59205.5228,-1052.529292,10.28969284,-0.00587634627,6.10233313e-006,-3.42479264e-009,
              8.024025419999999e-013},
          blow={-49990.50000000001,-25.25115478},
          ahigh={-85058.99769999999,-30.74244334,7.02334604,-9.455183590000001e-006,
              2.108489027e-009,-2.434212002e-013,1.133872429e-017},
          bhigh={-55522.3677,-5.49607322},
          R=33.90938129282258);

        constant IdealGases.Common.DataRecord PbF3(
          name="PbF3",
          MM=0.2641952096,
          Hf=-1853071.498689279,
          H0=58801.39546633173,
          Tlimit=1000,
          alow={85530.9087,-1731.036694,15.5659615,-0.01022225919,1.089984998e-005,-6.269998819999999e-009,
              1.502616508e-012},
          blow={-53003.3567,-53.3573348},
          ahigh={-145970.4258,-48.2039643,10.03685845,-1.501095764e-005,
              3.36247499e-009,-3.89602071e-013,1.820152103e-017},
          bhigh={-62068.6959,-20.06978661},
          R=31.47094155336267);

        constant IdealGases.Common.DataRecord PbF4(
          name="PbF4",
          MM=0.2831936128,
          Hf=-2824658.243845816,
          H0=69303.21205323456,
          Tlimit=1000,
          alow={130996.3563,-2307.299499,19.4520144,-0.01024522729,9.39587496e-006,-4.62689415e-009,
              9.450881430000001e-013},
          blow={-88041.47459999999,-75.24645820000001},
          ahigh={-213261.6322,-85.7862195,13.06428551,-2.575563598e-005,
              5.69332459e-009,-6.526219550000001e-013,3.02234196e-017},
          bhigh={-100290.8979,-35.9024028},
          R=29.35967346788974);

        constant IdealGases.Common.DataRecord PbI(
          name="PbI",
          MM=0.33410447,
          Hf=325958.8954317193,
          H0=30945.78171911319,
          Tlimit=1000,
          alow={-2717.33406,-15.42541996,4.5653279,-0.0001061215818,2.414841342e-007,
              -1.876070301e-010,6.460614269999999e-014},
          blow={11818.64978,7.66980267},
          ahigh={-3901070.25,11479.76718,-8.17610902,0.0065234547,-1.522611682e-006,
              1.626692202e-010,-6.55332888e-015},
          bhigh={-61544.3369,99.38404970000001},
          R=24.88584483769403);

        constant IdealGases.Common.DataRecord PbI2(
          name="PbI2",
          MM=0.46100894,
          Hf=-22239.54702483644,
          H0=33073.91392453257,
          Tlimit=1000,
          alow={-5904.98672,-48.3330703,7.19543803,-0.000429860009,5.29141207e-007,-3.41640282e-010,
              8.99134192e-014},
          blow={-3107.780155,1.324773678},
          ahigh={-10883.39477,-0.816441837,7.0006973,-3.079876763e-007,
              7.331718140000001e-011,-8.89919388e-015,4.3107125e-019},
          bhigh={-3352.09638,2.458605463},
          R=18.03538126614204);

        constant IdealGases.Common.DataRecord PbI3(
          name="PbI3",
          MM=0.58791341,
          Hf=37004.44934569531,
          H0=35830.12675284954,
          Tlimit=1000,
          alow={-10149.96331,-59.380782,10.24073798,-0.000530469453,
              6.538623030000001e-007,-4.22589572e-010,1.113029818e-013},
          blow={-113.8482403,-8.975540499999999},
          ahigh={-16242.29573,-1.002945584,10.00085839,-3.79667974e-007,
              9.04675172e-011,-1.098840054e-014,5.325388290000001e-019},
          bhigh={-413.825893,-7.57941711},
          R=14.14234113149418);

        constant IdealGases.Common.DataRecord PbI4(
          name="PbI4",
          MM=0.7148178799999999,
          Hf=-57674.07356962029,
          H0=38500.07361315585,
          Tlimit=1000,
          alow={-12170.96972,-72.2631744,13.29294204,-0.00064546609,7.95576185e-007,-5.14163283e-010,
              1.354188031e-013},
          blow={-8528.148679999998,-20.10457498},
          ahigh={-19584.77744,-1.223385179,13.00104732,-4.63329569e-007,
              1.104213978e-010,-1.341397771e-014,6.50170611e-019},
          bhigh={-8893.193200000002,-18.40570345},
          R=11.63159488959622);

        constant IdealGases.Common.DataRecord PbO(
          name="PbO",
          MM=0.2231994,
          Hf=305274.6019926577,
          H0=40152.92155803287,
          Tlimit=1000,
          alow={34240.25,-419.805011,4.72030641,0.001451061751,-3.20603546e-006,
              2.713956273e-009,-8.333275609999999e-013},
          blow={9253.186469999999,0.448289121},
          ahigh={242699.685,-110.7731354,3.18068449,0.001991815065,-1.079782025e-006,
              2.540990941e-010,-1.834652493e-014},
          bhigh={8339.391539999999,10.50920926},
          R=37.25131877594653);

        constant IdealGases.Common.DataRecord PbO2(
          name="PbO2",
          MM=0.2391988,
          Hf=569203.2485112802,
          H0=51216.53620335888,
          Tlimit=1000,
          alow={70710.58289999999,-1076.757462,9.401711730000001,-0.001003861584,-1.233815617e-006,
              1.858386979e-009,-6.83462121e-013},
          blow={19996.45981,-25.03976748},
          ahigh={-130779.667,-73.1436145,7.55408341,-2.143421561e-005,
              4.696463999999999e-009,-5.34497218e-013,2.460760535e-017},
          bhigh={14133.86101,-12.52684909},
          R=34.75967270738816);

        constant IdealGases.Common.DataRecord PbS(
          name="PbS",
          MM=0.239265,
          Hf=534743.1216433662,
          H0=39412.83932041879,
          Tlimit=1000,
          alow={15298.40503,-343.974635,5.68063064,-0.002232931917,2.504608209e-006,-1.470427328e-009,
              3.57752719e-013},
          blow={15785.51202,-2.628900926},
          ahigh={2105441.649,-5520.41358,9.36924926,-0.001410262019,-1.642683362e-007,
              1.451447577e-010,-1.393564925e-014},
          bhigh={50093.3453,-32.17417657},
          R=34.75005537792824);

        constant IdealGases.Common.DataRecord PbS2(
          name="PbS2",
          MM=0.27133,
          Hf=899454.5571812922,
          H0=51675.83754100174,
          Tlimit=1000,
          alow={24463.7588,-665.485546,9.920201179999999,-0.00492419438,
              5.71690629e-006,-3.52948883e-009,8.971138350000001e-013},
          blow={30443.1013,-22.95765552},
          ahigh={-54167.003,-13.43600342,7.51070036,-4.497318629999999e-006,
              1.032444494e-009,-1.219580043e-013,5.78580465e-018},
          bhigh={27012.29533,-8.714618097000001},
          R=30.64339365348469);

        constant IdealGases.Common.DataRecord Rb(
          name="Rb",
          MM=0.0854678,
          Hf=946555.3108890132,
          H0=72511.8465667772,
          Tlimit=1000,
          alow={13.52856616,-0.2042232679,2.501213823,-3.6506199e-006,5.88472267e-009,
              -4.84227472e-012,1.596211946e-015},
          blow={8985.56921,6.20700548},
          ahigh={-1138274.064,3804.04194,-2.750899258,0.0038914607,-1.632296823e-006,
              3.51189314e-010,-2.521064422e-014},
          bhigh={-14664.54849,42.53442370000001},
          R=97.28192371864024);

        constant IdealGases.Common.DataRecord Rbplus(
          name="Rbplus",
          MM=0.0854672514,
          Hf=5734700.952369694,
          H0=72512.3120081992,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={58203.2736,5.52050692},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={58203.2736,5.52050692},
          R=97.28254815504691);

        constant IdealGases.Common.DataRecord Rbminus(
          name="Rbminus",
          MM=0.08546834859999999,
          Hf=325483.3918716899,
          H0=72511.3811313303,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={2600.405796,5.52052617},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={2600.405796,5.52052617},
          R=97.28129929024978);

        constant IdealGases.Common.DataRecord RbBO2(
          name="RbBO2",
          MM=0.1282776,
          Hf=-5293030.91108658,
          H0=111731.8846002731,
          Tlimit=1000,
          alow={41986.5775,-679.944833,8.18515101,0.002772536733,-6.17577047e-007,-9.42613625e-010,
              4.72241424e-013},
          blow={-80203.3959,-12.39198887},
          ahigh={91544.63399999999,-1668.328341,11.17268757,-0.000450553353,
              9.68133059e-008,-1.088037652e-011,4.96773366e-016},
          bhigh={-75079.0325,-31.31951149},
          R=64.81624227456703);

        constant IdealGases.Common.DataRecord RbBr(
          name="RbBr",
          MM=0.1653718,
          Hf=-1158062.474980619,
          H0=62399.53849447124,
          Tlimit=1000,
          alow={-5703.8597,20.92281597,4.37060737,0.000449460478,-4.835438840000001e-007,
              3.5260686e-010,-9.88653832e-014},
          blow={-24491.12515,6.4274317},
          ahigh={1609092.474,-4466.77459,9.06409206,-0.001995333358,4.01663352e-007,-4.1630914e-012,
              -3.092443341e-015},
          bhigh={4427.46769,-27.57714089},
          R=50.27744754547027);

        constant IdealGases.Common.DataRecord RbCL(
          name="RbCL",
          MM=0.1209208,
          Hf=-1846852.476993206,
          H0=83171.14177213515,
          Tlimit=1000,
          alow={-5740.809579999999,-15.28835285,4.5152009,0.0001067270745,-6.38594559e-009,
              -1.301381692e-011,1.641459742e-014},
          blow={-28142.43986,4.190115141},
          ahigh={-1143043.004,4003.86188,-1.096156782,0.00403358128,-1.454151464e-006,
              2.719263762e-010,-1.81046398e-014},
          bhigh={-52976.86040000001,43.11317822},
          R=68.75965094508142);

        constant IdealGases.Common.DataRecord RbF(
          name="RbF",
          MM=0.1044662032,
          Hf=-3192533.803123803,
          H0=91781.98026057867,
          Tlimit=1000,
          alow={32873.6019,-608.090746,7.40662236,-0.00727786472,1.013930727e-005,-7.141372500000001e-009,
              2.014332982e-012},
          blow={-38498.3413,-13.75750778},
          ahigh={-854481.1149999999,2633.756505,1.216216506,0.002136494067,-6.72842608e-007,
              1.134905135e-010,-6.825624440000001e-015},
          bhigh={-58101.7911,25.88118896},
          R=79.59006592861414);

        constant IdealGases.Common.DataRecord RbH(
          name="RbH",
          MM=0.08647574,
          Hf=1379856.431410705,
          H0=101995.1491597528,
          Tlimit=1000,
          alow={8908.270610000001,46.498704,1.833967623,0.00844427914,-1.167538647e-005,
              8.01038942e-009,-2.162578321e-012},
          blow={13282.48009,12.79544976},
          ahigh={-2937703.53,9379.81726,-7.54256346,0.007493226800000001,-2.159228887e-006,
              2.871300173e-010,-1.459981256e-014},
          bhigh={-45955.18829999999,83.65664320000001},
          R=96.14802949358978);

        constant IdealGases.Common.DataRecord RbI(
          name="RbI",
          MM=0.21237227,
          Hf=-652066.6469308824,
          H0=49249.01918692116,
          Tlimit=1000,
          alow={-769.30528,-29.68608844,4.64874584,-0.0002962415236,5.97813534e-007,-4.351255250000001e-010,
              1.313617336e-013},
          blow={-17866.10717,5.81240983},
          ahigh={4297424.85,-12969.11161,19.58730402,-0.008458425589999999,
              2.463480035e-006,-3.19157573e-010,1.458455589e-014},
          bhigh={64329.4804,-100.9499336},
          R=39.15045970926431);

        constant IdealGases.Common.DataRecord RbK(
          name="RbK",
          MM=0.1245661,
          Hf=963450.9710105718,
          H0=86766.2229129755,
          Tlimit=1000,
          alow={24946.95429,-455.306066,7.68618995,-0.01108112244,2.093398586e-005,-1.824445366e-008,
              5.61764536e-012},
          blow={15161.3616,-10.63563675},
          ahigh={-4175391.07,5918.588510000001,9.20264942,-0.010609336,
              4.96482606e-006,-8.716698790000001e-010,5.22188796e-014},
          bhigh={-32727.6904,-13.72401997},
          R=66.74746981722957);

        constant IdealGases.Common.DataRecord RbLi(
          name="RbLi",
          MM=0.0924088,
          Hf=1776684.947753893,
          H0=111202.8724537057,
          Tlimit=1000,
          alow={-2263.413044,-28.8849691,4.55582654,0.000362566753,-9.598002220000001e-007,
              1.631010244e-009,-8.159825980000001e-013},
          blow={18534.5525,2.831743182},
          ahigh={10855151.94,-38051.0697,55.1655504,-0.03128845612,9.26165025e-006,-1.264671408e-009,
              6.43166205e-014},
          bhigh={254396.4131,-352.075871},
          R=89.9748941659236);

        constant IdealGases.Common.DataRecord RbNO2(
          name="RbNO2",
          MM=0.1314733,
          Hf=-1427132.178168495,
          H0=119950.0050580612,
          Tlimit=1000,
          alow={-71994.2003,1265.802595,-2.415715742,0.0305464142,-3.68400405e-005,
              2.247716481e-008,-5.54752743e-012},
          blow={-30373.81667,48.14256904},
          ahigh={-164499.4453,-849.944344,10.63080575,-0.0002517893988,
              5.56142012e-008,-6.378805599999999e-012,2.957679896e-016},
          bhigh={-21285.90982,-25.68367325},
          R=63.24076447461196);

        constant IdealGases.Common.DataRecord RbNO3(
          name="RbNO3",
          MM=0.1474727,
          Hf=-2135801.968771169,
          H0=110986.7589052075,
          Tlimit=1000,
          alow={-26646.69172,880.763479,-3.159459457,0.0427122902,-5.35102921e-005,
              3.36096975e-008,-8.503290509999999e-012},
          blow={-43535.95460000001,49.43052899},
          ahigh={-314741.3867,-1371.457846,14.01319759,-0.000403027502,
              8.878332289999999e-008,-1.016221214e-011,4.704254090000001e-016},
          bhigh={-35043.3994,-46.19379241},
          R=56.37973672415301);

        constant IdealGases.Common.DataRecord RbNa(
          name="RbNa",
          MM=0.10845757,
          Hf=1212182.127997151,
          H0=98334.56530512347,
          Tlimit=1000,
          alow={29744.55567,-508.279059,7.73403352,-0.0101300684,1.745455325e-005,-1.39872547e-008,
              3.96810677e-012},
          blow={16823.79436,-12.4008529},
          ahigh={4297114.27,-18310.13588,34.543942,-0.02230134993,7.33987453e-006,-1.064784996e-009,
              5.61759846e-014},
          bhigh={124261.0951,-199.366198},
          R=76.6610574070579);

        constant IdealGases.Common.DataRecord RbO(
          name="RbO",
          MM=0.1014672,
          Hf=517303.3650283047,
          H0=101876.5078764369,
          Tlimit=1000,
          alow={190008.1316,-3428.22899,24.80251273,-0.0505165458,
              6.476338760000001e-005,-4.198012420000001e-008,1.093889043e-011},
          blow={20838.9845,-109.755915},
          ahigh={617075.688,-2175.08962,8.29041221,-0.002996487663,1.233144275e-006,-2.115810631e-010,
              1.24260743e-014},
          bhigh={18281.64827,-21.17386042},
          R=81.94246022359934);

        constant IdealGases.Common.DataRecord RbOH(
          name="RbOH",
          MM=0.10247514,
          Hf=-2322514.514251945,
          H0=114771.2703783572,
          Tlimit=1000,
          alow={12138.32721,-544.141159,8.459814639999999,-0.00356152656,
              2.99287239e-006,-7.2802674e-010,-4.55384718e-014},
          blow={-27872.62486,-19.13421991},
          ahigh={895858.313,-2332.339,7.97119248,0.0001044439355,-6.32825775e-008,
              1.029358824e-011,-5.74327779e-016},
          bhigh={-15155.68947,-19.50051629},
          R=81.13647856445964);

        constant IdealGases.Common.DataRecord Rb2Br2(
          name="Rb2Br2",
          MM=0.3307436,
          Hf=-1668366.169443641,
          H0=65599.35248936033,
          Tlimit=1000,
          alow={-8005.5254,-21.11968088,10.08629404,-0.000191193609,2.36605949e-007,-1.53372238e-010,
              4.04872506e-014},
          blow={-69273.136,-9.622434630000001},
          ahigh={-10145.35336,-0.360155032,10.00031058,-1.380745805e-007,
              3.30206795e-011,-4.02158182e-015,1.953006729e-019},
          bhigh={-69379.6088,-9.12256236},
          R=25.13872377273513);

        constant IdealGases.Common.DataRecord Rb2CL2(
          name="Rb2CL2",
          MM=0.2418416,
          Hf=-2556936.176406375,
          H0=85947.05790897844,
          Tlimit=1000,
          alow={-11250.39522,-67.56953990000001,10.27381915,-0.000603184899,
              7.43332478e-007,-4.803372160000001e-010,1.264973638e-013},
          blow={-77067.575,-13.63652575},
          ahigh={-18188.75133,-1.13790358,10.00097318,-4.3021564e-007,
              1.024725787e-010,-1.244291058e-014,6.02891239e-019},
          bhigh={-77408.9767,-12.04843385},
          R=34.37982547254071);

        constant IdealGases.Common.DataRecord Rb2F2(
          name="Rb2F2",
          MM=0.2089324064,
          Hf=-4091817.840662175,
          H0=90410.85739392509,
          Tlimit=1000,
          alow={-8178.3471,-333.473354,11.31540799,-0.002842914926,3.45495958e-006,-2.209373419e-009,
              5.77207327e-013},
          blow={-104223.0504,-23.68991587},
          ahigh={-43765.7439,-5.76145204,10.00482691,-2.104159548e-006,
              4.96241627e-010,-5.98217497e-014,2.882751742e-018},
          bhigh={-105917.6154,-16.03254014},
          R=39.79503296430707);

        constant IdealGases.Common.DataRecord Rb2I2(
          name="Rb2I2",
          MM=0.42474454,
          Hf=-1019333.837699244,
          H0=52307.95432944236,
          Tlimit=1000,
          alow={-5839.66355,-9.5275379,10.03904495,-8.668754e-005,1.074384368e-007,-6.97212223e-011,
              1.842065721e-014},
          blow={-55027.8096,-7.17411332},
          ahigh={-6799.83464,-0.1642527699,10.000142,-6.321420729999999e-008,
              1.51281117e-011,-1.843027189e-015,8.951244179999999e-020},
          bhigh={-55075.7962,-6.94804539},
          R=19.57522985463216);

        constant IdealGases.Common.DataRecord Rb2O(
          name="Rb2O",
          MM=0.186935,
          Hf=-582712.8199641587,
          H0=76046.64188086768,
          Tlimit=1000,
          alow={19712.76138,-462.750886,8.58829313,-0.003085559728,3.45198014e-006,-2.068570368e-009,
              5.132480499999999e-013},
          blow={-12848.54711,-12.64891828},
          ahigh={-38463.6009,-10.82831019,7.00842189,-3.47622812e-006,7.86978506e-010,
              -9.195683850000001e-014,4.325201520000001e-018},
          bhigh={-15253.73768,-3.23038878},
          R=44.47787733704229);

        constant IdealGases.Common.DataRecord Rb2O2(
          name="Rb2O2",
          MM=0.2029344,
          Hf=-1063636.662882192,
          H0=83017.6254001293,
          Tlimit=1000,
          alow={32605.5323,-757.816472,10.70815124,0.001148004329,-3.29124367e-006,
              2.853106637e-009,-8.72159068e-013},
          blow={-24753.17258,-24.3427646},
          ahigh={-131856.7396,-96.47737790000001,10.07222726,-2.894921706e-005,
              6.4056391e-009,-7.35141939e-013,3.40856171e-017},
          bhigh={-28821.79733,-19.10948823},
          R=40.97123011179967);

        constant IdealGases.Common.DataRecord Rb2O2H2(
          name="Rb2O2H2",
          MM=0.20495028,
          Hf=-3117829.358418052,
          H0=114210.036697681,
          Tlimit=1000,
          alow={-4577.07653,-841.7631,17.04083828,-0.00535788254,3.95177877e-006,-2.051775094e-010,
              -4.08541691e-013},
          blow={-76949.8217,-54.3541278},
          ahigh={1792711.652,-4659.406599999999,16.93822422,0.0002106246492,-1.26961747e-007,
              2.063382927e-011,-1.150861507e-015},
          bhigh={-50241.1763,-60.27054920000001},
          R=40.56823928222982);

        constant IdealGases.Common.DataRecord Rb2SO4(
          name="Rb2SO4",
          MM=0.2669982,
          Hf=-4107114.025487812,
          H0=87348.70871788649,
          Tlimit=1000,
          alow={60948.54930000001,-688.97059,7.03424218,0.0393394547,-5.49892051e-005,
              3.71634108e-008,-9.919863380000001e-012},
          blow={-131187.7657,-4.450168488},
          ahigh={-530289.831,-951.543545,19.71013517,-0.0002842916301,
              6.289142939999999e-008,-7.2193243e-012,3.34871819e-016},
          bhigh={-133871.3151,-70.56246881999999},
          R=31.1405545056109);

        constant IdealGases.Common.DataRecord Rn(
          name="Rn",
          MM=0.2220176,
          Hf=0,
          H0=27914.12933028733,
          Tlimit=1000,
          alow={3.38943209e-006,-1.311675533e-007,2.500000001,-2.978593139e-012,
              4.33705073e-015,-3.18204022e-018,9.24778703e-022},
          blow={-745.374999,6.95244198},
          ahigh={27301.90029,-82.84672620000001,2.598178483,-5.81372985e-005,
              1.819136527e-008,-2.866656182e-012,1.789322176e-016},
          bhigh={-220.280934,6.25500571},
          R=37.44960759867686);

        constant IdealGases.Common.DataRecord Rnplus(
          name="Rnplus",
          MM=0.2220170514,
          Hf=4699054.678103881,
          H0=27914.19830558113,
          Tlimit=1000,
          alow={-0.09697148970000001,0.001106742047,2.499994937,1.189388239e-008,-1.515895754e-011,
              9.95893481e-015,-2.640751817e-018},
          blow={124730.476,8.338761699999999},
          ahigh={-19982.85319,59.3067566,2.432476003,3.71602592e-005,-1.012057848e-008,
              1.192256661e-012,-3.18452198e-017},
          bhigh={124352.8478,8.821997789999999},
          R=37.44970013595992);

        constant IdealGases.Common.DataRecord S(
          name="S",
          MM=0.032065,
          Hf=8644004.366131296,
          H0=207622.7974426945,
          Tlimit=1000,
          alow={-317.484182,-192.4704923,4.68682593,-0.0058413656,7.53853352e-006,-4.86358604e-009,
              1.256976992e-012},
          blow={33235.9218,-5.718523969},
          ahigh={-485424.479,1438.830408,1.258504116,0.000379799043,1.630685864e-009,
              -9.547095849999999e-012,8.041466646e-016},
          bhigh={23349.9527,15.59554855},
          R=259.300545766412);

        constant IdealGases.Common.DataRecord Splus(
          name="Splus",
          MM=0.03206445140000001,
          Hf=39997454.25240614,
          H0=193280.337863507,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={153502.6117,5.43622334},
          ahigh={1346218.684,-4056.87151,7.15343655,-0.002523562352,6.42953961e-007,-6.43167216e-011,
              2.141387919e-015},
          bhigh={179282.3835,-27.86935079},
          R=259.3049822146652);

        constant IdealGases.Common.DataRecord Sminus(
          name="Sminus",
          MM=0.0320655486,
          Hf=2194520.539093474,
          H0=201615.2937423937,
          Tlimit=1000,
          alow={-2596.051473,-142.2398653,4.00782567,-0.00360885591,4.23623e-006,-2.520987604e-009,
              6.07947976e-013},
          blow={8197.79307,-2.582377345},
          ahigh={2730.311692,141.4072078,2.403340775,3.69357753e-005,-7.94408044e-009,
              8.95220838e-013,-4.09966282e-017},
          bhigh={6931.1957,6.574986902},
          R=259.2961094699624);

        constant IdealGases.Common.DataRecord SCL(
          name="SCL",
          MM=0.067518,
          Hf=2317382.031458278,
          H0=145430.122337747,
          Tlimit=1000,
          alow={16130.51454,-560.624955,8.06493113,-0.0091863264,1.224205395e-005,-8.209562019999999e-009,
              2.205087197e-012},
          blow={19977.3928,-16.9335441},
          ahigh={-94051.23449999999,362.976085,4.06995936,0.0003034029742,-8.24830139e-008,
              1.252700734e-011,-6.41746365e-016},
          bhigh={15231.11069,6.014528409},
          R=123.1445244231168);

        constant IdealGases.Common.DataRecord SCL2(
          name="SCL2",
          MM=0.102971,
          Hf=-170659.7003039691,
          H0=120862.4272853522,
          Tlimit=1000,
          alow={57923.1183,-1062.447681,10.37694738,-0.00613022902,
              6.463485999999999e-006,-3.67903805e-009,8.73193165e-013},
          blow={1262.475821,-26.91769492},
          ahigh={-234103.9963,428.7569580000001,6.47141539,0.000317947674,-9.74748308e-008,
              1.39331857e-011,-6.39479517e-016},
          bhigh={-7210.4737,-2.774273151},
          R=80.7457633702693);

        constant IdealGases.Common.DataRecord SCL2plus(
          name="SCL2plus",
          MM=0.1029704514,
          Hf=8753805.919510614,
          H0=120940.0059015377,
          Tlimit=1000,
          alow={49348.7687,-960.1641020000001,9.88479278,-0.004950257170000001,
              4.94628697e-006,-2.678720604e-009,6.07684403e-013},
          blow={111281.2037,-23.42664942},
          ahigh={-233940.3605,551.628326,6.12521216,0.000677105632,-2.674382769e-007,
              4.93593888e-011,-2.955831247e-015},
          bhigh={102678.7381,0.1365611954},
          R=80.74619356286517);

        constant IdealGases.Common.DataRecord SD(
          name="SD",
          MM=0.034079102,
          Hf=4063806.962988637,
          H0=272731.4528416858,
          Tlimit=1000,
          alow={-32955.7499,164.7104687,4.97898455,-0.008031585710000001,
              1.653766397e-005,-1.345197981e-008,4.00043153e-012},
          blow={14358.62329,-1.997334017},
          ahigh={245673.249,-1180.034105,5.28469005,-0.0002384319882,
              6.009960290000001e-008,-7.13116364e-012,4.0358587e-016},
          bhigh={22655.45124,-8.350483655},
          R=243.9756775281227);

        constant IdealGases.Common.DataRecord SF(
          name="SF",
          MM=0.0510634032,
          Hf=302478.0964853514,
          H0=185457.9484823683,
          Tlimit=1000,
          alow={12064.56774,-291.027077,5.48010157,-0.001975880235,2.47368599e-006,-1.610904623e-009,
              4.31003854e-013},
          blow={1991.337574,-4.544138975},
          ahigh={763458.075,-2423.63843,7.35219871,-0.001598026079,4.86851502e-007,-6.47800053e-011,
              2.98029731e-015},
          bhigh={15774.61591,-19.02584835},
          R=162.8264369187207);

        constant IdealGases.Common.DataRecord SFplus(
          name="SFplus",
          MM=0.0510628546,
          Hf=19477372.06998999,
          H0=173596.2094058094,
          Tlimit=1000,
          alow={65783.0367,-698.669997,5.62129224,-0.000690927411,-1.28239278e-007,
              4.02132042e-010,-1.424033453e-013},
          blow={122175.1247,-6.682377715},
          ahigh={-937494.39,2377.21424,2.052929113,0.001081609837,-1.535468024e-007,
              8.2226919e-012,3.25974688e-017},
          bhigh={102684.9122,18.87705768},
          R=162.8281862643848);

        constant IdealGases.Common.DataRecord SFminus(
          name="SFminus",
          MM=0.0510639518,
          Hf=-4530532.495920145,
          H0=173803.7634603909,
          Tlimit=1000,
          alow={50198.7928,-532.154931,4.90484901,0.0009915307419999999,-2.270841545e-006,
              1.844749756e-009,-5.3570572e-013},
          blow={-26113.88646,-3.637468065},
          ahigh={206892.3125,-1324.372811,6.64621124,-0.001641781588,6.78388312e-007,
              -1.198331099e-010,7.12173954e-015},
          bhigh={-21509.94816,-14.70239183},
          R=162.8246876106444);

        constant IdealGases.Common.DataRecord SF2(
          name="SF2",
          MM=0.0700618064,
          Hf=-4184715.597056031,
          H0=157694.6637219448,
          Tlimit=1000,
          alow={68708.71130000001,-843.241825,6.2694964,0.00648414245,-1.145126533e-005,
              8.770291560000001e-009,-2.542611601e-012},
          blow={-32299.807,-8.80002578},
          ahigh={-170261.2287,-149.7038204,7.11093414,-4.4077416e-005,9.68220831e-009,
              -1.104468959e-012,5.09530878e-017},
          bhigh={-37042.8949,-10.9525396},
          R=118.6733889293497);

        constant IdealGases.Common.DataRecord SF2plus(
          name="SF2plus",
          MM=0.07006125780000001,
          Hf=10077122.83749493,
          H0=160347.9633789846,
          Tlimit=1000,
          alow={131164.8923,-1552.127914,9.803424720000001,-0.002488118587,
              7.501565130000001e-007,3.135384495e-010,-1.986281446e-013},
          blow={91377.5839,-27.92300566},
          ahigh={-384753.102,532.789302,6.2819089,0.000452279012,-1.426421096e-007,
              2.079708115e-011,-9.69170989e-016},
          bhigh={78842.1381,-4.21611053},
          R=118.6743181764573);

        constant IdealGases.Common.DataRecord SF2minus(
          name="SF2minus",
          MM=0.07006235499999999,
          Hf=-5634908.504003327,
          H0=173058.3421011184,
          Tlimit=1000,
          alow={52845.7248,-1032.342905,10.06404631,-0.00520950325,5.16838137e-006,-2.783420867e-009,
              6.28641008e-013},
          blow={-44233.03780000001,-26.9926697},
          ahigh={-93766.18949999999,-36.3899527,7.02794282,-1.142143365e-005,
              2.566295898e-009,-2.981125977e-013,1.395700722e-017},
          bhigh={-49670.5033,-8.483087898999999},
          R=118.6724596967944);

        constant IdealGases.Common.DataRecord SF3(
          name="SF3",
          MM=0.0890602096,
          Hf=-5660231.401476514,
          H0=152124.7823337708,
          Tlimit=1000,
          alow={128400.8253,-2084.871223,14.23421102,-0.00401503219,
              9.152258039999999e-007,1.109809721e-009,-5.98860272e-013},
          blow={-52395.1734,-51.87194724},
          ahigh={-241128.346,-141.8950375,10.10590548,-4.231526910000001e-005,
              9.336120599999999e-009,-1.068727665e-012,4.9443426e-017},
          bhigh={-63584.4586,-24.89561796},
          R=93.35787595092299);

        constant IdealGases.Common.DataRecord SF3plus(
          name="SF3plus",
          MM=0.08905966100000001,
          Hf=4419323.760956152,
          H0=139335.2260795154,
          Tlimit=1000,
          alow={215763.3857,-2564.488498,13.23216044,-0.0001749580869,-3.71295871e-006,
              3.58068842e-009,-1.084376153e-012},
          blow={58760.8842,-50.24130184},
          ahigh={-377826.075,-162.1770252,9.96026597,0.0001237729568,-6.442207889999999e-008,
              1.300856025e-011,-7.915106980000001e-016},
          bhigh={44154.26809999999,-26.7390077},
          R=93.35845102756454);

        constant IdealGases.Common.DataRecord SF3minus(
          name="SF3minus",
          MM=0.08906075819999999,
          Hf=-8871743.548664289,
          H0=154084.6190550397,
          Tlimit=1000,
          alow={154650.0675,-2469.768526,16.57548496,-0.01020137434,9.36800846e-006,-4.7256726e-009,
              1.009661431e-012},
          blow={-85001.579,-65.32166474},
          ahigh={-225386.0964,-130.8890242,10.0997238,-4.05234553e-005,
              9.064565220000001e-009,-1.049320641e-012,4.89920126e-017},
          bhigh={-98002.272,-25.24368023},
          R=93.35730088136619);

        constant IdealGases.Common.DataRecord SF4(
          name="SF4",
          MM=0.1080586128,
          Hf=-7033220.03037966,
          H0=142356.8339570615,
          Tlimit=1000,
          alow={163618.3265,-2531.316261,15.59106568,0.00332670431,-1.054935525e-005,
              9.39136305e-009,-2.914816694e-012},
          blow={-81155.5892,-61.31532958},
          ahigh={-377712.516,-293.7595659,13.21902007,-8.74766945e-005,
              1.929905265e-008,-2.209423506e-012,1.022335559e-016},
          bhigh={-94831.7534,-42.43061278},
          R=76.944093437409);

        constant IdealGases.Common.DataRecord SF4plus(
          name="SF4plus",
          MM=0.1080580642,
          Hf=3850818.215934689,
          H0=152747.0172836948,
          Tlimit=1000,
          alow={230958.7324,-3383.77767,21.01756367,-0.01106529555,
              9.038097280000001e-006,-4.05591264e-009,7.71257518e-013},
          blow={64253.7515,-89.38224908000001},
          ahigh={-418917.275,40.0288964,12.83873264,0.0001340235036,-4.81813518e-008,
              7.574595959999999e-012,-3.69667078e-016},
          bhigh={44699.4423,-37.60378598},
          R=76.94448407488684);

        constant IdealGases.Common.DataRecord SF4minus(
          name="SF4minus",
          MM=0.1080591614,
          Hf=-8212763.346505111,
          H0=171020.3999417675,
          Tlimit=1000,
          alow={100552.3355,-2267.351994,19.7928456,-0.01163761842,1.161792139e-005,-6.28889547e-009,
              1.426371272e-012},
          blow={-98955.9743,-79.16366078},
          ahigh={320882.208,-1710.416599,14.94425485,-0.001057207329,2.74284692e-007,
              -2.905761211e-011,1.084482543e-015},
          bhigh={-100523.1225,-51.64256578},
          R=76.94370280389758);

        constant IdealGases.Common.DataRecord SF5(
          name="SF5",
          MM=0.127057016,
          Hf=-7104395.455029419,
          H0=148055.4131697851,
          Tlimit=1000,
          alow={222417.685,-4043.99175,27.07196786,-0.01744176604,1.604198715e-005,-7.99724302e-009,
              1.667968061e-012},
          blow={-92200.7827,-123.2426279},
          ahigh={-389242.637,-182.5826536,16.13765057,-5.54483423e-005,
              1.231433706e-008,-1.417173409e-012,6.5848894e-017},
          bhigh={-113567.1054,-55.77524201},
          R=65.43890500308933);

        constant IdealGases.Common.DataRecord SF5plus(
          name="SF5plus",
          MM=0.1270564674,
          Hf=1358797.466456241,
          H0=128662.0377106439,
          Tlimit=1000,
          alow={377713.562,-5646.07512,30.4940427,-0.02176488368,1.941993792e-005,-9.55620114e-009,
              2.000077302e-012},
          blow={45922.0481,-148.9889627},
          ahigh={-981434.232,720.881739,15.64386818,-0.0002452519972,2.241690996e-007,
              -3.99003589e-011,2.279087545e-015},
          bhigh={9090.95319,-55.31460631},
          R=65.43918755291948);

        constant IdealGases.Common.DataRecord SF5minus(
          name="SF5minus",
          MM=0.1270575646,
          Hf=-9480917.494305568,
          H0=149931.356389307,
          Tlimit=1000,
          alow={209503.1134,-3930.08114,27.02127215,-0.01792973203,1.718122152e-005,-9.00056019e-009,
              1.988018147e-012},
          blow={-129181.6581,-123.1672857},
          ahigh={-373321.92,-179.3729521,16.13699748,-5.57753997e-005,
              1.249477046e-008,-1.448104799e-012,6.7674623e-017},
          bhigh={-149855.4401,-56.31439391},
          R=65.4386224556991);

        constant IdealGases.Common.DataRecord SF6(
          name="SF6",
          MM=0.1460554192,
          Hf=-8348885.694752777,
          H0=115983.830608868,
          Tlimit=1000,
          alow={330952.674,-4737.68505,22.47738068,0.01046954309,-2.560641961e-005,
              2.153716967e-008,-6.51609896e-012},
          blow={-125536.0583,-109.1760145},
          ahigh={-730672.65,-636.705655,19.47442853,-0.0001894325671,4.17872283e-008,
              -4.78374495e-012,2.213516129e-016},
          bhigh={-151060.9837,-81.47574587},
          R=56.92682986733026);

        constant IdealGases.Common.DataRecord SF6minus(
          name="SF6minus",
          MM=0.1460559678,
          Hf=-9187409.821127487,
          H0=119753.504519245,
          Tlimit=1000,
          alow={498580.921,-6934.44574,34.4131833,-0.0198403236,1.497871222e-005,-6.133234650000001e-009,
              1.045159581e-012},
          blow={-129706.9066,-174.7984495},
          ahigh={-681807.3509999999,-594.742996,19.45009842,-0.0001820212649,
              4.05707957e-008,-4.683820930000001e-012,2.182263999e-016},
          bhigh={-165890.2452,-79.65845887},
          R=56.92661604478445);

        constant IdealGases.Common.DataRecord SH(
          name="SH",
          MM=0.03307294,
          Hf=4297631.507812732,
          H0=275092.2355254779,
          Tlimit=1000,
          alow={6389.43468,-374.796092,7.54814577,-0.01288875477,1.907786343e-005,-1.265033728e-008,
              3.23515869e-012},
          blow={17429.02395,-17.60761843},
          ahigh={1682631.601,-5177.15221,9.198168519999999,-0.002323550224,
              6.543914779999999e-007,-8.468470419999999e-011,3.86474155e-015},
          bhigh={48992.14490000001,-37.70400275},
          R=251.3980311396568);

        constant IdealGases.Common.DataRecord SHminus(
          name="SHminus",
          MM=0.0330734886,
          Hf=-2617628.186946085,
          H0=261420.9859917832,
          Tlimit=1000,
          alow={38780.7076,-574.25906,6.89854446,-0.01001352412,1.486460572e-005,-9.7503689e-009,
              2.446909813e-012},
          blow={-8735.38898,-16.15966489},
          ahigh={1198715.402,-3894.84682,7.66042233,-0.00135523759,3.34237024e-007,-3.35072231e-011,
              9.05508478e-016},
          bhigh={13174.77387,-28.18370616},
          R=251.3938611241634);

        constant IdealGases.Common.DataRecord SN(
          name="SN",
          MM=0.0460717,
          Hf=5803743.143838843,
          H0=203880.3213252387,
          Tlimit=1000,
          alow={-68354.1235,1147.567483,-2.877802574,0.0172486432,-2.058999904e-005,
              1.26136964e-008,-3.139030141e-012},
          blow={25641.43612,42.24006964},
          ahigh={-483728.446,1058.07559,3.086198804,0.000911136078,-2.764061722e-007,
              4.157370109999999e-011,-2.128351755e-015},
          bhigh={23793.45477,10.33222139},
          R=180.4680964670286);

        constant IdealGases.Common.DataRecord SO(
          name="SO",
          MM=0.0480644,
          Hf=99040.16278160134,
          H0=183048.2852173334,
          Tlimit=1000,
          alow={-33427.57,640.38625,-1.006641228,0.01381512705,-1.704486364e-005,
              1.06129493e-008,-2.645796205e-012},
          blow={-3371.29219,30.93861963},
          ahigh={-1443410.557,4113.87436,-0.538369578,0.002794153269,-6.63335226e-007,
              7.838221189999999e-011,-3.56050907e-015},
          bhigh={-27088.38059,36.15358329},
          R=172.9860770133404);

        constant IdealGases.Common.DataRecord SOminus(
          name="SOminus",
          MM=0.0480649486,
          Hf=-2204685.307829498,
          H0=196965.0291064703,
          Tlimit=1000,
          alow={8420.196969999999,-69.1658668,3.83766661,0.002166482062,-2.811222562e-006,
              1.793426453e-009,-4.52179595e-013},
          blow={-13541.62531,4.316141603},
          ahigh={176715.6147,-663.398736,5.17727981,-0.0002853461125,7.21442153e-008,
              -3.67646949e-012,-2.910092894e-016},
          bhigh={-9984.43801,-3.951456757},
          R=172.9841025982081);

        constant IdealGases.Common.DataRecord SOF2(
          name="SOF2",
          MM=0.08606120640000001,
          Hf=-6796933.687882859,
          H0=146696.1192865639,
          Tlimit=1000,
          alow={61145.7965,-908.1119669999999,6.88362326,0.01192459695,-1.67100641e-005,
              1.110723646e-008,-2.910788226e-012},
          blow={-67429.3584,-11.25458745},
          ahigh={-251055.5779,-607.4439609999999,10.45046709,-0.0001796384979,
              3.96416973e-008,-4.54305524e-012,2.104969923e-016},
          bhigh={-70720.71710000001,-29.04334504},
          R=96.61114859761017);

        constant IdealGases.Common.DataRecord SO2(
          name="SO2",
          MM=0.0640638,
          Hf=-4633037.690552231,
          H0=164650.3485587805,
          Tlimit=1000,
          alow={-53108.4214,909.031167,-2.356891244,0.02204449885,-2.510781471e-005,
              1.446300484e-008,-3.36907094e-012},
          blow={-41137.52080000001,40.45512519},
          ahigh={-112764.0116,-825.226138,7.61617863,-0.000199932761,5.65563143e-008,
              -5.45431661e-012,2.918294102e-016},
          bhigh={-33513.0869,-16.55776085},
          R=129.7842463294403);

        constant IdealGases.Common.DataRecord SO2minus(
          name="SO2minus",
          MM=0.0640643486,
          Hf=-6378057.030614996,
          H0=167791.1542832732,
          Tlimit=1000,
          alow={94609.01659999999,-856.269105,5.36007422,0.00760957674,-1.092005659e-005,
              7.20254773e-009,-1.85013822e-012},
          blow={-45800.9481,-3.929956604},
          ahigh={-179340.0005,-366.316876,7.27444105,-0.0001101944663,
              2.443328132e-008,-2.809735019e-012,1.305160431e-016},
          bhigh={-49730.7261,-12.61421156},
          R=129.7831349525343);

        constant IdealGases.Common.DataRecord SO2CL2(
          name="SO2CL2",
          MM=0.1349698,
          Hf=-2628759.915181026,
          H0=118757.7072797026,
          Tlimit=1000,
          alow={6821.59239,-584.9569200000001,8.59675691,0.01197228675,-1.3337607e-005,
              7.126128999999999e-009,-1.496150016e-012},
          blow={-42307.8381,-16.52458363},
          ahigh={-237663.9109,-964.7740410000001,13.71469904,-0.0002850327057,
              6.29350962e-008,-7.21784426e-012,3.34684022e-016},
          bhigh={-41900.7299,-44.81942574999999},
          R=61.60246218042851);

        constant IdealGases.Common.DataRecord SO2FCL(
          name="SO2FCL",
          MM=0.1185152032,
          Hf=-4695363.843412791,
          H0=124042.9970422563,
          Tlimit=1000,
          alow={36845.613,-803.8358949999999,7.52618688,0.01620141782,-1.97059527e-005,
              1.16625033e-008,-2.759241465e-012},
          blow={-65035.9819,-12.99745646},
          ahigh={-291540.2438,-1107.134423,13.81845158,-0.000325851446,7.184741e-008,
              -8.230625200000001e-012,3.81292562e-016},
          bhigh={-65524.7269,-47.09166446},
          R=70.15531995476509);

        constant IdealGases.Common.DataRecord SO2F2(
          name="SO2F2",
          MM=0.1020606064,
          Hf=-7446555.794714541,
          H0=132180.7842991613,
          Tlimit=1000,
          alow={55331.5353,-807.463968,5.28717216,0.02294547775,-2.891025299e-005,
              1.785631907e-008,-4.4189195e-012},
          blow={-88994.28820000001,-4.124256607},
          ahigh={-340390.445,-1309.288764,13.96601541,-0.000384008815,
              8.456688780000001e-008,-9.678246870000001e-012,4.48001428e-016},
          bhigh={-89019.9414,-51.0927005},
          R=81.46602585735764);

        constant IdealGases.Common.DataRecord SO3(
          name="SO3",
          MM=0.0800632,
          Hf=-4944843.573576874,
          H0=145990.9046852986,
          Tlimit=1000,
          alow={-39528.5529,620.857257,-1.437731716,0.02764126467,-3.144958662e-005,
              1.792798e-008,-4.12638666e-012},
          blow={-51841.0617,33.91331216},
          ahigh={-216692.3781,-1301.022399,10.96287985,-0.000383710002,
              8.466889039999999e-008,-9.70539929e-012,4.49839754e-016},
          bhigh={-43982.83990000001,-36.55217314},
          R=103.8488594010732);

        constant IdealGases.Common.DataRecord S2(
          name="S2",
          MM=0.06412999999999999,
          Hf=2005301.730859192,
          H0=142399.9688133479,
          Tlimit=1000,
          alow={35280.9178,-422.215658,4.67743349,0.001724046361,-3.86220821e-006,
              3.33615634e-009,-9.93066154e-013},
          blow={16547.67715,-0.7957279032},
          ahigh={-15881.28788,631.548088,2.449628069,0.001986240565,-6.50792724e-007,
              1.002813651e-010,-5.59699005e-015},
          bhigh={10855.08427,14.58544515},
          R=129.650272883206);

        constant IdealGases.Common.DataRecord S2minus(
          name="S2minus",
          MM=0.0641305486,
          Hf=-579012.4333974589,
          H0=149649.6632183807,
          Tlimit=1000,
          alow={10255.58251,-616.6128249999999,8.182052840000001,-0.008311203580000001,
              9.72027416e-006,-5.77547678e-009,1.393690695e-012},
          blow={-3063.559874,-19.06068041},
          ahigh={483020.403,-1319.171302,6.03177848,-0.0007965560690000001,
              2.28224169e-007,-2.504364698e-011,7.28055078e-016},
          bhigh={2660.25849,-9.010480318999999},
          R=129.6491637996061);

        constant IdealGases.Common.DataRecord S2CL2(
          name="S2CL2",
          MM=0.135036,
          Hf=-123937.3204182589,
          H0=122343.382505406,
          Tlimit=1000,
          alow={79749.74740000001,-1636.770024,15.83744686,-0.01186906072,
              1.413008027e-005,-8.48490393e-009,1.981743887e-012},
          blow={3276.87242,-52.93745205},
          ahigh={632881.6,-3442.7058,15.1963735,-0.002960877176,6.88828437e-007,-7.990692529999999e-011,
              3.69246606e-015},
          bhigh={15266.72656,-54.53315445000001},
          R=61.5722622115584);

        constant IdealGases.Common.DataRecord S2F2(
          name="S2F2",
          MM=0.1021268064,
          Hf=-3930535.127357121,
          H0=134322.1479605574,
          Tlimit=1000,
          alow={125290.4041,-1941.243874,13.25382183,-0.001341525124,-2.772465632e-006,
              3.65816929e-009,-1.299531209e-012},
          blow={-40672.0825,-45.60828617},
          ahigh={-259175.7719,-105.9653069,10.06588551,-2.274618148e-005,
              5.41234314e-009,-9.91138714e-013,9.621861440000001e-017},
          bhigh={-51476.75180000001,-23.7566614},
          R=81.41321845936034);

        constant IdealGases.Common.DataRecord S2O(
          name="S2O",
          MM=0.0801294,
          Hf=-699312.5494512626,
          H0=138882.320346839,
          Tlimit=1000,
          alow={10927.0331,-95.23099869999999,3.14452543,0.011768542,-1.58026684e-005,
              1.03764504e-008,-2.70862226e-012},
          blow={-7500.4719,11.04169896},
          ahigh={-144213.979,-327.643013,7.24428611,-9.7765383e-005,2.1627127e-008,-2.48278222e-012,
              1.15177875e-016},
          bhigh={-7438.55393,-10.85180744},
          R=103.7630632452009);

        constant IdealGases.Common.DataRecord S3(
          name="S3",
          MM=0.09619499999999999,
          Hf=1504634.627579396,
          H0=124479.733873902,
          Tlimit=1000,
          alow={72453.9574,-1162.146759,9.95541368,-0.00415802622,3.24177839e-006,-1.264648239e-009,
              1.777450535e-013},
          blow={21462.75475,-25.87525865},
          ahigh={-111780.5401,-51.97908390000001,7.03876084,-1.546804022e-005,
              3.40834041e-009,-3.89686236e-013,1.800860389e-017},
          bhigh={15254.06485,-7.610045099},
          R=86.43351525547067);

        constant IdealGases.Common.DataRecord S4(
          name="S4",
          MM=0.12826,
          Hf=1057479.596132855,
          H0=111338.944331826,
          Tlimit=1000,
          alow={119866.4135,-2040.786521,15.10235054,-0.0070411043,5.350405e-006,-2.002348038e-009,
              2.569940995e-013},
          blow={24109.09409,-55.03153238},
          ahigh={-206833.3537,-96.96151430000001,10.0724321,-2.895047053e-005,
              6.38780619e-009,-7.31176743e-013,3.38226529e-017},
          bhigh={13211.0953,-23.44872237},
          R=64.82513644160301);

        constant IdealGases.Common.DataRecord S5(
          name="S5",
          MM=0.160325,
          Hf=829523.4929050366,
          H0=118842.0645563699,
          Tlimit=1000,
          alow={136137.0439,-2955.476536,26.33358816,-0.0412580653,7.05681403e-005,-5.611095330000001e-008,
              1.6594572e-011},
          blow={26753.07046,-106.9711067},
          ahigh={-4038495.16,8601.80388,7.4437809,0.001533393812,-2.532718676e-007,
              2.145210795e-011,-7.213102680000001e-016},
          bhigh={-46869.2542,11.04229196},
          R=51.8601091532824);

        constant IdealGases.Common.DataRecord S6(
          name="S6",
          MM=0.19239,
          Hf=526613.5454025677,
          H0=118442.6373512137,
          Tlimit=1000,
          alow={97803.07210000001,-2568.47013,24.67025557,-0.01619983175,
              1.712334526e-005,-9.74629674e-009,2.486964867e-012},
          blow={20378.88389,-101.4410309},
          ahigh={3686845.06,-7695.0179,18.60721995,0.002290382548,-1.219834021e-006,
              2.060780798e-010,-1.190354318e-014},
          bhigh={60324.8648,-74.90245718},
          R=43.21675762773533);

        constant IdealGases.Common.DataRecord S7(
          name="S7",
          MM=0.224455,
          Hf=498498.0018266468,
          H0=117058.5106145998,
          Tlimit=1000,
          alow={123365.5613,-3200.54364,30.15678887,-0.02197472483,2.487892075e-005,-1.506049557e-008,
              3.76892599e-012},
          blow={23900.05896,-127.5978171},
          ahigh={-272639.6041,-73.7321522,19.05771987,-2.394575885e-005,
              5.4426713e-009,-6.379663479999999e-013,3.008212993e-017},
          bhigh={7308.458830000001,-61.59112428},
          R=37.04293510948742);

        constant IdealGases.Common.DataRecord S8(
          name="S8",
          MM=0.25652,
          Hf=394811.7963511617,
          H0=123082.4964915017,
          Tlimit=1000,
          alow={314562.5719,-6116.51016,48.7532754,-0.0624179465,
              7.421831750000001e-005,-3.72644931e-008,5.79942988e-012},
          blow={35738.9084,-228.8701977},
          ahigh={-8727921.130000001,12216.27968,22.09959617,-0.00349406483,
              1.397604162e-006,-2.169815281e-010,1.212304364e-014},
          bhigh={-86581.10819999999,-64.35742508},
          R=32.4125682208015);

        constant IdealGases.Common.DataRecord Sc(
          name="Sc",
          MM=0.04495591,
          Hf=8401570.761219159,
          H0=155758.3641394424,
          Tlimit=1000,
          alow={-3700.80594,169.2506026,1.842242597,0.001364835821,-1.580085847e-006,
              9.61311115e-010,-2.392381918e-013},
          blow={43852.1524,10.72781921},
          ahigh={8810382.649999999,-27112.32975,34.7658866,-0.01861104581,
              5.290283900000001e-006,-6.58540806e-010,2.997850429e-014},
          bhigh={216246.0097,-222.5618519},
          R=184.9472516516738);

        constant IdealGases.Common.DataRecord Scplus(
          name="Scplus",
          MM=0.0449553614,
          Hf=22625671.11739424,
          H0=159311.8546256421,
          Tlimit=1000,
          alow={-5884.93016,147.9044408,2.009576456,0.000738956697,-6.61796482e-007,
              6.84107376e-010,-2.164125532e-013},
          blow={120843.9139,10.2657062},
          ahigh={1973658.531,-4954.3841,6.36062735,-0.000716878592,2.464991123e-008,
              9.632373790000001e-012,-8.544709642000001e-016},
          bhigh={154342.3764,-22.61925782},
          R=184.9495086029939);

        constant IdealGases.Common.DataRecord Scminus(
          name="Scminus",
          MM=0.0449564586,
          Hf=7842228.65810876,
          H0=137854.0079222344,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={41657.4639,8.270420720000001},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={41657.4639,8.270420720000001},
          R=184.9449947554365);

        constant IdealGases.Common.DataRecord ScO(
          name="ScO",
          MM=0.06095531,
          Hf=-903371.5684490819,
          H0=144156.5304154798,
          Tlimit=1000,
          alow={-3136.784613,227.1981685,0.885075732,0.01052430774,-1.431954596e-005,
              9.652351069999999e-009,-2.586210633e-012},
          blow={-8550.798769999999,20.12706847},
          ahigh={1224192.443,-3918.91572,8.679848809999999,-0.001995893306,
              4.06698985e-007,-1.504459913e-011,-8.4729989e-016},
          bhigh={16773.22594,-29.51656272},
          R=136.4027514584045);

        constant IdealGases.Common.DataRecord ScOplus(
          name="ScOplus",
          MM=0.0609547614,
          Hf=9206991.432830053,
          H0=143993.1155238678,
          Tlimit=1000,
          alow={45885.6027,-336.711437,3.5272064,0.0039888503,-5.568985429999999e-006,
              3.65028119e-009,-9.356491500000001e-013},
          blow={68383.5079,4.3398127},
          ahigh={-1814357.141,5853.42532,-3.65710121,0.00573436451,-2.092878161e-006,
              3.69564502e-010,-2.214038347e-014},
          bhigh={29553.64078,56.6088941},
          R=136.4039790991619);

        constant IdealGases.Common.DataRecord ScO2(
          name="ScO2",
          MM=0.07695471000000001,
          Hf=-5375248.207679556,
          H0=139720.2718326143,
          Tlimit=1000,
          alow={47947.00960000001,-429.835859,3.4172065,0.01361338544,-2.047465023e-005,
              1.455906041e-008,-4.03808769e-012},
          blow={-48610.4953,7.67001333},
          ahigh={-190390.2542,-231.558882,7.17210491,-6.85920964e-005,
              1.510998557e-008,-1.727951588e-012,7.9889805e-017},
          bhigh={-51129.74750000001,-10.90764597},
          R=108.0437051871159);

        constant IdealGases.Common.DataRecord Sc2O(
          name="Sc2O",
          MM=0.10591122,
          Hf=-217580.4225463553,
          H0=110562.827998771,
          Tlimit=1000,
          alow={25500.02615,-307.7608607,4.67121504,0.008696142249999999,-1.283873116e-005,
              8.988966810000001e-009,-2.461994147e-012},
          blow={-2614.951944,2.92001718},
          ahigh={-135088.0396,-185.4540692,7.13829408,-5.52943214e-005,
              1.221589315e-008,-1.400490463e-012,6.48885811e-017},
          bhigh={-4240.235140000001,-9.37271095},
          R=78.50416603642182);

        constant IdealGases.Common.DataRecord Sc2O2(
          name="Sc2O2",
          MM=0.12191062,
          Hf=-4024022.02531658,
          H0=107732.8619934834,
          Tlimit=1000,
          alow={3468.44549,261.7988314,-0.3052099624,0.0307610407,-4.18347836e-005,
              2.794218425e-008,-7.41267205e-012},
          blow={-61440.1321,29.15248555},
          ahigh={-297734.8677,-580.367792,10.43318377,-0.0001734165462,
              3.83608979e-008,-4.403078029999999e-012,2.042208922e-016},
          bhigh={-59648.6628,-28.55828369},
          R=68.20137572920227);

        constant IdealGases.Common.DataRecord Si(
          name="Si",
          MM=0.0280855,
          Hf=16022502.71492407,
          H0=268831.1762297271,
          Tlimit=1000,
          alow={98.36140810000001,154.6544523,1.87643667,0.001320637995,-1.529720059e-006,
              8.95056277e-010,-1.95287349e-013},
          blow={52635.1031,9.69828888},
          ahigh={-616929.885,2240.683927,-0.444861932,0.001710056321,-4.10771416e-007,
              4.55888478e-011,-1.889515353e-015},
          bhigh={39535.5876,26.79668061},
          R=296.0414448736893);

        constant IdealGases.Common.DataRecord Siplus(
          name="Siplus",
          MM=0.0280849514,
          Hf=44241060.89070889,
          H0=261454.7874916387,
          Tlimit=1000,
          alow={-43297.9188,679.5894490000001,0.2257046144,0.004118600490000001,-4.234881599999999e-006,
              2.327995626e-009,-5.318388059e-013},
          blow={145203.9813,19.3465051},
          ahigh={59193.9023,-48.5673095,2.556312024,-3.50339716e-005,1.190298787e-008,
              -2.082923821e-012,1.471452049e-016},
          bhigh={149143.1392,5.24426714},
          R=296.0472276266784);

        constant IdealGases.Common.DataRecord Siminus(
          name="Siminus",
          MM=0.0280860486,
          Hf=10995406.73727952,
          H0=220658.5941747605,
          Tlimit=1000,
          alow={-794.014667,5.56741842,2.499837183,-9.48139446e-005,3.17124693e-007,-4.19132318e-010,
              2.03592438e-013},
          blow={36364.4338,5.27011984},
          ahigh={-6162070.100000001,18833.10402,-18.9930245,0.01111021657,-2.535790208e-006,
              2.699962923e-010,-1.105062911e-014},
          bhigh={-83140.8931,159.5298253},
          R=296.0356623466072);

        constant IdealGases.Common.DataRecord SiBr(
          name="SiBr",
          MM=0.1079895,
          Hf=1621985.665273013,
          H0=92926.82158913597,
          Tlimit=1000,
          alow={7370.283350000001,-505.106296,8.280591039999999,-0.0100538392,
              1.35705092e-005,-9.1154499e-009,2.447477685e-012},
          blow={21844.05475,-16.62032657},
          ahigh={1317799.94,-3669.79502,8.51168612,-0.001987602041,5.03541489e-007,-4.49012019e-011,
              8.23567007e-016},
          bhigh={43328.5155,-24.67075472},
          R=76.99333731520194);

        constant IdealGases.Common.DataRecord SiBr2(
          name="SiBr2",
          MM=0.1878935,
          Hf=-271430.3581550187,
          H0=70876.11333015778,
          Tlimit=1000,
          alow={23866.16151,-641.569347,9.34587911,-0.00479290414,5.58253847e-006,-3.45531238e-009,
              8.80033894e-013},
          blow={-5014.75702,-17.40767596},
          ahigh={-51473.4394,-12.77719997,7.01020224,-4.29633186e-006,
              9.877651970000001e-010,-1.168133105e-013,5.54668138e-018},
          bhigh={-8319.54225,-3.61182661},
          R=44.25098260450734);

        constant IdealGases.Common.DataRecord SiBr3(
          name="SiBr3",
          MM=0.2677975,
          Hf=-586263.8747561124,
          H0=65203.89473389407,
          Tlimit=1000,
          alow={39728.0686,-1066.475023,13.80836232,-0.00764111472,8.77586583e-006,-5.37243085e-009,
              1.356453455e-012},
          blow={-16517.95623,-37.8405537},
          ahigh={-88880.24740000001,-22.67879074,10.01791167,-7.48115075e-006,
              1.70924269e-009,-2.011596627e-013,9.51553415e-018},
          bhigh={-22030.26938,-15.37574366},
          R=31.04760873421148);

        constant IdealGases.Common.DataRecord SiBr4(
          name="SiBr4",
          MM=0.3477015,
          Hf=-1195853.33971812,
          H0=64174.93453436353,
          Tlimit=1000,
          alow={68210.8674,-1520.370776,18.1045336,-0.00973468842,1.072367466e-005,-6.34385829e-009,
              1.5572282e-012},
          blow={-46165.8521,-59.7612063},
          ahigh={-127140.9281,-37.6808795,13.02910642,-1.194958251e-005,
              2.693843051e-009,-3.137193207e-013,1.471642663e-017},
          bhigh={-54089.9883,-29.4038433},
          R=23.9126722202809);

        constant IdealGases.Common.DataRecord SiC(
          name="SiC",
          MM=0.04009620000000001,
          Hf=18329570.88202872,
          H0=229874.9258034427,
          Tlimit=1000,
          alow={-6223.330889999999,314.1790457,0.389313083,0.0118750754,-1.639277197e-005,
              1.131808223e-008,-3.045324231e-012},
          blow={86062.2773,23.10166717},
          ahigh={-62688.06030000001,720.983692,2.162879732,0.002201299585,-6.569466590000001e-007,
              9.177110259999999e-011,-4.96916674e-015},
          bhigh={83212.2585,16.01675317},
          R=207.3630917643068);

        constant IdealGases.Common.DataRecord SiC2(
          name="SiC2",
          MM=0.05210690000000001,
          Hf=12116647.46895325,
          H0=224258.3803680511,
          Tlimit=1000,
          alow={-41196.2899,686.9747180000001,0.02361343691,0.01532939217,-1.435588838e-005,
              6.37522874e-009,-1.059204957e-012},
          blow={71308.9071,28.28850316},
          ahigh={7026893.09,-24661.48437,39.15453030000001,-0.02002884068,
              6.30735369e-006,-8.84838351e-010,4.53054985e-014},
          bhigh={226732.5155,-236.6622024},
          R=159.5656621291998);

        constant IdealGases.Common.DataRecord SiCL(
          name="SiCL",
          MM=0.0635385,
          Hf=2240581.993594435,
          H0=155561.100749939,
          Tlimit=1000,
          alow={12485.08319,-204.4170347,4.97707085,-0.0005160756260000001,
              2.931980374e-007,-3.66661523e-012,-3.39303713e-014},
          blow={16865.28019,-0.226395724},
          ahigh={376729.456,-1147.956509,5.73540843,-0.0005784890810000001,
              1.517304648e-007,-1.291391394e-011,1.55462842e-016},
          bhigh={23062.78401,-6.098515228},
          R=130.857228294656);

        constant IdealGases.Common.DataRecord SiCL2(
          name="SiCL2",
          MM=0.0989915,
          Hf=-1647305.950510903,
          H0=126569.392321563,
          Tlimit=1000,
          alow={53055.5097,-1015.842786,10.32848185,-0.00621226752,6.7158254e-006,-3.90880164e-009,
              9.46173215e-013},
          blow={-16502.18093,-26.49925756},
          ahigh={-80508.7157,-26.61025523,7.02041472,-8.335824719999999e-006,
              1.871092411e-009,-2.171552767e-013,1.015849895e-017},
          bhigh={-21812.94885,-6.638764238},
          R=83.99177707176879);

        constant IdealGases.Common.DataRecord SiCL3(
          name="SiCL3",
          MM=0.1344445,
          Hf=-2501193.20611851,
          H0=116906.7310302764,
          Tlimit=1000,
          alow={86917.08459999999,-1677.556857,15.1151906,-0.008937031,
              9.097353529999999e-006,-5.01457996e-009,1.155962016e-012},
          blow={-34774.773,-50.87215506},
          ahigh={-147718.0114,-53.3520098,10.04043521,-1.63512106e-005,
              3.64194011e-009,-4.20060059e-013,1.955201587e-017},
          bhigh={-43605.7165,-20.06632444},
          R=61.84315461026669);

        constant IdealGases.Common.DataRecord SiCL4(
          name="SiCL4",
          MM=0.1698975,
          Hf=-3897644.16780706,
          H0=114512.797421975,
          Tlimit=1000,
          alow={117164.6285,-2185.821461,19.08250496,-0.00963633572,
              8.836847690000002e-006,-4.3600424e-009,8.94023243e-013},
          blow={-72128.0211,-73.01532221000001},
          ahigh={-210033.0761,-84.76107710000001,13.06364027,-2.55402042e-005,
              5.65381847e-009,-6.48875267e-013,3.008025543e-017},
          bhigh={-83722.6813,-35.92584781},
          R=48.93816565870598);

        constant IdealGases.Common.DataRecord SiF(
          name="SiF",
          MM=0.0470839032,
          Hf=-535908.9685665653,
          H0=200835.3886854478,
          Tlimit=1000,
          alow={14782.23768,13.57998649,2.324182643,0.00713285118,-1.022951215e-005,
              7.14839647e-009,-1.964689785e-012},
          blow={-3995.38065,12.31128121},
          ahigh={-365363.788,872.2860040000001,3.37721827,0.000750815243,-2.308898619e-007,
              3.7667818e-011,-2.143080403e-015},
          bhigh={-10116.97664,8.968132819999999},
          R=176.5884184385121);

        constant IdealGases.Common.DataRecord SiFCL(
          name="SiFCL",
          MM=0.0825369032,
          Hf=-4577667.701978914,
          H0=143364.7682579882,
          Tlimit=1000,
          alow={41769.5464,-592.6575380000001,6.40977071,0.00464168261,-7.978461910000001e-006,
              6.00872837e-009,-1.720953157e-012},
          blow={-43982.9607,-6.259737448},
          ahigh={-128469.8945,-124.7550173,7.09289385,-3.70731177e-005,
              8.175173009999999e-009,-9.35643521e-013,4.32854434e-017},
          bhigh={-47233.0972,-8.337392707999999},
          R=100.7364182280103);

        constant IdealGases.Common.DataRecord SiF2(
          name="SiF2",
          MM=0.0660823064,
          Hf=-8971207.881448884,
          H0=169553.2527599551,
          Tlimit=1000,
          alow={40532.3665,-399.763756,4.05530388,0.01153423049,-1.757586754e-005,
              1.260369111e-008,-3.51710522e-012},
          blow={-70477.7046,3.87985442},
          ahigh={-167520.0202,-184.621209,7.13698635,-5.45076986e-005,
              1.199012961e-008,-1.369470187e-012,6.32488999e-017},
          bhigh={-72874.0102,-11.17933348},
          R=125.8199426283947);

        constant IdealGases.Common.DataRecord SiF3(
          name="SiF3",
          MM=0.08508070960000001,
          Hf=-11711662.74569953,
          H0=153014.1680905774,
          Tlimit=1000,
          alow={57553.6998,-717.959577,5.37939694,0.01813065142,-2.738373356e-005,
              1.94651947e-008,-5.39079056e-012},
          blow={-117763.1169,-3.44290204},
          ahigh={-290328.3702,-342.787694,10.25536335,-0.000101979669,
              2.250326132e-008,-2.577117181e-012,1.192923177e-016},
          bhigh={-121808.8967,-27.25261142},
          R=97.7245257954454);

        constant IdealGases.Common.DataRecord SiF4(
          name="SiF4",
          MM=0.1040791128,
          Hf=-15524536.638825,
          H0=147634.9344899489,
          Tlimit=1000,
          alow={10696.70784,-95.69638640000001,2.513988593,0.0330978103,-4.57304408e-005,
              3.091834452e-008,-8.26930405e-012},
          blow={-195625.2529,11.33722022},
          ahigh={-384589.232,-656.997991,13.4892572,-5.10047136e-005,5.34632958e-008,
              -4.95959811e-012,2.299314375e-016},
          bhigh={-195728.4479,-46.7389465},
          R=79.88607681521283);

        constant IdealGases.Common.DataRecord SiH(
          name="SiH",
          MM=0.02909344,
          Hf=12670767.36198951,
          H0=314335.809034614,
          Tlimit=1000,
          alow={-6426.676299999999,74.17251210000001,3.9734916,-0.00414940888,
              1.022918384e-005,-8.592386360000002e-009,2.567093743e-012},
          blow={42817.45800000001,2.24693715},
          ahigh={404208.649,-2364.796524,7.62749914,-0.002496591233,1.10843641e-006,-1.943991955e-010,
              1.136251507e-014},
          bhigh={57047.3768,-24.48054429},
          R=285.7851116952825);

        constant IdealGases.Common.DataRecord SiHplus(
          name="SiHplus",
          MM=0.0290928914,
          Hf=39448508.27030551,
          H0=297469.951714734,
          Tlimit=1000,
          alow={-43071.5717,388.495824,2.546166863,-0.0006686325980000001,
              5.186277020000001e-006,-4.81856974e-009,1.44570264e-012},
          blow={134907.9707,9.027950089999999},
          ahigh={171169.2033,-1045.807287,4.83864824,0.0001277940891,-6.883872450000001e-008,
              1.41884348e-011,-7.85531696e-016},
          bhigh={143172.145,-7.55329914},
          R=285.7905006994252);

        constant IdealGases.Common.DataRecord SiHBr3(
          name="SiHBr3",
          MM=0.26880544,
          Hf=-1126919.157588478,
          H0=66306.05764526196,
          Tlimit=1000,
          alow={132281.1122,-2205.365507,17.75084194,-0.01047794569,1.286821723e-005,
              -7.743124260000001e-009,1.819060891e-012},
          blow={-28349.92682,-63.3119954},
          ahigh={219997.3526,-2024.458552,14.35781007,-0.000503701584,
              1.054049755e-007,-1.160828765e-011,5.21725768e-016},
          bhigh={-28420.86214,-45.3643717},
          R=30.9311894878318);

        constant IdealGases.Common.DataRecord SiHCL(
          name="SiHCL",
          MM=0.06454644000000001,
          Hf=851261.7117225983,
          H0=165236.2701955367,
          Tlimit=1000,
          alow={59096.73050000001,-878.006403,7.99968793,-0.00466314127,8.594986e-006,
              -6.608073550000001e-009,1.868076396e-012},
          blow={9567.57034,-16.90014311},
          ahigh={101215.289,-1163.239598,7.37636655,0.0001874151313,-1.661351093e-007,
              3.96441404e-011,-2.64058008e-015},
          bhigh={11410.64087,-15.07678798},
          R=128.8137967020334);

        constant IdealGases.Common.DataRecord SiHCL3(
          name="SiHCL3",
          MM=0.13545244,
          Hf=-3663440.835764937,
          H0=119241.912511875,
          Tlimit=1000,
          alow={165956.5586,-2552.498122,17.50117375,-0.007885728660000001,
              8.092567490000001e-006,-3.9804206e-009,7.05917332e-013},
          blow={-49513.16600000001,-67.58519052999999},
          ahigh={172864.4072,-2116.727327,14.41802307,-0.000525524962,
              1.098826178e-007,-1.209327059e-011,5.432187049999999e-016},
          bhigh={-51303.5194,-50.36360893000001},
          R=61.3829621673851);

        constant IdealGases.Common.DataRecord SiHF(
          name="SiHF",
          MM=0.0480918432,
          Hf=-3382219.482076328,
          H0=212722.7887160707,
          Tlimit=1000,
          alow={21925.98671,-61.7522908,2.127372739,0.01123538312,-1.322503985e-005,
              8.30730739e-009,-2.010545971e-012},
          blow={-20169.94845,13.67184876},
          ahigh={4049752.24,-9295.526819999999,10.71754366,0.00186812422,-1.129820372e-006,
              1.9602501e-010,-1.144682011e-014},
          bhigh={41332.252,-47.363176},
          R=172.8873639844189);

        constant IdealGases.Common.DataRecord SiHF3(
          name="SiHF3",
          MM=0.0860886496,
          Hf=-13948505.47173643,
          H0=157333.5632854439,
          Tlimit=1000,
          alow={83258.7939,-817.8594459999999,4.04171724,0.02726104628,-3.78783148e-005,
              2.630589305e-008,-7.2895825e-012},
          blow={-141614.6961,1.382806532},
          ahigh={78201.008,-2592.742261,14.75104214,-0.00065310472,1.372428937e-007,-1.516371051e-011,
              6.83249715e-016},
          bhigh={-133661.1887,-58.5145095},
          R=96.58035105245745);

        constant IdealGases.Common.DataRecord SiHI3(
          name="SiHI3",
          MM=0.40980685,
          Hf=-181731.9549441402,
          H0=46693.76317160145,
          Tlimit=1000,
          alow={111384.0054,-1974.457175,17.91396249,-0.01219208519,1.613169233e-005,
              -1.038096942e-008,2.613287761e-012},
          blow={-2256.377425,-59.9545513},
          ahigh={227942.4252,-1898.603142,14.28134804,-0.000477602695,
              1.003097496e-007,-1.107859145e-011,4.990338200000001e-016},
          bhigh={-1614.547674,-41.2294307},
          R=20.28875798440168);

        constant IdealGases.Common.DataRecord SiH2(
          name="SiH2",
          MM=0.03010138,
          Hf=9080398.639530813,
          H0=332812.05047742,
          Tlimit=1000,
          alow={-20638.63564,330.58622,2.099271145,0.00354253937,3.37887667e-006,-5.38384562e-009,
              2.081191273e-012},
          blow={30117.84298,12.8233357},
          ahigh={4624039.37,-11434.3611,12.6488087,0.00091148995,-8.766611539999999e-007,
              1.646297357e-010,-9.965090370000001e-015},
          bhigh={107247.5101,-66.0607807},
          R=276.2156419406685);

        constant IdealGases.Common.DataRecord SiH2Br2(
          name="SiH2Br2",
          MM=0.18990938,
          Hf=-1002436.003950937,
          H0=75152.80182579713,
          Tlimit=1000,
          alow={165152.8003,-2468.145554,16.08639427,-0.0094138409,1.407423872e-005,-9.240751449999999e-009,
              2.255641666e-012},
          blow={-12764.82614,-59.4537432},
          ahigh={566585.144,-3973.91962,15.67387912,-0.0009943802290000002,
              2.084856022e-007,-2.299521351e-011,1.034736283e-015},
          bhigh={-2990.69018,-61.9047652},
          R=43.7812603042567);

        constant IdealGases.Common.DataRecord SiH2CL2(
          name="SiH2CL2",
          MM=0.10100738,
          Hf=-3172976.073629472,
          H0=132514.5548770793,
          Tlimit=1000,
          alow={189428.1754,-2650.960252,15.49874174,-0.006533130749999999,
              9.306098260000001e-006,-5.63969867e-009,1.213664264e-012},
          blow={-27209.12007,-60.06331649},
          ahigh={540020.458,-4062.33729,15.73118788,-0.001015038389,2.127060243e-007,
              -2.345079226e-011,1.054871984e-015},
          bhigh={-18230.98225,-65.44540499},
          R=82.31549021467541);

        constant IdealGases.Common.DataRecord SiH2F2(
          name="SiH2F2",
          MM=0.0680981864,
          Hf=-11612291.63072102,
          H0=176042.9555286953,
          Tlimit=1000,
          alow={127218.8427,-1241.72431,4.89943589,0.02123882008,-2.7257087e-005,
              1.860857446e-008,-5.22660433e-012},
          blow={-89804.66919999999,-5.1118155},
          ahigh={472653.4080000001,-4388.51769,15.96032597,-0.001102993658,
              2.315838331e-007,-2.556974559e-011,1.151499711e-015},
          bhigh={-73161.8446,-70.9898927},
          R=122.0953514262753);

        constant IdealGases.Common.DataRecord SiH2I2(
          name="SiH2I2",
          MM=0.28391032,
          Hf=-134105.7274705618,
          H0=52542.17599416605,
          Tlimit=1000,
          alow={153996.3319,-2414.436989,16.84409354,-0.0121203758,1.808453226e-005,-1.207740133e-008,
              3.040799276e-012},
          blow={5073.07325,-60.9872082},
          ahigh={594239.083,-3924.81448,15.63850289,-0.0009805706340000001,
              2.054871384e-007,-2.265587199e-011,1.019168663e-015},
          bhigh={15136.27352,-59.4081252},
          R=29.28555749576134);

        constant IdealGases.Common.DataRecord SiH3(
          name="SiH3",
          MM=0.03110932,
          Hf=6569007.80859241,
          H0=330350.8080536636,
          Tlimit=1000,
          alow={4341.14282,227.7185085,0.650825035,0.01221438558,-4.34760427e-006,-1.774916828e-009,
              1.184191367e-012},
          blow={22599.93826,19.68347482},
          ahigh={605632.122,-4721.254059999999,13.29129523,-0.001256824868,
              2.68828594e-007,-3.010741582e-011,1.370945857e-015},
          bhigh={49744.2064,-61.405031},
          R=267.2662726154092);

        constant IdealGases.Common.DataRecord SiH3Br(
          name="SiH3Br",
          MM=0.11101332,
          Hf=-704789.2991579749,
          H0=106017.7103071956,
          Tlimit=1000,
          alow={152106.5525,-1987.744479,11.31460743,-0.001806099407,7.76926247e-006,
              -6.233478169999999e-009,1.585331846e-012},
          blow={-924.886888,-38.4646369},
          ahigh={927928.578,-5917.93579,16.99209298,-0.001487507364,3.123451161e-007,
              -3.44907147e-011,1.553431675e-015},
          bhigh={22415.60128,-79.4861159},
          R=74.89616561327956);

        constant IdealGases.Common.DataRecord SiH3CL(
          name="SiH3CL",
          MM=0.06656231999999999,
          Hf=-2130905.292964548,
          H0=171879.615974924,
          Tlimit=1000,
          alow={163338.8301,-2030.302118,10.68016138,0.0004942370140000001,
              4.30517476e-006,-3.74832727e-009,8.89350421e-013},
          blow={-8180.71498,-36.88956824},
          ahigh={908778.094,-5958.94956,17.02076016,-0.001498450667,3.146813781e-007,
              -3.47516846e-011,1.565281681e-015},
          bhigh={14937.93206,-81.27277864},
          R=124.9125931908624);

        constant IdealGases.Common.DataRecord SiH3F(
          name="SiH3F",
          MM=0.0501077232,
          Hf=-7515009.183255008,
          H0=218162.4169265787,
          Tlimit=1000,
          alow={126783.629,-1177.593516,4.49918896,0.01658543011,-1.678598921e-005,
              1.019153931e-008,-2.803920232e-012},
          blow={-40103.9297,-4.48108092},
          ahigh={862431.317,-6103.37057,17.12733597,-0.001540724131,3.23962872e-007,-3.58105689e-011,
              1.61415138e-015},
          bhigh={-12614.87616,-83.99227209999999},
          R=165.9319455967618);

        constant IdealGases.Common.DataRecord SiH3I(
          name="SiH3I",
          MM=0.15801379,
          Hf=-13239.35081868488,
          H0=76437.81596530277,
          Tlimit=1000,
          alow={145938.4799,-1982.982746,11.96516737,-0.00393750595,1.087991733e-005,
              -8.43313592e-009,2.196078188e-012},
          blow={8063.20831,-40.6455332},
          ahigh={936114.918,-5859.72029,16.95376698,-0.00147349713,3.094475885e-007,-3.41746247e-011,
              1.539334807e-015},
          bhigh={31274.99231,-78.01700080000001},
          R=52.61864803065607);

        constant IdealGases.Common.DataRecord SiH4(
          name="SiH4",
          MM=0.03211726,
          Hf=1080415.950800286,
          H0=328016.8046713823,
          Tlimit=1000,
          alow={78729.9329,-552.608705,2.498944303,0.01442118274,-8.467107309999999e-006,
              2.726164641e-009,-5.43675437e-013},
          blow={6269.66906,4.96546183},
          ahigh={1290378.74,-7813.39978,18.28851664,-0.001975620946,4.15650215e-007,-4.59674561e-011,
              2.072777131e-015},
          bhigh={47668.8795,-98.0169746},
          R=258.8786216507884);

        constant IdealGases.Common.DataRecord SiI(
          name="SiI",
          MM=0.15498997,
          Hf=1696583.462787947,
          H0=64140.40856966423,
          Tlimit=1000,
          alow={94920.8134,-1573.960062,12.37908109,-0.0159386482,1.692049005e-005,-9.215558319999999e-009,
              2.046186848e-012},
          blow={37797.3567,-40.6640785},
          ahigh={852940.2790000001,-2442.039471,7.72297752,-0.001985601243,
              6.542866629999999e-007,-9.49415829e-011,4.89004137e-015},
          bhigh={45781.6094,-17.33975081},
          R=53.64522620399243);

        constant IdealGases.Common.DataRecord SiI2(
          name="SiI2",
          MM=0.28189444,
          Hf=328016.4021681308,
          H0=48927.9426724415,
          Tlimit=1000,
          alow={11633.52403,-451.448217,8.707978130000001,-0.00358066493,
              4.25371443e-006,-2.673478266e-009,6.89155898e-013},
          blow={11262.47142,-11.55818335},
          ahigh={10021.68907,14.33017148,6.70133055,0.00039607699,-2.073866165e-007,
              4.5534571e-011,-3.01679828e-015},
          bhigh={9007.368100000002,0.2887336913},
          R=29.49498400890774);

        constant IdealGases.Common.DataRecord SiN(
          name="SiN",
          MM=0.0420922,
          Hf=9590100.707494499,
          H0=207547.6454069876,
          Tlimit=1000,
          alow={-14646.72152,137.4993497,3.67850858,-0.0061584992,2.309417067e-005,-2.294461481e-008,
              7.39566568e-012},
          blow={46732.1299,6.494564115},
          ahigh={-2932685.132,5853.68859,1.321451677,0.001258329284,-3.77388636e-007,
              6.88776104e-011,-4.18984259e-015},
          bhigh={6527.14881,25.53145732},
          R=197.5299936805394);

        constant IdealGases.Common.DataRecord SiO(
          name="SiO",
          MM=0.0440849,
          Hf=-2242092.371764482,
          H0=197689.1180426858,
          Tlimit=1000,
          alow={-47227.7105,806.3137640000001,-1.636976133,0.01454275546,-1.723202046e-005,
              1.04239734e-008,-2.559365273e-012},
          blow={-16665.85903,33.557957},
          ahigh={-176513.4162,-31.9917709,4.47744193,4.59176471e-006,3.55814315e-008,
              -1.327012559e-011,1.613253297e-015},
          bhigh={-13508.4236,-0.838695733},
          R=188.601357834542);

        constant IdealGases.Common.DataRecord SiO2(
          name="SiO2",
          MM=0.0600843,
          Hf=-5360359.977564856,
          H0=175462.1922865041,
          Tlimit=1000,
          alow={-33629.4878,473.407892,0.2309770671,0.01850230806,-2.242786671e-005,
              1.364981554e-008,-3.35193503e-012},
          blow={-42264.8749,22.95803206},
          ahigh={-146403.1193,-626.144106,7.96456371,-0.0001854119096,4.09521467e-008,
              -4.69720676e-012,2.17805428e-016},
          bhigh={-37918.3477,-20.45285414},
          R=138.3801092797952);

        constant IdealGases.Common.DataRecord SiS(
          name="SiS",
          MM=0.0601505,
          Hf=1798728.306497868,
          H0=148495.9726020565,
          Tlimit=1000,
          alow={35994.4929,-423.9723299999999,4.65401442,0.001588470782,-3.31025436e-006,
              2.706096479e-009,-8.113517820000001e-013},
          blow={14115.15571,-1.183201858},
          ahigh={-2102323.897,6228.83618,-3.004120882,0.004495499930000001,-1.368821364e-006,
              1.998097253e-010,-9.882035800000001e-015},
          bhigh={-27955.38166,54.05828786},
          R=138.2278119051379);

        constant IdealGases.Common.DataRecord SiS2(
          name="SiS2",
          MM=0.09221550000000001,
          Hf=76155.49446676533,
          H0=132333.6857686614,
          Tlimit=1000,
          alow={43977.4566,-743.001312,7.94158836,0.00203808373,-4.6463376e-006,
              3.84801436e-009,-1.157260149e-012},
          blow={2801.077853,-17.36888325},
          ahigh={-126648.9071,-97.7423522,7.57280368,-2.905413928e-005,
              6.40558784e-009,-7.329273340000001e-013,3.38981978e-017},
          bhigh={-1244.672263,-13.52710463},
          R=90.1634974597546);

        constant IdealGases.Common.DataRecord Si2(
          name="Si2",
          MM=0.056171,
          Hf=10329093.73164088,
          H0=183299.6386035499,
          Tlimit=1000,
          alow={12375.96221,-102.4904376,4.35484852,0.001281063335,-2.531991623e-006,
              2.265694244e-009,-7.001290140000001e-013},
          blow={69069.4285,3.2511252},
          ahigh={1370060.657,-4207.06004,9.337432890000001,-0.002749217168,
              9.586345959999999e-007,-1.372449748e-010,6.765028100000001e-015},
          bhigh={95108.84539999999,-31.6838519},
          R=148.0207224368446);

        constant IdealGases.Common.DataRecord Si2C(
          name="Si2C",
          MM=0.06818170000000001,
          Hf=8126724.678322773,
          H0=169874.7024494842,
          Tlimit=1000,
          alow={-4553.3662,131.4796415,2.469106923,0.0127652068,-1.656910776e-005,
              1.065289663e-008,-2.739192976e-012},
          blow={64700.4992,14.6883898},
          ahigh={-125382.9442,-341.427779,7.25436533,-0.0001017635503,
              2.250902158e-008,-2.584074852e-012,1.198884876e-016},
          bhigh={66080.0938,-11.46216579},
          R=121.9458007060545);

        constant IdealGases.Common.DataRecord Si2F6(
          name="Si2F6",
          MM=0.1701614192,
          Hf=-14006054.31715863,
          H0=156876.2891465118,
          Tlimit=1000,
          alow={15807.6745,-297.5292881,7.5125915,0.0455279623,-6.42187684e-005,
              4.357408730000001e-008,-1.166762282e-011},
          blow={-288670.7444,-7.72178477},
          ahigh={-918630.314,157.3948683,21.41256129,-0.0002681898667,7.21228011e-008,
              -9.18425266e-012,4.53723836e-016},
          bhigh={-296617.6753,-78.4902247},
          R=48.8622628977227);

        constant IdealGases.Common.DataRecord Si2N(
          name="Si2N",
          MM=0.0701777,
          Hf=5663907.480581439,
          H0=168460.7503523199,
          Tlimit=1000,
          alow={23182.71938,-367.484379,5.4096586,0.008176389399999999,-1.220312934e-005,
              8.5806091e-009,-2.354927059e-012},
          blow={48092.7803,-3.042205654},
          ahigh={-280502.6986,250.2366876,7.0924561,0.0002853120795,-9.79210181e-008,
              1.552154244e-011,-8.03626045e-016},
          bhigh={43420.1479,-10.0957091},
          R=118.4774080655251);

        constant IdealGases.Common.DataRecord Si3(
          name="Si3",
          MM=0.0842565,
          Hf=7451856.901247975,
          H0=148591.4202465092,
          Tlimit=1000,
          alow={-11142.08177,157.5785843,2.486135003,0.01631637255,-2.208240021e-005,
              1.372008287e-008,-3.2623307e-012},
          blow={73282.53850000001,15.88081347},
          ahigh={-1699395.561,4697.81538,2.618198124,0.001959082075,-2.581160603e-007,
              6.10344486e-012,6.08630924e-016},
          bhigh={42779.1681,25.86540384},
          R=98.6804816245631);

        constant IdealGases.Common.DataRecord Sn(
          name="Sn",
          MM=0.11871,
          Hf=2537275.713924691,
          H0=52352.05964114227,
          Tlimit=1000,
          alow={-124869.2263,1618.84119,-4.60239735,0.01045433308,2.99826555e-006,-1.068699386e-008,
              4.32342131e-012},
          blow={27483.64008,48.0506723},
          ahigh={-5145695.64,11405.75108,-4.17963206,0.002236390679,-3.60321977e-007,
              2.440237836e-011,-2.937628285e-016},
          bhigh={-42150.1357,59.81450930000001},
          R=70.0401988038076);

        constant IdealGases.Common.DataRecord Snplus(
          name="Snplus",
          MM=0.1187094514,
          Hf=8558290.144705359,
          H0=52206.6939650603,
          Tlimit=1000,
          alow={-5571.29778,122.2323189,1.566361415,0.00339706141,-6.31292229e-006,
              5.58545208e-009,-1.68902134e-012},
          blow={120902.412,11.62634765},
          ahigh={4622916.850000001,-11859.58712,12.37026473,-0.002773624217,
              3.09851349e-007,-5.362951439999999e-012,-8.663474691e-016},
          bhigh={199432.2977,-68.3710828},
          R=70.04052248530566);

        constant IdealGases.Common.DataRecord Snminus(
          name="Snminus",
          MM=0.1187105486,
          Hf=1512047.169496444,
          H0=54674.57674608034,
          Tlimit=1000,
          alow={272279.6,-3369.9358,17.43906405,-0.02810527618,2.790684767e-005,-1.442400675e-008,
              3.070159757e-012},
          blow={37532.2775,-80.0785697},
          ahigh={-64477.1322,743.05551,1.921380256,0.0002361623997,-5.28066836e-008,
              6.10233938e-012,-2.843422486e-016},
          bhigh={16457.39414,12.65436865},
          R=70.03987512530121);

        constant IdealGases.Common.DataRecord SnBr(
          name="SnBr",
          MM=0.198614,
          Hf=380859.4560302899,
          H0=50279.03370356571,
          Tlimit=1000,
          alow={25641.93542,-525.912233,7.68741069,-0.009654205420000001,
              1.482863248e-005,-9.94223698e-009,2.475051091e-012},
          blow={10204.83889,-11.26550396},
          ahigh={1815578.541,-6728.26458,13.32464516,-0.0046081023,1.236439537e-006,-1.528863587e-010,
              6.971513500000001e-015},
          bhigh={49255.8309,-56.4096278},
          R=41.86246689558642);

        constant IdealGases.Common.DataRecord SnBr2(
          name="SnBr2",
          MM=0.278518,
          Hf=-427170.2080296426,
          H0=52403.82309222384,
          Tlimit=1000,
          alow={-4995.75306,-136.6498896,7.54356385,-0.001181772507,1.442445852e-006,
              -9.254217260000001e-010,2.423731634e-013},
          blow={-15755.06969,-3.59558402},
          ahigh={-19408.94091,-2.335607932,7.00196926,-8.622241869999999e-007,
              2.039869794e-010,-2.464780359e-014,1.189850894e-018},
          bhigh={-16448.28122,-0.434935475},
          R=29.85254812974386);

        constant IdealGases.Common.DataRecord SnBr3(
          name="SnBr3",
          MM=0.358422,
          Hf=-442820.0445285167,
          H0=53792.60759663191,
          Tlimit=1000,
          alow={-8050.41647,-289.7962523,11.14443355,-0.002475383807,3.01005135e-006,
              -1.92569532e-009,5.032605089999999e-013},
          blow={-20700.66649,-18.95965383},
          ahigh={-38930.0453,-4.99084417,10.00418437,-1.82499691e-006,4.30564666e-010,
              -5.19188793e-014,2.502455595e-018},
          bhigh={-22172.99473,-12.29854098},
          R=23.19743765728666);

        constant IdealGases.Common.DataRecord SnBr4(
          name="SnBr4",
          MM=0.4383260000000001,
          Hf=-739670.8887905348,
          H0=57133.31629882781,
          Tlimit=1000,
          alow={-5832.84092,-427.019847,14.67466525,-0.00360426323,
              4.366686289999999e-006,-2.78587513e-009,7.26508787e-013},
          blow={-40829.1645,-34.4710436},
          ahigh={-51768.1292,-7.42612695,13.00619502,-2.692587978e-006,6.3367598e-010,
              -7.62708719e-014,3.671112e-018},
          bhigh={-43001.6634,-24.71455118},
          R=18.96869453329257);

        constant IdealGases.Common.DataRecord SnCL(
          name="SnCL",
          MM=0.154163,
          Hf=224819.2886749739,
          H0=62557.91597205554,
          Tlimit=1000,
          alow={33515.4973,-683.220862,8.39391773,-0.01164434373,1.812159499e-005,-1.26199917e-008,
              3.29521347e-012},
          blow={6051.79089,-16.67834578},
          ahigh={774160.568,-3602.04848,9.749059819999999,-0.002596198909,
              6.36771216e-007,-6.75429557e-011,2.484167602e-015},
          bhigh={24424.47662,-32.25454098},
          R=53.93299300091461);

        constant IdealGases.Common.DataRecord SnCL2(
          name="SnCL2",
          MM=0.189616,
          Hf=-1068729.869842207,
          H0=72154.86562315417,
          Tlimit=1000,
          alow={9524.6659,-432.984564,8.64472028,-0.00345840961,4.11785203e-006,-2.592639269e-009,
              6.6923636e-013},
          blow={-24329.21127,-12.99143851},
          ahigh={-39035.88490000001,-7.94796268,7.00648762,-2.776594714e-006,
              6.461341420000001e-010,-7.1190674e-015,3.68813118e-018},
          bhigh={-26545.29653,-3.368081174},
          R=43.84900008438107);

        constant IdealGases.Common.DataRecord SnCL3(
          name="SnCL3",
          MM=0.225069,
          Hf=-1299034.76267278,
          H0=77994.05959950059,
          Tlimit=1000,
          alow={17600.76813,-814.280548,13.06326984,-0.00639559619,7.57462457e-006,-4.74971146e-009,
              1.222182656e-012},
          blow={-34134.3096,-34.5767967},
          ahigh={-74829.66399999999,-15.28523914,10.01240305,-5.28558124e-006,
              1.226095111e-009,-1.459895108e-013,6.96887978e-018},
          bhigh={-38308.7827,-16.63063137},
          R=36.94188004567489);

        constant IdealGases.Common.DataRecord SnCL4(
          name="SnCL4",
          MM=0.260522,
          Hf=-1836566.466555608,
          H0=86265.38641650225,
          Tlimit=1000,
          alow={42459.6787,-1280.574318,17.68445328,-0.00957477952,1.115620323e-005,-6.90722927e-009,
              1.759652856e-012},
          blow={-55040.09039999999,-58.27352999},
          ahigh={-107833.6862,-25.54305872,13.02040391,-8.5951259e-006,
              1.976570888e-009,-2.337929994e-013,1.110287624e-017},
          bhigh={-61635.6203,-30.72702622},
          R=31.91466363685217);

        constant IdealGases.Common.DataRecord SnF(
          name="SnF",
          MM=0.1377084032,
          Hf=-689987.5954701362,
          H0=66343.88162014502,
          Tlimit=1000,
          alow={60985.03520000001,-986.0306290000001,8.994731209999999,-0.01223012156,
              1.840583578e-005,-1.267926607e-008,3.29133102e-012},
          blow={-7882.61448,-22.21921734},
          ahigh={25897.15476,-1484.478214,7.37851893,-0.00132424444,2.847634043e-007,
              -2.360371345e-011,6.11678371e-016},
          bhigh={-4776.68897,-16.81202516},
          R=60.3773757213968);

        constant IdealGases.Common.DataRecord SnF2(
          name="SnF2",
          MM=0.1567068064,
          Hf=-3260591.947077035,
          H0=78127.10424810239,
          Tlimit=1000,
          alow={70423.9185,-1137.505955,10.08659352,-0.00472285593,4.13570292e-006,-1.921143972e-009,
              3.64076028e-013},
          blow={-57566.7082,-25.71566624},
          ahigh={-102775.8772,-44.5175162,7.03326876,-1.329882797e-005,
              2.934271938e-009,-3.35841592e-013,1.553358669e-017},
          bhigh={-63621.2588,-6.81008452},
          R=53.05750395280852);

        constant IdealGases.Common.DataRecord SnF3(
          name="SnF3",
          MM=0.1757052096,
          Hf=-3680200.948350254,
          H0=84230.4051979572,
          Tlimit=1000,
          alow={109555.5529,-1950.557979,15.41407832,-0.008546518770000001,
              7.80055182e-006,-3.82594222e-009,7.78774776e-013},
          blow={-70567.9492,-54.9463948},
          ahigh={-182931.9689,-75.5735868,10.05671455,-2.275132668e-005,
              5.03469582e-009,-5.77653096e-013,2.67721417e-017},
          bhigh={-80918.97590000001,-21.91673972},
          R=47.32057756812237);

        constant IdealGases.Common.DataRecord SnF4(
          name="SnF4",
          MM=0.1947036128,
          Hf=-5263213.672632991,
          H0=96567.20144845716,
          Tlimit=1000,
          alow={139044.1119,-2168.784371,16.91802917,-0.002318608529,-2.045847976e-006,
              3.4300879e-009,-1.28922886e-012},
          blow={-115356.3396,-63.7060475},
          ahigh={-263569.2764,-144.5469969,13.10690681,-4.23775579e-005,
              9.28687195e-009,-1.057062694e-012,4.86710868e-017},
          bhigh={-127153.9967,-38.039219},
          R=42.70322404618472);

        constant IdealGases.Common.DataRecord SnI(
          name="SnI",
          MM=0.24561447,
          Hf=703236.3443407874,
          H0=41435.35191554471,
          Tlimit=1000,
          alow={26702.12235,-500.602635,7.49067315,-0.008746346550000001,
              1.289688397e-005,-8.211344929999999e-009,1.936120475e-012},
          blow={21772.49172,-9.354806849999999},
          ahigh={-55549.91850000001,-1530.457453,7.93260139,-0.002108885464,
              7.8098036e-007,-1.348104887e-010,8.207184700000001e-015},
          bhigh={27448.64953,-16.26822892},
          R=33.85171891542058);

        constant IdealGases.Common.DataRecord SnI2(
          name="SnI2",
          MM=0.37251894,
          Hf=-21654.5687583026,
          H0=39953.03701873522,
          Tlimit=1000,
          alow={-5739.25489,-94.3502445,7.37795666,-0.0008258348939999999,
              1.01168704e-006,-6.5084516e-010,1.7081866e-013},
          blow={-2622.6445,-0.960581496},
          ahigh={-15594.5339,-1.594789414,7.00135116,-5.93532424e-007,
              1.407432564e-010,-1.703457321e-014,8.23361171e-019},
          bhigh={-3100.608319,1.235038509},
          R=22.31959534728624);

        constant IdealGases.Common.DataRecord SnI3(
          name="SnI3",
          MM=0.49942341,
          Hf=-16053.59268200904,
          H0=40665.61477364467,
          Tlimit=1000,
          alow={-10699.78099,-138.769354,10.55637633,-0.001216435658,1.490873499e-006,
              -9.594499629999999e-010,2.518810438e-013},
          blow={-3314.22988,-12.49558209},
          ahigh={-25175.3487,-2.34828289,10.0019913,-8.752764839999999e-007,
              2.07646498e-010,-2.514060336e-014,1.215482266e-018},
          bhigh={-4017.05561,-9.26390846},
          R=16.64814230474298);

        constant IdealGases.Common.DataRecord SnI4(
          name="SnI4",
          MM=0.6263278800000001,
          Hf=-189763.2961828236,
          H0=42702.80447997939,
          Tlimit=1000,
          alow={-12831.46793,-145.9885093,13.58634885,-0.001283554646,
              1.574557147e-006,-1.013990168e-009,2.66337043e-013},
          blow={-17511.78045,-23.67973168},
          ahigh={-28018.40706,-2.474699366,13.00210215,-9.250962339999999e-007,
              2.196515817e-010,-2.661071614e-014,1.287167546e-018},
          bhigh={-18250.83832,-20.27484281},
          R=13.27495113262402);

        constant IdealGases.Common.DataRecord SnO(
          name="SnO",
          MM=0.1347094,
          Hf=162654.2319986579,
          H0=65875.92996479831,
          Tlimit=1000,
          alow={25477.88022,-229.3583066,3.42159353,0.00471330004,-7.36597132e-006,
              5.37973887e-009,-1.519277855e-012},
          blow={2853.047679,6.67396527},
          ahigh={-2555955.548,7870.0535,-5.43976873,0.00630781918,-2.06887137e-006,
              3.30707488e-010,-1.848169716e-014},
          bhigh={-48416.6391,71.75952460000001},
          R=61.72154281735352);

        constant IdealGases.Common.DataRecord SnO2(
          name="SnO2",
          MM=0.1507088,
          Hf=77501.64555752551,
          H0=78268.02416315438,
          Tlimit=1000,
          alow={47076.7408,-611.456867,6.11743391,0.00751401466,-1.238371787e-005,
              9.22091599e-009,-2.632417597e-012},
          blow={2981.068066,-8.14492641},
          ahigh={-157355.8926,-142.7316788,7.60570076,-4.19800853e-005,
              9.218742430000002e-009,-1.051372983e-012,4.84957927e-017},
          bhigh={-523.453187,-14.28360169},
          R=55.16912084762137);

        constant IdealGases.Common.DataRecord SnS(
          name="SnS",
          MM=0.150775,
          Hf=736853.0061349694,
          H0=61688.68844304427,
          Tlimit=1000,
          alow={27248.77813,-492.412638,6.22165473,-0.00340940696,3.98491368e-006,-2.470702874e-009,
              6.33934146e-013},
          blow={14524.95307,-6.791285229},
          ahigh={-1797985.129,6141.73632,-4.01950488,0.005993829179999999,-2.188735204e-006,
              3.899542e-010,-2.40656363e-014},
          bhigh={-26113.49815,62.56820705},
          R=55.14489802686122);

        constant IdealGases.Common.DataRecord SnS2(
          name="SnS2",
          MM=0.18284,
          Hf=818451.0774447605,
          H0=74573.91708597681,
          Tlimit=1000,
          alow={38771.4541,-848.695394,10.4208399,-0.005686902670000001,
              6.37382977e-006,-3.8251581e-009,9.50248096e-013},
          blow={20060.27952,-27.23724769},
          ahigh={-67640.84050000001,-19.70189679,7.51533387,-6.33255918e-006,
              1.434207625e-009,-1.676383081e-013,7.886911900000001e-018},
          bhigh={15650.53629,-9.922744838},
          R=45.47403194049442);

        constant IdealGases.Common.DataRecord Sn2(
          name="Sn2",
          MM=0.23742,
          Hf=1774676.678460113,
          H0=47903.02838850982,
          Tlimit=1000,
          alow={-132966.6654,1639.179787,-1.902868972,0.01290431677,-1.120542242e-005,
              4.50299386e-009,-6.05623777e-013},
          blow={40974.5271,44.35408029999999},
          ahigh={-4275783.04,12364.21656,-8.43833617,0.00708805629,-1.712012737e-006,
              1.805262952e-010,-7.058656809999999e-015},
          bhigh={-30014.1872,100.5138538},
          R=35.0200994019038);

        constant IdealGases.Common.DataRecord Sr(
          name="Sr",
          MM=0.08762,
          Hf=1831773.567678612,
          H0=70730.74640493038,
          Tlimit=1000,
          alow={4.19064984,-0.0630443758,2.500373027,-1.115455943e-006,
              1.785248643e-009,-1.456209589e-012,4.750132981e-016},
          blow={18558.52648,5.55577284},
          ahigh={14894144.1,-43753.3505,51.3726628,-0.02592566025,6.58299e-006,-6.949611799999999e-010,
              2.417779662e-014},
          bhigh={297754.5522,-345.489077},
          R=94.89239899566309);

        constant IdealGases.Common.DataRecord Srplus(
          name="Srplus",
          MM=0.08761945140000001,
          Hf=8173599.772162005,
          H0=70731.18926193139,
          Tlimit=1000,
          alow={11.27287678,-0.134695187,2.500651495,-1.635163061e-006,
              2.249493149e-009,-1.610827539e-012,4.698612333e-016},
          blow={85389.81180000001,6.24725924},
          ahigh={3145095.058,-9514.756889999999,13.50086948,-0.00605971712,
              1.594068746e-006,-1.718800946e-010,6.322256169e-015},
          bhigh={145799.1907,-72.3641693},
          R=94.8929931328011);

        constant IdealGases.Common.DataRecord SrBr(
          name="SrBr",
          MM=0.167524,
          Hf=-381543.4087056183,
          H0=60332.38222583033,
          Tlimit=1000,
          alow={-754.9812420000001,-73.5953201,4.82803581,-0.000716058465,
              1.028527433e-006,-6.88837072e-010,1.880257878e-013},
          blow={-8686.168450000001,4.15115309},
          ahigh={3009976.114,-9193.19224,15.26033745,-0.00600925395,1.692611858e-006,
              -2.039438429e-010,8.807775840000001e-015},
          bhigh={49228.06129999999,-70.6825383},
          R=49.63152742293642);

        constant IdealGases.Common.DataRecord SrBr2(
          name="SrBr2",
          MM=0.247428,
          Hf=-1643814.972436426,
          H0=66017.78699257966,
          Tlimit=1000,
          alow={-4632.45866,-72.4493864,7.80021716,-0.000677212531,8.53778024e-007,-5.63235174e-010,
              1.510568795e-013},
          blow={-50822.3833,-5.28507476},
          ahigh={-11861.73059,-1.404383013,7.50121557,-5.415983190000001e-007,
              1.296969275e-010,-1.580911652e-014,7.68158227e-019},
          bhigh={-51185.75210000001,-3.55203711},
          R=33.60360185589343);

        constant IdealGases.Common.DataRecord SrCL(
          name="SrCL",
          MM=0.123073,
          Hf=-1038959.658089102,
          H0=79628.49690833896,
          Tlimit=1000,
          alow={3555.34632,-172.9385697,5.21345102,-0.001542910668,2.025835568e-006,-1.327076633e-009,
              3.54717596e-013},
          blow={-15882.88066,0.4818144784},
          ahigh={2070217.324,-6199.89173,11.50315072,-0.00367568546,9.46173235e-007,-9.203765750000001e-011,
              2.707242192e-015},
          bhigh={22714.71632,-45.61058514},
          R=67.55723838697359);

        constant IdealGases.Common.DataRecord SrCLplus(
          name="SrCLplus",
          MM=0.1230724514,
          Hf=3316031.795560708,
          H0=77862.77018936505,
          Tlimit=1000,
          alow={1689.043529,-174.9284676,5.06532864,-0.0009857327839999999,
              1.071655138e-006,-5.988127129999999e-010,1.395650932e-013},
          blow={48611.9026,0.2492001711},
          ahigh={-21324.75783,-4.05794827,4.50314939,3.82620238e-005,2.67695151e-009,
              5.667610500000001e-014,1.613288103e-018},
          bhigh={47693.2603,3.637722496},
          R=67.55753952586014);

        constant IdealGases.Common.DataRecord SrCL2(
          name="SrCL2",
          MM=0.158526,
          Hf=-3058261.118050036,
          H0=90938.38234737518,
          Tlimit=1000,
          alow={1913.170011,-268.1156951,8.0813343,-0.002393329295,2.976397494e-006,-1.943902862e-009,
              5.17430771e-013},
          blow={-59101.1185,-8.457827543000001},
          ahigh={-25927.16099,-5.26378585,7.00447524,-1.970397814e-006,4.6796712e-010,
              -5.67021588e-014,2.742892387e-018},
          bhigh={-60453.9953,-2.192202775},
          R=52.44863303180551);

        constant IdealGases.Common.DataRecord SrF(
          name="SrF",
          MM=0.1066184032,
          Hf=-2847095.612851947,
          H0=87068.57091628248,
          Tlimit=1000,
          alow={27250.08615,-485.001972,6.1126972,-0.003008469209,3.3684658e-006,-1.987813072e-009,
              4.88416109e-013},
          blow={-35368.9039,-6.68373918},
          ahigh={870234.0489999999,-2589.81877,7.20026422,-0.001173446296,
              1.996165066e-007,1.103842667e-011,-2.343183859e-015},
          bhigh={-21336.71699,-16.67390309},
          R=77.98346017622593);

        constant IdealGases.Common.DataRecord SrFplus(
          name="SrFplus",
          MM=0.1066178546,
          Hf=1964664.481252842,
          H0=85415.44973087461,
          Tlimit=1000,
          alow={40096.242,-594.494608,6.18233033,-0.00271615975,2.641369127e-006,-1.383123292e-009,
              3.052935853e-013},
          blow={26971.49351,-8.313659449999999},
          ahigh={-47520.8206,-25.26802345,4.51929528,2.55642675e-005,3.38254183e-009,
              -1.511394636e-013,9.53749118e-018},
          bhigh={23838.61417,1.892197325},
          R=77.98386143853246);

        constant IdealGases.Common.DataRecord SrF2(
          name="SrF2",
          MM=0.1256168064,
          Hf=-6247522.266256246,
          H0=105635.5545112792,
          Tlimit=1000,
          alow={41707.5965,-850.0132410000001,10.02806064,-0.00609848519,
              7.05626133e-006,-4.35937431e-009,1.11130831e-012},
          blow={-92178.59849999999,-23.25100053},
          ahigh={-61262.6543,-19.64060822,7.01555775,-6.51252678e-006,
              1.490473613e-009,-1.75643704e-013,8.317093849999999e-018},
          bhigh={-96567.0125,-5.40230876},
          R=66.1891687767028);

        constant IdealGases.Common.DataRecord SrH(
          name="SrH",
          MM=0.08862793999999999,
          Hf=2473566.518639608,
          H0=98423.87174969881,
          Tlimit=1000,
          alow={-43177.9689,767.64297,-1.594398638,0.01500711077,-1.826296898e-005,
              1.136757659e-008,-2.855588359e-012},
          blow={21796.85693,33.2467423},
          ahigh={-226982.5428,1345.209458,1.152194421,0.003109555289,-1.188080968e-006,
              2.073091147e-010,-1.300839287e-014},
          bhigh={17355.47062,21.12916944},
          R=93.81321511026886);

        constant IdealGases.Common.DataRecord SrI(
          name="SrI",
          MM=0.21452447,
          Hf=-36600.37477309698,
          H0=47934.50369554578,
          Tlimit=1000,
          alow={-2467.498501,-25.35495809,4.60329848,-0.0001613676212,
              2.694294049e-007,-1.564795762e-010,3.82648228e-014},
          blow={-2175.538291,6.41148188},
          ahigh={2201136.857,-7082.2307,13.32597928,-0.00530586442,1.63607115e-006,-2.205540591e-010,
              1.078496824e-014},
          bhigh={42190.77170000001,-55.308332},
          R=38.75768577822381);

        constant IdealGases.Common.DataRecord SrI2(
          name="SrI2",
          MM=0.34142894,
          Hf=-814866.0216090645,
          H0=48916.93715242767,
          Tlimit=1000,
          alow={-4391.84969,-37.5726735,7.6569935,-0.00035617213,
              4.508689010000001e-007,-2.983230473e-010,8.01865866e-014},
          blow={-35533.0346,-2.598281578},
          ahigh={-8090.381920000001,-0.734826323,7.50064006,-2.863515042e-007,
              6.87655697e-011,-8.398807359999999e-015,4.08696816e-019},
          bhigh={-35721.0642,-1.693119087},
          R=24.35198375392549);

        constant IdealGases.Common.DataRecord SrO(
          name="SrO",
          MM=0.1036194,
          Hf=-137114.1986925228,
          H0=87243.40229725321,
          Tlimit=1000,
          alow={42248.9167,-591.3517869999999,5.964363,-0.002105712736,
              2.028373972e-006,-1.197885492e-009,3.46628992e-013},
          blow={101.8053721,-7.51142747},
          ahigh={-51729330.5,151082.1,-161.4513515,0.08516051790000001,-2.091669402e-005,
              2.452307103e-009,-1.108841292e-013},
          bhigh={-968782.9519999999,1197.846971},
          R=80.24049550566787);

        constant IdealGases.Common.DataRecord SrOH(
          name="SrOH",
          MM=0.10462734,
          Hf=-1855019.213907187,
          H0=105581.0651403352,
          Tlimit=1000,
          alow={46400.06559999999,-993.868554,9.78494896,-0.00577437762,
              5.126164110000001e-006,-1.833418356e-009,1.92601341e-013},
          blow={-20227.21196,-27.40670981},
          ahigh={2545648.379,-7416.19598,13.81956204,-0.003096481934,7.72389421e-007,
              -7.921280320000001e-011,2.740829111e-015},
          bhigh={22313.02058,-61.4878113},
          R=79.46748909032763);

        constant IdealGases.Common.DataRecord SrOHplus(
          name="SrOHplus",
          MM=0.1046267914,
          Hf=2964533.279188374,
          H0=106135.0429599431,
          Tlimit=1000,
          alow={38573.6694,-903.024233,9.451103249999999,-0.00504251628,
              4.190101890000001e-006,-1.196920603e-009,1.606318743e-014},
          blow={39950.67720000001,-26.0148611},
          ahigh={867969.566,-2340.609538,7.97682975,0.0001023752569,-6.28603233e-008,
              1.024851502e-011,-5.72368392e-016},
          bhigh={50731.5772,-20.27046917},
          R=79.46790577007029);

        constant IdealGases.Common.DataRecord Sr_OH_2(
          name="Sr_OH_2",
          MM=0.12163468,
          Hf=-4905628.666100819,
          H0=139860.7781925352,
          Tlimit=1000,
          alow={72050.90300000001,-1789.465226,17.29429139,-0.01169280781,
              1.106702894e-005,-4.49014609e-009,6.603997460000001e-013},
          blow={-66053.94040000001,-63.88681219999999},
          ahigh={1750013.518,-4681.6015,13.95548402,0.000203501956,-1.253496115e-007,
              2.044549432e-011,-1.142004855e-015},
          bhigh={-44271.7024,-50.5145685},
          R=68.35609712624722);

        constant IdealGases.Common.DataRecord SrS(
          name="SrS",
          MM=0.119685,
          Hf=871882.9845009816,
          H0=79676.77653841332,
          Tlimit=1000,
          alow={12564.40807,-315.0436559,5.72172251,-0.002630479718,3.38469975e-006,-2.296256846e-009,
              6.512086680000001e-013},
          blow={12772.9516,-3.693874943},
          ahigh={-13794329.47,39213.3158,-36.0286638,0.01818513386,-3.27585816e-006,
              2.324312746e-010,-3.6145557e-015},
          bhigh={-241024.6179,299.1679642},
          R=69.46962443079751);

        constant IdealGases.Common.DataRecord Sr2(
          name="Sr2",
          MM=0.17524,
          Hf=1755137.736818078,
          H0=64854.6964163433,
          Tlimit=1000,
          alow={-110885.9753,592.760401,8.43968855,-0.02652801112,4.43582597e-005,-3.39991549e-008,
              9.965546679999999e-012},
          blow={31576.15033,-7.03396665},
          ahigh={209844.5682,103.865013,2.30933233,0.0001330517507,-4.42643339e-008,
              6.71141915e-012,-3.374128e-016},
          bhigh={36366.4269,21.68088517},
          R=47.44619949783154);

        constant IdealGases.Common.DataRecord Ta(
          name="Ta",
          MM=0.1809479,
          Hf=4324552.194305654,
          H0=34262.00580388057,
          Tlimit=1000,
          alow={-11509.07339,47.8073043,3.18558839,-0.00536652816,1.288379705e-005,-1.045798666e-008,
              3.050617695e-012},
          blow={92997.97630000001,5.33605661},
          ahigh={1689726.898,-5986.85466,9.565039670000001,-0.002511649459,
              6.44303117e-007,-7.189237249999999e-011,3.11335207e-015},
          bhigh={130671.0983,-43.3509627},
          R=45.94953575034582);

        constant IdealGases.Common.DataRecord Taplus(
          name="Taplus",
          MM=0.1809473514,
          Hf=8564255.420209482,
          H0=35025.85117142533,
          Tlimit=1000,
          alow={286971.2865,-3084.920994,14.30679704,-0.01984772164,1.951445133e-005,
              -8.97094603e-009,1.501974665e-012},
          blow={201382.8712,-63.0642783},
          ahigh={3656142.13,-12540.73524,18.65022579,-0.007943274660000001,
              2.151786937e-006,-2.816764844e-010,1.413722944e-014},
          bhigh={263687.6455,-106.5864286},
          R=45.94967506111836);

        constant IdealGases.Common.DataRecord Taminus(
          name="Taminus",
          MM=0.1809484486,
          Hf=4119789.004922146,
          H0=35458.32555980256,
          Tlimit=1000,
          alow={187398.2301,-1681.268679,6.48004015,-0.0002254355782,2.028434876e-006,
              -4.67980143e-009,1.997027996e-012},
          blow={97934.96019999999,-20.49618155},
          ahigh={-4235467.48,11010.56361,-4.73691107,0.002503562129,-4.82185169e-007,
              4.88640803e-011,-2.030547835e-015},
          bhigh={15746.99408,64.918027},
          R=45.94939644041801);

        constant IdealGases.Common.DataRecord TaCL5(
          name="TaCL5",
          MM=0.3582129,
          Hf=-2135140.86176126,
          H0=75008.74479953123,
          Tlimit=1000,
          alow={63064.8329,-1771.221442,22.55083356,-0.01360238041,1.613009806e-005,-1.016307761e-008,
              2.631917453e-012},
          blow={-87927.37109999999,-80.97864282000001},
          ahigh={-142644.4545,-38.9434032,16.0314237,-1.333676355e-005,
              3.084307611e-009,-3.66393006e-013,1.745841795e-017},
          bhigh={-97012.9717,-42.56986372},
          R=23.21097872243015);

        constant IdealGases.Common.DataRecord TaO(
          name="TaO",
          MM=0.1969473,
          Hf=1231470.068388853,
          H0=44509.90188745923,
          Tlimit=1000,
          alow={-13957.38049,394.523699,-0.0630169641,0.01308595441,-1.86233973e-005,
              1.366155583e-008,-3.92455123e-012},
          blow={26451.95419,27.41671469},
          ahigh={6106591.12,-19841.35246,28.15797433,-0.01330045882,3.87680749e-006,-5.068872769999999e-010,
              2.443666035e-014},
          bhigh={152581.4433,-165.8307106},
          R=42.21673513675993);

        constant IdealGases.Common.DataRecord TaO2(
          name="TaO2",
          MM=0.2129467,
          Hf=-815518.6532592428,
          H0=50243.08430231603,
          Tlimit=1000,
          alow={15163.56303,70.58414759999999,0.691851699,0.02020605733,-2.928317413e-005,
              2.081417374e-008,-5.751106690000001e-012},
          blow={-22121.99468,24.846625},
          ahigh={1297565.964,-4149.217430000001,10.41680373,-0.001045478838,
              2.754904271e-007,-3.29704313e-011,1.356249074e-015},
          bhigh={3418.98567,-33.9264279},
          R=39.04485019021192);

        constant IdealGases.Common.DataRecord Ti(
          name="Ti",
          MM=0.047867,
          Hf=9881546.785885891,
          H0=157501.8488729187,
          Tlimit=1000,
          alow={-45701.79399999999,660.809202,0.429525749,0.00361502991,-3.54979281e-006,
              1.759952494e-009,-3.052720871e-013},
          blow={52709.4793,20.26149738},
          ahigh={-170478.6714,1073.852803,1.181955014,0.0002245246352,
              3.091697848e-007,-5.74002728e-011,2.927371014e-015},
          bhigh={49780.69910000001,17.40431368},
          R=173.699458917417);

        constant IdealGases.Common.DataRecord Tiplus(
          name="Tiplus",
          MM=0.0478664514,
          Hf=23766625.59531204,
          H0=165038.9525219745,
          Tlimit=1000,
          alow={170745.7044,-1727.524602,9.615885329999999,-0.0108965506,
              8.20180965e-006,-2.871464413e-009,3.420382976e-013},
          blow={144789.7558,-34.6314366},
          ahigh={-768546.308,2545.8681,0.342386278,0.000709990136,2.706231875e-008,-2.3716601e-011,
              1.895443077e-015},
          bhigh={119882.1489,24.8479915},
          R=173.7014496963525);

        constant IdealGases.Common.DataRecord Timinus(
          name="Timinus",
          MM=0.0478675486,
          Hf=9593217.689865155,
          H0=157990.4177503671,
          Tlimit=1000,
          alow={-3006.48499,204.0911689,1.822638976,0.001245254812,-1.309239865e-006,
              7.37214322e-010,-1.724319779e-013},
          blow={53467.7205,12.05926588},
          ahigh={23411.1764,2.580413872,2.497754577,9.76907204e-007,-2.280024955e-010,
              2.717202291e-014,-1.295670294e-018},
          bhigh={54546.62179999999,7.99982395},
          R=173.6974681841134);

        constant IdealGases.Common.DataRecord TiCL(
          name="TiCL",
          MM=0.08331999999999999,
          Hf=1810500.792126741,
          H0=116186.1017762842,
          Tlimit=1000,
          alow={-17141.77839,310.3259047,0.892093598,0.01383436793,-1.885370354e-005,
              1.212085912e-008,-3.032162427e-012},
          blow={15580.66453,22.44778384},
          ahigh={-963322.542,2868.829781,1.973820676,0.001752668011,-4.25543436e-007,
              5.0491034e-011,-2.304720715e-015},
          bhigh={-1811.011561,23.19450287},
          R=99.78963034085456);

        constant IdealGases.Common.DataRecord TiCL2(
          name="TiCL2",
          MM=0.118773,
          Hf=-1997339.462672493,
          H0=114043.343184057,
          Tlimit=1000,
          alow={13243.54656,-576.282932,9.64004729,-0.00447512095,
              5.398794869999999e-006,-3.52580049e-009,9.74600455e-013},
          blow={-27920.66683,-22.18347625},
          ahigh={-3190012.95,10157.63826,-4.84079477,0.00682200634,-1.70075327e-006,
              2.118106588e-010,-1.041245457e-014},
          bhigh={-94809.82980000001,78.23195948},
          R=70.00304783073595);

        constant IdealGases.Common.DataRecord TiCL3(
          name="TiCL3",
          MM=0.154226,
          Hf=-3496946.04022668,
          H0=99691.01837563056,
          Tlimit=1000,
          alow={124328.2268,-2320.728253,17.79895274,-0.01160889348,1.006643154e-005,
              -4.81194069e-009,1.006186828e-012},
          blow={-56096.0251,-67.32754065},
          ahigh={-94087.92310000002,-125.5351109,10.66923972,-0.0002637456897,
              7.95916935e-008,-1.176740054e-011,6.41622348e-016},
          bhigh={-67691.1468,-23.69164216},
          R=53.91096183522882);

        constant IdealGases.Common.DataRecord TiCL4(
          name="TiCL4",
          MM=0.189679,
          Hf=-4023429.056458543,
          H0=113947.9910796662,
          Tlimit=1000,
          alow={81871.96800000001,-1758.32385,18.92512121,-0.01133495876,
              1.251952037e-005,-7.422681329999999e-009,1.825440187e-012},
          blow={-86729.23109999999,-67.69594291},
          ahigh={-143256.2278,-43.1677485,13.03337752,-1.371365738e-005,
              3.093403483e-009,-3.60424516e-013,1.691384523e-017},
          bhigh={-95889.46999999999,-32.47541011},
          R=43.83443607357694);

        constant IdealGases.Common.DataRecord TiO(
          name="TiO",
          MM=0.0638664,
          Hf=775112.0307391679,
          H0=150205.9768516779,
          Tlimit=1000,
          alow={-11681.5246,454.256565,-0.1139144613,0.01275432333,-1.727656935e-005,
              1.187369403e-008,-3.23657937e-012},
          blow={2924.306353,27.02903947},
          ahigh={2330644.03,-7415.79386,12.81799311,-0.004344555950000001,
              1.186303111e-006,-1.367644275e-010,5.70321225e-015},
          bhigh={51448.4136,-57.9399424},
          R=130.1853869953528);

        constant IdealGases.Common.DataRecord TiOplus(
          name="TiOplus",
          MM=0.06386585139999999,
          Hf=10730632.97485454,
          H0=144257.2329036547,
          Tlimit=1000,
          alow={36912.5625,-149.2825538,2.624977257,0.00581862713,-7.52966211e-006,
              4.74415435e-009,-1.186916989e-012},
          blow={82415.51169999999,10.95428726},
          ahigh={342132.953,-2161.85106,8.02517566,-0.002708700692,1.004583805e-006,-1.50576685e-010,
              8.04565811e-015},
          bhigh={93626.4699,-22.61587887},
          R=130.1865052722056);

        constant IdealGases.Common.DataRecord TiOCL(
          name="TiOCL",
          MM=0.0993194,
          Hf=-2459358.393224285,
          H0=122259.1054718413,
          Tlimit=1000,
          alow={35458.5651,-629.528714,7.3701763,0.00330201914,-6.12145875e-006,
              4.73588025e-009,-1.374690357e-012},
          blow={-27970.87903,-12.94470159},
          ahigh={-127305.9873,-111.111885,7.58288808,-3.3128718e-005,7.31401409e-009,
              -8.37882226e-013,3.87927506e-017},
          bhigh={-31393.56857,-12.47104274},
          R=83.71448075602551);

        constant IdealGases.Common.DataRecord TiOCL2(
          name="TiOCL2",
          MM=0.1347724,
          Hf=-4047950.470571125,
          H0=123986.8845549979,
          Tlimit=1000,
          alow={32890.5246,-738.918859,10.55976857,0.001577742341,-3.9071821e-006,
              3.29057653e-009,-9.949471750000001e-013},
          blow={-64484.107,-24.17469934},
          ahigh={-132295.1633,-96.91212050000002,10.07240769,-2.897248531e-005,
              6.40177504e-009,-7.3384526e-013,3.39928267e-017},
          bhigh={-68474.09640000001,-19.75043469},
          R=61.69269078832164);

        constant IdealGases.Common.DataRecord TiO2(
          name="TiO2",
          MM=0.07986579999999999,
          Hf=-3824290.246889157,
          H0=142134.5557172156,
          Tlimit=1000,
          alow={-1710.545601,272.1435528,0.596137896,0.01925463599,-2.665500165e-005,
              1.811109197e-008,-4.87671047e-012},
          blow={-39122.4177,24.08605889},
          ahigh={154629.9764,-1046.25688,7.78898583,-0.0001546805714,-7.05993595e-008,
              3.100244802e-011,-2.49472543e-015},
          bhigh={-32663.3675,-15.9153466},
          R=104.1055370383819);

        constant IdealGases.Common.DataRecord U(
          name="U",
          MM=0.23802891,
          Hf=2247626.139194605,
          H0=27304.64127235637,
          Tlimit=1000,
          alow={69657.3775,-1070.351517,8.075842310000001,-0.01060034069,
              9.25654801e-006,-3.21989976e-009,4.058048809e-013},
          blow={68665.137,-22.40521678},
          ahigh={-4092498.96,12748.88349,-12.18707506,0.00725810568,-7.78777507e-007,
              -3.84435385e-011,7.066508567e-015},
          bhigh={-16993.72664,115.5026301},
          R=34.93051327252644);

        constant IdealGases.Common.DataRecord UF(
          name="UF",
          MM=0.2570273132,
          Hf=-191616.7444884609,
          H0=36521.65555143032,
          Tlimit=1000,
          alow={172553.3463,-1698.985561,5.90292643,0.01841977309,-4.633174310000001e-005,
              4.376657200000001e-008,-1.451876566e-011},
          blow={2086.455917,-11.86592944},
          ahigh={-5325439.37,15339.67086,-11.75044398,0.00964721093,-2.49877819e-006,
              3.155572896e-010,-1.544694839e-014},
          bhigh={-105719.6525,122.0828149},
          R=32.34859321557893);

        constant IdealGases.Common.DataRecord UFplus(
          name="UFplus",
          MM=0.2570267646,
          Hf=2167318.908857323,
          H0=36958.66854482439,
          Tlimit=1000,
          alow={1622640.597,-19173.26611,87.5946122,-0.1699915707,0.0001861251683,-1.036176702e-007,
              2.324287412e-011},
          blow={161670.9643,-480.6891249},
          ahigh={539509.184,-2923.962095,10.08511948,-0.002425945123,5.92872548e-007,
              -6.79584554e-011,3.152666445e-015},
          bhigh={82672.91220000001,-33.07089704},
          R=32.34866226067727);

        constant IdealGases.Common.DataRecord UFminus(
          name="UFminus",
          MM=0.2570278618,
          Hf=-605689.9509250013,
          H0=35622.62447300179,
          Tlimit=1000,
          alow={3692.32786,-149.1979606,4.03398852,0.002857429445,-5.17170256e-006,
              3.98537911e-009,-9.47035544e-013},
          blow={-19152.81695,6.059243838},
          ahigh={-4311143.56,19748.17938,-27.60304763,0.02276806261,-6.88874172e-006,
              9.483511059999999e-010,-4.9106881e-014},
          bhigh={-138080.129,224.0758537},
          R=32.34852417077533);

        constant IdealGases.Common.DataRecord UF2(
          name="UF2",
          MM=0.2760257164,
          Hf=-1938358.21523476,
          H0=54894.85616638001,
          Tlimit=1000,
          alow={-38824.9202,445.493086,4.71800919,0.00164891148,
              8.696243010000001e-006,-1.207439921e-008,4.53679391e-012},
          blow={-68553.29330000001,11.59725423},
          ahigh={-471677.682,322.423686,8.214090629999999,-0.000140741378,
              6.54117805e-009,1.818915497e-012,-2.287963719e-016},
          bhigh={-69952.3505,-9.648963156000001},
          R=30.12209191389676);

        constant IdealGases.Common.DataRecord UF2plus(
          name="UF2plus",
          MM=0.2760251678,
          Hf=255214.1442806506,
          H0=52303.66170979283,
          Tlimit=1000,
          alow={5439.01016,-150.7096256,6.87348519,0.001530973969,-3.31669431e-006,
              2.949453335e-009,-8.28170654e-013},
          blow={7256.01491,-2.205491833},
          ahigh={-3779149.61,12987.37504,-10.27930641,0.01048838051,-2.651047812e-006,
              3.116973593e-010,-1.417216291e-014},
          bhigh={-74334.402,118.9131079},
          R=30.12215178155214);

        constant IdealGases.Common.DataRecord UF2minus(
          name="UF2minus",
          MM=0.2760262650000001,
          Hf=-2457132.820313313,
          H0=47652.49060628342,
          Tlimit=1000,
          alow={806049.1730000001,-9404.254659999999,44.4839277,-0.0686855877,
              6.777809920000001e-005,-3.33882768e-008,6.60485162e-012},
          blow={-36033.0613,-226.1594249},
          ahigh={10382318.55,-28401.13518,34.9853337,-0.01053216396,1.92462047e-006,-1.69874957e-010,
              5.70985889e-015},
          bhigh={100157.2794,-209.4039075},
          R=30.12203204647934);

        constant IdealGases.Common.DataRecord UF3(
          name="UF3",
          MM=0.2950241196,
          Hf=-3596175.792130048,
          H0=63191.657093246,
          Tlimit=1000,
          alow={30710.27207,-634.078947,11.14030799,-0.0002937554125,-1.865390371e-006,
              2.37181947e-009,-7.44675407e-013},
          blow={-127183.8141,-23.48962529},
          ahigh={-3828876.42,12968.91783,-7.26555429,0.01048289752,-2.649840687e-006,
              3.115594509e-010,-1.4165794e-014},
          bhigh={-211361.5913,105.4464687},
          R=28.18234662058458);

        constant IdealGases.Common.DataRecord UF3plus(
          name="UF3plus",
          MM=0.295023571,
          Hf=-965161.6277127904,
          H0=63245.35336873134,
          Tlimit=1000,
          alow={-398415.589,3480.89244,-2.519603507,0.02283749282,-2.16884478e-005,
              1.11126579e-008,-2.350882012e-012},
          blow={-55508.892,58.53815975},
          ahigh={-1196316.388,3972.78507,4.53590711,0.00413341615,-1.097960689e-006,
              1.319641252e-010,-6.10112918e-015},
          bhigh={-61995.4174,21.37623045},
          R=28.18239902600868);

        constant IdealGases.Common.DataRecord UF3minus(
          name="UF3minus",
          MM=0.2950246682,
          Hf=-4021496.840378447,
          H0=65615.96736336911,
          Tlimit=1000,
          alow={-231518.73,2534.197822,-3.18071459,0.02932741422,-2.85691226e-005,
              1.345804152e-008,-2.465442912e-012},
          blow={-158038.7746,59.73605435},
          ahigh={-191005.3149,-506.918131,11.81482258,-0.0001711879404,-9.38483918e-008,
              2.242009537e-011,-1.42819528e-015},
          bhigh={-143862.8681,-27.74680411},
          R=28.18229421535538);

        constant IdealGases.Common.DataRecord UF4(
          name="UF4",
          MM=0.3140225228,
          Hf=-5114784.136114202,
          H0=69716.59804778818,
          Tlimit=1000,
          alow={-50078.5238,-969.349355,20.69596355,-0.02564852637,4.19586012e-005,-3.20101339e-008,
              9.422076860000001e-012},
          blow={-193162.6334,-71.72362935},
          ahigh={-1230291.173,3876.46379,7.62162591,0.004094525220000001,-1.088530094e-006,
              1.308042117e-010,-6.04439087e-015},
          bhigh={-221414.292,6.270300658},
          R=26.47731100897964);

        constant IdealGases.Common.DataRecord UF4plus(
          name="UF4plus",
          MM=0.3140219742,
          Hf=-2042976.405184323,
          H0=64687.5622374837,
          Tlimit=1000,
          alow={38489.5633,-1343.282151,16.46334809,-0.00719607986,1.147165041e-005,-8.70587798e-009,
              2.501076195e-012},
          blow={-74050.482,-52.95285534999999},
          ahigh={-1617630.159,3765.93477,9.16613853,0.002426641067,-5.695320299999999e-007,
              6.021096599999999e-011,-2.438874329e-015},
          bhigh={-106191.0645,-4.162641042},
          R=26.47735726514645);

        constant IdealGases.Common.DataRecord UF4minus(
          name="UF4minus",
          MM=0.3140230714,
          Hf=-5503846.766081914,
          H0=69666.13918674002,
          Tlimit=1000,
          alow={72031.7969,-1374.343862,16.40877729,-0.00436306627,2.460407959e-006,-1.498144731e-010,
              -1.239417075e-013},
          blow={-204517.4023,-51.72250795},
          ahigh={-4639200.11,16268.24426,-9.59529105,0.01441556535,-4.008173850000001e-006,
              5.140230790000001e-010,-2.511687821e-014},
          bhigh={-312514.0933,127.4038784},
          R=26.47726475297446);

        constant IdealGases.Common.DataRecord UF5(
          name="UF5",
          MM=0.333020926,
          Hf=-5854959.048429288,
          H0=70875.07167642673,
          Tlimit=1000,
          alow={161576.9193,-2976.611537,25.3754242,-0.0193010567,2.561852107e-005,-1.747402896e-008,
              4.73205938e-012},
          blow={-223908.9616,-102.4264836},
          ahigh={-1695373.88,3735.42535,12.1874804,0.002418608203,-5.67852616e-007,
              6.00276561e-011,-2.430740809e-015},
          bhigh={-264510.7342,-18.83137475},
          R=24.96681544870847);

        constant IdealGases.Common.DataRecord UF5plus(
          name="UF5plus",
          MM=0.3330203774,
          Hf=-2563258.286668436,
          H0=70903.04258360378,
          Tlimit=1000,
          alow={162651.9713,-2915.370389,24.36168077,-0.01382199656,1.339849041e-005,
              -7.07857269e-009,1.57340404e-012},
          blow={-92264.0485,-98.30243935},
          ahigh={-262847.8263,-117.4047323,16.08988291,-3.66551671e-005,
              8.221494970000001e-009,-9.53716052e-013,4.46014508e-017},
          bhigh={-107629.3931,-47.63374165000001},
          R=24.96685657770803);

        constant IdealGases.Common.DataRecord UF5minus(
          name="UF5minus",
          MM=0.3330214746,
          Hf=-6874725.540597317,
          H0=75649.66502613644,
          Tlimit=1000,
          alow={-314213.0934,2020.611008,7.50849182,0.01640034396,-1.562795472e-005,
              7.99024601e-009,-1.671674534e-012},
          blow={-290764.7496,4.690020575},
          ahigh={-1331518.187,3905.51686,10.58727667,0.00411250727,-1.09327793e-006,
              1.314215436e-010,-6.07577827e-015},
          bhigh={-304950.6955,-7.977511665},
          R=24.96677431984442);

        constant IdealGases.Common.DataRecord UF6(
          name="UF6",
          MM=0.3520193292,
          Hf=-6103760.418165129,
          H0=75630.36967459797,
          Tlimit=1000,
          alow={191567.406,-3426.39161,28.0039589,-0.01326392086,1.107123764e-005,-4.821754109999999e-009,
              8.32513245e-013},
          blow={-246104.5194,-121.1612947},
          ahigh={-340902.792,-145.8950046,19.10902533,-4.358451129999999e-005,
              9.617604659999999e-009,-1.100915551e-012,5.09264508e-017},
          bhigh={-264364.5561,-65.79130395999999},
          R=23.61936209268818);

        constant IdealGases.Common.DataRecord UF6minus(
          name="UF6minus",
          MM=0.3520198778,
          Hf=-7645324.368668365,
          H0=78775.65657174375,
          Tlimit=1000,
          alow={156923.0858,-3027.27994,27.01442427,-0.01136860992,8.29857616e-006,-2.582889593e-009,
              2.790817248e-013},
          blow={-313530.7376,-112.8934794},
          ahigh={2699676.848,-6574.45967,22.41731997,0.000605779971,-4.51749171e-007,
              7.821820469999999e-011,-4.56033472e-015},
          bhigh={-285566.7984,-91.82896336},
          R=23.61932528345421);

        constant IdealGases.Common.DataRecord UO(
          name="UO",
          MM=0.25402831,
          Hf=120020.4378795419,
          H0=37548.13390680748,
          Tlimit=1000,
          alow={1007249.615,-12871.90666,59.93123920000001,-0.1003445164,
              8.529345550000001e-005,-2.634105066e-008,-5.350649790000001e-013},
          blow={66274.4252,-322.6786779},
          ahigh={-2458660.003,3942.65216,5.01603072,-0.0005450639469999999,
              2.096321351e-007,-2.654652526e-011,1.361108472e-015},
          bhigh={-26651.49645,5.580598689},
          R=32.73049369969828);

        constant IdealGases.Common.DataRecord UOplus(
          name="UOplus",
          MM=0.2540277614,
          Hf=2287041.084793814,
          H0=34737.25450859325,
          Tlimit=1000,
          alow={15628.34007,-122.4921454,3.32414616,0.002467496097,-6.851856739999999e-007,
              5.55207319e-011,-5.89301203e-014},
          blow={69529.99740000001,9.583869879},
          ahigh={-106371.4748,-1793.716133,8.024449049999999,-0.001565116442,
              5.06603391e-007,-7.37397747e-011,4.07476643e-015},
          bhigh={77890.8584,-21.1528425},
          R=32.73056438468461);

        constant IdealGases.Common.DataRecord UOF(
          name="UOF",
          MM=0.2730267132,
          Hf=-1985823.063411511,
          H0=51297.01718871954,
          Tlimit=1000,
          alow={386.124847,51.62286899999999,4.88896252,0.00726563356,-1.134176875e-005,
              8.50904175e-009,-2.354655485e-012},
          blow={-67198.1338,8.269521875000001},
          ahigh={-3805936.01,12952.07909,-10.25373631,0.01047841671,-2.648894949e-006,
              3.114551623e-010,-1.416111895e-014},
          bhigh={-147897.6701,118.4570601},
          R=30.45296155292104);

        constant IdealGases.Common.DataRecord UOF2(
          name="UOF2",
          MM=0.2920251164,
          Hf=-3819912.060139495,
          H0=61009.94400630945,
          Tlimit=1000,
          alow={-91066.1831,-101.4150169,13.71057013,-0.01659931694,3.082352584e-005,
              -2.490530206e-008,7.580617639999999e-012},
          blow={-137468.6016,-34.70029665},
          ahigh={-1198944.06,3852.17341,4.63910975,0.00408773844,-1.087067018e-006,
              1.306398384e-010,-6.03690152e-015},
          bhigh={-161263.7583,20.18237189},
          R=28.47177017682031);

        constant IdealGases.Common.DataRecord UOF3(
          name="UOF3",
          MM=0.3110235196,
          Hf=-4856989.72522334,
          H0=63748.10826364272,
          Tlimit=1000,
          alow={124925.6374,-2111.719498,18.44931536,-0.01041493583,1.469002962e-005,
              -1.049770051e-008,2.922353602e-012},
          blow={-174384.4024,-66.49285435},
          ahigh={-1658296.049,3714.43468,9.20242554,0.002412862293,-5.66624172e-007,
              5.98906211e-011,-2.42453481e-015},
          bhigh={-210549.1714,-5.670532802},
          R=26.73261498260018);

        constant IdealGases.Common.DataRecord UOF4(
          name="UOF4",
          MM=0.3300219228,
          Hf=-5410584.593442651,
          H0=68912.79769248105,
          Tlimit=1000,
          alow={143716.4405,-2496.730363,21.04827038,-0.00469256133,
              8.741718649999999e-007,1.517555623e-009,-7.76879974e-013},
          blow={-206128.4178,-82.46219615},
          ahigh={-299619.0288,-167.7276501,16.12494871,-4.98441446e-005,
              1.098253497e-008,-1.255803231e-012,5.80448098e-017},
          bhigh={-219545.926,-50.24484645},
          R=25.1936960110336);

        constant IdealGases.Common.DataRecord UO2(
          name="UO2",
          MM=0.27002771,
          Hf=-1769521.73908374,
          H0=49847.09532218007,
          Tlimit=1000,
          alow={-112965.0727,427.073027,8.41369401,-0.00976428,2.199903691e-005,-1.907665954e-008,
              6.02988991e-012},
          blow={-62514.433,-13.00704863},
          ahigh={-1190542.635,3832.18635,2.153236312,0.00408235191,-1.085924847e-006,
              1.305134065e-010,-6.03121575e-015},
          bhigh={-83676.1801,25.90742388},
          R=30.79118065327443);

        constant IdealGases.Common.DataRecord UO2plus(
          name="UO2plus",
          MM=0.2700271614,
          Hf=190699.0346194115,
          H0=42871.68350020659,
          Tlimit=1000,
          alow={44880.2338,-648.923642,6.87424356,0.002281949316,1.859218752e-007,-1.849509036e-009,
              8.14996533e-013},
          blow={7891.74023,-10.28257233},
          ahigh={-1589957.42,3657.74607,3.74678542,0.002394401448,-5.62410144e-007,
              5.93945164e-011,-2.401047056e-015},
          bhigh={-20485.58817,14.64015614},
          R=30.79124321009879);

        constant IdealGases.Common.DataRecord UO2minus(
          name="UO2minus",
          MM=0.2700282586,
          Hf=-2124592.529590901,
          H0=51021.98959261074,
          Tlimit=1000,
          alow={63419.7131,-719.61185,8.30824162,0.000962645545,-3.58373398e-006,
              3.47355458e-009,-1.02279312e-012},
          blow={-67181.69869999999,-16.0603012},
          ahigh={-273825.164,3228.53442,-0.2805114576,0.006607310710000001,-2.070291015e-006,
              2.851708013e-010,-1.466578192e-014},
          bhigh={-88934.3618,41.45760316},
          R=30.79111809670427);

        constant IdealGases.Common.DataRecord UO2F(
          name="UO2F",
          MM=0.2890261132,
          Hf=-3452749.75659189,
          H0=54679.34307051395,
          Tlimit=1000,
          alow={83217.92390000001,-1327.082127,12.4012539,-0.00408415101,
              7.33159348e-006,-5.98740488e-009,1.787869209e-012},
          blow={-115752.6888,-34.15298625},
          ahigh={-1614277.202,3712.77186,6.20330882,0.002412618055,-5.665888019999999e-007,
              5.98882352e-011,-2.424485602e-015},
          bhigh={-147835.7384,8.736139132},
          R=28.76719998738163);

        constant IdealGases.Common.DataRecord UO2F2(
          name="UO2F2",
          MM=0.3080245164,
          Hf=-4396507.2742502,
          H0=61904.07576271744,
          Tlimit=1000,
          alow={99598.74299999999,-1530.010701,13.58992177,0.0053706558,-1.141444341e-005,
              9.301197039999999e-009,-2.781220538e-012},
          blow={-158031.0734,-41.96260275},
          ahigh={-263655.2036,-203.2835065,13.15092994,-6.00648683e-005,
              1.321137913e-008,-1.508668985e-012,6.96618275e-017},
          bhigh={-166444.4818,-35.66258175},
          R=26.99289036202185);

        constant IdealGases.Common.DataRecord UO3(
          name="UO3",
          MM=0.28602711,
          Hf=-2794278.524857312,
          H0=52948.63483394984,
          Tlimit=1000,
          alow={66376.77039999999,-758.2646579999999,7.11284471,0.01322149697,-2.106191042e-005,
              1.545856318e-008,-4.37856629e-012},
          blow={-94133.69349999999,-8.588030428},
          ahigh={-1097362.721,2808.784061,5.96612147,0.002861871152,-1.05284381e-006,
              1.849985929e-010,-1.102849619e-014},
          bhigh={-117336.0017,6.672828312},
          R=29.06882497956226);

        constant IdealGases.Common.DataRecord UO3minus(
          name="UO3minus",
          MM=0.2860276586,
          Hf=-4563036.051786915,
          H0=53935.6301258063,
          Tlimit=1000,
          alow={100014.3902,-1448.443754,12.17532415,-0.002944956748,
              5.675227999999999e-006,-4.91671042e-009,1.525185713e-012},
          blow={-151925.3376,-34.71731375},
          ahigh={-1632938.634,3667.49541,6.24003065,0.002396952522,-5.62949023e-007,
              5.94541313e-011,-2.403730982e-015},
          bhigh={-184592.7385,7.032059012},
          R=29.06876922566257);

        constant IdealGases.Common.DataRecord V(
          name="V",
          MM=0.0509415,
          Hf=10154138.84553851,
          H0=155218.5153558494,
          Tlimit=1000,
          alow={-55353.7602,559.333851,2.675543482,-0.00624304963,1.565902337e-005,-1.372845314e-008,
              4.16838881e-012},
          blow={58206.6436,9.524567490000001},
          ahigh={1200390.3,-5027.0053,10.58830594,-0.005044326100000001,
              1.488547375e-006,-1.785922508e-010,8.113013866e-015},
          bhigh={91707.40909999999,-47.6833632},
          R=163.2160811911703);

        constant IdealGases.Common.DataRecord Vplus(
          name="Vplus",
          MM=0.0509409514,
          Hf=23041293.47297585,
          H0=155038.5452753833,
          Tlimit=1000,
          alow={75688.3446,-841.527382,7.55923271,-0.01441722656,2.038356397e-005,-1.289073883e-008,
              3.065656561e-012},
          blow={144447.8191,-19.91067645},
          ahigh={2347072.054,-9021.197190000001,14.77349798,-0.00689189688,
              1.968884877e-006,-2.539798544e-010,1.226783122e-014},
          bhigh={195835.1444,-78.5559293},
          R=163.2178389192786);

        constant IdealGases.Common.DataRecord Vminus(
          name="Vminus",
          MM=0.0509420486,
          Hf=9037446.974600077,
          H0=154651.4758733122,
          Tlimit=1000,
          alow={-3799.27356,231.3840448,1.72560819,0.001429275357,-1.506038188e-006,
              8.491815170000001e-010,-1.987980413e-013},
          blow={53474.0292,12.61900982},
          ahigh={26001.0043,2.096334097,2.498006548,8.991278839999999e-007,-2.139749508e-010,
              2.581021334e-014,-1.240812796e-018},
          bhigh={54700.0708,7.97790024},
          R=163.2143235009202);

        constant IdealGases.Common.DataRecord VCL4(
          name="VCL4",
          MM=0.1927535,
          Hf=-2734365.290383832,
          H0=113010.129517752,
          Tlimit=1000,
          alow={77198.3471,-1702.85404,18.82697965,-0.01130896832,1.266950765e-005,-7.625019339999999e-009,
              1.907582465e-012},
          blow={-58637.4854,-65.59171105999999},
          ahigh={-1717776.251,4550.441049999999,8.164464799999999,0.002224875998,-4.094111780000001e-007,
              3.2717875e-011,-8.8586908e-016},
          bhigh={-96906.20060000001,4.348293098},
          R=43.13525824433798);

        constant IdealGases.Common.DataRecord VN(
          name="VN",
          MM=0.0649482,
          Hf=8052571.125912651,
          H0=135488.6509556847,
          Tlimit=1000,
          alow={-15817.37285,486.816542,-1.045200388,0.01685261043,-2.334616543e-005,
              1.58871005e-008,-4.27908088e-012},
          blow={59814.814,31.44995263},
          ahigh={1018619.667,-3932.30557,9.856823609999999,-0.00328922171,
              1.005181767e-006,-1.243211436e-010,5.48677656e-015},
          bhigh={85573.18339999999,-35.52830762},
          R=128.0169735265951);

        constant IdealGases.Common.DataRecord VO(
          name="VO",
          MM=0.0669409,
          Hf=2219610.223346266,
          H0=131057.4850353073,
          Tlimit=1000,
          alow={-13116.19784,374.781697,0.0930083486,0.01244977714,-1.688540028e-005,
              1.142443381e-008,-3.04058932e-012},
          blow={15237.8992,25.36811755},
          ahigh={2986190.283,-10113.44974,17.18161749,-0.00787670503,2.562279547e-006,
              -3.54740035e-010,1.770268056e-014},
          bhigh={79612.5488,-87.89993010000001},
          R=124.2061579691937);

        constant IdealGases.Common.DataRecord VO2(
          name="VO2",
          MM=0.0829403,
          Hf=-2805604.211704081,
          H0=128073.4335419573,
          Tlimit=1000,
          alow={-6678.58586,391.159758,-1.028549847,0.02401523419,-3.33737881e-005,
              2.283623543e-008,-6.1991431e-012},
          blow={-30746.09276,32.7791238},
          ahigh={121063.2401,-1627.832993,9.252713099999999,-0.001572703139,
              5.23143016e-007,-6.476071140000001e-011,2.847226026e-015},
          bhigh={-20973.06345,-25.47380687},
          R=100.2464664342907);

        constant IdealGases.Common.DataRecord V4O10(
          name="V4O10",
          MM=0.36376,
          Hf=-7766561.705520123,
          H0=101154.6981526281,
          Tlimit=1000,
          alow={338573.916,-5353.92926,29.93220131,0.0581883652,-9.69634016e-005,
              7.27475699e-008,-2.091628357e-011},
          blow={-318934.937,-146.6398396},
          ahigh={-1360273.27,-1341.69286,40.9913859,-0.000393226553,8.62849412e-008,-9.83594409e-012,
              4.53563729e-016},
          bhigh={-348461.612,-190.7911348},
          R=22.85702661095228);

        constant IdealGases.Common.DataRecord W(
          name="W",
          MM=0.18384,
          Hf=4630349.902088773,
          H0=33814.87162750217,
          Tlimit=1000,
          alow={159522.3922,-2673.843928,20.60469727,-0.0625231523,0.0001105654838,-8.45351161e-008,
              2.336187771e-011},
          blow={113964.8616,-90.118369},
          ahigh={-8048745.96,14657.00424,-0.2508531501,-0.002596486992,
              1.409225475e-006,-2.233011706e-010,1.262640862e-014},
          bhigh={-3091.130919,39.5582219},
          R=45.22667536988686);

        constant IdealGases.Common.DataRecord Wplus(
          name="Wplus",
          MM=0.1838394514,
          Hf=8854687.895353457,
          H0=33840.75046255279,
          Tlimit=1000,
          alow={-196928.4929,2670.137332,-11.31686913,0.0330818373,-3.6290355e-005,
              2.066142971e-008,-4.808285562e-012},
          blow={182095.0862,85.5210448},
          ahigh={6387743.399999999,-20618.11463,27.59291576,-0.01244535845,
              3.27120049e-006,-4.065463720000001e-010,1.912595872e-014},
          bhigh={324517.443,-171.6919194},
          R=45.22681033196339);

        constant IdealGases.Common.DataRecord Wminus(
          name="Wminus",
          MM=0.1838405486,
          Hf=4168783.948026143,
          H0=33710.8872182728,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={91429.8137,8.46116967},
          ahigh={0,0,2.5,0,0,0,0},
          bhigh={91429.8137,8.46116967},
          R=45.22654040861582);

        constant IdealGases.Common.DataRecord WCL6(
          name="WCL6",
          MM=0.396558,
          Hf=-1244993.166195109,
          H0=77645.5272620903,
          Tlimit=1000,
          alow={33393.9167,-1697.36608,25.60612352,-0.01425247881,1.739682668e-005,-1.120537864e-008,
              2.95152289e-012},
          blow={-56730.59239999999,-97.41466299000001},
          ahigh={-151673.5473,-34.5137925,19.02867176,-1.242486969e-005,
              2.917675103e-009,-3.50598144e-013,1.685355887e-017},
          bhigh={-65357.79790000001,-58.94914959000001},
          R=20.96659757210799);

        constant IdealGases.Common.DataRecord WO(
          name="WO",
          MM=0.1998394,
          Hf=2010292.820134568,
          H0=46332.76020644578,
          Tlimit=1000,
          alow={-19337.58411,493.669084,-0.4116148220000001,0.01307976507,-1.689145619e-005,
              1.092748066e-008,-2.820593541e-012},
          blow={45110.179,30.02592661},
          ahigh={1262156.956,-4177.263120000001,9.35828647,-0.00288761222,
              8.89393396e-007,-8.955318699999999e-011,2.504359614e-015},
          bhigh={73133.8064,-31.4488229},
          R=41.60576943285459);

        constant IdealGases.Common.DataRecord WOCL4(
          name="WOCL4",
          MM=0.3416514000000001,
          Hf=-1678591.101924359,
          H0=65187.43666790184,
          Tlimit=1000,
          alow={26588.12693,-933.6913239999999,13.21377385,0.01270930811,-1.964716509e-005,
              1.405106974e-008,-3.89938214e-012},
          blow={-67922.90790000001,-35.94869683},
          ahigh={-304902.8285,-353.942586,16.26432703,-0.0001058245461,
              2.340548846e-008,-2.685852021e-012,1.245412684e-016},
          bhigh={-72725.46739999999,-49.91761253},
          R=24.33612740940034);

        constant IdealGases.Common.DataRecord WO2(
          name="WO2",
          MM=0.2158388,
          Hf=134645.5966211821,
          H0=49642.82603498537,
          Tlimit=1000,
          alow={3120.918919,241.3883468,-0.3024119184,0.02324333417,-3.37881268e-005,
              2.380934019e-008,-6.421592880000001e-012},
          blow={1442.005265,29.57655179},
          ahigh={-753740.6680000001,3204.64305,0.6701965600000001,0.00448823887,-8.858328459999999e-007,
              6.24517175e-011,-9.046613900000001e-016},
          bhigh={-17694.2023,34.0572401},
          R=38.52167450893908);

        constant IdealGases.Common.DataRecord WO2CL2(
          name="WO2CL2",
          MM=0.2867448,
          Hf=-2341915.180327594,
          H0=68018.03206195892,
          Tlimit=1000,
          alow={430.015448,-243.8547856,7.97630699,0.01715005722,-2.487975176e-005,
              1.737644163e-008,-4.7719284e-012},
          blow={-82328.124,-7.844771421},
          ahigh={-240479.173,-306.8379644,13.22814502,-9.10022071e-005,
              2.00658102e-008,-2.296837607e-012,1.062829386e-016},
          bhigh={-83674.93059999999,-34.91556626},
          R=28.99606897840868);

        constant IdealGases.Common.DataRecord WO3(
          name="WO3",
          MM=0.2318382,
          Hf=-1379087.712896321,
          H0=57229.32200129228,
          Tlimit=1000,
          alow={7262.46146,34.2939109,1.573061955,0.02754971099,-3.99482731e-005,
              2.809371537e-008,-7.77754573e-012},
          blow={-40017.3327,18.57409963},
          ahigh={1732203.64,-6284.719779999999,16.81358864,-0.00347208936,
              8.079935799999999e-007,-6.589378720000001e-011,1.142928957e-015},
          bhigh={-2473.075565,-74.0747409},
          R=35.86325290655294);

        constant IdealGases.Common.DataRecord WO3minus(
          name="WO3minus",
          MM=0.2318387486,
          Hf=-2805725.811271913,
          H0=59155.9395606572,
          Tlimit=1000,
          alow={163099.9684,-1967.609682,12.01970914,0.001681260779,-5.859360060000001e-006,
              5.02861633e-009,-1.434012198e-012},
          blow={-70092.03989999999,-39.3690104},
          ahigh={463783.251,-1347.089334,9.773637559999999,0.001071395459,-3.84240366e-007,
              5.7375319e-011,-3.157605982e-015},
          bhigh={-72395.1557,-23.91116343},
          R=35.86316804334235);

        constant IdealGases.Common.DataRecord Xe(
          name="Xe",
          MM=0.131293,
          Hf=0,
          H0=47203.03443443291,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={-745.375,6.164454205},
          ahigh={4025.22668,-12.09507521,2.514153347,-8.248102080000001e-006,
              2.530232618e-009,-3.89233323e-013,2.360439138e-017},
          bhigh={-668.5800730000001,6.063710715},
          R=63.3276107637117);

        constant IdealGases.Common.DataRecord Xeplus(
          name="Xeplus",
          MM=0.1312924514,
          Hf=8961309.042935578,
          H0=47203.23167033196,
          Tlimit=1000,
          alow={100.292362,-1.218753648,2.506016493,-1.547411334e-005,
              2.191372741e-008,-1.623684074e-011,4.929132670000001e-015},
          blow={140766.5368,7.516712465},
          ahigh={-12416.83887,-150.0654643,2.964678293,-0.000469339666,
              1.959138719e-007,-3.037761925e-011,1.637361082e-015},
          bhigh={141496.6808,4.565685735},
          R=63.32787537547646);

        constant IdealGases.Common.DataRecord Zn(
          name="Zn",
          MM=0.06539,
          Hf=1994188.713870623,
          H0=94776.38782688484,
          Tlimit=1000,
          alow={0,0,2.5,0,0,0,0},
          blow={14938.05072,5.11886101},
          ahigh={-175559.1489,498.413924,1.969386292,0.0002608808787,-5.62719508e-008,
              2.723336049e-012,4.266685808e-016},
          bhigh={11737.73458,8.961085649999999},
          R=127.1520415965744);

        constant IdealGases.Common.DataRecord Znplus(
          name="Znplus",
          MM=0.06538945139999999,
          Hf=15950586.91683717,
          H0=94777.18297541796,
          Tlimit=1000,
          alow={0.000409834494,-4.34358162e-006,2.500000019,-4.389036810000001e-011,
              5.5639692e-014,-3.63822826e-017,9.607881994999999e-021},
          blow={124697.9918,5.8119955},
          ahigh={-343617.946,956.7355239999999,1.511478952,0.000461346796,-8.786800980000001e-008,
              7.558567779999999e-013,1.168827311e-015},
          bhigh={118532.1933,13.0074267},
          R=127.1531083681794);

        constant IdealGases.Common.DataRecord Zr(
          name="Zr",
          MM=0.091224,
          Hf=6569747.116986759,
          H0=74712.91546084364,
          Tlimit=1000,
          alow={67158.9996,-943.5981740000001,6.35975618,-0.0009790119730000001,-7.60822415e-006,
              9.30871743e-009,-3.124675586e-012},
          blow={75880.19469999999,-16.65770522},
          ahigh={6006771.84,-15669.60605,17.9698235,-0.00676340965,1.733678968e-006,-2.064699786e-010,
              9.334092610000001e-015},
          bhigh={173463.6249,-105.1117377},
          R=91.1434710163992);

        constant IdealGases.Common.DataRecord Zrplus(
          name="Zrplus",
          MM=0.0912234514,
          Hf=13661468.32721131,
          H0=81907.57842779889,
          Tlimit=1000,
          alow={173984.2193,-2224.598466,14.00787829,-0.02378785396,2.641058912e-005,
              -1.442565487e-008,3.135982142e-012},
          blow={159821.0714,-58.1672881},
          ahigh={729813.716,-2017.117556,5.0374983,-0.000550337195,1.023753499e-007,-1.261537793e-011,
              7.092401041999999e-016},
          bhigh={162088.4945,-9.820640859999999},
          R=91.14401913541281);

        constant IdealGases.Common.DataRecord Zrminus(
          name="Zrminus",
          MM=0.09122454860000001,
          Hf=6061442.961198715,
          H0=84949.69960311757,
          Tlimit=1000,
          alow={30466.62367,-807.427721,9.21300611,-0.01614342054,1.908653551e-005,-1.138888914e-008,
              2.745019116e-012},
          blow={69030.3403,-28.62644371},
          ahigh={84718.61159999999,317.543934,2.251491246,0.0001018645389,-2.285208242e-008,
              2.647293502e-012,-1.235813604e-016},
          bhigh={64223.376,10.81261057},
          R=91.14292290397806);

        constant IdealGases.Common.DataRecord ZrN(
          name="ZrN",
          MM=0.1052307,
          Hf=6779124.342991162,
          H0=84223.2352345846,
          Tlimit=1000,
          alow={22591.09156,-180.2590198,3.130058377,0.00542770928,-8.264614840000001e-006,
              5.95843822e-009,-1.670274535e-012},
          blow={85788.81490000001,8.470724779999999},
          ahigh={-72557.9089,-81.267966,4.5599244,1.29116165e-005,
              5.203830769999999e-009,-5.92743667e-013,2.731548854e-017},
          bhigh={84686.48390000001,1.493633264},
          R=79.01184730311593);

        constant IdealGases.Common.DataRecord ZrO(
          name="ZrO",
          MM=0.1072234,
          Hf=782690.2336616821,
          H0=83658.11940304076,
          Tlimit=1000,
          alow={-509176.14,8652.77009,-52.9474015,0.1728961761,-0.0002457230895,
              1.672135156e-007,-4.423012380000001e-011},
          blow={-30951.29818,313.2576719},
          ahigh={464809.831,344.231447,4.81577918,-0.000466063314,2.140489079e-007,-2.054364483e-011,
              4.08466776e-016},
          bhigh={7317.3407,1.502933548},
          R=77.54344667302101);

        constant IdealGases.Common.DataRecord ZrOplus(
          name="ZrOplus",
          MM=0.1072228514,
          Hf=6720713.957808437,
          H0=88265.83024446596,
          Tlimit=1000,
          alow={10329.11549,73.0466122,2.606345299,0.005099300290000001,-6.25033876e-006,
              3.79746002e-009,-9.198416899999999e-013},
          blow={85332.33779999999,12.67311019},
          ahigh={-493716.656,669.990076,4.57535347,-0.00069232379,4.28060094e-007,-7.54766022e-011,
              4.41427986e-015},
          bhigh={80188.80660000001,2.928943704},
          R=77.5438434199298);

        constant IdealGases.Common.DataRecord ZrO2(
          name="ZrO2",
          MM=0.1232228,
          Hf=-2572922.681516732,
          H0=97451.63232778349,
          Tlimit=1000,
          alow={36376.49,-262.0658297,3.69286687,0.01214524156,-1.822445342e-005,
              1.299215204e-008,-3.61590011e-012},
          blow={-38019.9088,8.290857600000001},
          ahigh={2854363.887,-8738.589889999999,16.21315114,-0.004417922830000001,
              8.959096920000001e-007,-4.054667109999999e-011,-2.147732083e-015},
          bhigh={15275.10023,-74.8199549},
          R=67.47511012572349);

        annotation (Documentation(info="<html>
<p>This package contains ideal gas models for the 1241 ideal gases from</p>
<blockquote>
  <p>McBride B.J., Zehe M.J., and Gordon S. (2002): <strong>NASA Glenn Coefficients
  for Calculating Thermodynamic Properties of Individual Species</strong>. NASA
  report TP-2002-211556</p>
</blockquote>

<pre>
 Ag        BaOH+           C2H4O_ethylen_o DF      In2I4    Nb      ScO2
 Ag+       Ba_OH_2         CH3CHO_ethanal  DOCl    In2I6    Nb+     Sc2O
 Ag-       BaS             CH3COOH         DO2     In2O     Nb-     Sc2O2
 Air       Ba2             OHCH2COOH       DO2-    K        NbCl5   Si
 Al        Be              C2H5            D2      K+       NbO     Si+
 Al+       Be+             C2H5Br          D2+     K-       NbOCl3  Si-
 Al-       Be++            C2H6            D2-     KAlF4    NbO2    SiBr
 AlBr      BeBr            CH3N2CH3        D2O     KBO2     Ne      SiBr2
 AlBr2     BeBr2           C2H5OH          D2O2    KBr      Ne+     SiBr3
 AlBr3     BeCl            CH3OCH3         D2S     KCN      Ni      SiBr4
 AlC       BeCl2           CH3O2CH3        e-      KCl      Ni+     SiC
 AlC2      BeF             CCN             F       KF       Ni-     SiC2
 AlCl      BeF2            CNC             F+      KH       NiCl    SiCl
 AlCl+     BeH             OCCN            F-      KI       NiCl2   SiCl2
 AlCl2     BeH+            C2N2            FCN     Kli      NiO     SiCl3
 AlCl3     BeH2            C2O             FCO     KNO2     NiS     SiCl4
 AlF       BeI             C3              FO      KNO3     O       SiF
 AlF+      BeI2            C3H3_1_propynl  FO2_FOO KNa      O+      SiFCl
 AlFCl     BeN             C3H3_2_propynl  FO2_OFO KO       O-      SiF2
 AlFCl2    BeO             C3H4_allene     F2      KOH      OD      SiF3
 AlF2      BeOH            C3H4_propyne    F2O     K2       OD-     SiF4
 AlF2-     BeOH+           C3H4_cyclo      F2O2    K2+      OH      SiH
 AlF2Cl    Be_OH_2         C3H5_allyl      FS2F    K2Br2    OH+     SiH+
 AlF3      BeS             C3H6_propylene  Fe      K2CO3    OH-     SiHBr3
 AlF4-     Be2             C3H6_cyclo      Fe+     K2C2N2   O2      SiHCl
 AlH       Be2Cl4          C3H6O_propylox  Fe_CO_5 K2Cl2    O2+     SiHCl3
 AlHCl     Be2F4           C3H6O_acetone   FeCl    K2F2     O2-     SiHF
 AlHCl2    Be2O            C3H6O_propanal  FeCl2   K2I2     O3      SiHF3
 AlHF      Be2OF2          C3H7_n_propyl   FeCl3   K2O      P       SiHI3
 AlHFCl    Be2O2           C3H7_i_propyl   FeO     K2O+     P+      SiH2
 AlHF2     Be3O3           C3H8            Fe_OH_2 K2O2     P-      SiH2Br2
 AlH2      Be4O4           C3H8O_1propanol Fe2Cl4  K2O2H2   PCl     SiH2Cl2
 AlH2Cl    Br              C3H8O_2propanol Fe2Cl6  K2SO4    PCl2    SiH2F2
 AlH2F     Br+             CNCOCN          Ga      Kr       PCl2-   SiH2I2
 AlH3      Br-             C3O2            Ga+     Kr+      PCl3    SiH3
 AlI       BrCl            C4              GaBr    li       PCl5    SiH3Br
 AlI2      BrF             C4H2_butadiyne  GaBr2   li+      PF      SiH3Cl
 AlI3      BrF3            C4H4_1_3-cyclo  GaBr3   li-      PF+     SiH3F
 AlN       BrF5            C4H6_butadiene  GaCl    liAlF4   PF-     SiH3I
 AlO       BrO             C4H6_1butyne    GaCl2   liBO2    PFCl    SiH4
 AlO+      OBrO            C4H6_2butyne    GaCl3   liBr     PFCl-   SiI
 AlO-      BrOO            C4H6_cyclo      GaF     liCl     PFCl2   SiI2
 AlOCl     BrO3            C4H8_1_butene   GaF2    liF      PFCl4   SiN
 AlOCl2    Br2             C4H8_cis2_buten GaF3    liH      PF2     SiO
 AlOF      BrBrO           C4H8_isobutene  GaH     liI      PF2-    SiO2
 AlOF2     BrOBr           C4H8_cyclo      GaI     liN      PF2Cl   SiS
 AlOF2-    C               C4H9_n_butyl    GaI2    liNO2    PF2Cl3  SiS2
 AlOH      C+              C4H9_i_butyl    GaI3    liNO3    PF3     Si2
 AlOHCl    C-              C4H9_s_butyl    GaO     liO      PF3Cl2  Si2C
 AlOHCl2   CBr             C4H9_t_butyl    GaOH    liOF     PF4Cl   Si2F6
 AlOHF     CBr2            C4H10_n_butane  Ga2Br2  liOH     PF5     Si2N
 AlOHF2    CBr3            C4H10_isobutane Ga2Br4  liON     PH      Si3
 AlO2      CBr4            C4N2            Ga2Br6  li2      PH2     Sn
 AlO2-     CCl             C5              Ga2Cl2  li2+     PH2-    Sn+
 Al_OH_2   CCl2            C5H6_1_3cyclo   Ga2Cl4  li2Br2   PH3     Sn-
 Al_OH_2Cl CCl2Br2         C5H8_cyclo      Ga2Cl6  li2F2    PN      SnBr
 Al_OH_2F  CCl3            C5H10_1_pentene Ga2F2   li2I2    PO      SnBr2
 Al_OH_3   CCl3Br          C5H10_cyclo     Ga2F4   li2O     PO-     SnBr3
 AlS       CCl4            C5H11_pentyl    Ga2F6   li2O+    POCl3   SnBr4
 AlS2      CF              C5H11_t_pentyl  Ga2I2   li2O2    POFCl2  SnCl
 Al2       CF+             C5H12_n_pentane Ga2I4   li2O2H2  POF2Cl  SnCl2
 Al2Br6    CFBr3           C5H12_i_pentane Ga2I6   li2SO4   POF3    SnCl3
 Al2C2     CFCl            CH3C_CH3_2CH3   Ga2O    li3+     PO2     SnCl4
 Al2Cl6    CFClBr2         C6D5_phenyl     Ge      li3Br3   PO2-    SnF
 Al2F6     CFCl2           C6D6            Ge+     li3Cl3   PS      SnF2
 Al2I6     CFCl2Br         C6H2            Ge-     li3F3    P2      SnF3
 Al2O      CFCl3           C6H5_phenyl     GeBr    li3I3    P2O3    SnF4
 Al2O+     CF2             C6H5O_phenoxy   GeBr2   Mg       P2O4    SnI
 Al2O2     CF2+            C6H6            GeBr3   Mg+      P2O5    SnI2
 Al2O2+    CF2Br2          C6H5OH_phenol   GeBr4   MgBr     P3      SnI3
 Al2O3     CF2Cl           C6H10_cyclo     GeCl    MgBr2    P3O6    SnI4
 Al2S      CF2ClBr         C6H12_1_hexene  GeCl2   MgCl     P4      SnO
 Al2S2     CF2Cl2          C6H12_cyclo     GeCl3   MgCl+    P4O6    SnO2
 Ar        CF3             C6H13_n_hexyl   GeCl4   MgCl2    P4O7    SnS
 Ar+       CF3+            C6H14_n_hexane  GeF     MgF      P4O8    SnS2
 B         CF3Br           C7H7_benzyl     GeF2    MgF+     P4O9    Sn2
 B+        CF3Cl           C7H8            GeF3    MgF2     P4O10   Sr
 B-        CF4             C7H8O_cresol_mx GeF4    MgF2+    Pb      Sr+
 BBr       CH+             C7H14_1_heptene GeH4    MgH      Pb+     SrBr
 BBr2      CHBr3           C7H15_n_heptyl  GeI     MgI      Pb-     SrBr2
 BBr3      CHCl            C7H16_n_heptane GeO     MgI2     PbBr    SrCl
 BC        CHClBr2         C7H16_2_methylh GeO2    MgN      PbBr2   SrCl+
 BC2       CHCl2           C8H8_styrene    GeS     MgO      PbBr3   SrCl2
 BCl       CHCl2Br         C8H10_ethylbenz GeS2    MgOH     PbBr4   SrF
 BCl+      CHCl3           C8H16_1_octene  Ge2     MgOH+    PbCl    SrF+
 BClOH     CHF             C8H17_n_octyl   H       Mg_OH_2  PbCl2   SrF2
 BCl_OH_2  CHFBr2          C8H18_n_octane  H+      MgS      PbCl3   SrH
 BCl2      CHFCl           C8H18_isooctane H-      Mg2      PbCl4   SrI
 BCl2+     CHFClBr         C9H19_n_nonyl   HAlO    Mg2F4    PbF     SrI2
 BCl2OH    CHFCl2          C10H8_naphthale HAlO2   Mn       PbF2    SrO
 BF        CHF2            C10H21_n_decyl  HBO     Mn+      PbF3    SrOH
 BFCl      CHF2Br          C12H9_o_bipheny HBO+    Mo       PbF4    SrOH+
 BFCl2     CHF2Cl          C12H10_biphenyl HBO2    Mo+      PbI     Sr_OH_2
 BFOH      CHF3            Ca              HBS     Mo-      PbI2    SrS
 BF_OH_2   CHI3            Ca+             HBS+    MoO      PbI3    Sr2
 BF2       CH2             CaBr            HCN     MoO2     PbI4    Ta
 BF2+      CH2Br2          CaBr2           HCO     MoO3     PbO     Ta+
 BF2-      CH2Cl           CaCl            HCO+    MoO3-    PbO2    Ta-
 BF2Cl     CH2ClBr         CaCl+           HCCN    Mo2O6    PbS     TaCl5
 BF2OH     CH2Cl2          CaCl2           HCCO    Mo3O9    PbS2    TaO
 BF3       CH2F            CaF             HCl     Mo4O12   Rb      TaO2
 BF4-      CH2FBr          CaF+            HD      Mo5O15   Rb+     Ti
 BH        CH2FCl          CaF2            HD+     N        Rb-     Ti+
 BHCl      CH2F2           CaH             HDO     N+       RbBO2   Ti-
 BHCl2     CH2I2           CaI             HDO2    N-       RbBr    TiCl
 BHF       CH3             CaI2            HF      NCO      RbCl    TiCl2
 BHFCl     CH3Br           CaO             HI      ND       RbF     TiCl3
 BHF2      CH3Cl           CaO+            HNC     ND2      RbH     TiCl4
 BH2       CH3F            CaOH            HNCO    ND3      RbI     TiO
 BH2Cl     CH3I            CaOH+           HNO     NF       RbK     TiO+
 BH2F      CH2OH           Ca_OH_2         HNO2    NF2      Rbli    TiOCl
 BH3       CH2OH+          CaS             HNO3    NF3      RbNO2   TiOCl2
 BH3NH3    CH3O            Ca2             HOCl    NH       RbNO3   TiO2
 BH4       CH4             Cd              HOF     NH+      RbNa    U
 BI        CH3OH           Cd+             HO2     NHF      RbO     UF
 BI2       CH3OOH          Cl              HO2-    NHF2     RbOH    UF+
 BI3       CI              Cl+             HPO     NH2      Rb2Br2  UF-
 BN        CI2             Cl-             HSO3F   NH2F     Rb2Cl2  UF2
 BO        CI3             ClCN            H2      NH3      Rb2F2   UF2+
 BO-       CI4             ClF             H2+     NH2OH    Rb2I2   UF2-
 BOCl      CN              ClF3            H2-     NH4+     Rb2O    UF3
 BOCl2     CN+             ClF5            HBOH    NO       Rb2O2   UF3+
 BOF       CN-             ClO             HCOOH   NOCl     Rb2O2H2 UF3-
 BOF2      CNN             ClO2            H2F2    NOF      Rb2SO4  UF4
 BOH       CO              Cl2             H2O     NOF3     Rn      UF4+
 BO2       CO+             Cl2O            H2O+    NO2      Rn+     UF4-
 BO2-      COCl            Co              H2O2    NO2-     S       UF5
 B_OH_2    COCl2           Co+             H2S     NO2Cl    S+      UF5+
 BS        COFCl           Co-             H2SO4   NO2F     S-      UF5-
 BS2       COF2            Cr              H2BOH   NO3      SCl     UF6
 B2        COHCl           Cr+             HB_OH_2 NO3-     SCl2    UF6-
 B2C       COHF            Cr-             H3BO3   NO3F     SCl2+   UO
 B2Cl4     COS             CrN             H3B3O3  N2       SD      UO+
 B2F4      CO2             CrO             H3B3O6  N2+      SF      UOF
 B2H       CO2+            CrO2            H3F3    N2-      SF+     UOF2
 B2H2      COOH            CrO3            H3O+    NCN      SF-     UOF3
 B2H3      CP              CrO3-           H4F4    N2D2_cis SF2     UOF4
 B2H3_db   CS              Cs              H5F5    N2F2     SF2+    UO2
 B2H4      CS2             Cs+             H6F6    N2F4     SF2-    UO2+
 B2H4_db   C2              Cs-             H7F7    N2H2     SF3     UO2-
 B2H5      C2+             CsBO2           He      NH2NO2   SF3+    UO2F
 B2H5_db   C2-             CsBr            He+     N2H4     SF3-    UO2F2
 B2H6      C2Cl            CsCl            Hg      N2O      SF4     UO3
 B2O       C2Cl2           CsF             Hg+     N2O+     SF4+    UO3-
 B2O2      C2Cl3           CsH             HgBr2   N2O3     SF4-    V
 B2O3      C2Cl4           CsI             I       N2O4     SF5     V+
 B2_OH_4   C2Cl6           Csli            I+      N2O5     SF5+    V-
 B2S       C2F             CsNO2           I-      N3       SF5-    VCl4
 B2S2      C2FCl           CsNO3           IF5     N3H      SF6     VN
 B2S3      C2FCl3          CsNa            IF7     Na       SF6-    VO
 B3H7_C2v  C2F2            CsO             I2      Na+      SH      VO2
 B3H7_Cs   C2F2Cl2         CsOH            In      Na-      SH-     V4O10
 B3H9      C2F3            CsRb            In+     NaAlF4   SN      W
 B3N3H6    C2F3Cl          Cs2             InBr    NaBO2    SO      W+
 B3O3Cl3   C2F4            Cs2Br2          InBr2   NaBr     SO-     W-
 B3O3FCl2  C2F6            Cs2CO3          InBr3   NaCN     SOF2    WCl6
 B3O3F2Cl  C2H             Cs2Cl2          InCl    NaCl     SO2     WO
 B3O3F3    C2HCl           Cs2F2           InCl2   NaF      SO2-    WOCl4
 B4H4      C2HCl3          Cs2I2           InCl3   NaH      SO2Cl2  WO2
 B4H10     C2HF            Cs2O            InF     NaI      SO2FCl  WO2Cl2
 B4H12     C2HFCl2         Cs2O+           InF2    Nali     SO2F2   WO3
 B5H9      C2HF2Cl         Cs2O2           InF3    NaNO2    SO3     WO3-
 Ba        C2HF3           Cs2O2H2         InH     NaNO3    S2      Xe
 Ba+       C2H2_vinylidene Cs2SO4          InI     NaO      S2-     Xe+
 BaBr      C2H2Cl2         Cu              InI2    NaOH     S2Cl2   Zn
 BaBr2     C2H2FCl         Cu+             InI3    NaOH+    S2F2    Zn+
 BaCl      C2H2F2          Cu-             InO     Na2      S2O     Zr
 BaCl+     CH2CO_ketene    CuCl            InOH    Na2Br2   S3      Zr+
 BaCl2     O_CH_2O         CuF             In2Br2  Na2Cl2   S4      Zr-
 BaF       HO_CO_2OH       CuF2            In2Br4  Na2F2    S5      ZrN
 BaF+      C2H3_vinyl      CuO             In2Br6  Na2I2    S6      ZrO
 BaF2      CH2Br-COOH      Cu2             In2Cl2  Na2O     S7      ZrO+
 BaH       C2H3Cl          Cu3Cl3          In2Cl4  Na2O+    S8      ZrO2
 BaI       CH2Cl-COOH      D               In2Cl6  Na2O2    Sc
 BaI2      C2H3F           D+              In2F2   Na2O2H2  Sc+
 BaO       CH3CN           D-              In2F4   Na2SO4   Sc-
 BaO+      CH3CO_acetyl    DBr             In2F6   Na3Cl3   ScO
 BaOH      C2H4            DCl             In2I2   Na3F3    ScO+
</pre>
</html>"));
      end SingleGasesData;
    annotation (Documentation(info="<html>

</html>"));
    end Common;

    package SingleGases "Media models of ideal gases from NASA tables"
      extends Modelica.Icons.VariantsPackage;

      package Ar "Ideal gas \"Ar\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
         mediumName="Argon",
         data=Common.SingleGasesData.Ar,
         fluidConstants={Common.FluidData.Ar});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/Ar.png\"></html>"));
      end Ar;

      package CH4 "Ideal gas \"CH4\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Methane",
           data=Common.SingleGasesData.CH4,
           fluidConstants={Common.FluidData.CH4});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/CH4.png\"></html>"));
      end CH4;

      package CH3OH "Ideal gas \"CH3OH\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Methanol",
           data=Common.SingleGasesData.CH3OH,
           fluidConstants={Common.FluidData.CH3OH});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/CH3OH.png\"></html>"));
      end CH3OH;

      package CO "Ideal gas \"CO\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Carbon Monoxide",
           data=Common.SingleGasesData.CO,
           fluidConstants={Common.FluidData.CO});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/CO.png\"></html>"));
      end CO;

      package CO2 "Ideal gas \"CO2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Carbon Dioxide",
           data=Common.SingleGasesData.CO2,
           fluidConstants={Common.FluidData.CO2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/CO2.png\"></html>"));
      end CO2;

      package C2H2_vinylidene
        "Ideal gas \"C2H2_vinylidene\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Acetylene",
           data=Common.SingleGasesData.C2H2_vinylidene,
           fluidConstants={Common.FluidData.C2H2_vinylidene});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C2H2_vinylidene.png\"></html>"));
      end C2H2_vinylidene;

      package C2H4 "Ideal gas \"C2H4\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Ethylene",
           data=Common.SingleGasesData.C2H4,
           fluidConstants={Common.FluidData.C2H4});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C2H4.png\"></html>"));
      end C2H4;

      package C2H5OH "Ideal gas \"C2H5OH\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Ethanol",
           data=Common.SingleGasesData.C2H5OH,
           fluidConstants={Common.FluidData.C2H5OH});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C2H5OH.png\"></html>"));
      end C2H5OH;

      package C2H6 "Ideal gas \"C2H6\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Ethane",
           data=Common.SingleGasesData.C2H6,
           fluidConstants={Common.FluidData.C2H6});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C2H6.png\"></html>"));
      end C2H6;

      package C3H6_propylene
        "Ideal gas \"C3H6_propylene\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Propylene",
           data=Common.SingleGasesData.C3H6_propylene,
           fluidConstants={Common.FluidData.C3H6_propylene});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C3H6_propylene.png\"></html>"));
      end C3H6_propylene;

      package C3H8 "Ideal gas \"C3H8\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Propane",
           data=Common.SingleGasesData.C3H8,
           fluidConstants={Common.FluidData.C3H8});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C3H8.png\"></html>"));
      end C3H8;

      package C3H8O_1propanol
        "Ideal gas \"C3H8O_1propanol\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="1-Propanol",
           data=Common.SingleGasesData.C3H8O_1propanol,
           fluidConstants={Common.FluidData.C3H7OH});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C3H8O_1propanol.png\"></html>"));
      end C3H8O_1propanol;

      package C4H8_1_butene
        "Ideal gas \"C4H8_1_butene\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="1-Butene",
           data=Common.SingleGasesData.C4H8_1_butene,
           fluidConstants={Common.FluidData.C4H8_1_butene});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C4H8_1_butene.png\"></html>"));
      end C4H8_1_butene;

      package C4H10_n_butane
        "Ideal gas \"C4H10_n_butane\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="N-Butane",
           data=Common.SingleGasesData.C4H10_n_butane,
           fluidConstants={Common.FluidData.C4H10_n_butane});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C4H10_n_butane.png\"></html>"));
      end C4H10_n_butane;

      package C5H10_1_pentene
        "Ideal gas \"C5H10_1_pentene\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="1-Pentene",
           data=Common.SingleGasesData.C5H10_1_pentene,
           fluidConstants={Common.FluidData.C5H10_1_pentene});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C5H10_1_pentene.png\"></html>"));
      end C5H10_1_pentene;

      package C5H12_n_pentane
        "Ideal gas \"C5H12_n_pentane\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName = "N-Pentane",
           data=Common.SingleGasesData.C5H12_n_pentane,
           fluidConstants={Common.FluidData.C5H12_n_pentane});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C5H12_n_pentane.png\"></html>"));
      end C5H12_n_pentane;

      package C6H6 "Ideal gas \"C6H6\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Benzene",
           data=Common.SingleGasesData.C6H6,
           fluidConstants={Common.FluidData.C6H6});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C6H6.png\"></html>"));
      end C6H6;

      package C6H12_1_hexene
        "Ideal gas \"C6H12_1_hexene\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="1-Hexene",
           data=Common.SingleGasesData.C6H12_1_hexene,
           fluidConstants={Common.FluidData.C6H12_1_hexene});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C6H12_1_hexene.png\"></html>"));
      end C6H12_1_hexene;

      package C6H14_n_hexane
        "Ideal gas \"C6H14_n_hexane\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="N-Hexane",
           data=Common.SingleGasesData.C6H14_n_hexane,
           fluidConstants={Common.FluidData.C6H14_n_hexane});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C6H14_n_hexane.png\"></html>"));
      end C6H14_n_hexane;

      package C7H14_1_heptene
        "Ideal gas \"C7H14_1_heptene\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="1-Heptene",
           data=Common.SingleGasesData.C7H14_1_heptene,
           fluidConstants={Common.FluidData.C7H14_1_heptene});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C7H14_1_heptene.png\"></html>"));
      end C7H14_1_heptene;

      package C7H16_n_heptane
        "Ideal gas \"C7H16_n_heptane\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="N-Heptane",
           data=Common.SingleGasesData.C7H16_n_heptane,
           fluidConstants={Common.FluidData.C7H16_n_heptane});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C7H16_n_heptane.png\"></html>"));
      end C7H16_n_heptane;

      package C8H10_ethylbenz
        "Ideal gas \"C8H10_ethylbenz\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Ethylbenzene",
           data=Common.SingleGasesData.C8H10_ethylbenz,
           fluidConstants={Common.FluidData.C8H10_ethylbenz});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C8H10_ethylbenz.png\"></html>"));
      end C8H10_ethylbenz;

      package C8H18_n_octane
        "Ideal gas \"C8H18_n_octane\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="N-Octane",
           data=Common.SingleGasesData.C8H18_n_octane,
           fluidConstants={Common.FluidData.C8H18_n_octane});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/C8H18_n_octane.png\"></html>"));
      end C8H18_n_octane;

      package CL2 "Ideal gas \"Cl2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Chlorine",
           data=Common.SingleGasesData.CL2,
           fluidConstants={Common.FluidData.CL2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/CL2.png\"></html>"));
      end CL2;

      package F2 "Ideal gas \"F2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Fluorine",
           data=Common.SingleGasesData.F2,
           fluidConstants={Common.FluidData.F2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/F2.png\"></html>"));
      end F2;

      package H2 "Ideal gas \"H2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Hydrogen",
           data=Common.SingleGasesData.H2,
           fluidConstants={Common.FluidData.H2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/H2.png\"></html>"));
      end H2;

      package H2O "Ideal gas \"H2O\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="IdealGasSteam",
           data=Common.SingleGasesData.H2O,
           fluidConstants={Common.FluidData.H2O});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/H2O.png\"></html>"));
      end H2O;

      package He "Ideal gas \"He\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Helium",
           data=Common.SingleGasesData.He,
           fluidConstants={Common.FluidData.He});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/He.png\"></html>"));
      end He;

      package NH3 "Ideal gas \"NH3\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="IdealGasAmmonia",
           data=Common.SingleGasesData.NH3,
           fluidConstants={Common.FluidData.NH3});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/NH3.png\"></html>"));
      end NH3;

      package NO "Ideal gas \"NO\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Nitric Oxide",
           data=Common.SingleGasesData.NO,
           fluidConstants={Common.FluidData.NO});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/NO.png\"></html>"));
      end NO;

      package NO2 "Ideal gas \"NO2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Nitrogen Dioxide",
           data=Common.SingleGasesData.NO2,
           fluidConstants={Common.FluidData.NO2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/NO2.png\"></html>"));
      end NO2;

      package N2 "Ideal gas \"N2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Nitrogen",
           data=Common.SingleGasesData.N2,
           fluidConstants={Common.FluidData.N2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/N2.png\"></html>"));
      end N2;

      package N2O "Ideal gas \"N2O\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Nitrous Oxide",
           data=Common.SingleGasesData.N2O,
           fluidConstants={Common.FluidData.N2O});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/N2O.png\"></html>"));
      end N2O;

      package Ne "Ideal gas \"Ne\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Neon",
           data=Common.SingleGasesData.Ne,
           fluidConstants={Common.FluidData.Ne});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/Ne.png\"></html>"));
      end Ne;

      package O2 "Ideal gas \"O2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Oxygen",
           data=Common.SingleGasesData.O2,
           fluidConstants={Common.FluidData.O2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/O2.png\"></html>"));
      end O2;

      package SO2 "Ideal gas \"SO2\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Sulfur Dioxide",
           data=Common.SingleGasesData.SO2,
           fluidConstants={Common.FluidData.SO2});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/SO2.png\"></html>"));
      end SO2;

      package SO3 "Ideal gas \"SO3\" from NASA Glenn coefficients"
        extends Common.SingleGasNasa(
           mediumName="Sulfur Trioxide",
           data=Common.SingleGasesData.SO3,
           fluidConstants={Common.FluidData.SO3});
        annotation (Documentation(info="<html>
      <img src=\"modelica://Modelica/Resources/Images/Media/IdealGases/SingleGases/SO3.png\"></html>"));
      end SO3;
      annotation (Documentation(
            info="<html>
<p>
This package contains medium
models for the following 37 gases
(see also the description in
<a href=\"modelica://Modelica.Media.IdealGases\">Modelica.Media.IdealGases</a>):
</p>
<pre>
Argon             Methane          Methanol       Carbon Monoxide  Carbon Dioxide
Acetylene         Ethylene         Ethanol        Ethane           Propylene
Propane           1-Propanol       1-Butene       N-Butane         1-Pentene
N-Pentane         Benzene          1-Hexene       N-Hexane         1-Heptane
N-Heptane         Ethylbenzene     N-Octane       Chlorine         Fluorine
Hydrogen          Steam            Helium         Ammonia          Nitric Oxide
Nitrogen Dioxide  Nitrogen         Nitrous        Oxide            Neon Oxygen
Sulfur Dioxide    Sulfur Trioxide
</pre>
</html>"));
    end SingleGases;

    package MixtureGases "Medium models consisting of mixtures of ideal gases"
      extends Modelica.Icons.VariantsPackage;

      package CombustionAir "Air as mixture of N2 and O2"
        extends Common.MixtureGasNasa(
          mediumName="CombustionAirN2O2",
          data={Common.SingleGasesData.N2,
         Common.SingleGasesData.O2},
          fluidConstants={Common.FluidData.N2,
            Common.FluidData.O2},
          substanceNames = {"Nitrogen", "Oxygen"},
          reference_X={0.768,0.232});
        annotation (Documentation(info="<html>

</html>"));
      end CombustionAir;

      package AirSteam "Air and steam mixture (no condensation!, pseudo-mixture)"
        extends Common.MixtureGasNasa(
           mediumName="MoistAir",
           data={Common.SingleGasesData.H2O, Common.SingleGasesData.Air},
          fluidConstants={Common.FluidData.H2O,
            Common.FluidData.N2},
           substanceNames = {"Water","Air"},
           reference_X={0.0,1.0});
        annotation (Documentation(info="<html>

</html>"));
      end AirSteam;

      package simpleMoistAir = AirSteam(reference_X={0.03,0.97})
        "Moist air without condensation";
      package FlueGasLambdaOnePlus
        "Simple flue gas for overstochiometric O2-fuel ratios"
        extends Common.MixtureGasNasa(
           mediumName="FlueGasLambda1plus",
           data={Common.SingleGasesData.N2,
          Common.SingleGasesData.O2,
          Common.SingleGasesData.H2O,
          Common.SingleGasesData.CO2},
           fluidConstants={Common.FluidData.N2,
             Common.FluidData.O2,
             Common.FluidData.H2O,
             Common.FluidData.CO2},
           substanceNames = {"Nitrogen","Oxygen","Water", "Carbondioxide"},
           reference_X={0.768,0.232,0.0,0.0});
        annotation (Documentation(info="<html>

</html>"));
      end FlueGasLambdaOnePlus;

      package FlueGasSixComponents
        "Simplest flue gas for over-and understochiometric combustion of hydrocarbons"
        extends Common.MixtureGasNasa(
           mediumName="FlueGasSixComponents",
           data={Common.SingleGasesData.N2,
          Common.SingleGasesData.H2,
          Common.SingleGasesData.CO,
          Common.SingleGasesData.O2,
          Common.SingleGasesData.H2O,
          Common.SingleGasesData.CO2},
           fluidConstants={Common.FluidData.N2,
             Common.FluidData.H2,
             Common.FluidData.CO,
             Common.FluidData.O2,
             Common.FluidData.H2O,
             Common.FluidData.CO2},
           substanceNames = {"Nitrogen","Hydrogen,","Carbonmonoxide","Oxygen","Water","Carbondioxide"},
           reference_X={0.768,0.0,0.0,0.232,0.0,0.0});
        annotation (Documentation(info="<html>

</html>"));
      end FlueGasSixComponents;

      package SimpleNaturalGas "Simple natural gas mix with 6 components"
        extends Common.MixtureGasNasa(
           mediumName="SimpleNaturalGas",
           data={Common.SingleGasesData.CH4,
          Common.SingleGasesData.C2H6,
          Common.SingleGasesData.C3H8,
          Common.SingleGasesData.C4H10_n_butane,
          Common.SingleGasesData.N2,
          Common.SingleGasesData.CO2},
           fluidConstants={Common.FluidData.CH4,
             Common.FluidData.C2H6,
             Common.FluidData.C3H8,
             Common.FluidData.C4H10_n_butane,
             Common.FluidData.N2,
             Common.FluidData.CO2},
           substanceNames = {"Methane","Ethane","Propane","N-Butane,","Nitrogen","Carbondioxide"},
           reference_X={0.92,0.048,0.005,0.002,0.015,0.01});
        annotation (Documentation(info="<html>

</html>"));
      end SimpleNaturalGas;

      package SimpleNaturalGasFixedComposition
        "Same as SimpleNaturalGas but with fixed composition"
      extends SimpleNaturalGas(fixedX=true);
        annotation (Documentation(info="<html>

</html>"));
      end SimpleNaturalGasFixedComposition;
      annotation (Documentation(info="<html>

</html>"));
    end MixtureGases;
  annotation (Documentation(info="<html>
<p>This package contains data for the 1241 ideal gases from</p>
<blockquote>
  <p>McBride B.J., Zehe M.J., and Gordon S. (2002): <strong>NASA Glenn Coefficients
  for Calculating Thermodynamic Properties of Individual Species</strong>. NASA
  report TP-2002-211556</p>
</blockquote>
<p>Medium models for some of these gases are available in package
<a href=\"modelica://Modelica.Media.IdealGases.SingleGases\">IdealGases.SingleGases</a>
and some examples for mixtures are available in package <a href=\"modelica://Modelica.Media.IdealGases.MixtureGases\">IdealGases.MixtureGases</a>
</p>
<h4>Using and Adapting Medium Models</h4>
<p>
The data records allow computing the ideal gas specific enthalpy, specific entropy and heat capacity of the substances listed below. From them, even the Gibbs energy and equilibrium constants for reactions can be computed. Critical data that is needed for computing the viscosity and thermal conductivity is not included. In order to add mixtures or single substance medium packages that are
subtypes of
<a href=\"modelica://Modelica.Media.Interfaces.PartialMedium\">Interfaces.PartialMedium</a>
(i.e., can be utilized at all places where PartialMedium is defined),
a few additional steps have to be performed:
</p>
<ol>
<li>
All single gas media need to define a constant instance of record
<a href=\"modelica://Modelica.Media.Interfaces.PartialMedium.FluidConstants\">IdealGases.Common.SingleGasNasa.FluidConstants</a>.
For 37 ideal gases such records are provided in package
<a href=\"modelica://Modelica.Media.IdealGases.Common.FluidData\">IdealGases.Common.FluidData</a>.
For the other gases, such a record instance has to be provided by the user, e.g., by getting
the data from a commercial or public data base. A public source of the needed data is for example the <a href=\"http://webbook.nist.gov/chemistry/\"> NIST Chemistry WebBook</a></li>

<li>When the data is available, and a user has an instance of a
<a href=\"modelica://Modelica.Media.Interfaces.PartialMedium.FluidConstants\">FluidConstants</a> record filled with data, a medium package has to be written. Note that only the dipole moment, the acentric factor and critical data are necessary for the viscosity and thermal conductivity functions.</li>
<li><ul>
<li>For single components, a new package following the pattern in
<a href=\"modelica://Modelica.Media.IdealGases.SingleGases\">IdealGases.SingleGases</a> has to be created, pointing both to a data record for cp and to a user-defined fluidConstants record.</li>
<li>For mixtures of several components, a new package following the pattern in
<a href=\"modelica://Modelica.Media.IdealGases.MixtureGases\">IdealGases.MixtureGases</a> has to be created, building an array of data records for cp and an array of (partly) user-defined fluidConstants records.</li>
</ul></li>
</ol>
<p>Note that many properties can computed for the full set of 1241 gases listed below, but due to the missing viscosity and thermal conductivity functions, no fully Modelica.Media-compliant media can be defined.</p>
<p>
Data records for heat capacity, specific enthalpy and specific entropy exist for the following substances and ions:
</p>
<pre>
 Ag        BaOH+           C2H4O_ethylen_o DF      In2I4    Nb      ScO2
 Ag+       Ba_OH_2         CH3CHO_ethanal  DOCl    In2I6    Nb+     Sc2O
 Ag-       BaS             CH3COOH         DO2     In2O     Nb-     Sc2O2
 Air       Ba2             OHCH2COOH       DO2-    K        NbCl5   Si
 Al        Be              C2H5            D2      K+       NbO     Si+
 Al+       Be+             C2H5Br          D2+     K-       NbOCl3  Si-
 Al-       Be++            C2H6            D2-     KAlF4    NbO2    SiBr
 AlBr      BeBr            CH3N2CH3        D2O     KBO2     Ne      SiBr2
 AlBr2     BeBr2           C2H5OH          D2O2    KBr      Ne+     SiBr3
 AlBr3     BeCl            CH3OCH3         D2S     KCN      Ni      SiBr4
 AlC       BeCl2           CH3O2CH3        e-      KCl      Ni+     SiC
 AlC2      BeF             CCN             F       KF       Ni-     SiC2
 AlCl      BeF2            CNC             F+      KH       NiCl    SiCl
 AlCl+     BeH             OCCN            F-      KI       NiCl2   SiCl2
 AlCl2     BeH+            C2N2            FCN     Kli      NiO     SiCl3
 AlCl3     BeH2            C2O             FCO     KNO2     NiS     SiCl4
 AlF       BeI             C3              FO      KNO3     O       SiF
 AlF+      BeI2            C3H3_1_propynl  FO2_FOO KNa      O+      SiFCl
 AlFCl     BeN             C3H3_2_propynl  FO2_OFO KO       O-      SiF2
 AlFCl2    BeO             C3H4_allene     F2      KOH      OD      SiF3
 AlF2      BeOH            C3H4_propyne    F2O     K2       OD-     SiF4
 AlF2-     BeOH+           C3H4_cyclo      F2O2    K2+      OH      SiH
 AlF2Cl    Be_OH_2         C3H5_allyl      FS2F    K2Br2    OH+     SiH+
 AlF3      BeS             C3H6_propylene  Fe      K2CO3    OH-     SiHBr3
 AlF4-     Be2             C3H6_cyclo      Fe+     K2C2N2   O2      SiHCl
 AlH       Be2Cl4          C3H6O_propylox  Fe_CO_5 K2Cl2    O2+     SiHCl3
 AlHCl     Be2F4           C3H6O_acetone   FeCl    K2F2     O2-     SiHF
 AlHCl2    Be2O            C3H6O_propanal  FeCl2   K2I2     O3      SiHF3
 AlHF      Be2OF2          C3H7_n_propyl   FeCl3   K2O      P       SiHI3
 AlHFCl    Be2O2           C3H7_i_propyl   FeO     K2O+     P+      SiH2
 AlHF2     Be3O3           C3H8            Fe_OH_2 K2O2     P-      SiH2Br2
 AlH2      Be4O4           C3H8O_1propanol Fe2Cl4  K2O2H2   PCl     SiH2Cl2
 AlH2Cl    Br              C3H8O_2propanol Fe2Cl6  K2SO4    PCl2    SiH2F2
 AlH2F     Br+             CNCOCN          Ga      Kr       PCl2-   SiH2I2
 AlH3      Br-             C3O2            Ga+     Kr+      PCl3    SiH3
 AlI       BrCl            C4              GaBr    li       PCl5    SiH3Br
 AlI2      BrF             C4H2_butadiyne  GaBr2   li+      PF      SiH3Cl
 AlI3      BrF3            C4H4_1_3-cyclo  GaBr3   li-      PF+     SiH3F
 AlN       BrF5            C4H6_butadiene  GaCl    liAlF4   PF-     SiH3I
 AlO       BrO             C4H6_1butyne    GaCl2   liBO2    PFCl    SiH4
 AlO+      OBrO            C4H6_2butyne    GaCl3   liBr     PFCl-   SiI
 AlO-      BrOO            C4H6_cyclo      GaF     liCl     PFCl2   SiI2
 AlOCl     BrO3            C4H8_1_butene   GaF2    liF      PFCl4   SiN
 AlOCl2    Br2             C4H8_cis2_buten GaF3    liH      PF2     SiO
 AlOF      BrBrO           C4H8_isobutene  GaH     liI      PF2-    SiO2
 AlOF2     BrOBr           C4H8_cyclo      GaI     liN      PF2Cl   SiS
 AlOF2-    C               C4H9_n_butyl    GaI2    liNO2    PF2Cl3  SiS2
 AlOH      C+              C4H9_i_butyl    GaI3    liNO3    PF3     Si2
 AlOHCl    C-              C4H9_s_butyl    GaO     liO      PF3Cl2  Si2C
 AlOHCl2   CBr             C4H9_t_butyl    GaOH    liOF     PF4Cl   Si2F6
 AlOHF     CBr2            C4H10_n_butane  Ga2Br2  liOH     PF5     Si2N
 AlOHF2    CBr3            C4H10_isobutane Ga2Br4  liON     PH      Si3
 AlO2      CBr4            C4N2            Ga2Br6  li2      PH2     Sn
 AlO2-     CCl             C5              Ga2Cl2  li2+     PH2-    Sn+
 Al_OH_2   CCl2            C5H6_1_3cyclo   Ga2Cl4  li2Br2   PH3     Sn-
 Al_OH_2Cl CCl2Br2         C5H8_cyclo      Ga2Cl6  li2F2    PN      SnBr
 Al_OH_2F  CCl3            C5H10_1_pentene Ga2F2   li2I2    PO      SnBr2
 Al_OH_3   CCl3Br          C5H10_cyclo     Ga2F4   li2O     PO-     SnBr3
 AlS       CCl4            C5H11_pentyl    Ga2F6   li2O+    POCl3   SnBr4
 AlS2      CF              C5H11_t_pentyl  Ga2I2   li2O2    POFCl2  SnCl
 Al2       CF+             C5H12_n_pentane Ga2I4   li2O2H2  POF2Cl  SnCl2
 Al2Br6    CFBr3           C5H12_i_pentane Ga2I6   li2SO4   POF3    SnCl3
 Al2C2     CFCl            CH3C_CH3_2CH3   Ga2O    li3+     PO2     SnCl4
 Al2Cl6    CFClBr2         C6D5_phenyl     Ge      li3Br3   PO2-    SnF
 Al2F6     CFCl2           C6D6            Ge+     li3Cl3   PS      SnF2
 Al2I6     CFCl2Br         C6H2            Ge-     li3F3    P2      SnF3
 Al2O      CFCl3           C6H5_phenyl     GeBr    li3I3    P2O3    SnF4
 Al2O+     CF2             C6H5O_phenoxy   GeBr2   Mg       P2O4    SnI
 Al2O2     CF2+            C6H6            GeBr3   Mg+      P2O5    SnI2
 Al2O2+    CF2Br2          C6H5OH_phenol   GeBr4   MgBr     P3      SnI3
 Al2O3     CF2Cl           C6H10_cyclo     GeCl    MgBr2    P3O6    SnI4
 Al2S      CF2ClBr         C6H12_1_hexene  GeCl2   MgCl     P4      SnO
 Al2S2     CF2Cl2          C6H12_cyclo     GeCl3   MgCl+    P4O6    SnO2
 Ar        CF3             C6H13_n_hexyl   GeCl4   MgCl2    P4O7    SnS
 Ar+       CF3+            C6H14_n_hexane  GeF     MgF      P4O8    SnS2
 B         CF3Br           C7H7_benzyl     GeF2    MgF+     P4O9    Sn2
 B+        CF3Cl           C7H8            GeF3    MgF2     P4O10   Sr
 B-        CF4             C7H8O_cresol_mx GeF4    MgF2+    Pb      Sr+
 BBr       CH+             C7H14_1_heptene GeH4    MgH      Pb+     SrBr
 BBr2      CHBr3           C7H15_n_heptyl  GeI     MgI      Pb-     SrBr2
 BBr3      CHCl            C7H16_n_heptane GeO     MgI2     PbBr    SrCl
 BC        CHClBr2         C7H16_2_methylh GeO2    MgN      PbBr2   SrCl+
 BC2       CHCl2           C8H8_styrene    GeS     MgO      PbBr3   SrCl2
 BCl       CHCl2Br         C8H10_ethylbenz GeS2    MgOH     PbBr4   SrF
 BCl+      CHCl3           C8H16_1_octene  Ge2     MgOH+    PbCl    SrF+
 BClOH     CHF             C8H17_n_octyl   H       Mg_OH_2  PbCl2   SrF2
 BCl_OH_2  CHFBr2          C8H18_n_octane  H+      MgS      PbCl3   SrH
 BCl2      CHFCl           C8H18_isooctane H-      Mg2      PbCl4   SrI
 BCl2+     CHFClBr         C9H19_n_nonyl   HAlO    Mg2F4    PbF     SrI2
 BCl2OH    CHFCl2          C10H8_naphthale HAlO2   Mn       PbF2    SrO
 BF        CHF2            C10H21_n_decyl  HBO     Mn+      PbF3    SrOH
 BFCl      CHF2Br          C12H9_o_bipheny HBO+    Mo       PbF4    SrOH+
 BFCl2     CHF2Cl          C12H10_biphenyl HBO2    Mo+      PbI     Sr_OH_2
 BFOH      CHF3            Ca              HBS     Mo-      PbI2    SrS
 BF_OH_2   CHI3            Ca+             HBS+    MoO      PbI3    Sr2
 BF2       CH2             CaBr            HCN     MoO2     PbI4    Ta
 BF2+      CH2Br2          CaBr2           HCO     MoO3     PbO     Ta+
 BF2-      CH2Cl           CaCl            HCO+    MoO3-    PbO2    Ta-
 BF2Cl     CH2ClBr         CaCl+           HCCN    Mo2O6    PbS     TaCl5
 BF2OH     CH2Cl2          CaCl2           HCCO    Mo3O9    PbS2    TaO
 BF3       CH2F            CaF             HCl     Mo4O12   Rb      TaO2
 BF4-      CH2FBr          CaF+            HD      Mo5O15   Rb+     Ti
 BH        CH2FCl          CaF2            HD+     N        Rb-     Ti+
 BHCl      CH2F2           CaH             HDO     N+       RbBO2   Ti-
 BHCl2     CH2I2           CaI             HDO2    N-       RbBr    TiCl
 BHF       CH3             CaI2            HF      NCO      RbCl    TiCl2
 BHFCl     CH3Br           CaO             HI      ND       RbF     TiCl3
 BHF2      CH3Cl           CaO+            HNC     ND2      RbH     TiCl4
 BH2       CH3F            CaOH            HNCO    ND3      RbI     TiO
 BH2Cl     CH3I            CaOH+           HNO     NF       RbK     TiO+
 BH2F      CH2OH           Ca_OH_2         HNO2    NF2      Rbli    TiOCl
 BH3       CH2OH+          CaS             HNO3    NF3      RbNO2   TiOCl2
 BH3NH3    CH3O            Ca2             HOCl    NH       RbNO3   TiO2
 BH4       CH4             Cd              HOF     NH+      RbNa    U
 BI        CH3OH           Cd+             HO2     NHF      RbO     UF
 BI2       CH3OOH          Cl              HO2-    NHF2     RbOH    UF+
 BI3       CI              Cl+             HPO     NH2      Rb2Br2  UF-
 BN        CI2             Cl-             HSO3F   NH2F     Rb2Cl2  UF2
 BO        CI3             ClCN            H2      NH3      Rb2F2   UF2+
 BO-       CI4             ClF             H2+     NH2OH    Rb2I2   UF2-
 BOCl      CN              ClF3            H2-     NH4+     Rb2O    UF3
 BOCl2     CN+             ClF5            HBOH    NO       Rb2O2   UF3+
 BOF       CN-             ClO             HCOOH   NOCl     Rb2O2H2 UF3-
 BOF2      CNN             ClO2            H2F2    NOF      Rb2SO4  UF4
 BOH       CO              Cl2             H2O     NOF3     Rn      UF4+
 BO2       CO+             Cl2O            H2O+    NO2      Rn+     UF4-
 BO2-      COCl            Co              H2O2    NO2-     S       UF5
 B_OH_2    COCl2           Co+             H2S     NO2Cl    S+      UF5+
 BS        COFCl           Co-             H2SO4   NO2F     S-      UF5-
 BS2       COF2            Cr              H2BOH   NO3      SCl     UF6
 B2        COHCl           Cr+             HB_OH_2 NO3-     SCl2    UF6-
 B2C       COHF            Cr-             H3BO3   NO3F     SCl2+   UO
 B2Cl4     COS             CrN             H3B3O3  N2       SD      UO+
 B2F4      CO2             CrO             H3B3O6  N2+      SF      UOF
 B2H       CO2+            CrO2            H3F3    N2-      SF+     UOF2
 B2H2      COOH            CrO3            H3O+    NCN      SF-     UOF3
 B2H3      CP              CrO3-           H4F4    N2D2_cis SF2     UOF4
 B2H3_db   CS              Cs              H5F5    N2F2     SF2+    UO2
 B2H4      CS2             Cs+             H6F6    N2F4     SF2-    UO2+
 B2H4_db   C2              Cs-             H7F7    N2H2     SF3     UO2-
 B2H5      C2+             CsBO2           He      NH2NO2   SF3+    UO2F
 B2H5_db   C2-             CsBr            He+     N2H4     SF3-    UO2F2
 B2H6      C2Cl            CsCl            Hg      N2O      SF4     UO3
 B2O       C2Cl2           CsF             Hg+     N2O+     SF4+    UO3-
 B2O2      C2Cl3           CsH             HgBr2   N2O3     SF4-    V
 B2O3      C2Cl4           CsI             I       N2O4     SF5     V+
 B2_OH_4   C2Cl6           Csli            I+      N2O5     SF5+    V-
 B2S       C2F             CsNO2           I-      N3       SF5-    VCl4
 B2S2      C2FCl           CsNO3           IF5     N3H      SF6     VN
 B2S3      C2FCl3          CsNa            IF7     Na       SF6-    VO
 B3H7_C2v  C2F2            CsO             I2      Na+      SH      VO2
 B3H7_Cs   C2F2Cl2         CsOH            In      Na-      SH-     V4O10
 B3H9      C2F3            CsRb            In+     NaAlF4   SN      W
 B3N3H6    C2F3Cl          Cs2             InBr    NaBO2    SO      W+
 B3O3Cl3   C2F4            Cs2Br2          InBr2   NaBr     SO-     W-
 B3O3FCl2  C2F6            Cs2CO3          InBr3   NaCN     SOF2    WCl6
 B3O3F2Cl  C2H             Cs2Cl2          InCl    NaCl     SO2     WO
 B3O3F3    C2HCl           Cs2F2           InCl2   NaF      SO2-    WOCl4
 B4H4      C2HCl3          Cs2I2           InCl3   NaH      SO2Cl2  WO2
 B4H10     C2HF            Cs2O            InF     NaI      SO2FCl  WO2Cl2
 B4H12     C2HFCl2         Cs2O+           InF2    Nali     SO2F2   WO3
 B5H9      C2HF2Cl         Cs2O2           InF3    NaNO2    SO3     WO3-
 Ba        C2HF3           Cs2O2H2         InH     NaNO3    S2      Xe
 Ba+       C2H2_vinylidene Cs2SO4          InI     NaO      S2-     Xe+
 BaBr      C2H2Cl2         Cu              InI2    NaOH     S2Cl2   Zn
 BaBr2     C2H2FCl         Cu+             InI3    NaOH+    S2F2    Zn+
 BaCl      C2H2F2          Cu-             InO     Na2      S2O     Zr
 BaCl+     CH2CO_ketene    CuCl            InOH    Na2Br2   S3      Zr+
 BaCl2     O_CH_2O         CuF             In2Br2  Na2Cl2   S4      Zr-
 BaF       HO_CO_2OH       CuF2            In2Br4  Na2F2    S5      ZrN
 BaF+      C2H3_vinyl      CuO             In2Br6  Na2I2    S6      ZrO
 BaF2      CH2Br-COOH      Cu2             In2Cl2  Na2O     S7      ZrO+
 BaH       C2H3Cl          Cu3Cl3          In2Cl4  Na2O+    S8      ZrO2
 BaI       CH2Cl-COOH      D               In2Cl6  Na2O2    Sc
 BaI2      C2H3F           D+              In2F2   Na2O2H2  Sc+
 BaO       CH3CN           D-              In2F4   Na2SO4   Sc-
 BaO+      CH3CO_acetyl    DBr             In2F6   Na3Cl3   ScO
 BaOH      C2H4            DCl             In2I2   Na3F3    ScO+
</pre></html>"));
  end IdealGases;

  package Incompressible
    "Medium model for T-dependent properties, defined by tables or polynomials"
    extends Modelica.Icons.VariantsPackage;
    import Modelica.Constants;
    import Modelica.Math;

    package Examples "Examples for incompressible media"
      extends Modelica.Icons.VariantsPackage;

    package Glycol47 "1,2-Propylene glycol, 47% mixture with water"
      extends TableBased(
        mediumName="Glycol-Water 47%",
        T_min = Cv.from_degC(-30), T_max = Cv.from_degC(100),
        TinK = false, T0=273.15,
        tableDensity=
          [-30, 1066; -20, 1062; -10, 1058; 0, 1054;
           20, 1044; 40, 1030; 60, 1015; 80, 999; 100, 984],
        tableHeatCapacity=
          [-30, 3450; -20, 3490; -10, 3520; 0, 3560;
           20, 3620; 40, 3690; 60, 3760; 80, 3820; 100, 3890],
        tableConductivity=
          [-30,0.397;  -20,0.396;  -10,0.395;  0,0.395;
           20,0.394;  40,0.393;  60,0.392;  80,0.391;  100,0.390],
        tableViscosity=
          [-30, 0.160; -20, 0.0743; -10, 0.0317; 0, 0.0190;
           20, 0.00626; 40, 0.00299; 60, 0.00162; 80, 0.00110; 100, 0.00081],
        tableVaporPressure=
          [0, 500; 20, 1.9e3; 40, 5.3e3; 60, 16e3; 80, 37e3; 100, 80e3]);
        annotation (Documentation(info="<html>

</html>"));
    end Glycol47;

    package Essotherm650 "Essotherm thermal oil"
      extends TableBased(
        mediumName="Essotherm 650",
        T_min = Cv.from_degC(0), T_max = Cv.from_degC(320),
        TinK = false, T0=273.15,
        tableDensity=
          [0, 909; 20, 897; 40, 884; 60, 871; 80, 859; 100, 846;
           150, 813; 200, 781; 250, 748; 300, 715; 320, 702],
        tableHeatCapacity=
          [0, 1770; 20, 1850; 40, 1920; 60, 1990; 80, 2060; 100, 2130;
           150, 2310; 200, 2490; 250, 2670; 300, 2850; 320, 2920],
        tableConductivity=
          [0,0.1302;  20,0.1288;  40,0.1274;  60,0.1260;  80,0.1246;  100,0.1232;
           150,0.1197;  200,0.1163;  250,0.1128;  300,0.1093;  320,0.1079],
        tableViscosity = [0, 14370; 20, 1917; 40, 424; 60, 134; 80, 54.5;
           100, 26.64; 150, 7.47; 200, 3.22; 250, 1.76; 300, 1.10; 320,0.94],
        tableVaporPressure=
          [160, 3; 180, 10; 200, 40; 220, 100; 240, 300; 260, 600;
           280, 1600; 300, 3e3; 320, 5.5e3]);
        annotation (Documentation(info="<html>

</html>"));
    end Essotherm650;

    model TestGlycol "Test Glycol47 Medium model"
      extends Modelica.Icons.Example;
      package Medium = Glycol47 "Medium model (Glycol47)";
      Medium.BaseProperties medium;

      Medium.DynamicViscosity eta=Medium.dynamicViscosity(medium.state);
      Medium.ThermalConductivity lambda=Medium.thermalConductivity(medium.state);
      Medium.SpecificEntropy s=Medium.specificEntropy(medium.state);
      Medium.SpecificHeatCapacity cv=Medium.specificHeatCapacityCv(medium.state);
      Medium.SpecificInternalEnergy u=Medium.specificInternalEnergy(medium.state);
      Medium.SpecificInternalEnergy h=Medium.specificEnthalpy(medium.state);
      Medium.SpecificInternalEnergy d=Medium.density(medium.state);
      protected
      constant Modelica.SIunits.Time timeUnit = 1;
      constant Modelica.SIunits.Temperature Ta = 1;
    equation
      medium.p = 1.013e5;
      medium.T = Medium.T_min + time/timeUnit*Ta;
        annotation (experiment_X(StopTime=1.01));
    end TestGlycol;

    annotation (
      Documentation(info="<html>

<p>
This package provides a few examples of how to construct medium models for
incompressible fluids. The package contains:
</p>
<ul>
<li><strong>Glycol47</strong>, a model of 47% glycol water mixture, based on tables of
density and heat capacity as functions of temperature.</li>
<li><strong>Essotherm650</strong>, a medium model for thermal oil, also based on tables.</li>
</ul>

</html>"));
    end Examples;

    package Common "Common data structures"
      extends Modelica.Icons.Package;

      // Extended record for input to functions based on polynomials
      record BaseProps_Tpoly "Fluid state record"
        extends Modelica.Icons.Record;
        SI.Temperature T "Temperature";
        SI.Pressure p "Pressure";
        //    SI.Density d "Density";
      end BaseProps_Tpoly;

      //     record BaseProps_Tpoly_old "Fluid state record"
      //       extends Modelica.Media.Interfaces.PartialMedium.ThermodynamicState;
      //       //      SI.SpecificHeatCapacity cp "Specific heat capacity";
      //       SI.Temperature T "Temperature";
      //       SI.Pressure p "Pressure";
      //       //    SI.Density d "Density";
      //       parameter Real[:] poly_rho "Polynomial coefficients";
      //       parameter Real[:] poly_Cp "Polynomial coefficients";
      //       parameter Real[:] poly_eta "Polynomial coefficients";
      //       parameter Real[:] poly_pVap "Polynomial coefficients";
      //       parameter Real[:] poly_lam "Polynomial coefficients";
      //       parameter Real[:] invTK "Inverse T [1/K]";
      //     end BaseProps_Tpoly_old;
    end Common;

    package TableBased "Incompressible medium properties based on tables"
      import Poly = ThermofluidStream.Media.myMedia.Incompressible.TableBased.Polynomials_Temp;

      extends myMedia.Interfaces.PartialMedium(
        ThermoStates=if enthalpyOfT then myMedia.Interfaces.Choices.IndependentVariables.T else myMedia.Interfaces.Choices.IndependentVariables.pT,
        final reducedX=true,
        final fixedX=true,
        mediumName="tableMedium",
        redeclare record ThermodynamicState = Common.BaseProps_Tpoly,
        singleState=true,
        reference_p=1.013e5,
        Temperature(min=T_min, max=T_max));
      // Constants to be set in actual Medium
      constant Boolean enthalpyOfT=true
        "True if enthalpy is approximated as a function of T only, (p-dependence neglected)";
      constant Boolean densityOfT = size(tableDensity,1) > 1
        "True if density is a function of temperature";
      constant Modelica.SIunits.Temperature T_min
        "Minimum temperature valid for medium model";
      constant Modelica.SIunits.Temperature T_max
        "Maximum temperature valid for medium model";
      constant Temperature T0=273.15 "Reference Temperature";
      constant SpecificEnthalpy h0=0 "Reference enthalpy at T0, reference_p";
      constant SpecificEntropy s0=0 "Reference entropy at T0, reference_p";
      constant MolarMass MM_const=0.1 "Molar mass";
      constant Integer npol=2 "Degree of polynomial used for fitting";
      constant Integer npolDensity=npol
        "Degree of polynomial used for fitting rho(T)";
      constant Integer npolHeatCapacity=npol
        "Degree of polynomial used for fitting Cp(T)";
      constant Integer npolViscosity=npol
        "Degree of polynomial used for fitting eta(T)";
      constant Integer npolVaporPressure=npol
        "Degree of polynomial used for fitting pVap(T)";
      constant Integer npolConductivity=npol
        "Degree of polynomial used for fitting lambda(T)";
      constant Integer neta=size(tableViscosity,1)
        "Number of data points for viscosity";
      constant Real[:,2] tableDensity "Table for rho(T)";
      constant Real[:,2] tableHeatCapacity "Table for Cp(T)";
      constant Real[:,2] tableViscosity "Table for eta(T)";
      constant Real[:,2] tableVaporPressure "Table for pVap(T)";
      constant Real[:,2] tableConductivity "Table for lambda(T)";
      //    constant Real[:] TK=tableViscosity[:,1]+T0*ones(neta) "Temperature for Viscosity";
      constant Boolean TinK "True if T[K],Kelvin used for table temperatures";
      constant Boolean hasDensity = not (size(tableDensity,1)==0)
        "True if table tableDensity is present";
      constant Boolean hasHeatCapacity = not (size(tableHeatCapacity,1)==0)
        "True if table tableHeatCapacity is present";
      constant Boolean hasViscosity = not (size(tableViscosity,1)==0)
        "True if table tableViscosity is present";
      constant Boolean hasVaporPressure = not (size(tableVaporPressure,1)==0)
        "True if table tableVaporPressure is present";
      final constant Real invTK[neta] = if size(tableViscosity,1) > 0 then
          (if TinK then 1 ./ tableViscosity[:,1] else 1 ./ Cv.from_degC(tableViscosity[:,1])) else fill(0,neta);
      final constant Real poly_rho[:] = if hasDensity then
                                           Poly.fitting(tableDensity[:,1],tableDensity[:,2],npolDensity) else
                                             zeros(npolDensity+1);
      final constant Real poly_Cp[:] = if hasHeatCapacity then
                                           Poly.fitting(tableHeatCapacity[:,1],tableHeatCapacity[:,2],npolHeatCapacity) else
                                             zeros(npolHeatCapacity+1);
      final constant Real poly_eta[:] = if hasViscosity then
                                           Poly.fitting(invTK, Math.log(tableViscosity[:,2]),npolViscosity) else
                                             zeros(npolViscosity+1);
      final constant Real poly_pVap[:] = if hasVaporPressure then
                                           Poly.fitting(tableVaporPressure[:,1],tableVaporPressure[:,2],npolVaporPressure) else
                                              zeros(npolVaporPressure+1);
      final constant Real poly_lam[:] = if size(tableConductivity,1)>0 then
                                           Poly.fitting(tableConductivity[:,1],tableConductivity[:,2],npolConductivity) else
                                             zeros(npolConductivity+1);

      redeclare replaceable function massFraction "Return independent mass Fraction"
      extends Modelica.Icons.Function;
      input ThermodynamicState state "Thermodynamic state record";
      output MassFraction Xi[nXi] "(independent) Mass Fraction";
      algorithm
      Xi := fill(0,0);
      end massFraction;

      function invertTemp "Function to invert temperatures"
        extends Modelica.Icons.Function;
        input Real[:] table "Table temperature data";
        input Boolean Tink "Flag for Celsius or Kelvin";
        output Real invTable[size(table,1)] "Inverted temperatures";
      algorithm
        for i in 1:size(table,1) loop
          invTable[i] := if TinK then 1/table[i] else 1/Cv.from_degC(table[i]);
        end for;
        annotation(smoothOrder=3);
      end invertTemp;

      redeclare model extends BaseProperties(
        final standardOrderComponents=true,
        p_bar=Cv.to_bar(p),
        T_degC(start = T_start-273.15)=Cv.to_degC(T),
        T(start = T_start,
          stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default))
        "Base properties of T dependent medium"
      //  redeclare parameter SpecificHeatCapacity R=Modelica.Constants.R,

        SI.SpecificHeatCapacity cp "Specific heat capacity";
        parameter SI.Temperature T_start = 298.15 "Initial temperature";
      equation
        assert(hasDensity,"Medium " + mediumName +
                          " can not be used without assigning tableDensity.");
        assert(T >= T_min and T <= T_max, "Temperature T (= " + String(T) +
               " K) is not in the allowed range (" + String(T_min) +
               " K <= T <= " + String(T_max) + " K) required from medium model \""
               + mediumName + "\".");
        R = Modelica.Constants.R/MM_const;
        cp = Poly.evaluate(poly_Cp,if TinK then T else T_degC);
        h = if enthalpyOfT then h_T(T) else  h_pT(p,T,densityOfT);
        u = h - (if singleState then  reference_p/d else state.p/d);
        d = Poly.evaluate(poly_rho,if TinK then T else T_degC);
        state.T = T;
        state.p = p;
        MM = MM_const;
        annotation(Documentation(info="<html>
<p>
Note that the inner energy neglects the pressure dependence, which is only
true for an incompressible medium with d = constant. The neglected term is
p-reference_p)/rho*(T/rho)*(partial rho /partial T). This is very small for
liquids due to proportionality to 1/d^2, but can be problematic for gases that are
modeled incompressible.
</p>
<p>It should be noted that incompressible media only have 1 state per control volume (usually T),
but have both T and p as inputs for fully correct properties. The error of using only T-dependent
properties is small, therefore a Boolean flag enthalpyOfT exists. If it is true, the
enumeration Choices.independentVariables  is set to  Choices.independentVariables.T otherwise
it is set to Choices.independentVariables.pT.</p>
<p>
Enthalpy is never a function of T only (h = h(T) + (p-reference_p)/d), but the
error is also small and non-linear systems can be avoided. In particular,
non-linear systems are small and local as opposed to large and over all volumes.
</p>

<p>
Entropy is calculated as
</p>
<pre>
  s = s0 + integral(Cp(T)/T,dt)
</pre>
<p>
which is only exactly true for a fluid with constant density d=d0.
</p>
</html>"));
      end BaseProperties;

      redeclare function extends setState_pTX
        "Returns state record, given pressure and temperature"
      algorithm
        state := ThermodynamicState(p=p,T=T);
        annotation(smoothOrder=3);
      end setState_pTX;

      redeclare function extends setState_dTX
        "Returns state record, given pressure and temperature"
      algorithm
        assert(false, "For incompressible media with d(T) only, state can not be set from density and temperature");
      end setState_dTX;

      function setState_pT "Returns state record as function of p and T"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        output ThermodynamicState state "Thermodynamic state";
      algorithm
        state.T := T;
        state.p := p;
        annotation(smoothOrder=3);
      end setState_pT;

      redeclare function extends isentropicExponent
        //TODO: check if that is correct
      algorithm
        gamma :=1;
      end isentropicExponent;

      redeclare function extends molarMass
      algorithm
        MM :=MM_const;
      end molarMass;

      redeclare function extends setState_phX
        "Returns state record, given pressure and specific enthalpy"
      algorithm
        state :=ThermodynamicState(p=p,T=T_ph(p,h));
        annotation(Inline=true,smoothOrder=3);
      end setState_phX;

      function setState_ph "Returns state record as function of p and h"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        output ThermodynamicState state "Thermodynamic state";
      algorithm
        state :=ThermodynamicState(p=p,T=T_ph(p,h));
        annotation(Inline=true,smoothOrder=3);
      end setState_ph;

      redeclare function extends setState_psX
        "Returns state record, given pressure and specific entropy"
      algorithm
        state :=ThermodynamicState(p=p,T=T_ps(p,s));
        annotation(Inline=true,smoothOrder=3);
      end setState_psX;

      function setState_ps "Returns state record as function of p and s"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output ThermodynamicState state "Thermodynamic state";
      algorithm
        state :=ThermodynamicState(p=p,T=T_ps(p,s));
        annotation(Inline=true,smoothOrder=3);
      end setState_ps;

          redeclare function extends setSmoothState "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
          algorithm
        state := ThermodynamicState(p=myMedia.Common.smoothStep(
                    x,
                    state_a.p,
                    state_b.p,
                    x_small), T=myMedia.Common.smoothStep(
                    x,
                    state_a.T,
                    state_b.T,
                    x_small));
            annotation(Inline=true,smoothOrder=3);
          end setSmoothState;

      redeclare function extends specificHeatCapacityCv
        "Specific heat capacity at constant volume (or pressure) of medium"

      algorithm
        assert(hasHeatCapacity,"Specific Heat Capacity, Cv, is not defined for medium "
                                               + mediumName + ".");
        cv := Poly.evaluate(poly_Cp,if TinK then state.T else state.T - 273.15);
       annotation(smoothOrder=2);
      end specificHeatCapacityCv;

      redeclare function extends specificHeatCapacityCp
        "Specific heat capacity at constant volume (or pressure) of medium"

      algorithm
        assert(hasHeatCapacity,"Specific Heat Capacity, Cv, is not defined for medium "
                                               + mediumName + ".");
        cp := Poly.evaluate(poly_Cp,if TinK then state.T else state.T - 273.15);
       annotation(smoothOrder=2);
      end specificHeatCapacityCp;

      redeclare function extends dynamicViscosity
        "Return dynamic viscosity as a function of the thermodynamic state record"

      algorithm
        assert(size(tableViscosity,1)>0,"DynamicViscosity, eta, is not defined for medium "
                                               + mediumName + ".");
        eta := Math.exp(Poly.evaluate(poly_eta, 1/state.T));
       annotation(smoothOrder=2);
      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Return thermal conductivity as a function of the thermodynamic state record"

      algorithm
        assert(size(tableConductivity,1)>0,"ThermalConductivity, lambda, is not defined for medium "
                                               + mediumName + ".");
        lambda := Poly.evaluate(poly_lam,if TinK then state.T else Cv.to_degC(state.T));
       annotation(smoothOrder=2);
      end thermalConductivity;

      function s_T "Compute specific entropy"
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificEntropy s "Specific entropy";
      algorithm
        s := s0 + (if TinK then
          Poly.integralValue(poly_Cp[1:npol],T, T0) else
          Poly.integralValue(poly_Cp[1:npol],Cv.to_degC(T),Cv.to_degC(T0)))
          + Modelica.Math.log(T/T0)*
          Poly.evaluate(poly_Cp,if TinK then 0 else Modelica.Constants.T_zero);
       annotation(Inline=true,smoothOrder=2);
      end s_T;

      redeclare function extends specificEntropy
        "Return specific entropy as a function of the thermodynamic state record"

      protected
        Integer npol=size(poly_Cp,1)-1;
      algorithm
        assert(hasHeatCapacity,"Specific Entropy, s(T), is not defined for medium "
                                               + mediumName + ".");
        s := s_T(state.T);
       annotation(smoothOrder=2);
      end specificEntropy;

      function h_T "Compute specific enthalpy from temperature"
        import Modelica.SIunits.Conversions.to_degC;
        extends Modelica.Icons.Function;
        input SI.Temperature T "Temperature";
        output SI.SpecificEnthalpy h "Specific enthalpy at p, T";
      algorithm
        h :=h0 + Poly.integralValue(poly_Cp, if TinK then T else Cv.to_degC(T), if TinK then
        T0 else Cv.to_degC(T0));
       annotation(derivative=h_T_der);
      end h_T;

      function h_T_der "Compute specific enthalpy from temperature"
        import Modelica.SIunits.Conversions.to_degC;
        extends Modelica.Icons.Function;
        input SI.Temperature T "Temperature";
        input Real dT "Temperature derivative";
        output Real dh "Derivative of Specific enthalpy at T";
      algorithm
        dh :=Poly.evaluate(poly_Cp, if TinK then T else Cv.to_degC(T))*dT;
       annotation(smoothOrder=1);
      end h_T_der;

      function h_pT "Compute specific enthalpy from pressure and temperature"
        import Modelica.SIunits.Conversions.to_degC;
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Boolean densityOfT = false
          "Include or neglect density derivative dependence of enthalpy" annotation(Evaluate);
        output SI.SpecificEnthalpy h "Specific enthalpy at p, T";
      algorithm
        h :=h0 + Poly.integralValue(poly_Cp, if TinK then T else Cv.to_degC(T), if TinK then
        T0 else Cv.to_degC(T0)) + (p - reference_p)/Poly.evaluate(poly_rho, if TinK then
                T else Cv.to_degC(T))
          *(if densityOfT then (1 + T/Poly.evaluate(poly_rho, if TinK then T else Cv.to_degC(T))
        *Poly.derivativeValue(poly_rho,if TinK then T else Cv.to_degC(T))) else 1.0);
       annotation(smoothOrder=2);
      end h_pT;

      function density_T "Return density as function of temperature"
        extends Modelica.Icons.Function;

        input Temperature T "Temperature";
        output Density d "Density";
      algorithm
        d := Poly.evaluate(poly_rho,if TinK then T else Cv.to_degC(T));
        annotation(Inline=true,smoothOrder=2);
      end density_T;

      redeclare function extends temperature
        "Return temperature as a function of the thermodynamic state record"
      algorithm
       T := state.T;
       annotation(Inline=true,smoothOrder=2);
      end temperature;

      redeclare function extends pressure
        "Return pressure as a function of the thermodynamic state record"
      algorithm
       p := state.p;
       annotation(Inline=true,smoothOrder=2);
      end pressure;

      redeclare function extends density
        "Return density as a function of the thermodynamic state record"
      algorithm
        d := Poly.evaluate(poly_rho,if TinK then state.T else Cv.to_degC(state.T));
       annotation(Inline=true,smoothOrder=2);
      end density;

      redeclare function extends density_derp_T
        "Return density derivative w.r.t. pressure at const temperature"
      algorithm
        ddpT :=0; //incompressable
      end density_derp_T;

      redeclare function extends density_derp_h
        "Return density derivative w.r.t. pressure at const specific enthalpy"
      algorithm
        ddph :=0; //incompressable and h = cp*T; h=const; -> T=const
      end density_derp_h;

      redeclare function extends specificEnthalpy
        "Return specific enthalpy as a function of the thermodynamic state record"
      algorithm
        h := if enthalpyOfT then h_T(state.T) else h_pT(state.p,state.T);
       annotation(Inline=true,smoothOrder=2);
      end specificEnthalpy;

      redeclare function extends specificInternalEnergy
        "Return specific internal energy as a function of the thermodynamic state record"
      algorithm
        u := (if enthalpyOfT then h_T(state.T) else h_pT(state.p,state.T)) - (if singleState then  reference_p else state.p)/density(state);
       annotation(Inline=true,smoothOrder=2);
      end specificInternalEnergy;

      function T_ph "Compute temperature from pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        output Temperature T "Temperature";
      protected
        package Internal
          "Solve h(T) for T with given h (use only indirectly via temperature_phX)"
          extends myMedia.Common.OneNonLinearEquation;

          redeclare record extends f_nonlinear_Data
            "Superfluous record, fix later when better structure of inverse functions exists"
              constant Real[5] dummy = {1,2,3,4,5};
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear "P is smuggled in via vector"
          algorithm
            y := if singleState then h_T(x) else h_pT(p,x);
          end f_nonlinear;

        end Internal;
      algorithm
       T := Internal.solve(h, T_min, T_max, p, {1}, Internal.f_nonlinear_Data());
        annotation(Inline=false, LateInline=true, inverse(h=h_pT(p,T)));
      end T_ph;

      function T_ps "Compute temperature from pressure and specific enthalpy"
        extends Modelica.Icons.Function;

        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output Temperature T "Temperature";
      protected
        package Internal
          "Solve h(T) for T with given h (use only indirectly via temperature_phX)"
          extends myMedia.Common.OneNonLinearEquation;

          redeclare record extends f_nonlinear_Data
            "Superfluous record, fix later when better structure of inverse functions exists"
              constant Real[5] dummy = {1,2,3,4,5};
          end f_nonlinear_Data;

          redeclare function extends f_nonlinear "P is smuggled in via vector"
          algorithm
            y := s_T(x);
          end f_nonlinear;

        end Internal;
      algorithm
       T := Internal.solve(s, T_min, T_max, p, {1}, Internal.f_nonlinear_Data());
      end T_ps;

      package Polynomials_Temp
        "Temporary Functions operating on polynomials (including polynomial fitting); only to be used in Modelica.Media.Incompressible.TableBased"
        extends Modelica.Icons.Package;

        function evaluate "Evaluate polynomial at a given abscissa value"
          extends Modelica.Icons.Function;
          input Real p[:]
            "Polynomial coefficients (p[1] is coefficient of highest power)";
          input Real u "Abscissa value";
          output Real y "Value of polynomial at u";
        algorithm
          y := p[1];
          for j in 2:size(p, 1) loop
            y := p[j] + u*y;
          end for;
          annotation(derivative(zeroDerivative=p)=evaluate_der);
        end evaluate;

        function evaluateWithRange
          "Evaluate polynomial at a given abscissa value with linear extrapolation outside of the defined range"
          extends Modelica.Icons.Function;
          input Real p[:]
            "Polynomial coefficients (p[1] is coefficient of highest power)";
          input Real uMin "Polynomial valid in the range uMin .. uMax";
          input Real uMax "Polynomial valid in the range uMin .. uMax";
          input Real u "Abscissa value";
          output Real y
            "Value of polynomial at u. Outside of uMin,uMax, linear extrapolation is used";
        algorithm
          if u < uMin then
            y := evaluate(p, uMin) - evaluate_der(
                    p,
                    uMin,
                    uMin - u);
          elseif u > uMax then
            y := evaluate(p, uMax) + evaluate_der(
                    p,
                    uMax,
                    u - uMax);
          else
            y := evaluate(p, u);
          end if;
          annotation (derivative(
              zeroDerivative=p,
              zeroDerivative=uMin,
              zeroDerivative=uMax) = evaluateWithRange_der);
        end evaluateWithRange;

        function derivative "Derivative of polynomial"
          extends Modelica.Icons.Function;
          input Real p1[:]
            "Polynomial coefficients (p1[1] is coefficient of highest power)";
          output Real p2[size(p1, 1) - 1] "Derivative of polynomial p1";
        protected
          Integer n=size(p1, 1);
        algorithm
          for j in 1:n-1 loop
            p2[j] := p1[j]*(n - j);
          end for;
        end derivative;

        function derivativeValue
          "Value of derivative of polynomial at abscissa value u"
          extends Modelica.Icons.Function;
          input Real p[:]
            "Polynomial coefficients (p[1] is coefficient of highest power)";
          input Real u "Abscissa value";
          output Real y "Value of derivative of polynomial at u";
        protected
          Integer n=size(p, 1);
        algorithm
          y := p[1]*(n - 1);
          for j in 2:size(p, 1)-1 loop
            y := p[j]*(n - j) + u*y;
          end for;
          annotation(derivative(zeroDerivative=p)=derivativeValue_der);
        end derivativeValue;

        function secondDerivativeValue
          "Value of 2nd derivative of polynomial at abscissa value u"
          extends Modelica.Icons.Function;
          input Real p[:]
            "Polynomial coefficients (p[1] is coefficient of highest power)";
          input Real u "Abscissa value";
          output Real y "Value of 2nd derivative of polynomial at u";
        protected
          Integer n=size(p, 1);
        algorithm
          y := p[1]*(n - 1)*(n - 2);
          for j in 2:size(p, 1)-2 loop
            y := p[j]*(n - j)*(n - j - 1) + u*y;
          end for;
        end secondDerivativeValue;

        function integral "Indefinite integral of polynomial p(u)"
          extends Modelica.Icons.Function;
          input Real p1[:]
            "Polynomial coefficients (p1[1] is coefficient of highest power)";
          output Real p2[size(p1, 1) + 1]
            "Polynomial coefficients of indefinite integral of polynomial p1 (polynomial p2 + C is the indefinite integral of p1, where C is an arbitrary constant)";
        protected
          Integer n=size(p1, 1) + 1 "Degree of output polynomial";
        algorithm
          for j in 1:n-1 loop
            p2[j] := p1[j]/(n-j);
          end for;
          p2[n] := 0.0;
        end integral;

        function integralValue "Integral of polynomial p(u) from u_low to u_high"
          extends Modelica.Icons.Function;
          input Real p[:] "Polynomial coefficients";
          input Real u_high "High integrand value";
          input Real u_low=0 "Low integrand value, default 0";
          output Real integral=0.0
            "Integral of polynomial p from u_low to u_high";
        protected
          Integer n=size(p, 1) "Degree of integrated polynomial";
          Real y_low=0 "Value at lower integrand";
        algorithm
          for j in 1:n loop
            integral := u_high*(p[j]/(n - j + 1) + integral);
            y_low := u_low*(p[j]/(n - j + 1) + y_low);
          end for;
          integral := integral - y_low;
          annotation(derivative(zeroDerivative=p)=integralValue_der);
        end integralValue;

        function fitting
          "Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense"
          extends Modelica.Icons.Function;
          input Real u[:] "Abscissa data values";
          input Real y[size(u, 1)] "Ordinate data values";
          input Integer n(min=1)
            "Order of desired polynomial that fits the data points (u,y)";
          output Real p[n + 1]
            "Polynomial coefficients of polynomial that fits the date points";
        protected
          Real V[size(u, 1), n + 1] "Vandermonde matrix";
        algorithm
          // Construct Vandermonde matrix
          V[:, n + 1] := ones(size(u, 1));
          for j in n:-1:1 loop
            V[:, j] := {u[i] * V[i, j + 1] for i in 1:size(u,1)};
          end for;

          // Solve least squares problem
          p :=Modelica.Math.Matrices.leastSquares(V, y);
          annotation (Documentation(info="<html>
<p>
Polynomials.fitting(u,y,n) computes the coefficients of a polynomial
p(u) of degree \"n\" that fits the data \"p(u[i]) - y[i]\"
in a least squares sense. The polynomial is
returned as a vector p[n+1] that has the following definition:
</p>
<pre>
  p(u) = p[1]*u^n + p[2]*u^(n-1) + ... + p[n]*u + p[n+1];
</pre>
</html>"));
        end fitting;

        function evaluate_der
          "Evaluate derivative of polynomial at a given abscissa value"
          extends Modelica.Icons.Function;
          input Real p[:]
            "Polynomial coefficients (p[1] is coefficient of highest power)";
          input Real u "Abscissa value";
          input Real du "Delta of abscissa value";
          output Real dy "Value of derivative of polynomial at u";
        protected
          Integer n=size(p, 1);
        algorithm
          dy := p[1]*(n - 1);
          for j in 2:size(p, 1)-1 loop
            dy := p[j]*(n - j) + u*dy;
          end for;
          dy := dy*du;
        end evaluate_der;

        function evaluateWithRange_der
          "Evaluate derivative of polynomial at a given abscissa value with extrapolation outside of the defined range"
          extends Modelica.Icons.Function;
          input Real p[:]
            "Polynomial coefficients (p[1] is coefficient of highest power)";
          input Real uMin "Polynomial valid in the range uMin .. uMax";
          input Real uMax "Polynomial valid in the range uMin .. uMax";
          input Real u "Abscissa value";
          input Real du "Delta of abscissa value";
          output Real dy "Value of derivative of polynomial at u";
        algorithm
          if u < uMin then
            dy := evaluate_der(
                    p,
                    uMin,
                    du);
          elseif u > uMax then
            dy := evaluate_der(
                    p,
                    uMax,
                    du);
          else
            dy := evaluate_der(
                    p,
                    u,
                    du);
          end if;
        end evaluateWithRange_der;

        function integralValue_der
          "Time derivative of integral of polynomial p(u) from u_low to u_high, assuming only u_high as time-dependent (Leibniz rule)"
          extends Modelica.Icons.Function;
          input Real p[:] "Polynomial coefficients";
          input Real u_high "High integrand value";
          input Real u_low=0 "Low integrand value, default 0";
          input Real du_high "High integrand value";
          input Real du_low=0 "Low integrand value, default 0";
          output Real dintegral=0.0
            "Integral of polynomial p from u_low to u_high";
        algorithm
          dintegral := evaluate(p,u_high)*du_high;
        end integralValue_der;

        function derivativeValue_der
          "Time derivative of derivative of polynomial"
          extends Modelica.Icons.Function;
          input Real p[:]
            "Polynomial coefficients (p[1] is coefficient of highest power)";
          input Real u "Abscissa value";
          input Real du "Delta of abscissa value";
          output Real dy
            "Time-derivative of derivative of polynomial w.r.t. input variable at u";
        protected
          Integer n=size(p, 1);
        algorithm
          dy := secondDerivativeValue(p,u)*du;
        end derivativeValue_der;
        annotation (Documentation(info="<html>
<p>
This package contains functions to operate on polynomials,
in particular to determine the derivative and the integral
of a polynomial and to use a polynomial to fit a given set
of data points.
</p>

<p>
Copyright &copy; 2004-2019, Modelica Association and contributors
</p>
</html>",       revisions="<html>
<ul>
<li><em>Oct. 22, 2004</em> by Martin Otter (DLR):<br>
       Renamed functions to not have abbreviations.<br>
       Based fitting on LAPACK<br>
       New function to return the polynomial of an indefinite integral</li>
<li><em>Sept. 3, 2004</em> by Jonas Eborn (Scynamics):<br>
       polyderval, polyintval added</li>
<li><em>March 1, 2004</em> by Martin Otter (DLR):<br>
       first version implemented</li>
</ul>
</html>"));
      end Polynomials_Temp;

    annotation(Documentation(info="<html>
<p>
This is the base package for medium models of incompressible fluids based on
tables. The minimal data to provide for a useful medium description is tables
of density and heat capacity as functions of temperature.
</p>

<p>It should be noted that incompressible media only have 1 state per control volume (usually T),
but have both T and p as inputs for fully correct properties. The error of using only T-dependent
properties is small, therefore a Boolean flag enthalpyOfT exists. If it is true, the
enumeration Choices.independentVariables  is set to  Choices.independentVariables.T otherwise
it is set to Choices.independentVariables.pT.</p>

<h4>Using the package TableBased</h4>
<p>
To implement a new medium model, create a package that <strong>extends</strong> TableBased
and provides one or more of the constant tables:
</p>

<pre>
tableDensity        = [T, d];
tableHeatCapacity   = [T, Cp];
tableConductivity   = [T, lam];
tableViscosity      = [T, eta];
tableVaporPressure  = [T, pVap];
</pre>

<p>
The table data is used to fit constant polynomials of order <strong>npol</strong>, the
temperature data points do not need to be same for different properties. Properties
like enthalpy, inner energy and entropy are calculated consistently from integrals
and derivatives of d(T) and Cp(T). The minimal
data for a useful medium model is thus density and heat capacity. Transport
properties and vapor pressure are optional, if the data tables are empty the corresponding
function calls can not be used.
</p>
</html>"));
    end TableBased;
    annotation (
      Documentation(info="<html>
<h4>Incompressible media package</h4>
<p>
This package provides a structure and examples of how to create simple
medium models of incompressible fluids, meaning fluids with very little
pressure influence on density. The medium properties is typically described
in terms of tables, functions or polynomial coefficients.
</p>
<h4>Definitions</h4>
<p>
The common meaning of <em>incompressible</em> is that properties like density
and enthalpy are independent of pressure. Thus properties are conveniently
described as functions of temperature, e.g., as polynomials density(T) and cp(T).
However, enthalpy can not be independent of pressure since h = u - p/d. For liquids
it is anyway
common to neglect this dependence since for constant density the neglected term
is (p - p0)/d, which in comparison with cp is very small for most liquids. For
water, the equivalent change of temperature to increasing pressure 1 bar is
0.025 Kelvin.
</p>
<p>
Two Boolean flags are used to choose how enthalpy and inner energy is calculated:
</p>
<ul>
<li><strong>enthalpyOfT</strong>=true, means assuming that enthalpy is only a function
of temperature, neglecting the pressure dependent term.</li>
<li><strong>singleState</strong>=true, means also neglect the pressure influence on inner
energy, which makes all medium properties pure functions of temperature.</li>
</ul>
<p>
The default setting for both these flags is true, which enables the simulation tool
to choose temperature as the only medium state and avoids non-linear equation
systems, see the section about
<a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition.StaticStateSelection\">Static
state selection</a> in the Modelica.Media User's Guide.
</p>

<h4>Contents</h4>
<p>
Currently, the package contains the following parts:
</p>
<ol>
<li> <a href=\"modelica://Modelica.Media.Incompressible.TableBased\">
      Table based medium models</a></li>
<li> <a href=\"modelica://Modelica.Media.Incompressible.Examples\">
      Example medium models</a></li>
</ol>

<p>
A few examples are given in the Examples package. The model
<a href=\"modelica://Modelica.Media.Incompressible.Examples.Glycol47\">
Examples.Glycol47</a> shows how the medium models can be used. For more
realistic examples of how to implement volume models with medium properties
look in the <a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage\">Medium
usage section</a> of the User's Guide.
</p>

</html>"));

  end Incompressible;

  package R134a "R134a: Medium model for R134a"
    extends Modelica.Icons.VariantsPackage;
    package Common
      extends Modelica.Icons.Package;

      record PhaseBoundaryProperties
        "Thermodynamic base properties on the phase boundary"
        extends Modelica.Icons.Record;

        Modelica.SIunits.Density d "Density";
        Modelica.SIunits.SpecificEnthalpy h "Enthalpy";
        Modelica.SIunits.SpecificEnergy u "Inner energy";
        Modelica.SIunits.SpecificEntropy s "Entropy";
        Modelica.SIunits.SpecificHeatCapacity cp
          "Heat capacity at constant pressure";
        Modelica.SIunits.SpecificHeatCapacity cv
          "Heat capacity at constant volume";
        Modelica.SIunits.IsothermalCompressibility kappa "Isentropic exponent";
        Modelica.SIunits.Velocity a "Velocity of sound";
        myMedia.Interfaces.Types.IsobaricExpansionCoefficient beta "Isobaric expansion coefficient";
        Modelica.SIunits.IsentropicExponent gamma "Isentropic exponent";
        Modelica.SIunits.DerPressureByTemperature pt
          "Derivative of pressure wrt temperature";
        Modelica.SIunits.DerPressureByDensity pd
          "Derivative of pressure wrt density";

      end PhaseBoundaryProperties;

      record InverseDerivatives_rhoT
        "Derivatives required for inversion of density and temperature functions w.r.t. pressure and enthalpy states"
        extends Modelica.Icons.Record;

        Integer phase "Number of phases";
        Modelica.SIunits.Pressure p "Pressure";
        Modelica.SIunits.Temperature T "Kelvin-temperature";
        Modelica.SIunits.Density rho "Density";
        Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        Modelica.SIunits.SpecificHeatCapacity cv
          "Specific heat capacity at constant volume";
        Real pt "Derivative of pressure wrt temperature";
        Real pd "Derivative of pressure wrt density";
        Real dpT "dp/dT derivative of saturation curve";

      end InverseDerivatives_rhoT;

      record EOSIdealCoeff
        "Record for coefficients of ideal term of Helmholtz equation of state"
        extends Modelica.Icons.Record;

        parameter Integer nc=5 "No. of coefficients in a";
        parameter Real[nc] a
          "Coefficients of ideal term of Helmholtz equation of state";

      end EOSIdealCoeff;

      record EOSResidualCoeff
        "Record for coefficients of residual term of Helmholtz equation of state"
        extends Modelica.Icons.Record;

        parameter Integer nc=20 "No. of coefficients in c, d, t, n";
        parameter Integer ns1 "No. of zero coefficients in c";
        parameter Real[nc] c
          "Coefficients of residual term of Helmholtz equation of state";
        parameter Real[nc] d
          "Coefficients of residual term of Helmholtz equation of state";
        parameter Real[nc] t
          "Coefficients of residual term of Helmholtz equation of state";
        parameter Real[nc] n
          "Coefficients of residual term of Helmholtz equation of state";

      end EOSResidualCoeff;

      function CubicSplineDerEval "Derivative of cubic spline"
        extends Modelica.Icons.Function;

        input Real x "Input";
        input Real[4] coefs "Spline coefficients";
        output Real yder "Spline derivative";
      algorithm
        yder := coefs[3] + x*(2.0*coefs[2] + x*3.0*coefs[1]);

      end CubicSplineDerEval;

      function CubicSplineEval "Cubic spline"
        extends Modelica.Icons.Function;

        input Real x "Input";
        input Real[4] coefs "Spline coefficients";
        output Real y "Output";
      algorithm
        y := coefs[4] + x*(coefs[3] + x*(coefs[2] + x*coefs[1]));

      end CubicSplineEval;

      function cv2Phase
        "Compute isochoric specific heat capacity inside the two-phase region"
        extends Modelica.Icons.Function;

        import SI = Modelica.SIunits;
        input PhaseBoundaryProperties liq "Properties on the boiling curve";
        input PhaseBoundaryProperties vap "Properties on the condensation curve";
        input SI.MassFraction x "Vapour mass fraction";
        input SI.Temperature T "Temperature";
        input SI.Pressure p "Pressure";
        output SI.SpecificHeatCapacity cv "Isochoric specific heat capacity";
        output Real dpT "Derivative of pressure w.r.t. temperature";
      protected
        Real dxv "Derivative of vapour mass fraction w.r.t. specific volume";
        Real dvTl "Derivative of liquid specific volume w.r.t. temperature";
        Real dvTv "Derivative of vapour specific volume w.r.t. temperature";
        Real duTl "Derivative of liquid specific inner energy w.r.t. temperature";
        Real duTv "Derivative of vapour specific inner energy w.r.t. temperature";
        Real dxt "Derivative of vapour mass fraction w.r.t. temperature";
      algorithm
        dxv := if (liq.d <> vap.d) then liq.d*vap.d/(liq.d - vap.d) else 0.0;
        dpT := (vap.s - liq.s)*dxv;
        // wrong at critical point
        dvTl := (liq.pt - dpT)/liq.pd/liq.d/liq.d;
        dvTv := (vap.pt - dpT)/vap.pd/vap.d/vap.d;
        dxt := -dxv*(dvTl + x*(dvTv - dvTl));
        duTl := liq.cv + (T*liq.pt - p)*dvTl;
        duTv := vap.cv + (T*vap.pt - p)*dvTv;
        cv := duTl + x*(duTv - duTl) + dxt*(vap.u - liq.u);

      end cv2Phase;

      function FindInterval "Half-interval search algorithm"
        extends Modelica.Icons.Function;

        input Real x "Input";
        input Real[:] breaks "Grid points defining the intervals";
        output Integer i "Found interval number";
        output Integer error=0 "1=did not find interval";
      protected
        Integer n=scalar(size(breaks)) - 1 "Max value";
        Integer ix=1 "Min value";
        Integer m=n "New interval";
      algorithm
        i := 1;
        if ((x < breaks[1]) or (x >= breaks[n])) then
          error := 1;
        end if;
        if ((x < breaks[1]) or (x >= breaks[2])) then
          while m <> ix loop
            if (x < breaks[m]) then
              n := m;
            else
              ix := m;
            end if;
            m := integer(div(ix + n, 2));
          end while;
          i := ix;
        end if;

      end FindInterval;

      function helmholtzToBoundaryProps
        "Calculate phase boundary property record from dimensionless Helmholtz function"

        extends Modelica.Icons.Function;
        import SI = Modelica.SIunits;
        input myMedia.Common.HelmholtzDerivs f "Dimensionless derivatives of Helmholtz function";
        output PhaseBoundaryProperties sat "Phase boundary property record";
      protected
        SI.Pressure p "Pressure";
      algorithm
        p := f.R*f.d*f.T*f.delta*f.fdelta;
        sat.d := f.d;
        sat.h := f.R*f.T*(f.tau*f.ftau + f.delta*f.fdelta);
        sat.s := f.R*(f.tau*f.ftau - f.f);
        sat.u := f.R*f.T*f.tau*f.ftau;
        sat.cp := f.R*(-f.tau*f.tau*f.ftautau + (f.delta*f.fdelta - f.delta*f.tau
          *f.fdeltatau)^2/(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));
        sat.cv := f.R*(-f.tau*f.tau*f.ftautau);
        sat.pt := f.R*f.d*(f.delta*(f.fdelta - f.tau*f.fdeltatau));
        sat.pd := f.R*f.T*(f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta));
        sat.a := abs(f.R*f.T*(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta
           - ((f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)*(f.delta*f.fdelta -
          f.delta*f.tau*f.fdeltatau))/(f.tau*f.tau*f.ftautau)))^0.5;
        sat.kappa := 1/(f.d*f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta));
        sat.beta := f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau)*sat.kappa;
        sat.gamma := sat.a^2/f.R/f.T;

      end helmholtzToBoundaryProps;
    end Common;

    package R134a_ph "Medium model for R134a and p,h as states"

      extends myMedia.Interfaces.PartialTwoPhaseMedium(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        mediumName="R134a_ph",
        substanceNames={"tetrafluoroethan"},
        singleState=false,
        SpecificEnthalpy(start=h_default, nominal=5.0e5),
        Density(start=4, nominal=500),
        AbsolutePressure(start=p_default, nominal=10e5),
        Temperature(start=T_default, nominal=350),
        smoothModel=false,
        onePhase=false,
        fluidConstants=r134aConstants,
        h_default=420e3);

      constant Boolean ph_explicit=true;
      constant Boolean dT_explicit=false;
      constant myMedia.Interfaces.Types.FluidLimits[1] r134aLimits(
        each TMIN=169.85,
        each TMAX=455,
        each DMIN=0,
        each DMAX=1591.7,
        each PMIN=389.563789,
        each PMAX=7e7,
        each HMIN=0,
        each HMAX=0,
        each SMIN=0,
        each SMAX=0);

      constant myMedia.Interfaces.Types.TwoPhase.FluidConstants[1] r134aConstants(
        each chemicalFormula="CF3CH2F",
        each structureFormula="1,1,1,2-tetrafluoroethane",
        each iupacName="tetrafluoroethan",
        each casRegistryNumber="811-97-2",
        each molarMass=R134aData.data.MM,
        each criticalMolarVolume=R134aData.data.MM/R134aData.data.DCRIT,
        each criticalTemperature=R134aData.data.TCRIT,
        each criticalPressure=R134aData.data.PCRIT,
        each triplePointTemperature=R134aData.data.TTRIPLE,
        each triplePointPressure=R134aData.data.PTRIPLE,
        each meltingPoint=172.15,
        each normalBoilingPoint=247.076,
        each acentricFactor=0.32684,
        each dipoleMoment=1.99,
        each hasCriticalData=true);

      redeclare record extends SaturationProperties
      end SaturationProperties;

      redeclare record extends ThermodynamicState "Thermodynamic state"
        SpecificEnthalpy h "Specific enthalpy";
        Density d "Density";
        Temperature T "Temperature";
        AbsolutePressure p "Pressure";

      end ThermodynamicState;

      redeclare replaceable model extends BaseProperties(
        h(stateSelect=StateSelect.prefer),
        d(stateSelect=StateSelect.default),
        T(stateSelect=StateSelect.default),
        p(stateSelect=StateSelect.prefer),
        sat(Tsat(start=273.0), psat(start=3.0e5))) "Base properties of R134a"
        Integer phase(
          min=0,
          max=2,
          start=1,
          fixed=false) "2 for two-phase, 1 for one-phase, 0 if not known";
        MassFraction quality "Quality of vapour";

      equation
        MM = R134aData.data.MM;
        phase = 0;

        T = temperature_ph(p, h);
        d = density_ph(p, h);
        sat.Tsat = saturationTemperature(p=p);
        sat.psat = p;
        quality = vapourQuality(state);

        u = h - p/d;
        R = R134aData.data.R;
        h = state.h;
        p = state.p;
        T = state.T;
        d = state.d;
        phase = state.phase;
      end BaseProperties;

      redeclare function extends setState_phX
        "Set state for pressure and specific enthalpy (X not used since single substance)"

      protected
        SaturationProperties sat(psat=p, Tsat=0)
          "Saturation temperature and pressure";
        Modelica.SIunits.SpecificEnthalpy hl=bubbleEnthalpy(sat)
          "Liquid enthalpy";
        Modelica.SIunits.SpecificEnthalpy hv=dewEnthalpy(sat) "Vapor enthalpy";

      algorithm
        state.p := p;
        state.h := h;

        state.phase := if ((state.h < hl) or (state.h > hv) or (state.p >
          R134aData.data.FPCRIT)) then 1 else 2;

        state.d := density_ph(p, h);
        state.T := temperature_ph(p, h);
        annotation (Documentation(info="<html>
<p>This function should be used by default in order to calculate the thermodynamic state record used as input by many functions.</p>
<p>
Example:
</p>
<pre>
     parameter Medium.AbsolutePressure p = 3e5;
     parameter Medium.SpecificEnthalpy h = 4.2e5;

     Medium.Density rho;

     <strong>equation</strong>

     rho = Medium.density(setState_phX(p, h, fill(0, Medium.nX)));
</pre>


</html>"));
      end setState_phX;

      redeclare function extends setState_dTX
        "Set state for density and temperature (X not used since single substance)"
      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
        Modelica.SIunits.SpecificHeatCapacity R "Specific gas constant";
        SaturationProperties sat "Saturation temperature and pressure";
        Modelica.SIunits.Density dl "Liquid density";
        Modelica.SIunits.Density dv "Vapor density";

      algorithm
        R := R134aData.data.R;
        f := f_R134a(d=d, T=T);
        state.p := d*R*T*f.delta*f.fdelta;
        state.h := R*T*(f.tau*f.ftau + f.delta*f.fdelta);
        sat.psat := state.p;
        state.T := T;
        state.d := d;
        sat.Tsat := state.T;
        dl := bubbleDensity(sat);
        dv := dewDensity(sat);
        state.phase := if ((state.d < dl) or (state.d > dv) or (state.p >
          R134aData.data.FPCRIT)) then 1 else 2;

        annotation (Documentation(revisions="<html>
<p>2012-08-01  Stefan Wischhusen: Corrected passing-error of inputs.</p>
</html>",   info="<html>
<p>Although the medium package is explicit for pressure and specific enthalpy, this function may be used in order to calculate the thermodynamic state record used as input by many functions. It will calculate the missing states:</p>
<ul>
<li>pressure</li>
<li>specific enthalpy</li>
</ul>
<p>
Example:
</p>
<pre>
     parameter Medium.Density d = 4;
     parameter Medium.Temperature T = 298;

     Medium.SpecficEntropy s;

     <strong>equation</strong>

     s = Medium.specificEntropy(setState_dTX(d, T, fill(0, Medium.nX)));
</pre>

</html>"));
      end setState_dTX;

      redeclare function extends setState_psX
        "Set state for pressure and specific entropy (X not used since single substance)"

      protected
        Modelica.SIunits.Pressure delp=1e-2 "Iteration accuracy for pressure";
        Modelica.SIunits.SpecificEntropy dels=1e-1
          "Iteration accuracy for entropy";
        Integer error "If newton iteration fails (too many calls)";
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
        SaturationProperties sat "Saturation temperature and pressure";
      algorithm
        state.p := p;

        if (getPhase_ps(p, s) == 1) then
          (state.d,state.T,error) := dtofpsOnePhase(
                p=p,
                s=s,
                delp=delp,
                dels=dels);
          f := f_R134a(d=state.d, T=state.T);
          state.h := R134aData.R*state.T*(f.tau*f.ftau + f.delta*f.fdelta);
        else
          state.h := hofpsTwoPhase(p, s);
        end if;

        annotation (Documentation(info="<html>
<p>This function may be used in order to calculate the thermodynamic state record used as input by many functions. It will calculate the missing states:</p>
<ul>
<li>density</li>
<li>pressure</li>
<li>specific enthalpy</li>
</ul>
<p>
Example:
</p>
<pre>
     parameter Medium.AbsolutePressure p = 3e5;
     parameter Medium.SpecficEntropy s = 1.7e3;

     Medium.SpecficEnthalpy h;

     <strong>equation</strong>

     h = Medium.specificEnthalpy(setState_psX(p, s, fill(0, Medium.nX)));
</pre>
</html>"));
      end setState_psX;

      redeclare function extends setState_pTX
        "Set state for pressure and temperature (X not used since single substance)"

      protected
          Modelica.SIunits.Pressure delp=1.0e-2
          "Relative error in p in iteration";

      algorithm
        myMedia.R134a.R134a_ph.phaseBoundaryAssert(p, T);

        state := ThermodynamicState(
                d=dofpT(p, T, delp),
                T=T,
                h=hofpT(p, T, delp),
                p=p,
                phase=1);
        annotation (Inline=true, Documentation(info="<html>
<p>This function should be used by default in order to calculate the thermodynamic state record used as input by many functions.</p>
<p>
Example:
</p>
<pre>
     parameter Medium.AbsolutePressure p = 3e5;
     parameter Medium.Temperature T = 290;

     Medium.Density rho;

     <strong>equation</strong>

     rho = Medium.density(setState_pTX(p, T, fill(0, Medium.nX)));
</pre>
<p>
Please note, that in contrast to setState_phX, setState_dTX and setState_psX this function can not calculate properties in the two-phase region since pressure and temperature are dependent variables. A guard function will be called if the temperature difference to the phase boundary is lower than 1K or the pressure difference to the critical pressure is lower than 1000 Pa.
</p>
</html>"));
      end setState_pTX;

      redeclare function extends setBubbleState
        "Return the thermodynamic state on the bubble line"
      algorithm
        if sat.psat < myMedia.R134a.R134aData.data.FPCRIT then
          state.p := sat.psat;
          state.T := saturationTemperature(sat.psat);
          state.d := bubbleDensity(sat);
          state.h := bubbleEnthalpy(sat);
        else
          assert(sat.psat < myMedia.R134a.R134aData.data.FPCRIT, "Function setBubbleState is only valid in two-phase regime");
        end if;
        annotation (Documentation(info="<html>
<p>This function shall be used in order to calculate the thermodynamic state record for the liquid phase boundary. It requires the saturation record as input which can be determined by both functions setSat_p and setSat_T:
</p>
<p>
Example:
</p>
<pre>
    Medium.AbsolutePressure p=3e5;
    // Viscosity on the liquid phase boundary
    Modelica.SIunits.DynamicViscosity eta_liq;

    equation

    eta_liq = Medium.DynamicViscosity(Medium.setBubbleState(Medium.setSat_p(p)));
</pre>

<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end setBubbleState;

      redeclare function extends setDewState
        "Return the thermodynamic state on the dew line"
      algorithm
        if sat.psat < myMedia.R134a.R134aData.data.FPCRIT then
          state.p := sat.psat;
          state.T := saturationTemperature(sat.psat);
          state.d := dewDensity(sat);
          state.h := dewEnthalpy(sat);
        else
          assert(sat.psat < myMedia.R134a.R134aData.data.FPCRIT, "Function setDewState is only valid in two-phase regime");
        end if;
        annotation (Documentation(info="<html>
<p>This function shall be used in order to calculate the thermodynamic state record for the vapor phase boundary. It requires the saturation record as input which can be determined by both functions setSat_p and setSat_T:
</p>
<p>
Example:
</p>
<pre>
    Medium.AbsolutePressure p=3e5;
    // Viscosity on the vapor phase boundary
    Modelica.SIunits.DynamicViscosity eta_vap;

    equation

    eta_vap = Medium.DynamicViscosity(Medium.setBubbleState(Medium.setSat_p(p)));
</pre>

<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end setDewState;

      redeclare function density_ph
        "Density as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        output Density d "Density";

      algorithm
        d := rho_props_ph(
              p,
              h,
              derivsOf_ph(
                p,
                h,
                getPhase_ph(p, h)));

        annotation (Inline=true, Documentation(info="<html>
<p> This function calculates the density of R134a from the state variables p (absolute pressure) and h (specific enthalpy). The density is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>

<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)d-Diagram-R134a.png\"/></p>

</html>"));
      end density_ph;

      redeclare function extends density
        "Density as function of pressure and specific enthalpy | use setState_phX function for input"

      algorithm
        d := state.d;

        annotation (Inline=true, Documentation(info="<html>
<p>
This function calculates the density of R134a from the state record
(e.g., use setState_phX function for input). The density is modelled
by the fundamental equation of state of Tillner-Roth and Baehr (1994).
</p>

<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)d-Diagram-R134a.png\"/></p>
</html>"));
      end density;

      redeclare function temperature_ph
        "Temperature as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        output Temperature T "Temperature";

      algorithm
        T := T_props_ph(
              p,
              h,
              derivsOf_ph(
                p,
                h,
                getPhase_ph(p, h)));

        annotation (Inline=true, Documentation(info="<html>
<p> This function calculates the Kelvin temperature of R134a from the state variables p (absolute pressure) and h (specific enthalpy). The temperature is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>

<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)h-Diagram-R134a.png\"/></p>


</html>"));
      end temperature_ph;

      redeclare function extends temperature
        "Temperature as function of pressure and specific enthalpy | use setState_phX function for input"

      algorithm
        T := state.T;

        annotation (Inline=true, Documentation(info="<html>
<p> This function calculates the Kelvin temperature of R134a from the state record (e.g., use setState_phX function for input). The temperature is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)h-Diagram-R134a.png\"/></p>
</html>"));
      end temperature;

      redeclare function extends pressure "Pressure w.r.t. thermodynamic state"
      algorithm
        p := state.p;
        annotation (Inline=true, Documentation(info="<html>
<p>This function is included for the sake of completeness.</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)h-Diagram-R134a.png\"/></p>
</html>"));
      end pressure;

      redeclare function extends specificInternalEnergy
        "Specific internal energy w.r.t. thermodynamic state"
      algorithm
        u := specificEnthalpy(state) - pressure(state)/density(state);

        annotation (Inline=true, Documentation(info="<html>
<p> This function calculates the specific internal energy of R134a from the state record (e.g., use setState_phX function for input). The specific internal energy is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)u-Diagram-R134a.png\"/></p>

</html>"));
      end specificInternalEnergy;

      redeclare function extends specificEnthalpy
        "Specific enthalpy w.r.t. thermodynamic state | use setState_phX function for input"

      algorithm
        h := state.h;

        annotation (Inline=true, Documentation(info="<html>
<p>This function is included for the sake of completeness.</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)h-Diagram-R134a.png\"/></p>
</html>"));
      end specificEnthalpy;

      redeclare function extends specificEntropy
        "Specific entropy w.r.t. thermodynamic state | use setState_phX function for input if necessary"

      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
        Common.PhaseBoundaryProperties liq "Properties on liquid phase boundary";
        SaturationProperties sat "Saturation temperature and pressure";
        Common.PhaseBoundaryProperties vap "Properties on vapor phase boundary";

        Modelica.SIunits.MassFraction x "Vapor quality";

      algorithm
        if getPhase_ph(state.p, state.h) == 2 then
          sat.psat := state.p;
          sat.Tsat := saturationTemperature(state.p);
          liq := R134a_liqofdT(T=state.T);
          vap := R134a_vapofdT(T=state.T);
          x := if liq.h <> vap.h then (state.h - liq.h)/(vap.h - liq.h) else if
            state.h >= vap.h then 1 else 0;
          s := liq.s + x*(vap.s - liq.s);
        else
          f := f_R134a(state.d, state.T);
          s := R134aData.R*(f.tau*f.ftau - f.f);
        end if;

        annotation (Documentation(info="<html>
<p> This function calculates the specific entropy of R134a from the state record (e.g., use setState_phX function for input). The specific entropy is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)s-Diagram-R134a.png\"/></p>
</html>"));
      end specificEntropy;

      redeclare function extends saturationTemperature
        "Saturation temperature in two-phase region"

      protected
        constant Real T_coef[:, :]=R134aData.Tcoef
          "Coefficients of cubic spline for Tsat(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := p/R134aData.data.FPCRIT;
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        T := Common.CubicSplineEval(localx, T_coef[int, :]);

        // annotation(smoothOrder=5);
        annotation (derivative=saturationTemperature_der_p, Documentation(info="<html>
<p>This function calculates the saturation temperature of R134a from the state variable p (absolute pressure). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from
the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)Tsat-Diagram-R134a.png\"/></p>
</html>"));
      end saturationTemperature;

      redeclare function extends saturationTemperature_derp
        "Derivative of saturation temperature in two-phase region"

      protected
        constant Real T_coef[:, :]=R134aData.Tcoef
          "Coefficients of cubic spline for Tsat(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := p/R134aData.data.FPCRIT;
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        dTp := Common.CubicSplineDerEval(localx, T_coef[int, :])/R134aData.data.FPCRIT;

        annotation (Documentation(info="<html>
<p>This function calculates the derivative of saturation temperature of R134a with regard to the state variable p (absolute pressure). The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.saturationTemperature\"> saturatuionTemperature</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end saturationTemperature_derp;

      function saturationTemperature_der_p
        "Time derivative of saturation temperature in two-phase region"
        extends Modelica.Icons.Function;

        input Modelica.SIunits.AbsolutePressure p "Pressure";
        input Real der_p "Time derivative of pressure";
        output Real der_Tsat "Time derivative of saturation temperature";
      protected
        constant Real T_coef[:, :]=R134aData.Tcoef
          "Coefficients of cubic spline for Tsat(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := p/R134aData.data.FPCRIT;
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        der_Tsat := Common.CubicSplineDerEval(localx, T_coef[int, :])/R134aData.data.FPCRIT
          *der_p;

        annotation (Documentation(info="<html>
<p>This function calculates the time derivative of saturation temperature of R134a with regard to the time derivative of p. The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.saturationTemperature\"> saturatuionTemperature</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end saturationTemperature_der_p;

      redeclare function extends bubbleDensity
        "Density of liquid phase w.r.t saturation pressure | use setSat_p function for input"

      protected
        constant Real dl_coef[:, :]=R134aData.dlcoef
          "Coefficients of cubic spline for d_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        dl := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dl_coef[int, 1
          :4]);

        // annotation(smoothOrder=5);
        annotation (derivative=dBubbleDensity_dPressure_der_sat, Documentation(
              info="<html>
<p>This function calculates the liquid phase density of R134a from the state variable p (absolute pressure). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from
the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end bubbleDensity;

      redeclare function extends dBubbleDensity_dPressure
        "Derivative of liquid density in two-phase region w.r.t pressure"

      protected
        constant Real dl_coef[:, :]=R134aData.dlcoef
          "Coefficients of cubic spline for d_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        ddldp := R134aData.data.FDCRIT*Common.CubicSplineDerEval(localx, dl_coef[
          int, 1:4])/R134aData.data.FPCRIT;

        annotation (Documentation(info="<html>
<p>This function calculates the derivative of liquid density of R134a in the two-phase region with regard to the state variable p (absolute pressure). The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.bubbleDensity\"> bubbleDensity</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dBubbleDensity_dPressure;

      function dBubbleDensity_dPressure_der_sat
        "Time derivative of liquid density in two-phase region w.r.t pressure"
        extends Modelica.Icons.Function;

        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        input SaturationProperties der_sat "Derivative of saturation properties";
        output Real der_ddldp
          "Time derivative of liquid density in two-phase region w.r.t pressure";
      protected
        constant Real dl_coef[:, :]=R134aData.dlcoef
          "Coefficients of cubic spline for d_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        der_ddldp := R134aData.data.FDCRIT*Common.CubicSplineDerEval(localx,
          dl_coef[int, 1:4])/R134aData.data.FPCRIT*der_sat.psat;

        annotation (Documentation(info="<html>
<p>This function calculates the time derivative of liquid density of R134a with regard to the time derivative of p. The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.bubbleDensity\"> bubbleDensity</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dBubbleDensity_dPressure_der_sat;

      redeclare function extends dewDensity
        "Density of vapor phase w.r.t saturation pressure | use setSat_p function for input"

      protected
        constant Real dv_coef[:, :]=R134aData.dvcoef
          "Coefficients of cubic spline for d_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        dv := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dv_coef[int, 1
          :4]);

        // annotation(smoothOrder=5);
        annotation (derivative=dDewDensity_dPressure_der_sat, Documentation(info="<html>
<p>This function calculates the vapor phase density of R134a from the state variable p (absolute pressure). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from
the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dewDensity;

      redeclare function extends dDewDensity_dPressure
        "Derivative of vapor density in two-phase region w.r.t pressure"

      protected
        constant Real dv_coef[:, :]=R134aData.dvcoef
          "Coefficients of cubic spline for d_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        ddvdp := R134aData.data.FDCRIT*Common.CubicSplineDerEval(localx, dv_coef[
          int, 1:4])/R134aData.data.FPCRIT;

        annotation (Documentation(info="<html>
<p>This function calculates the derivative of vapor density of R134a in two-phase region with regard to the state variable p (absolute pressure). The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.dewDensity\"> dewDensity</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dDewDensity_dPressure;

      function dDewDensity_dPressure_der_sat
        "Time derivative of vapor density in two-phase region w.r.t pressure"
        extends Modelica.Icons.Function;

        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        input SaturationProperties der_sat "Derivative of saturation properties";
        output Real der_ddvdp
          "Time derivative of vapor density in two-phase region w.r.t pressure";
      protected
        constant Real dv_coef[:, :]=R134aData.dvcoef
          "Coefficients of cubic spline for d_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        der_ddvdp := R134aData.data.FDCRIT*Common.CubicSplineDerEval(localx,
          dv_coef[int, 1:4])/R134aData.data.FPCRIT*der_sat.psat;

        annotation (Documentation(info="<html>
<p>This function calculates the time derivative of vapor density of R134a with regard to the time derivative of p. The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.dewDensity\"> dewDensity</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dDewDensity_dPressure_der_sat;

      redeclare function extends bubbleEnthalpy
        "Specific enthalpy of liquid phase w.r.t saturation pressure | use setSat_p function for input"

      protected
        constant Real hl_coef[:, :]=R134aData.hlcoef
          "Coefficients of cubic spline for h_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        hl := R134aData.data.HCRIT*Common.CubicSplineEval(localx, hl_coef[int, 1:
          4]);

        // annotation(smoothOrder=5);
        annotation (derivative=dBubbleEnthalpy_dPressure_der_sat, Documentation(
              info="<html>
<p>This function calculates the liquid phase enthalpy of R134a from the state variable p (absolute pressure). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from
the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end bubbleEnthalpy;

      redeclare function extends dBubbleEnthalpy_dPressure
        "Derivative of liquid specific enthalpy in two-phase region w.r.t pressure"

      protected
        constant Real hl_coef[:, :]=R134aData.hlcoef
          "Coefficients of cubic spline for h_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        dhldp := R134aData.data.HCRIT*Common.CubicSplineDerEval(localx, hl_coef[
          int, 1:4])/R134aData.data.FPCRIT;

        annotation (Documentation(info="<html>
<p>This function calculates the derivative of liquid enthalpy of R134a with regard to the state variable p (absolute pressure). The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.bubbleEnthalpy\"> bubbleEnthalpy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dBubbleEnthalpy_dPressure;

      function dBubbleEnthalpy_dPressure_der_sat
        "Time derivative of liquid specific enthalpy in two-phase region w.r.t pressure"
        extends Modelica.Icons.Function;

        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        input SaturationProperties der_sat "Derivative of saturation properties";
        output Real der_dhldp
          "Time derivative of liquid specific enthalpy in two-phase region w.r.t pressure";
      protected
        constant Real hl_coef[:, :]=R134aData.hlcoef
          "Coefficients of cubic spline for h_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        der_dhldp := R134aData.data.HCRIT*Common.CubicSplineDerEval(localx,
          hl_coef[int, 1:4])/R134aData.data.FPCRIT*der_sat.psat;

        annotation (Documentation(info="<html>
<p>This function calculates the time derivative of liquid specific enthalpy of R134a with regard to the time derivative of p. The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.bubbleEnthalpy\"> bubbleEnthalpy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dBubbleEnthalpy_dPressure_der_sat;

      redeclare function extends dewEnthalpy
        "Specific enthalpy of vapor phase w.r.t saturation pressure | use setSat_p function for input"

      protected
        constant Real hv_coef[:, :]=R134aData.hvcoef
          "Coefficients of cubic spline for h_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        hv := R134aData.data.HCRIT*Common.CubicSplineEval(localx, hv_coef[int, 1:
          4]);

        // annotation(smoothOrder=5);
        annotation (derivative=dDewEnthalpy_dPressure_der_sat, Documentation(info=
               "<html>
<p>This function calculates the vapor phase enthalpy of R134a from the state variable p (absolute pressure). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from
the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dewEnthalpy;

      redeclare function extends dDewEnthalpy_dPressure
        "Derivative of vapor specific enthalpy in two-phase region w.r.t pressure"

      protected
        constant Real hv_coef[:, :]=R134aData.hvcoef
          "Coefficients of cubic spline for h_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        dhvdp := R134aData.data.HCRIT*Common.CubicSplineDerEval(localx, hv_coef[
          int, 1:4])/R134aData.data.FPCRIT;

        annotation (Documentation(info="<html>
<p>This function calculates the derivative of vapor enthalpy of R134a in the two-phase region with regard to the state variable p (absolute pressure). The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.dewEnthalpy\"> dewEnthalpy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dDewEnthalpy_dPressure;

      function dDewEnthalpy_dPressure_der_sat
        "Time derivative of vapor specific enthalpy in two-phase region w.r.t pressure"
        extends Modelica.Icons.Function;

        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        input SaturationProperties der_sat "Derivative of saturation properties";
        output Real der_dhvdp
          "Derivative of vapor specific enthalpy in two-phase region w.r.t pressure";
      protected
        constant Real hv_coef[:, :]=R134aData.hvcoef
          "Coefficients of cubic spline for h_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        der_dhvdp := R134aData.data.HCRIT*Common.CubicSplineDerEval(localx,
          hv_coef[int, 1:4])/R134aData.data.FPCRIT*der_sat.psat;

        annotation (Documentation(info="<html>
<p>This function calculates the time derivative of vapor enthalpy of R134a with regard to the time derivative of p. The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.dewEnthalpy\"> dewEnthalpy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dDewEnthalpy_dPressure_der_sat;

      redeclare function extends dewEntropy
        "Specific entropy of vapor phase w.r.t saturation pressure | use setSat_p function for input"

      protected
        constant Real sv_coef[:, :]=R134aData.svcoef
          "Coefficients of cubic spline for s_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        sv := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sv_coef[int, 1:
          4]);

        // annotation(smoothOrder=5);
        annotation (derivative=dDewEntropy_dPressure_der_sat, Documentation(info="<html>
<p>This function calculates the vapor phase entropy of R134a from the state variable p (absolute pressure). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from
the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dewEntropy;

      function dDewEntropy_dPressure
        "Derivative of vapor specific entropy in two-phase region w.r.t pressure | use setState_phX function for input"
        extends Modelica.Icons.Function;

        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        output Real dsvdp
          "Derivative of vapor specific entropy in two-phase region w.r.t pressure";
      protected
        constant Real sv_coef[:, :]=R134aData.svcoef
          "Coefficients of cubic spline for s_vap(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        dsvdp := R134aData.data.SCRIT*Common.CubicSplineDerEval(localx, sv_coef[
          int, 1:4])/R134aData.data.FPCRIT;

        annotation (Documentation(info="<html>
<p>This function calculates the derivative of vapor entropy of R134a with regard to the state variable p (absolute pressure). The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.dewEntropy\"> dewEntropy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dDewEntropy_dPressure;

      function dDewEntropy_dPressure_der_sat
        "Time derivative of vapor specific entropy in two-phase region w.r.t pressure | use setState_phX function for input"
        extends Modelica.Icons.Function;

        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        input SaturationProperties der_sat "Derivative of saturation properties";
        output Real der_dsvdp
          "Derivative of vapor specific entropy in two-phase region w.r.t pressure";
      protected
        constant Real sv_coef[:, :]=R134aData.svcoef
          "Coefficients of cubic spline for s_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        der_dsvdp := R134aData.data.SCRIT*Common.CubicSplineDerEval(localx,
          sv_coef[int, 1:4])/R134aData.data.FPCRIT*der_sat.psat;

        annotation (Documentation(info="<html>
<p>This function calculates the time derivative of vapor specific entropy of R134a with regard to the time derivative of p. The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.dewEntropy\"> dewEntropy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dDewEntropy_dPressure_der_sat;

      redeclare function extends bubbleEntropy
        "Specific entropy of liquid phase w.r.t saturation pressure | use setSat_p function for input"
      protected
        constant Real sl_coef[:, :]=R134aData.slcoef
          "Coefficients of cubic spline for s_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        sl := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sl_coef[int, 1:
          4]);

        // annotation(smoothOrder=5);
        annotation (derivative=dBubbleEntropy_dPressure_der_sat, Documentation(
              info="<html>
<p>This function calculates the liquid phase entropy of R134a from the state variable p (absolute pressure). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from
the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end bubbleEntropy;

      function dBubbleEntropy_dPressure
        "Derivative of liquid specific entropy in two-phase region w.r.t pressure | use setState_phX function for input"
        extends Modelica.Icons.Function;
        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        output Real dsldp
          "Derivative of liquid specific entropy in two-phase region w.r.t pressure";
      protected
        constant Real sl_coef[:, :]=R134aData.slcoef
          "Coefficients of cubic spline for s_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        dsldp := R134aData.data.SCRIT*Common.CubicSplineDerEval(localx, sl_coef[
          int, 1:4])/R134aData.data.FPCRIT;

        annotation (Documentation(info="<html>
<p>This function calculates the derivative of liquid entropy of R134a with regard to the state variable p (absolute pressure). The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.bubbleEntropy\"> bubbleEntropy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dBubbleEntropy_dPressure;

      function dBubbleEntropy_dPressure_der_sat
        "Time derivative of liquid specific entropy in two-phase region w.r.t pressure | use setState_phX function for input"
        extends Modelica.Icons.Function;
        input SaturationProperties sat
          "Saturation properties | pressure is used for interpolation";
        input SaturationProperties der_sat "Derivative of saturation properties";
        output Real der_dsldp
          "Derivative of liquid specific entropy in two-phase region w.r.t pressure";
      protected
        constant Real sl_coef[:, :]=R134aData.slcoef
          "Coefficients of cubic spline for s_liq(p)";
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        pred := min(sat.psat/R134aData.data.FPCRIT, 1.0);
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        der_dsldp := R134aData.data.SCRIT*Common.CubicSplineDerEval(localx,
          sl_coef[int, 1:4])/R134aData.data.FPCRIT*der_sat.psat;

        annotation (Documentation(info="<html>
<p>This function calculates the time derivative of liquid specific entropy of R134a with regard to the time derivative of p. The non-derivative function is <a href=\"modelica://Modelica.Media.R134a.R134a_ph.bubbleEntropy\"> bubbleEntropy</a>.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
</html>"));
      end dBubbleEntropy_dPressure_der_sat;

      redeclare function extends saturationPressure
        "Saturation pressure w.r.t. temperature"

      protected
        constant Real pt_coef[:, :]=R134aData.ptcoef
          "Coefficients of cubic spline for psat(T)";
        constant Real T_breaks[:]=R134aData.Tbreaks
          "Grid points of reduced pressure";
        Real Tred "Reduced temperature";
        Integer int "Interval number";
        Integer error "Interval for spline interpolation not found";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
      algorithm
        Tred := T/R134aData.data.FTCRIT;
        (int,error) := Common.FindInterval(Tred, T_breaks);
        localx := Tred - T_breaks[int];
        p := R134aData.data.FPCRIT*Common.CubicSplineEval(localx, pt_coef[int, :]);

        annotation (smoothOrder=5, Documentation(info="<html>
<p>This function calculates the saturation pressure of R134a from the state variable T (temperature). It is modelled by cubic splines which are fitted with non-equidistant grid points derived from the fundamental equation of state of Tillner-Roth and Baehr (1994) and the Maxwell criteria.
</p>
<h4> Restrictions</h4>
<p>It is only valid in the two-phase region (i.e., p<sub>triple</sub> &le; p &le; p<sub>crit</sub> ).
</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)Tsat-Diagram-R134a.png\"/></p>
</html>"));
      end saturationPressure;

      redeclare function extends specificHeatCapacityCp
        "Specific heat capacity at constant pressure | turns infinite in two-phase region! | use setState_phX function for input"

      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";

      algorithm
        f := f_R134a(state.d, state.T);
        cp := if getPhase_ph(state.p, state.h) == 2 then 0 else R134aData.R*(-f.tau
          *f.tau*f.ftautau + (f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)^2/(2*
          f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));

        annotation (Documentation(info="<html>
<p> This function calculates the specific heat capacity of R134a at <strong>constant pressure</strong> from the state record (e.g., use setState_phX function for input). The specific heat capacity is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<h4> Restrictions</h4>
<p>This property is only defined in one-phase region.
</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)cp-Diagram-R134a.png\"/></p>
</html>"));
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Specific heat capacity at constant volume | use setState_phX function for input"

      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
        Common.PhaseBoundaryProperties liq "Properties on liquid phase boundary";
        SaturationProperties sat "Saturation temperature and pressure";
        Common.PhaseBoundaryProperties vap "Properties on vapor phase boundary";

        Modelica.SIunits.MassFraction x "Vapor quality";

      algorithm
        if getPhase_ph(state.p, state.h) == 2 then
          sat.psat := state.p;
          sat.Tsat := saturationTemperature(state.p);
          liq := R134a_liqofdT(T=state.T);
          vap := R134a_vapofdT(T=state.T);
          x := if liq.h <> vap.h then (state.h - liq.h)/(vap.h - liq.h) else if
            state.h >= vap.h then 1 else 0;
          cv := Common.cv2Phase(
                liq=liq,
                vap=vap,
                x=x,
                T=state.T,
                p=state.p);
        else
          f := f_R134a(state.d, state.T);
          cv := R134aData.R*(-f.tau*f.tau*f.ftautau);
        end if;

        annotation (Documentation(info="<html>
<p> This function calculates the specific heat capacity of R134a at <strong>constant volume</strong> from the state record (e.g., use setState_phX function for input). The specific heat capacity is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<p>
Please note, that the function can also be called in the two-phase region, but the output is not continuous for a phase transition (see Tillner-Roth and Baehr, 1994). Values in two-phase region are considerably higher than in one-phase domain. The following figure just shows one-phase properties.
</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)cv-Diagram-R134a.png\"/></p>
</html>"));
      end specificHeatCapacityCv;

      redeclare function extends dynamicViscosity
        "Dynamic viscosity w.r.t. temperature and density | use setState_phX function for input"

      protected
        Real omega_log "Log of collision integral";
        Real omega "Collision integral";

        constant Real K=0.021357 "Constant for low density term eta_star";
        constant Modelica.SIunits.Length sigma=0.50647e-09 "Hard-sphere diameter";
        constant Modelica.SIunits.Temperature epsilon_k=288.82 "Empirical factor";
        constant Real a[5]={2.218816e-01,-5.079322e-01,1.285776e-01,-8.328165e-02,
            -2.713173e-02} "Coefficients for term of collision integral";
        constant Real b[13]={-1.7999496,4.6692621e+01,-5.3460794e+02,
            3.3604074e+03,-1.3019164e+04,3.3414230e+04,-5.8711743e+04,
            7.1426686e+04,-5.9834012e+04,3.3652741e+04,-1.2027350e+04,
            2.4348205e+03,-2.0807957e+02}
          "Coefficients for term of 2nd viscosity virial coefficient";
        constant Real c[6]={-0.331249e-01,-0.468509e-03,0.156983,3.073830,-0.306398,
            0.215221} "Coefficients for term of residual viscosity";
        constant Real DCRIT_mol=4.9788 "Critical density in mol/l";
        Real d_red "Reduced density";
        Real B_eta "2nd viscosity virial coeff.";
        Real E "Temperature contribution to residual viscosity";
        Real eta_res "Residual part";
        Real eta_star "Dilute part";

      algorithm
        omega_log := 0;
        for i in 1:5 loop
          omega_log := omega_log + a[i]*(Modelica.Math.log(state.T/epsilon_k))^(i
             - 1);
        end for;
        omega := Modelica.Math.exp(omega_log);
        eta_star := (K*sqrt(R134aData.data.MM*1000))/((sigma*1e+09)^2*omega)*sqrt(
          state.T);

        d_red := state.d/R134aData.data.DCRIT;
        E := 1 + c[3]*state.T/R134aData.data.TCRIT;
        B_eta := 0;
        for i in 1:13 loop
          B_eta := B_eta + b[i]*(sqrt(state.T/epsilon_k))^(i - 1);
        end for;
        B_eta := B_eta*602.2137*(sigma)^3*DCRIT_mol;

        eta_res := (c[1] + B_eta*eta_star)*d_red + c[2]*d_red^2 + (c[5] + c[6]*
          d_red)/(c[4]*E - d_red) - c[5]/(c[4]*E);

        eta := (eta_star + eta_res*1e3)*1e-06;

        annotation (Documentation(info="<html>
<p> This function calculates the dynamic viscosity of R134a from the state record (e.g., use setState_phX function for input). The dynamic viscosity is modelled by the corresponding states method of Klein, McLinden and Laesecke (1997).</p>
<h4> Restrictions</h4>
<p>This property is only defined in one-phase region.
</p>
<h4>References</h4>
<dl><dt>Klein, McLinden and Laesecke: </dt>
<dd><strong>An improved extended corresponding states method for estimation of viscosity of pure refrigerants and mixtures</strong>.
Int. J. Refrig., Vol. 20, No.3, pp. 208-217, 1997.</dd>
</dl>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)eta-Diagram-R134a.png\"/></p>
</html>"));
      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Thermal conductivity w.r.t. thermodynamic state | use setState_phX function for input"

      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
        myMedia.Common.HelmholtzDerivs f_ref "Helmholtz derivatives for reference state";
        Modelica.SIunits.ThermalConductivity lambda_dg
          "Dilute gas contribution to lambda";
        R134aData.CoeffsThermalConductivity coeff
          "Coefficients of thermal conductivity model";
        Modelica.SIunits.ThermalConductivity lambda_reduced "Reduced lambda";
        Modelica.SIunits.ThermalConductivity lambda_crit
          "Enhancement of lambda in the critical region";
        Modelica.SIunits.ThermalConductivity chi_star "Correlation length";
        Modelica.SIunits.ThermalConductivity chi_star_ref "Correlation length";
        Modelica.SIunits.ThermalConductivity delta_chi "Chi_star - chi_star_ref";
        Real rho_molar "Molar density [mol/l]";
        Real dddp "Derivative of density w.r.t. pressure";
        Real dddp_ref "Derivative of density w.r.t. pressure for reference state";
        Modelica.SIunits.Length xi "Correlation length";
        Modelica.SIunits.SpecificHeatCapacity cp
          "Specific heat capacity at constant pressure";
        Modelica.SIunits.SpecificHeatCapacity cv
          "Specific heat capacity at constant volume";
        Modelica.SIunits.DynamicViscosity eta "Dynamic viscosity";
        Modelica.SIunits.ThermalConductivity omega "Crossover function";
        Modelica.SIunits.ThermalConductivity omega_0 "Crossover function";

      algorithm
        f := f_R134a(state.d, state.T);
        f_ref := f_R134a(state.d, coeff.T_ref);

        // dilute gas contribution
        lambda_dg := coeff.a_0 + coeff.a_1*state.T;

        // reduced lambda
        rho_molar := state.d/(R134aData.data.MM*1000);
        // [mol/L]
        lambda_reduced := 0;
        for i in 1:4 loop
          lambda_reduced := lambda_reduced + coeff.b[i]*(rho_molar/coeff.rho_crit)
            ^i;
        end for;
        lambda_reduced := lambda_reduced*coeff.lambda_reducing;

        // critical lambda
        dddp := 1/(f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta));
        chi_star := state.d*coeff.p_crit*1e3/((coeff.rho_crit*R134aData.data.MM*
          1000)^2)*dddp;
        dddp_ref := 1/(f_ref.R*f_ref.T*f_ref.delta*(2.0*f_ref.fdelta + f_ref.delta
          *f_ref.fdeltadelta));
        chi_star_ref := state.d*coeff.p_crit*1e3/((coeff.rho_crit*R134aData.data.MM
          *1000)^2)*dddp_ref;
        delta_chi := max(1e-10, (chi_star - chi_star_ref));
        xi := coeff.xi_0*(1/coeff.GAMMA*(delta_chi))^(coeff.nu/coeff.gamma);
        cp := R134aData.data.R*(-f.tau*f.tau*f.ftautau + (f.delta*f.fdelta - f.delta
          *f.tau*f.fdeltatau)^2/(2*f.delta*f.fdelta + f.delta*f.delta*f.fdeltadelta));
        eta := dynamicViscosity(state=state);
        cv := specificHeatCapacityCv(state=state);
        omega := 2/Modelica.Constants.pi*(((cp - cv)/cp)*Modelica.Math.atan(coeff.q_d
          *xi) + cv/cp*coeff.q_d*xi);
        omega_0 := 2/Modelica.Constants.pi*(1 - Modelica.Math.exp(-1/((coeff.q_d*
          xi)^(-1) + 1/3*(coeff.q_d*xi*coeff.rho_crit/(state.d/(R134aData.data.MM
          *1000)))^2)));
        lambda_crit := state.d*cp*(1.03*Modelica.Constants.k*state.T)/(6*Modelica.Constants.pi
          *eta*xi)*(omega - omega_0);

        // conclusion
        lambda := max(lambda_dg + lambda_reduced + lambda_crit, 1e-8);

        annotation (Documentation(info="<html>
<p> This function calculates the thermal conductivity of R134a from the state record (e.g., use setState_phX function for input). The thermal conductivity is modelled by the corresponding states model of McLinden, Klein. and Perkins (2000).</p>
<h4> Restrictions</h4>
<p>This property is only defined in one-phase region.
</p>
<h4>References</h4>
<dl><dt>McLinden, Klein. and Perkins: </dt>
<dd><strong>An extended corresponding states model for the thermal conductivity
of refrigerants and refrigerant mixtures</strong>.
Int. J. Refrig., 23 (2000) 43-63.</dd>
</dl>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)lambda-Diagram-R134a.png\"/></p>
</html>"));
      end thermalConductivity;

      redeclare function extends surfaceTension
        "Surface tension as a function of temperature (below critical point)"

      protected
        Real tau "Reduced temperature";
        R134aData.CoeffsSurfaceTension coeff "Polynomial coefficients";
        Modelica.SIunits.Temperature Tc=374.21 "Critical temperature";

      algorithm
        if sat.Tsat > Tc then
          tau := 0.0;
          sigma := 0.0;
        else
          tau := 1.0 - sat.Tsat/Tc;
          sigma := 0.0;
          for i in 1:coeff.nterm loop
            sigma := sigma + coeff.sigmak[i]*tau^coeff.sigexp[i];
          end for;
        end if;

        annotation (Documentation(info="<html>
<p> This function calculates the surface tension of R134a from the saturation record (e.g., use setSat_T function for input). The property is modelled by an approach of Okada and Higashi (1994).</p>
<h4> Restrictions</h4>
<p>This property is only defined in two-phase region.
</p>
<h4>References</h4>
<dl><dt>Okada and Higashi: </dt>
<dd><strong>Surface tension correlation of HFC-134a and HCFC-123</strong>.
Proceedings of the Joint Meeting of IIR Commissions B1, B2, E1, and E2, Padua, Italy, pp. 541-548, 1994.</dd>
</dl>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/Tsigma-Diagram-R134a.png\"/></p>
</html>"));
      end surfaceTension;

      redeclare function extends velocityOfSound
        "Velocity of sound w.r.t. thermodynamic state (only valid for one-phase)"
      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
      algorithm

        if getPhase_ph(state.p, state.h) == 2 then
          a := 0;
          // assert(getPhase_ph(state.p, state.h)==1, "Function for velocity of sound is only valid for one-phase regime!");
        else
          f := f_R134a(state.d, state.T);
          a := abs(R134aData.data.R*state.T*(2*f.delta*f.fdelta + f.delta*f.delta
            *f.fdeltadelta - ((f.delta*f.fdelta - f.delta*f.tau*f.fdeltatau)*(f.delta
            *f.fdelta - f.delta*f.tau*f.fdeltatau))/(f.tau*f.tau*f.ftautau)))^0.5;
        end if;
        annotation (Documentation(info="<html>
<p> This function calculates the velocity of sound of R134a from the state record (e.g., use setState_phX function for input). The velocity of sound is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<h4> Restrictions</h4>
<p>This property is only defined in one-phase region.
</p>
<p><img src=\"modelica://Modelica/Resources/Images/Media/R134a/log(p)a-Diagram-R134a.png\"/></p>
</html>"));
      end velocityOfSound;

      redeclare function extends isothermalCompressibility
        "Isothermal compressibility w.r.t. thermodynamic state (only valid for one-phase)"
      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
      algorithm
        if getPhase_ph(state.p, state.h) == 2 then
          kappa := 0;
          // assert(getPhase_ph(state.p, state.h)==1, "Function for isothermal compressibility is only valid for one-phase regime!");
        else
          f := f_R134a(state.d, state.T);
          kappa := 1/(state.d*R134aData.data.R*state.T*f.delta*(2.0*f.fdelta + f.delta
            *f.fdeltadelta));
        end if;
        annotation (Documentation(info="<html>
<p> This function calculates the isothermal compressibility of R134a from the state record (e.g., use setState_phX function for input). The isothermal compressibility is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<h4> Restrictions</h4>
<p>This property is only defined in one-phase region.
</p>
</html>"));
      end isothermalCompressibility;

      redeclare function extends isobaricExpansionCoefficient
        "Isobaric expansion coefficient w.r.t. thermodynamic state (only valid for one-phase)"
      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
      algorithm
        if getPhase_ph(state.p, state.h) == 2 then
          beta := 0;
          // assert(getPhase_ph(state.p, state.h)==1, "Function for isobaric expansion coefficient is only valid for one-phase regime!");
        else
          f := f_R134a(state.d, state.T);
          beta := R134aData.data.R*state.d*f.delta*(f.fdelta - f.tau*f.fdeltatau)
            *isothermalCompressibility(state);
        end if;
        annotation (Documentation(info="<html>
<p> This function calculates the isobaric expansion coefficient of R134a from the state record (e.g., use setState_phX function for input). The isobaric expansion coefficient is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<h4> Restrictions</h4>
<p>This property is only defined in one-phase region.
</p>
</html>"));
      end isobaricExpansionCoefficient;

      redeclare function extends isentropicExponent
        "Isentropic exponent gamma w.r.t. thermodynamic state | not defined in two-phase region | use setState_phX function for input"

      algorithm
        gamma := density(state)/(if pressure(state) > 1e-6 then pressure(state)
           else 1e-6)*velocityOfSound(state)^2;

        annotation (Inline=true, Documentation(info="<html>
<p> This function calculates the isentropic exponent of R134a from the state record (e.g., use setState_phX function for input). The isentropic exponent is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).</p>
<h4> Restrictions</h4>
<p>This property is only defined in one-phase region.
</p>
</html>"));
      end isentropicExponent;

      redeclare function extends specificGibbsEnergy
        "Specific gibbs energy w.r.t. thermodynamic state"
      algorithm
        g := state.h - state.T*specificEntropy(state);
        annotation (Documentation(info="<html>
<p> This function calculates the specific Gibbs energy of R134a from the state record (e.g., use setState_phX function for input). The isentropic exponent is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).
</p>
</html>"));
      end specificGibbsEnergy;

      redeclare function extends specificHelmholtzEnergy
        "Helmholtz energy w.r.t. thermodynamic state"
      algorithm
        f := state.h - state.p/state.d - state.T*specificEntropy(state);
        annotation (Documentation(info="<html>
<p> This function calculates the specific Helmholtz energy of R134a from the state record (e.g., use setState_phX function for input). The Helmholtz energy is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994).
</p>
</html>"));
      end specificHelmholtzEnergy;

      redeclare function extends density_derh_p
        "Density derivative by specific enthalpy | use setState_phX function for input"

      protected
        Common.InverseDerivatives_rhoT derivs
          "Inverse derivatives for density and temperature";

      algorithm
        derivs := derivsOf_ph(
              state.p,
              state.h,
              getPhase_ph(p=state.p, h=state.h));
        ddhp := if getPhase_ph(p=state.p, h=state.h) == 2 then -state.d*state.d/(
          derivs.dpT*state.T) else -state.d*state.d*derivs.pt/(state.d*state.d*
          derivs.pd*derivs.cv + state.T*derivs.pt^2);

        annotation (Documentation(info="<html>
<p> This function calculates the density derivative w.r.t. specific enthalpy at constant pressure of R134a (e.g., use setState_phX function for input). The derivative is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994). It can be used for manual state transformations (e.g. from density to specific enthalpy).
</p>
</html>"));
      end density_derh_p;

      redeclare function extends density_derp_h
        "Density derivative by pressure | use setState_phX function for input"

      protected
        Common.InverseDerivatives_rhoT derivs
          "Inverse derivatives for density and temperature";

      algorithm
        derivs := derivsOf_ph(
              state.p,
              state.h,
              getPhase_ph(p=state.p, h=state.h));
        ddph := if getPhase_ph(p=state.p, h=state.h) == 2 then state.d*(state.d*
          derivs.cv/derivs.dpT + 1)/(derivs.dpT*state.T) else (state.d*(derivs.cv
          *state.d + derivs.pt))/(state.d*state.d*derivs.pd*derivs.cv + state.T*
          derivs.pt^2);

        annotation (Documentation(info="<html>
<p> This function calculates the density derivative w.r.t. absolute pressure at constant specific enthalpy of R134a (e.g., use setState_phX function for input). The derivative is modelled by the fundamental equation of state of Tillner-Roth and Baehr (1994). It can be used for manual state transformations (e.g. from density to pressure).
</p>
</html>"));
      end density_derp_h;

      redeclare function extends isentropicEnthalpy
        "Isentropic enthalpy of downstream pressure and upstream thermodynamic state (specific entropy)"
      algorithm
        h_is := specificEnthalpy_psX(
              p_downstream,
              specificEntropy(refState),
              reference_X);
        annotation (Documentation(info="<html>
<p>
This function calculates the specific enthalpy of R134a for an isentropic pressure change
from refState.p to p_downstream (e.g., use setState_phX function for input of refState).
</p>

<p>
The function can be used for instance to calculate an isentropic efficiency
of a compressor or calculate the power consumption (obtained from the isentropic enthalpy)
for a given efficiency.
</p>

<p>
Example:
</p>
<pre>
     Medium.AbsolutePressure p_downstream=10e5;
     Medium.SpecificEnthalpy h_downstream=4.1e5;
     Medium.AbsolutePressure p_upstream=3e5;
     Medium.SpecificEnthalpy h_upstream=4.0e5;

     // Isentropic efficiency of a compressor:
     Real eta_is;

    equation

     h_is = isentropicEnthalpy(p_downstream, Medium.setState_phX(p_upstream, h_upstream));

     eta_is = (h_is-h_upstream)/(h_downstream - h_upstream);
</pre>

<h4>Restrictions</h4>
<p>
The isentropic efficiency function should not be applied in liquid region.
</p>
</html>"));
      end isentropicEnthalpy;

      function derivsOf_ph
        "Derivatives required for inversion of temperature and density functions"

        extends Modelica.Icons.Function;

        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input Integer phase "Number of phases";
        output Common.InverseDerivatives_rhoT derivs
          "Inverse derivatives for density and temperature";

      protected
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
        SaturationProperties sat "Saturation temperature and pressure";
        Common.PhaseBoundaryProperties liq "Properties on liquid phase boundary";
        Common.PhaseBoundaryProperties vap "Properties on vapor phase boundary";
        myMedia.Common.NewtonDerivatives_ph newder "Newton derivatives";
        Real x "Vapor quality";
        Real dxv "1/(v_vap - v_liq)";
      algorithm
        derivs.p := p;
        derivs.h := h;
        derivs.phase := getPhase_ph(p, h);

        sat.psat := p;
        sat.Tsat := saturationTemperature(p);

        (derivs.rho,derivs.T) := dt_ph(p=p, h=h);

        if derivs.phase == 2 then
          liq := R134a_liqofdT(T=derivs.T);
          vap := R134a_vapofdT(T=derivs.T);
          x := if liq.h <> vap.h then (h - liq.h)/(vap.h - liq.h) else if h >=
            vap.h then 1 else 0;
          derivs.cv := Common.cv2Phase(
                liq=liq,
                vap=vap,
                x=x,
                p=p,
                T=derivs.T);
          dxv := if (liq.d <> vap.d) then liq.d*vap.d/(liq.d - vap.d) else 0.0;
          derivs.dpT := (vap.s - liq.s)*dxv;
        else
          f := f_R134a(d=derivs.rho, T=derivs.T);
          f.d := derivs.rho;
          f.T := derivs.T;
          f.R := R134aData.R;
          newder := myMedia.Common.Helmholtz_ph(f=f);
          derivs.cv := -f.R*(f.tau*f.tau*f.ftautau);
          derivs.pd := newder.pd;
          derivs.pt := newder.pt;
          //derivs.dpT := 0;
        end if;

        annotation (Documentation(info="<html>
<p> This function calculates the derivatives required for an inversion of temperature and density function.
</p>
</html>"));
      end derivsOf_ph;

      function dt_ph
        "Density and temperature w.r.t. pressure and specific enthalpy"

        extends Modelica.Icons.Function;

        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        output Density d "Density";
        output Temperature T "Temperature";
      protected
        SaturationProperties sat(psat=p, Tsat=0)
          "Saturation temperature and pressure";
        Modelica.SIunits.Pressure delp=1.0e-2 "Relative error in p in iteration";
        Modelica.SIunits.SpecificEnthalpy delh=1.0e-2
          "Relative error in h in iteration";
        Modelica.SIunits.SpecificEnthalpy hvapor=dewEnthalpy(sat=sat)
          "Vapor enthalpy";
        Modelica.SIunits.SpecificEnthalpy hliquid=bubbleEnthalpy(sat=sat)
          "Liquid enthalpy";
        Integer error "Iteration error";
        Real x "Vapor quality";
        Real vvap "Specific volume vapor";
        Real vliq "Specific volume liquid";
      algorithm
        if ((h < hliquid) or (h > hvapor) or (p > R134aData.data.FPCRIT)) then
          (d,T,error) := myMedia.R134a.R134a_ph.dtofphOnePhase(
                  p,
                  h,
                  delp,
                  delh);
        else
          vvap := 1/dewDensity(sat=sat);
          vliq := 1/bubbleDensity(sat=sat);
          x := (h - hliquid)/(hvapor - hliquid);
          error := 0;
          T := saturationTemperature(p);
          d := 1/(vliq + x*(vvap - vliq));
        end if;

        annotation (Documentation(info="<html>
<p> This function calculates the density and temperature of R134a from absolute pressure and specific enthalpy. In one-phase region the function calls the fundamental Helmholtz equation of Tillner-Roth (1994). In two-phase the density and temperature is computed from cubic splines for saturated pressure, liquid and vapor density.
</p>
<h4>Restrictions</h4>
The function cannot be inverted in a numerical way. Please use functions <a href=\"modelica://Modelica.Media.R134a.R134a_ph.rho_props_ph\">rho_props_ph</a> and <a href=\"modelica://Modelica.Media.R134a.R134a_ph.T_props_ph\">T_props_ph</a> for this purpose.
</html>"));
      end dt_ph;

      function dtofphOnePhase
        "Density and temperature w.r.t. pressure and specific enthalpy in one-phase region"

        extends Modelica.Icons.Function;

        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Enthalpy";
        input AbsolutePressure delp "Absolute error in p in iteration";
        input SpecificEnthalpy delh "Absolute error in h in iteration";

        output Density d "Density";
        output Temperature T "Temperature";
        output Integer error "1 if did not converged";

      protected
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        constant Real hl_coef[:, 4]=R134aData.hlcoef
          "Coefficients of cubic spline for h_liq(p)";
        constant Real dl_coef[:, 4]=R134aData.dlcoef
          "Coefficients of cubic spline for rho_liq(p)";
        constant Real T_coef[:, 4]=R134aData.Tcoef
          "Coefficients of cubic spline for Tsat(p)";
        constant Real dv_coef[:, 4]=R134aData.dvcoef
          "Coefficients of cubic spline for rho_vap(p)";

        Modelica.SIunits.SpecificEnthalpy hl "Liquid enthalpy";
        Boolean liquid "Is liquid";
        Boolean supercritical "Is supercritical";
        Integer int "Interval number";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
        Integer i "Newton iteration number";
        Real dh "Difference in h";
        Real dp "Difference in p";
        Real damping "Damping constant";
        Real det "Determinant";
        Real deld "Density change";
        Real delt "Temperature change";
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
        myMedia.Common.NewtonDerivatives_ph nDerivs "Newton derivatives";
        Boolean found "Iteration converged";
      algorithm
        i := 0;
        error := 0;
        found := false;
        damping := 1.0;
        //by default no damping
        pred := p/R134aData.data.FPCRIT;
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        // set decent initial guesses for d and T
        supercritical := p > R134aData.data.FPCRIT;
        if supercritical then
          // iteration seems to work better if coming from high densities
          d := R134aData.data.FDCRIT*3.0;
          //      dTR.T := data.TCRIT + 10.0;
          // linear approximation that can be made generic
          T := 270.0 + 120.0*(h/R134aData.data.HCRIT);
        else
          liquid := h < 1.01*R134aData.data.HCRIT*Common.CubicSplineEval(localx,
            hl_coef[int, 1:4]);
          if liquid then
            damping := 0.3;
            //damping on the liquid side
            d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dl_coef[int,
              1:4])*1.02;
            T := Common.CubicSplineEval(localx, T_coef[int, 1:4]);
          else
            d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dv_coef[int,
              1:4])*0.95;
            T := Common.CubicSplineEval(localx, T_coef[int, 1:4]);
          end if;
        end if;

        // the Newton iteration
        while ((i < 50) and not found) loop
          f := f_R134a(d, T);
          // nDerivs are the symbolic derivatives needed in the iteration
          // for given d and T
          nDerivs := myMedia.Common.Helmholtz_ph(f);
          dh := nDerivs.h - h;
          dp := nDerivs.p - p;
          if ((abs(dh) <= delh) and (abs(dp) <= delp)) then
            found := true;
            error := if not found then 1 else 0;
          end if;
          det := nDerivs.ht*nDerivs.pd - nDerivs.pt*nDerivs.hd;
          if abs(det) < 1e-10 then
            det := sign(det)*1e-10;
          end if;
          delt := (nDerivs.pd*dh - nDerivs.hd*dp)/det;
          deld := (nDerivs.ht*dp - nDerivs.pt*dh)/det;
          T := T - damping*delt;
          d := d - damping*deld;
          // Check for limit of state variables
          if T < R134aData.triple.TTRIPLE then
            T := R134aData.triple.TTRIPLE + 0.1;
          end if;
          if d <= 0.0 then
            d := R134aData.triple.DVTRIPLE;
          elseif d > 1.5*R134aData.triple.DLTRIPLE then
            d := R134aData.triple.DLTRIPLE;
          end if;
          i := i + 1;
        end while;

        annotation (Documentation(info="<html>
<p> This function calculates the density and temperature of R134a from absolute pressure and specific enthalpy in one-phase region. The function calls the fundamental Helmholtz equation of Tillner-Roth (1994) which is requiring density and temperature for input. Thus, a newton iteration is performed to determine density and temperature. The newton iteration stops if the inputs for pressure difference delp and specific enthalpy difference delh are larger than the actual differences derived from the newton iteration.
</p>
<h4>Restrictions</h4>
The function shall only be used for one-phase inputs since the fundamental equation is not valid for two-phase states.
</html>"));
      end dtofphOnePhase;

      function dtofpsOnePhase
        "Inverse iteration in one phase region (d,T) = f(p,s)"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input AbsolutePressure delp "Absolute iteration accuracy";
        input SpecificEntropy dels "Absolute iteration accuracy";
        output Density d "Density";
        output Temperature T "Temperature";
        output Integer error "Error flag: trouble if different from 0";

      protected
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        constant Real dl_coef[:, 4]=R134aData.dlcoef
          "Coefficients of cubic spline for rho_liq(p)";
        constant Real dv_coef[:, 4]=R134aData.dvcoef
          "Coefficients of cubic spline for rho_vap(p)";
        constant Real sl_coef[:, 4]=R134aData.slcoef
          "Coefficients of cubic spline for s_liq(p)";
        constant Real sv_coef[:, 4]=R134aData.svcoef
          "Coefficients of cubic spline for s_vap(p)";
        constant Real T_coef[:, 4]=R134aData.Tcoef
          "Coefficients of cubic spline for Tsat(p)";
        Integer i "Newton iteration number";
        Real ds "Difference in s";
        Real dp "Difference in p";
        Real det "Determinant";
        Real deld "Density change";
        Real delt "Temperature change";
        myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. dimensionless d and T";
        myMedia.Common.NewtonDerivatives_ps nDerivs "Newton derivatives";
        Boolean liquid "Is liquid";
        Boolean supercritical "Is supercritical";
        Boolean found "Iteration converged";
        Integer int "Interval number";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
        Real sl "Liquid entropy";
        Real sv "Vapor entropy";
      algorithm
        i := 0;
        error := 0;
        found := false;
        pred := p/R134aData.data.FPCRIT;
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        // set decent initial guesses for d and T
        supercritical := p > R134aData.data.FPCRIT;
        if supercritical then
          d := R134aData.data.FDCRIT + 500.0;
          T := R134aData.data.FTCRIT + 10.0;
        else
          sl := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sl_coef[int,
            1:4]);
          sv := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sv_coef[int,
            1:4]);
          liquid := s < sl;
          if liquid then
            d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dl_coef[int,
              1:4])*1.1;
            //1.05
            T := Common.CubicSplineEval(localx, T_coef[int, 1:4])*0.9;
            //0.95
          else
            d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dv_coef[int,
              1:4])*0.8;
            //0.9
            T := Common.CubicSplineEval(localx, T_coef[int, 1:4])*1.1 + 0.5*(s -
              sv);
          end if;
        end if;

        while ((i < 100) and not found) loop
          f := f_R134a(d=d, T=T);
          nDerivs := myMedia.Common.Helmholtz_ps(f);
          ds := nDerivs.s - s;
          dp := nDerivs.p - p;
          if ((abs(ds/s) <= dels) and (abs(dp/p) <= delp)) then
            found := true;
          end if;
          det := nDerivs.st*nDerivs.pd - nDerivs.pt*nDerivs.sd;
          delt := (nDerivs.pd*ds - nDerivs.sd*dp)/det;
          deld := (nDerivs.st*dp - nDerivs.pt*ds)/det;
          T := T - delt;
          d := d - deld;
          i := i + 1;
        end while;
        if not found then
          error := 1;
        end if;

        annotation (Documentation(info="<html>
<p> This function calculates the density and temperature of R134a from absolute pressure and specific entropy in one-phase region. The function calls the fundamental helmholtz equation of Tillner-Roth (1994) which is requiring density and temperature for input. Thus, a newton iteration is performed to determine density and temperature. The newton iteration stops if the inputs for pressure difference delp and specific entropy difference dels are larger than the actual differences derived from the newton iteration.
</p>
<h4>Restrictions</h4>
The function shall only be used for one-phase inputs since the fundamental equation is not valid for two-phase states. The iteration could fail for liquid states with high pressures.
</html>"));
      end dtofpsOnePhase;

      function f_R134a
        "Calculation of helmholtz derivatives by density and temperature"
        extends Modelica.Icons.Function;

        input Density d "Density";
        input Temperature T "Temperature";
        output myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
      protected
        Real delta "Reduced density";
        Real tau "Reduced temperature";
        myMedia.Common.HelmholtzDerivs fid "Helmholtz derivstives";

      algorithm
        delta := d/R134aData.data.DCRIT;
        tau := R134aData.data.TCRIT/T;
        fid := fid_R134a(delta=delta, tau=tau);
        f := fres_R134a(delta=delta, tau=tau);
        f.f := f.f + fid.f;
        f.fdelta := f.fdelta + fid.fdelta;
        f.fdeltadelta := f.fdeltadelta + fid.fdeltadelta;
        f.ftau := f.ftau + fid.ftau;
        f.ftautau := f.ftautau + fid.ftautau;
        f.d := d;
        f.T := T;
        f.R := R134aData.R;

        annotation (Documentation(info="<html>
This function adds the ideal gas contribution of the fundamental equation to the residual contribution and computes the helmholtz derivatives w.r.t. temperature and density.
</html>"));
      end f_R134a;

      function fid_R134a "Helmholtz coefficients of ideal part"
        extends Modelica.Icons.Function;

        input Real delta "Reduced density (delta=d/dcrit)";
        input Real tau "Reduced temperature (tau=Tcrit/T)";
        output myMedia.Common.HelmholtzDerivs fid "Helmholtz derivatives of ideal part";
      protected
        myMedia.R134a.R134aData.Ideal id "Ideal coeffcients";
        Real atau=abs(tau) "|tau|";
        Real adelta=abs(delta) "|delta|";
      algorithm
        fid.delta := delta;
        fid.tau := tau;
        fid.f := Modelica.Math.log(adelta) + id.a[1] + id.a[2]*atau + id.a[3]*
          Modelica.Math.log(atau) + id.a[4]*atau^(-0.5) + id.a[5]*atau^(-0.75);
        fid.fdelta := 1.0/adelta;
        fid.fdeltadelta := -1.0/(adelta*adelta);
        fid.ftau := id.a[2] + id.a[3]/atau - 0.5*id.a[4]*atau^(-1.5) - 0.75*id.a[
          5]*atau^(-1.75);
        fid.ftautau := -id.a[3]/(atau*atau) + 0.75*id.a[4]*atau^(-2.5) + 1.3125*
          id.a[5]*atau^(-2.75);
        fid.fdeltatau := 0.0;
        fid.d := fid.delta*R134aData.data.DCRIT;
        fid.T := R134aData.data.TCRIT/fid.tau;
        fid.R := R134aData.R;

        annotation (Documentation(info="<html>
This function computes the ideal gas helmholtz derivatives of the fundamental equation of Tillner-Roth and Baehr for R134a (1994) w.r.t. to reduced temperature (tau=T_crit/T) and reduced density (delta=rho/rho_crit).
</html>"));
      end fid_R134a;

      function fres_R134a "Calculation of helmholtz derivatives"
        extends Modelica.Icons.Function;

        input Real delta "Reduced density (delta=d/dcrit)";
        input Real tau "Reduced temperature (tau=Tcrit/T)";
        output myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
      protected
        myMedia.R134a.R134aData.Residual res "Residual coefficient";
        Real k "Helping var";
        Real dc "Helping var";
        Real cdc "Helping var";
      algorithm
        f.tau := abs(tau);
        f.delta := abs(delta);
        f.f := 0.0;
        f.ftau := 0.0;
        f.fdelta := 0.0;
        f.ftautau := 0.0;
        f.fdeltadelta := 0.0;
        f.fdeltatau := 0.0;
        for i in 1:res.ns1 loop
          k := res.n[i]*f.delta^res.d[i]*f.tau^res.t[i];
          f.f := f.f + k;
          f.fdelta := f.fdelta + k*res.d[i];
          f.fdeltadelta := f.fdeltadelta + k*res.d[i]*(res.d[i] - 1.0);
          f.ftau := f.ftau + k*res.t[i];
          f.ftautau := f.ftautau + k*res.t[i]*(res.t[i] - 1.0);
          f.fdeltatau := f.fdeltatau + k*res.t[i]*res.d[i];
        end for;
        for i in res.ns1 + 1:21 loop
          dc := f.delta^res.c[i];
          cdc := res.c[i]*dc;
          k := Modelica.Math.exp(-dc)*res.n[i]*delta^res.d[i]*f.tau^res.t[i];
          f.f := f.f + k;
          f.fdelta := f.fdelta + k*(res.d[i] - cdc);
          f.fdeltadelta := f.fdeltadelta + k*((res.d[i] - cdc)*(res.d[i] - 1.0 -
            cdc) - res.c[i]*cdc);
          f.ftau := f.ftau + k*res.t[i];
          f.ftautau := f.ftautau + k*res.t[i]*(res.t[i] - 1.0);
          f.fdeltatau := f.fdeltatau + k*res.t[i]*(res.d[i] - cdc);
        end for;
        f.fdelta := f.fdelta/delta;
        f.fdeltadelta := f.fdeltadelta/(delta*delta);
        f.ftau := f.ftau/tau;
        f.ftautau := f.ftautau/(tau*tau);
        f.fdeltatau := f.fdeltatau/(delta*tau);
        f.d := f.delta*R134aData.data.DCRIT;
        f.T := R134aData.data.TCRIT/f.tau;
        f.R := R134aData.R;

        annotation (Documentation(info="<html>
This function computes the residual helmholtz derivatives of the fundamental equation of Tillner-Roth and Baehr for R134a (1994) w.r.t. to reduced temperature (tau=T_crit/T) and reduced density (delta=rho/rho_crit). The function can be used for special properties depending just on the residual derivative parts.
</html>"));
      end fres_R134a;

      function getPhase_ph "Number of phases by pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";

        output Integer phase "Number of phases";

      protected
        SaturationProperties sat(psat=p, Tsat=0)
          "Saturation temperature and pressure";
        Modelica.SIunits.SpecificEnthalpy hl=bubbleEnthalpy(sat)
          "Liquid enthalpy";
        Modelica.SIunits.SpecificEnthalpy hv=dewEnthalpy(sat) "Vapor enthalpy";

      algorithm
        phase := if ((h < hl) or (h > hv) or (p > R134aData.data.FPCRIT)) then 1
           else 2;

        annotation (Documentation(info="<html>
This function computes the number of phases for R134a depending on the inputs for absolute pressure and specific enthalpy. It makes use of cubic spline functions for liquid and vapor specific enthalpy.
</html>"));
      end getPhase_ph;

      function getPhase_ps "Number of phases by pressure and entropy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output Integer phase "Number of phases";

      protected
        SaturationProperties sat(psat=p, Tsat=0)
          "Saturation temperature and pressure";
        Modelica.SIunits.SpecificEntropy sl=bubbleEntropy(sat) "Liquid entropy";
        Modelica.SIunits.SpecificEntropy sv=dewEntropy(sat) "Vapor entropy";

      algorithm
        phase := if ((s < sl) or (s > sv) or (p > R134aData.data.FPCRIT)) then 1
           else 2;

        annotation (Documentation(info="<html>
This function computes the number of phases for R134a depending on the inputs for absolute pressure and specific entropy. It makes use of cubic spline functions for liquid and vapor specific entropy.
</html>"));
      end getPhase_ps;

      function hofpsTwoPhase
        "Isentropic specific enthalpy in two phase region h(p,s)"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        output SpecificEnthalpy h "Specific enthalpy";

      protected
        SaturationProperties sat "Saturation temperature and pressure";
        Modelica.SIunits.MassFraction x "Vapor quality";
        Modelica.SIunits.SpecificEntropy sl "Liquid entropy";
        Modelica.SIunits.SpecificEntropy sv "Vapor entropy";
        Modelica.SIunits.SpecificEnthalpy hl "Liquid enthalpy";
        Modelica.SIunits.SpecificEnthalpy hv "Vapor enthalpy";
      algorithm
        sat.psat := p;
        // dummy
        sat.Tsat := 0;
        hl := bubbleEnthalpy(sat=sat);
        hv := dewEnthalpy(sat=sat);
        sl := bubbleEntropy(sat=sat);
        sv := dewEntropy(sat=sat);
        x := (s - sl)/(sv - sl);
        h := hl + x*(hv - hl);

        annotation (Documentation(info="<html>
This function computes the specific enthalpy in two-phase for R134a depending on the inputs for absolute pressure and specific entropy. It makes use of cubic spline functions for liquid and vapor specific enthalpy as well as specific entropy.
</html>"));
      end hofpsTwoPhase;

      function R134a_liqofdT "Properties on liquid boundary phase"

        extends Modelica.Icons.Function;

        input Temperature T "Temperature";

        output Common.PhaseBoundaryProperties liq
          "Properties on liquid boundary phase";
      protected
        Modelica.SIunits.Temperature T_liq "Liquid temperature";
        Modelica.SIunits.Density d_liq "Liquid density";
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
      algorithm
        if T < R134aData.data.TCRIT then
          d_liq := bubbleDensity(setSat_T(T));
          T_liq := T;
        else
          d_liq := R134aData.data.DCRIT;
          T_liq := R134aData.data.TCRIT;
        end if;
        f := f_R134a(d_liq, T_liq);
        liq := Common.helmholtzToBoundaryProps(f);

      end R134a_liqofdT;

      function R134a_vapofdT "Properties on vapor boundary phase"

        extends Modelica.Icons.Function;

        input Temperature T "Temperature";

        output Common.PhaseBoundaryProperties vap
          "Properties on vapor boundary phase";
      protected
        Modelica.SIunits.Temperature T_vap "Vapor temperature";
        Modelica.SIunits.Density d_vap "Vapor density";
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";
      algorithm
        if T < R134aData.data.TCRIT then
          d_vap := dewDensity(setSat_T(T));
          T_vap := T;
        else
          d_vap := R134aData.data.DCRIT;
          T_vap := R134aData.data.TCRIT;
        end if;
        f := f_R134a(d_vap, T_vap);
        vap := Common.helmholtzToBoundaryProps(f);

      end R134a_vapofdT;

      function rho_ph_der "Time derivative function of density_ph"
        extends Modelica.Icons.Function;

        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input Common.InverseDerivatives_rhoT derivs "Record for derivatives";
        input Real p_der "Derivative of pressure";
        input Real h_der "Derivative of specific enthalpy";
        output Real d_der "Derivative of density";
      algorithm
        if (derivs.phase == 2) then
          d_der := (derivs.rho*(derivs.rho*derivs.cv/derivs.dpT + 1.0)/(derivs.dpT
            *derivs.T))*p_der + (-derivs.rho*derivs.rho/(derivs.dpT*derivs.T))*
            h_der;
        else
          d_der := ((derivs.rho*(derivs.cv*derivs.rho + derivs.pt))/(derivs.rho*
            derivs.rho*derivs.pd*derivs.cv + derivs.T*derivs.pt*derivs.pt))*p_der
             + (-derivs.rho*derivs.rho*derivs.pt/(derivs.rho*derivs.rho*derivs.pd
            *derivs.cv + derivs.T*derivs.pt*derivs.pt))*h_der;
        end if;

        annotation (Documentation(info="<html>
This function calculates the derivative of density w.r.t. time. It is used as derivative function for <a href=\"modelica://Modelica.Media.R134a.R134a_ph.rho_props_ph\"> rho_props_ph</a>.
</html>"));
      end rho_ph_der;

      function rho_props_ph
        "Density as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;

        input Modelica.SIunits.Pressure p "Pressure";
        input Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
        input Common.InverseDerivatives_rhoT derivs
          "Record for the calculation of rho_ph_der";
        output Modelica.SIunits.Density d "Density";
      algorithm
        d := derivs.rho;

        annotation (
          derivative(noDerivative=derivs) = rho_ph_der,
          Inline=false,
          LateInline=true,
          Documentation(info="<html>
This function integrates the derivative of density w.r.t. time in order to allow a numerical inversion for the complex fundamental equation of state.
</html>"));
      end rho_props_ph;

      function T_ph_der "Time derivative function of T_ph"
        extends Modelica.Icons.Function;

        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input Common.InverseDerivatives_rhoT derivs "Auxiliary record";
        input Real p_der "Derivative of pressure";
        input Real h_der "Derivative of specific enthalpy";
        output Real T_der "Derivative of temperature";
      algorithm
        if (derivs.phase == 2) then
          T_der := 1/derivs.dpT*p_der;
        else
          T_der := ((-derivs.rho*derivs.pd + derivs.T*derivs.pt)/(derivs.rho*
            derivs.rho*derivs.pd*derivs.cv + derivs.T*derivs.pt*derivs.pt))*p_der
             + ((derivs.rho*derivs.rho*derivs.pd)/(derivs.rho*derivs.rho*derivs.pd
            *derivs.cv + derivs.T*derivs.pt*derivs.pt))*h_der;
        end if;

        annotation (Documentation(info="<html>
This function calculates the derivative of temperature w.r.t. time. It is used as derivative function for <a href=\"modelica://Modelica.Media.R134a.R134a_ph.T_props_ph\"> T_props_ph</a>.
</html>"));
      end T_ph_der;

      function T_props_ph
        "Temperature as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;

        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input Common.InverseDerivatives_rhoT derivs
          "Record for the calculation of T_ph_der";
        output Temperature T "Temperature";
      algorithm
        T := derivs.T;

        annotation (
          derivative(noDerivative=derivs) = T_ph_der,
          Inline=false,
          LateInline=true,
          Documentation(info="<html>
This function integrates the derivative of temperature w.r.t. time in order to allow a numerical inversion for the complex fundamental equation of state.
</html>"));
      end T_props_ph;

      redeclare function extends setSmoothState
        "Smooth transition function between state_a and state_b"
        import ThermofluidStream.Media.myMedia.Common.smoothStep;
      algorithm
        state := ThermodynamicState(
          p=smoothStep(
            x,
            state_a.p,
            state_b.p,
            x_small),
          h=smoothStep(
            x,
            state_a.h,
            state_b.h,
            x_small),
          T=temperature_ph(smoothStep(
            x,
            state_a.p,
            state_b.p,
            x_small), smoothStep(
            x,
            state_a.h,
            state_b.h,
            x_small)),
          d=density_ph(smoothStep(
            x,
            state_a.p,
            state_b.p,
            x_small), smoothStep(
            x,
            state_a.h,
            state_b.h,
            x_small)),
          phase=0);
        annotation (Inline=true);
      end setSmoothState;

      function dofpT "Compute d for given p and T"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input SI.Pressure delp "Iteration converged if (p-pre(p) < delp)";
        output SI.Density d "Density";

      protected
        constant Real p_breaks[:]=R134aData.pbreaks
          "Grid points of reduced pressure";
        constant Real dl_coef[:, 4]=R134aData.dlcoef
          "Coefficients of cubic spline for rho_liq(p)";
        constant Real dv_coef[:, 4]=R134aData.dvcoef
          "Coefficients of cubic spline for rho_vap(p)";

        Boolean liquid "Is liquid";
        Boolean supercritical "Is supercritcal";
        Integer int "Interval number";
        Real pred "Reduced pressure";
        Real localx "Oordinate of local spline";
        Integer i "Newton iteration number";
        Real dp "Pressure difference";
        SI.Density deld "Density step";
        myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        myMedia.Common.NewtonDerivatives_pT nDerivs "Derivatives needed in Newton iteration";
        Boolean found "Flag for iteration success";
        Integer error "1 if did not converged";

      algorithm
        myMedia.R134a.R134a_ph.phaseBoundaryAssert(p, T);
        i := 0;
        error := 0;
        found := false;
        pred := p/R134aData.data.FPCRIT;
        (int,error) := Common.FindInterval(pred, p_breaks);
        localx := pred - p_breaks[int];
        // set decent initial guesses for d and T
        supercritical := p > R134aData.data.FPCRIT;
        if supercritical then
          // iteration seems to work better if coming from high densities
          d := R134aData.data.FDCRIT*3.0;
        else
          liquid := T <= myMedia.R134a.R134a_ph.saturationTemperature(p);
          if liquid then
            d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dl_coef[int,
              1:4])*1.02;
          else
            d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dv_coef[int,
              1:4])*0.95;
          end if;
        end if;

        while ((i < 100) and not found) loop
          f := myMedia.R134a.R134a_ph.f_R134a(d, T);
          nDerivs := myMedia.Common.Helmholtz_pT(f);
          dp := nDerivs.p - p;
          if (abs(dp) <= delp) then
            found := true;
          end if;
          deld := dp/nDerivs.pd;
          d := d - deld;
          i := i + 1;
        end while;

        annotation (Documentation(info="<html>
<p> This function calculates the density of R134a from absolute pressure and temperature. The function can only be executed in one-phase region. The safety margin to the phase boundary is 1[K] and 1000[Pa].
</p>
<h4>Restrictions</h4>
The function cannot be inverted in a numerical way. Please use functions <a href=\"modelica://Modelica.Media.R134a.R134a_ph.rho_props_ph\">rho_props_ph</a> and <a href=\"modelica://Modelica.Media.R134a.R134a_ph.T_props_ph\">T_props_ph</a> for this purpose.
</html>"));
      end dofpT;

      function hofpT "Compute h for given p and T"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Modelica.SIunits.Pressure delp
          "Iteration converged if (p-pre(p) < delp)";
        output SI.SpecificEnthalpy h "Specific Enthalpy";

      protected
        SI.Density d "Density";
        myMedia.Common.HelmholtzDerivs f "Helmholtz derivatives";

      algorithm
        myMedia.R134a.R134a_ph.phaseBoundaryAssert(p, T);
        d := dofpT(p, T, delp);
        f := f_R134a(d, T);
        h := R134aData.data.R*T*(f.tau*f.ftau + f.delta*f.fdelta);

        annotation (Documentation(info="<html>
<p> This function calculates the specific enthalpy of R134a from absolute pressure and temperature. The function can only be executed in one-phase region. The safety margin to the phase boundary is 1[K] and 1000[Pa].
</p>
</html>"));
      end hofpT;

      function phaseBoundaryAssert
        "Assert function for checking threshold to phase boundary"
        extends Modelica.Icons.Function;
        input Modelica.SIunits.Pressure p "Refrigerant pressure";
        input Modelica.SIunits.Temperature T "Refrigerant temperature";

      protected
        Modelica.SIunits.Temperature T_lim_gas "Upper temperature limit";
        Modelica.SIunits.Temperature T_lim_liq "Lower temperature limit";

      algorithm
        T_lim_gas := myMedia.R134a.R134a_ph.saturationTemperature(p) + 1;
        T_lim_liq := myMedia.R134a.R134a_ph.saturationTemperature(p) - 1;

        assert(p>R134aData.data.PCRIT+1000 or not
                                            (T<T_lim_gas and T>T_lim_liq), "Fluid state is too close to the two-phase region (p="+String(p)+"[Pa], T="+String(T)+"[K]. Pressure and temperature can not be used to determine properties in two-phase region.");

        annotation (Documentation(info="<html>
This function is used as a guard for property functions using pTX as an input. Property functions for two-phase media using pressure and temperature as inputs shall not be used close to the phase boundary in order to avoid errors and high deviations for just small deviations in the input arguments. The refrigerant state can not be determined in the two-phase region using pressure and temperature.
</html>"));
      end phaseBoundaryAssert;
      annotation (Documentation(info="<html>
<p>
Calculation of fluid properties for Tetrafluoroethane (R134a) in the fluid region of 0.0039 bar (Triple pressure) to 700 bar and 169.85 Kelvin (Triple temperature) to 455 Kelvin.
</p>
<h4>Restriction</h4>
<p>
The functions provided by this package shall be used inside of the restricted limits according to the referenced literature.
</p>
<ul>
 <li>
      <strong> 0.0039 bar &le; p &le; 700 bar </strong>
 </li>
 <li>
      <strong> 169.85 Kelvin &le; T &le; 455 Kelvin  </strong>
 </li>
 <li>
      <strong> explicit for pressure and specific enthalpy </strong>
 </li>
</ul>

<p><strong>References</strong></p>
<dl><dt>Baehr, H.D. and Tillner-Roth, R.: </dt>
<dd><strong>Thermodynamic Properties of Environmentally Acceptable Refrigerants -
Equations of State and Tables for Ammonia, R22, R134a, R152a, and R123</strong>. Springer-Verlag, Berlin (Germany), 1994.</dd>
</dl>
<dl><dt>Klein, McLinden and Laesecke: </dt>
<dd><strong>An improved extended corresponding states method for estimation of viscosity of pure refrigerants and mixtures</strong>.
Int. J. Refrig., Vol. 20, No.3, pp. 208-217, 1997.</dd>
</dl>
<dl><dt>McLinden, Klein. and Perkins: </dt>
<dd><strong>An extended corresponding states model for the thermal conductivity
of refrigerants and refrigerant mixtures</strong>.
Int. J. Refrig., 23 (2000) 43-63.</dd>
</dl>
<dl><dt>Okada and Higashi: </dt>
<dd><strong>Surface tension correlation of HFC-134a and HCFC-123</strong>.
Proceedings of the Joint Meeting of IIR Commissions B1, B2, E1, and E2, Padua, Italy, pp. 541-548, 1994.</dd>
</dl>
</html>"));
    end R134a_ph;

    package R134aData "R134a data required by package R134a_ph"
      import Modelica.SIunits;

      extends Modelica.Icons.Package;
      constant SIunits.SpecificHeatCapacity R=data.R;
      constant Integer Npoints=478;
      constant Integer Ninterval=Npoints - 1;
      constant Real[Npoints] pbreaks={9.597762848258994e-005,
          9.869357747732370e-005,1.010264375639950e-004,1.065169584583328e-004,
          1.123059413359126e-004,1.184094248412308e-004,1.248446933924201e-004,
          1.316297064467259e-004,1.387835295300911e-004,1.463261079761978e-004,
          1.542786111807819e-004,1.626631846135783e-004,1.715035062398977e-004,
          1.808243694992149e-004,1.906517107583061e-004,2.010132485287069e-004,
          2.119377912202213e-004,2.234561174702443e-004,2.356004528862385e-004,
          2.484047512716141e-004,2.616284653191377e-004,2.747881183685521e-004,
          2.885158790807569e-004,3.028318826616158e-004,3.177568016040576e-004,
          3.333118542894548e-004,3.495188133266056e-004,3.664000141427236e-004,
          3.839783631625294e-004,4.022773464529003e-004,4.213210377579724e-004,
          4.411341070924892e-004,4.617418287585031e-004,4.831700895846934e-004,
          5.054453973240350e-004,5.285948883287491e-004,5.526463359992557e-004,
          5.776281585116855e-004,6.035694268866237e-004,6.304998727332601e-004,
          6.584498962084673e-004,6.874505733153568e-004,7.175336642444060e-004,
          7.487316202293097e-004,7.810775914127821e-004,8.146054342502127e-004,
          8.493497185583605e-004,8.853457349505343e-004,9.226295020377572e-004,
          9.612377731634476e-004,1.001208043569667e-003,1.042578557225471e-003,
          1.085388313487843e-003,1.129677073668393e-003,1.175485367705820e-003,
          1.222854500460934e-003,1.271826558129384e-003,1.322444414376414e-003,
          1.374751736326610e-003,1.428792990668195e-003,1.484613449495073e-003,
          1.542259195759381e-003,1.601777129328165e-003,1.663214972080042e-003,
          1.726621273310258e-003,1.792045415319891e-003,1.859537618008464e-003,
          1.929148944128722e-003,2.000931304128618e-003,2.074937460870742e-003,
          2.151221034049469e-003,2.229836504887513e-003,2.310839220352569e-003,
          2.394285397224690e-003,2.480232126358037e-003,2.568737376543922e-003,
          2.659859998183566e-003,2.753659727089886e-003,2.850197187960054e-003,
          2.949533897578886e-003,3.051732268501956e-003,3.156855611648015e-003,
          3.264968139624009e-003,3.376134969543659e-003,3.490422125512034e-003,
          3.607896541474759e-003,3.728626063414313e-003,3.852679451797347e-003,
          3.980126383732962e-003,4.111037454976533e-003,4.245484181734639e-003,
          4.383539002791262e-003,4.525275280559336e-003,4.670767303162268e-003,
          4.820090285488170e-003,4.973320370546478e-003,5.130534630480654e-003,
          5.291811067763014e-003,5.457228615833621e-003,5.626867140010384e-003,
          5.800807438004561e-003,5.979131240454509e-003,6.161921211248477e-003,
          6.349260947941199e-003,6.541234981608406e-003,6.737928777105548e-003,
          6.939428732811780e-003,7.145822180530093e-003,7.357197385013741e-003,
          7.573643543593235e-003,7.795250785685322e-003,8.022110172037484e-003,
          8.254313693933356e-003,8.491954272338212e-003,8.735125756982369e-003,
          8.983922925176295e-003,9.238441480673905e-003,9.498778052406051e-003,
          9.765030192907764e-003,1.003729637709093e-002,1.031567600057533e-002,
          1.060026937790312e-002,1.089117774088576e-002,1.118850323681089e-002,
          1.149234892629966e-002,1.180281878149178e-002,1.212001768378737e-002,
          1.244405142182634e-002,1.277502668901607e-002,1.311305108132637e-002,
          1.345823309485172e-002,1.381068212326552e-002,1.417050845529529e-002,
          1.453782327208102e-002,1.491273864445383e-002,1.529536753016332e-002,
          1.568582377114743e-002,1.608422209040166e-002,1.649067808931178e-002,
          1.690530824446280e-002,1.732822990453687e-002,1.775956128744187e-002,
          1.819942147677864e-002,1.864793041887473e-002,1.910520891956503e-002,
          1.957137864057372e-002,2.004656209644468e-002,2.053088265103482e-002,
          2.102446451411387e-002,2.152743273774831e-002,2.203991321298626e-002,
          2.256203266622321e-002,2.309391865555178e-002,2.363569956736602e-002,
          2.418750461246241e-002,2.474946382258750e-002,2.532170804665175e-002,
          2.590436894709933e-002,2.649757899613318e-002,2.710147147198215e-002,
          2.771618045516845e-002,2.834184082475825e-002,2.897858825451354e-002,
          2.962655920917527e-002,3.028589094062469e-002,3.095672148415131e-002,
          3.163918965453092e-002,3.233343504239619e-002,3.303959801019879e-002,
          3.375781968861326e-002,3.448824197265431e-002,3.523100751788461e-002,
          3.598625973665024e-002,3.675414279428406e-002,3.753480160540696e-002,
          3.832838183003045e-002,3.913502986997648e-002,3.995489286516166e-002,
          4.078811868980567e-002,4.163485594877166e-002,4.249525397402870e-002,
          4.336946282080187e-002,4.425763326428060e-002,4.515991679581355e-002,
          4.607646561937220e-002,4.700743264819789e-002,4.795297150115203e-002,
          4.891323649938621e-002,4.988838266300229e-002,5.087856570747507e-002,
          5.188394204050219e-002,5.290466875872184e-002,5.394090364435762e-002,
          5.499280516221097e-002,5.606053245635714e-002,5.714424534717350e-002,
          5.824410432822266e-002,5.936027056331945e-002,6.049290588356860e-002,
          6.164217278454836e-002,6.280823442343543e-002,6.399125461636106e-002,
          6.519139783552948e-002,6.640882920680599e-002,6.764371450704471e-002,
          6.889622016163087e-002,7.016651324207315e-002,7.145476146359577e-002,
          7.276113318295722e-002,7.408579739616779e-002,7.542892373645665e-002,
          7.679068247215846e-002,7.817124450477091e-002,7.957078136711258e-002,
          8.098946522143942e-002,8.242746885787376e-002,8.388496569268521e-002,
          8.536212976679605e-002,8.685913574431177e-002,8.837615891128831e-002,
          8.991337517436447e-002,9.147096105967481e-002,9.304909371182504e-002,
          9.464795089290083e-002,9.626771098168203e-002,9.790855297290042e-002,
          9.957065647660095e-002,1.012542017176483e-001,1.029593695353304e-001,
          1.046863413830815e-001,1.064352993283296e-001,1.082064260525101e-001,
          1.099999048510082e-001,1.118159196335355e-001,1.136546549243387e-001,
          1.155162958627491e-001,1.174010282037917e-001,1.193090383188843e-001,
          1.212405131966888e-001,1.231956404442420e-001,1.251746082880320e-001,
          1.271776055753336e-001,1.292048217756560e-001,1.312564469824424e-001,
          1.333326719147161e-001,1.354336879191573e-001,1.375596869720684e-001,
          1.397108616817379e-001,1.418874052908662e-001,1.440895116791160e-001,
          1.463173753659727e-001,1.485711915136508e-001,1.508511559303043e-001,
          1.531574650734013e-001,1.554903160532023e-001,1.578499066364259e-001,
          1.602364352504390e-001,1.626501009871427e-001,1.650911036075191e-001,
          1.675596435460891e-001,1.700559219157807e-001,1.725801405130011e-001,
          1.751325018227866e-001,1.777132090243812e-001,1.803224659969848e-001,
          1.829604773257499e-001,1.856274483079854e-001,1.883235849597385e-001,
          1.910490940225762e-001,1.938041829705809e-001,1.965890600178195e-001,
          1.994039341258457e-001,2.022490150118090e-001,2.051245131564867e-001,
          2.080306398131010e-001,2.109676070159534e-001,2.139356275898521e-001,
          2.169349151595292e-001,2.199656841596673e-001,2.230281498451127e-001,
          2.261225283015071e-001,2.292490364564299e-001,2.324078920906696e-001,
          2.355993138502352e-001,2.388235212584440e-001,2.420807347286962e-001,
          2.453711755776573e-001,2.486950660387031e-001,2.520526292761376e-001,
          2.554440893996220e-001,2.588696714792741e-001,2.623296015612792e-001,
          2.658241066839430e-001,2.693534148944132e-001,2.729177552658184e-001,
          2.765173579152221e-001,2.801524540219758e-001,2.838232758468616e-001,
          2.875300567517182e-001,2.912730312199488e-001,2.950524348775986e-001,
          2.988685045151655e-001,3.027214781102109e-001,3.066115948507304e-001,
          3.105390951593055e-001,3.145042207181398e-001,3.185072144949388e-001,
          3.225483207696795e-001,3.266277851623652e-001,3.307458546616600e-001,
          3.349027776546629e-001,3.390988039576249e-001,3.433341848477569e-001,
          3.476091730962973e-001,3.519240230025824e-001,3.562789904294610e-001,
          3.606743328399952e-001,3.651103093353738e-001,3.695871806943437e-001,
          3.741052094140343e-001,3.786646597522729e-001,3.832657977714583e-001,
          3.879088913841363e-001,3.925942104002511e-001,3.973220265761317e-001,
          4.020926136654290e-001,4.069062474719831e-001,4.117632059046955e-001,
          4.166637690345744e-001,4.216082191539507e-001,4.265968408381747e-001,
          4.316299210096456e-001,4.367077490044181e-001,4.418306166415828e-001,
          4.469988182954611e-001,4.522126509707460e-001,4.574724143807979e-001,
          4.627784110292650e-001,4.681309462951913e-001,4.735303285216456e-001,
          4.789768691084685e-001,4.844708826088187e-001,4.900126868302581e-001,
          4.956026029402373e-001,5.012409555764841e-001,5.069280729624649e-001,
          5.126642870282773e-001,5.184499335373062e-001,5.242853522190180e-001,
          5.302680522792256e-001,5.362148870570488e-001,5.421125034763555e-001,
          5.479604123151721e-001,5.537581634208009e-001,5.595053445140967e-001,
          5.652015800117042e-001,5.708465298673534e-001,5.764398884324107e-001,
          5.819813833363990e-001,5.874707743877503e-001,5.929078524952066e-001,
          5.982924386100538e-001,6.036243826896056e-001,6.089035626818212e-001,
          6.141298835313674e-001,6.193032762071714e-001,6.244236967514051e-001,
          6.294911253499476e-001,6.345055654242815e-001,6.394670427446655e-001,
          6.443756045645810e-001,6.492313187762216e-001,6.540342730869820e-001,
          6.587845742164332e-001,6.634823471141452e-001,6.681277341974906e-001,
          6.727208946097391e-001,6.772620034977512e-001,6.817512513092869e-001,
          6.861888431095735e-001,6.905749979167365e-001,6.949099480559251e-001,
          6.991939385318118e-001,7.034272264190118e-001,7.076100802703395e-001,
          7.117427795423493e-001,7.158256140379710e-001,7.198588833658458e-001,
          7.238428964161435e-001,7.277779708523336e-001,7.316644326187892e-001,
          7.355026154637049e-001,7.392928604808265e-001,7.430355156427725e-001,
          7.467309354101930e-001,7.503794802847638e-001,7.539815165033564e-001,
          7.575374158563575e-001,7.610475525042479e-001,7.645123095847116e-001,
          7.679320711405823e-001,7.713072258757592e-001,7.746381659738916e-001,
          7.779252867810481e-001,7.811689864996086e-001,7.843696658934009e-001,
          7.875277280034720e-001,7.906435778747776e-001,7.937176222932615e-001,
          7.967502695335140e-001,8.000199630662463e-001,8.033009258512434e-001,
          8.065932139849678e-001,8.098968847000179e-001,8.132119945147386e-001,
          8.165386053633329e-001,8.198767769333629e-001,8.232265712101035e-001,
          8.265880515436206e-001,8.299612827168834e-001,8.333463310190913e-001,
          8.367432643245871e-001,8.401521521779828e-001,8.435730658861569e-001,
          8.470060786178580e-001,8.504512655117438e-001,8.539087037939039e-001,
          8.573784729060409e-001,8.608606546457506e-001,8.643553333207711e-001,
          8.678625959196853e-001,8.713825323024099e-001,8.749152354154032e-001,
          8.784608015388341e-001,8.820193305769569e-001,8.855909230615221e-001,
          8.891756908959754e-001,8.927737444522241e-001,8.963852006600686e-001,
          9.000101817311734e-001,9.036488156539342e-001,9.073012367571003e-001,
          9.109675863549037e-001,9.146480134897557e-001,9.183426757925104e-001,
          9.220517404865118e-001,9.257753855697142e-001,9.295138012239329e-001,
          9.332671915249889e-001,9.370357765779688e-001,9.408197916132383e-001,
          9.446194993887446e-001,9.484351827283455e-001,9.522671554710838e-001,
          9.561157672135285e-001,9.599814113076552e-001,9.638645356406839e-001,
          9.677656576771091e-001,9.716853843570205e-001,9.756244470156604e-001,
          9.795837477900006e-001,9.825671883209557e-001,9.855632858038894e-001,
          9.886965153922347e-001,9.917147058660856e-001,9.939889544462242e-001,
          9.955107773467575e-001,9.966554757188424e-001,9.976501440012482e-001,
          9.985707411825207e-001,9.989551169812724e-001,9.991090113187927e-001,
          9.993400213037331e-001,9.995459937617709e-001,9.997521475624808e-001,
          9.998552980391523e-001,9.999068928446231e-001,1.0};
      constant Real[Npoints] Tbreaks={0.453892958213191,0.454558816062682,
          0.455118075727735,0.456391027473952,0.457672503868159,0.458962558356426,
          0.460261324553926,0.461568882629760,0.462885339476068,0.464210775261953,
          0.465545296879551,0.466888984497968,0.468241971732374,0.469604365474908,
          0.470976245894674,0.472357746606843,0.473748947780518,0.475149983030873,
          0.476560959250045,0.477981983330171,0.479384515070455,0.480720666793156,
          0.482056818515856,0.483392970238556,0.484729121961257,0.486065273683957,
          0.487401425406658,0.488737577129358,0.490073728852059,0.491409880574759,
          0.492746032297459,0.494082184020160,0.495418335742860,0.496754487465561,
          0.498090639188261,0.499426790910961,0.500762942633662,0.502099094356362,
          0.503435246079063,0.504771397801763,0.506107549524464,0.507443701247164,
          0.508779852969864,0.510116004692565,0.511452156415265,0.512788308137966,
          0.514124459860666,0.515460611583366,0.516796763306067,0.518132915028767,
          0.519469066751468,0.520805218474168,0.522141370196869,0.523477521919569,
          0.524813673642269,0.526149825364970,0.527485977087670,0.528822128810371,
          0.530158280533071,0.531494432255771,0.532830583978472,0.534166735701172,
          0.535502887423873,0.536839039146573,0.538175190869274,0.539511342591974,
          0.540847494314674,0.542183646037375,0.543519797760075,0.544855949482776,
          0.546192101205476,0.547528252928176,0.548864404650877,0.550200556373577,
          0.551536708096278,0.552872859818978,0.554209011541679,0.555545163264379,
          0.556881314987079,0.558217466709780,0.559553618432480,0.560889770155181,
          0.562225921877881,0.563562073600581,0.564898225323282,0.566234377045982,
          0.567570528768683,0.568906680491383,0.570242832214084,0.571578983936784,
          0.572915135659484,0.574251287382185,0.575587439104885,0.576923590827586,
          0.578259742550286,0.579595894272986,0.580932045995687,0.582268197718387,
          0.583604349441088,0.584940501163788,0.586276652886489,0.587612804609189,
          0.588948956331889,0.590285108054590,0.591621259777290,0.592957411499991,
          0.594293563222691,0.595629714945391,0.596965866668092,0.598302018390792,
          0.599638170113493,0.600974321836193,0.602310473558894,0.603646625281594,
          0.604982777004294,0.606318928726995,0.607655080449695,0.608991232172396,
          0.610327383895096,0.611663535617796,0.612999687340497,0.614335839063197,
          0.615671990785898,0.617008142508598,0.618344294231299,0.619680445953999,
          0.621016597676699,0.622352749399400,0.623688901122100,0.625025052844801,
          0.626361204567501,0.627697356290201,0.629033508012902,0.630369659735602,
          0.631705811458303,0.633041963181003,0.634378114903704,0.635714266626404,
          0.637050418349104,0.638386570071805,0.639722721794505,0.641058873517206,
          0.642395025239906,0.643731176962606,0.645067328685307,0.646403480408007,
          0.647739632130708,0.649075783853408,0.650411935576109,0.651748087298809,
          0.653084239021509,0.654420390744210,0.655756542466910,0.657092694189611,
          0.658428845912311,0.659764997635011,0.661101149357712,0.662437301080412,
          0.663773452803113,0.665109604525813,0.666445756248514,0.667781907971214,
          0.669118059693914,0.670454211416615,0.671790363139315,0.673126514862016,
          0.674462666584716,0.675798818307416,0.677134970030117,0.678471121752817,
          0.679807273475518,0.681143425198218,0.682479576920918,0.683815728643619,
          0.685151880366319,0.686488032089020,0.687824183811720,0.689160335534421,
          0.690496487257121,0.691832638979821,0.693168790702522,0.694504942425222,
          0.695841094147923,0.697177245870623,0.698513397593323,0.699849549316024,
          0.701185701038724,0.702521852761425,0.703858004484125,0.705194156206826,
          0.706530307929526,0.707866459652226,0.709202611374927,0.710538763097627,
          0.711874914820328,0.713211066543028,0.714547218265728,0.715883369988429,
          0.717219521711129,0.718555673433830,0.719891825156530,0.721227976879231,
          0.722564128601931,0.723900280324631,0.725236432047332,0.726572583770032,
          0.727908735492733,0.729244887215433,0.730581038938133,0.731917190660834,
          0.733253342383534,0.734589494106235,0.735925645828935,0.737261797551636,
          0.738597949274336,0.739934100997036,0.741270252719737,0.742606404442437,
          0.743942556165138,0.745278707887838,0.746614859610538,0.747951011333239,
          0.749287163055939,0.750623314778640,0.751959466501340,0.753295618224041,
          0.754631769946741,0.755967921669441,0.757304073392142,0.758640225114842,
          0.759976376837543,0.761312528560243,0.762648680282943,0.763984832005644,
          0.765320983728344,0.766657135451045,0.767993287173745,0.769329438896446,
          0.770665590619146,0.772001742341846,0.773337894064547,0.774674045787247,
          0.776010197509948,0.777346349232648,0.778682500955348,0.780018652678049,
          0.781354804400749,0.782690956123450,0.784027107846150,0.785363259568851,
          0.786699411291551,0.788035563014251,0.789371714736952,0.790707866459652,
          0.792044018182353,0.793380169905053,0.794716321627753,0.796052473350454,
          0.797388625073154,0.798724776795855,0.800060928518555,0.801397080241256,
          0.802733231963956,0.804069383686656,0.805405535409357,0.806741687132057,
          0.808077838854758,0.809413990577458,0.810750142300158,0.812086294022859,
          0.813422445745559,0.814758597468260,0.816094749190960,0.817430900913661,
          0.818767052636361,0.820103204359061,0.821439356081762,0.822775507804462,
          0.824111659527163,0.825447811249863,0.826783962972563,0.828120114695264,
          0.829456266417964,0.830792418140665,0.832128569863365,0.833464721586066,
          0.834800873308766,0.836137025031466,0.837473176754167,0.838809328476867,
          0.840145480199568,0.841481631922268,0.842817783644968,0.844153935367669,
          0.845490087090369,0.846826238813070,0.848162390535770,0.849498542258470,
          0.850834693981171,0.852170845703871,0.853506997426572,0.854843149149272,
          0.856179300871973,0.857515452594673,0.858851604317373,0.860187756040074,
          0.861523907762774,0.862860059485475,0.864196211208175,0.865532362930875,
          0.866868514653576,0.868204666376276,0.869540818098977,0.870876969821677,
          0.872213121544378,0.873549273267078,0.874885424989778,0.876221576712479,
          0.877557728435179,0.878893880157880,0.880230031880580,0.881566183603280,
          0.882902335325981,0.884238487048681,0.885574638771382,0.886910790494082,
          0.888246942216783,0.889583093939483,0.890919245662183,0.892255397384884,
          0.893591549107584,0.894927700830285,0.896263852552985,0.897600004275685,
          0.898936155998386,0.900272307721086,0.901608459443787,0.902944611166487,
          0.904280762889188,0.905616914611888,0.906953066334588,0.908289218057289,
          0.909625369779989,0.910961521502690,0.912297673225390,0.913633824948090,
          0.914969976670791,0.916306128393491,0.917642280116192,0.919000395123209,
          0.920338788669353,0.921654913780206,0.922949140962045,0.924221834556595,
          0.925473352843603,0.926704048141686,0.927914266907520,0.929104349833374,
          0.930274631943016,0.931425442686031,0.932557106030558,0.933669940554492,
          0.934764259535182,0.935840371037602,0.936898578001085,0.937939178324610,
          0.938962464950653,0.939968725947663,0.940958244591156,0.941931299443453,
          0.942888164432106,0.943829108927011,0.944754397816244,0.945664291580614,
          0.946559046367014,0.947438914060509,0.948304142355261,0.949154974824251,
          0.949991650987844,0.950814406381226,0.951623472620704,0.952419077468909,
          0.953201444898923,0.953970795157311,0.954727344826145,0.955471306883966,
          0.956202890765733,0.956922302421791,0.957629744375846,0.958325415781975,
          0.959009512480699,0.959682227054106,0.960343748880064,0.960994264185543,
          0.961633956099033,0.962263004702097,0.962881587080076,0.963489877371918,
          0.964088046819229,0.964676263814465,0.965254693948328,0.965823500056402,
          0.966382842264975,0.966932878036132,0.967473762212069,0.968005647058694,
          0.968528682308485,0.969043015202643,0.969548790532545,0.970046150680502,
          0.970580611369582,0.971115072058662,0.971649532747743,0.972183993436823,
          0.972718454125903,0.973252914814983,0.973787375504063,0.974321836193144,
          0.974856296882223,0.975390757571304,0.975925218260384,0.976459678949464,
          0.976994139638544,0.977528600327624,0.978063061016705,0.978597521705785,
          0.979131982394865,0.979666443083945,0.980200903773025,0.980735364462105,
          0.981269825151186,0.981804285840266,0.982338746529346,0.982873207218426,
          0.983407667907506,0.983942128596586,0.984476589285667,0.985011049974747,
          0.985545510663827,0.986079971352907,0.986614432041987,0.987148892731067,
          0.987683353420148,0.988217814109228,0.988752274798308,0.989286735487388,
          0.989821196176468,0.990355656865548,0.990890117554629,0.991424578243709,
          0.991959038932789,0.992493499621869,0.993027960310949,0.993562421000029,
          0.994096881689110,0.994631342378190,0.995165803067270,0.995700263756350,
          0.996234724445430,0.996769185134510,0.997303645823591,0.997704491340401,
          0.998105336857211,0.998522611695603,0.998922580696883,0.999222557447843,
          0.999422541948483,0.999572530323963,0.999702520249380,0.999822510949763,
          0.999872507074923,0.999892505524987,0.999922503200083,0.999949226234537,
          0.999975949268991,0.999989310786218,0.999995991544832,1.0};
      constant Real[Ninterval, 4] Tcoef={{2.428119691060830e+012,-4.216479757645069e+008,
          9.287051822649143e+004,1.698508300000001e+002},{2.166914762300397e+012,
          -3.992111678478829e+008,9.062913441482277e+004,1.700999999999999e+002},
          {1.899159185577863e+012,-3.795555733430910e+008,8.878532320450363e+004,
          1.703092800000000e+002},{1.629916579808073e+012,-3.435128543022376e+008,
          8.477062663992558e+004,1.707856300000000e+002},{1.398839241865448e+012,
          -3.108983786183325e+008,8.093962908382615e+004,1.712651700000000e+002},
          {1.200574221723735e+012,-2.813879938533571e+008,7.728396604745965e+004,
          1.717479200000000e+002},{1.030417923000963e+012,-2.546836477814989e+008,
          7.379541586188905e+004,1.722339300000000e+002},{8.844001037952972e+011,
          -2.305189284572275e+008,7.046631066361128e+004,1.727232300000000e+002},
          {7.590860483164475e+011,-2.086514602087597e+008,6.728926490972207e+004,
          1.732158600000001e+002},{6.515463964671414e+011,-1.888629690497167e+008,
          6.425730760561715e+004,1.737118499999999e+002},{5.592552216502428e+011,
          -1.709551666980799e+008,6.136372775951276e+004,1.742112400000000e+002},
          {4.800416585372977e+011,-1.547489317359679e+008,5.860218639168952e+004,
          1.747140600000000e+002},{4.120619529393444e+011,-1.400824449235276e+008,
          5.596654048742052e+004,1.752203600000000e+002},{3.537140308461040e+011,
          -1.268087414876019e+008,5.345098341920615e+004,1.757301800000000e+002},
          {3.036357271971793e+011,-1.147956769847417e+008,5.105003430189027e+004,
          1.762435499999999e+002},{2.606525213033651e+011,-1.039230394931327e+008,
          4.875837260556154e+004,1.767605200000000e+002},{2.237609674834909e+011,
          -9.408262939444540e+007,4.657101751284228e+004,1.772811199999999e+002},
          {1.922419405902699e+011,-8.518143962347658e+007,4.448317923172022e+004,
          1.778053999999999e+002},{1.656321149901774e+011,-7.714416678199874e+007,
          4.249042535564808e+004,1.783334000000000e+002},{1.431407593855788e+011,
          -6.989094076846488e+007,4.058849075808411e+004,1.788651600000000e+002},
          {1.241037279204862e+011,-6.345000608556164e+007,3.880841089253586e+004,
          1.793900000000000e+002},{1.078897726938036e+011,-5.787323844457100e+007,
          3.719668427889198e+004,1.798900000000000e+002},{9.388245239329929e+010,
          -5.281986768088788e+007,3.566287663310264e+004,1.803899999999999e+002},
          {8.177026870962473e+010,-4.823785073207039e+007,3.420275088737812e+004,
          1.808900000000001e+002},{7.128653091837167e+010,-4.408054713844873e+007,
          3.281232303846304e+004,1.813900000000000e+002},{6.220419978100047e+010,
          -4.030623531248382e+007,3.148784749056206e+004,1.818900000000000e+002},
          {5.432814901566791e+010,-3.687745020027063e+007,3.022579953184881e+004,
          1.823900000000000e+002},{4.749233588110072e+010,-3.376066397124648e+007,
          2.902286362710196e+004,1.828899999999999e+002},{4.155352730607562e+010,
          -3.092570824858189e+007,2.787591713537610e+004,1.833900000000000e+002},
          {3.638967234175739e+010,-2.834555680690369e+007,2.678202091246125e+004,
          1.838900000000000e+002},{3.189545805614265e+010,-2.599587187121439e+007,
          2.573840508245055e+004,1.843899999999999e+002},{2.798050203785508e+010,
          -2.385478375872732e+007,2.474246009078133e+004,1.848900000000000e+002},
          {2.456737261968692e+010,-2.190263720157386e+007,2.379172636307514e+004,
          1.853900000000000e+002},{2.158887725624487e+010,-2.012168454337252e+007,
          2.288388355112532e+004,1.858900000000000e+002},{1.898760836682233e+010,
          -1.849598750549042e+007,2.201674428367421e+004,1.863900000000000e+002},
          {1.671373899396782e+010,-1.701114199658637e+007,2.118824358594005e+004,
          1.868900000000001e+002},{1.472442515376055e+010,-1.565417444528254e+007,
          2.039643299085866e+004,1.873900000000000e+002},{1.298254187769645e+010,
          -1.441336250162147e+007,1.963947244326254e+004,1.878900000000000e+002},
          {1.145612023308615e+010,-1.327813374098965e+007,1.891562443180674e+004,
          1.883899999999999e+002},{1.011726329520874e+010,-1.223890854106894e+007,
          1.822324676787706e+004,1.888899999999999e+002},{8.942115914174372e+009,
          -1.128706309621500e+007,1.756078856084207e+004,1.893899999999999e+002},
          {7.909709317744029e+009,-1.041475590863545e+007,1.692678236252691e+004,
          1.898900000000000e+002},{7.002011600872572e+009,-9.614913403719645e+006,
          1.631984148717728e+004,1.903899999999999e+002},{6.203335937528857e+009,
          -8.881122302459281e+006,1.573865385204634e+004,1.908899999999999e+002},
          {5.500000426851387e+009,-8.207563992121900e+006,1.518197779409089e+004,
          1.913900000000000e+002},{4.880147872846049e+009,-7.588969652936688e+006,
          1.464863839566741e+004,1.918900000000000e+002},{4.333458916781487e+009,
          -7.020558044503353e+006,1.413752314725710e+004,1.923900000000000e+002},
          {3.850903162697156e+009,-6.497982633829402e+006,1.364757825073601e+004,
          1.928900000000000e+002},{3.424640794532519e+009,-6.017301775739881e+006,
          1.317780570385806e+004,1.933900000000000e+002},{3.047820397687019e+009,
          -5.574930915074369e+006,1.272725963793938e+004,1.938900000000000e+002},
          {2.714455522862305e+009,-5.167610077477907e+006,1.229504347489282e+004,
          1.943900000000000e+002},{2.419310099883856e+009,-4.792372987537484e+006,
          1.188030713941842e+004,1.948900000000000e+002},{2.157814657986750e+009,
          -4.446521482506972e+006,1.148224448765968e+004,1.953900000000000e+002},
          {1.925958574178695e+009,-4.127595989843101e+006,1.110009063273798e+004,
          1.958900000000000e+002},{1.720235556842085e+009,-3.833356838509688e+006,
          1.073311982718851e+004,1.963900000000000e+002},{1.537568498602969e+009,
          -3.561761260770541e+006,1.038064313240985e+004,1.968900000000000e+002},
          {1.375254807055739e+009,-3.310945444478069e+006,1.004200642469327e+004,
          1.973900000000000e+002},{1.230926157318009e+009,-3.079209502474114e+006,
          9.716588529824085e+003,1.978900000000000e+002},{1.102501569080066e+009,
          -2.865000978909834e+006,9.403799307559229e+003,1.983899999999999e+002},
          {9.881431890151527e+008,-2.666899927117780e+006,9.103077924469371e+003,
          1.988900000000000e+002},{8.862460643504052e+008,-2.483611530634848e+006,
          8.813891493500507e+003,1.993900000000000e+002},{7.953869975993569e+008,
          -2.313948910499454e+006,8.535733187669037e+003,1.998900000000000e+002},
          {7.143138769691485e+008,-2.156827077065875e+006,8.268121128719055e+003,
          2.003900000000000e+002},{6.419280859884250e+008,-2.011254157318892e+006,
          8.010596993801432e+003,2.008900000000001e+002},{5.772519450401038e+008,
          -1.876319403262300e+006,7.762724544343183e+003,2.013900000000000e+002},
          {5.194272793309037e+008,-1.751190083800481e+006,7.524088760577367e+003,
          2.018899999999999e+002},{4.676942564542144e+008,-1.635102283023300e+006,
          7.294294502273217e+003,2.023900000000000e+002},{4.213813991521418e+008,
          -1.527355501832372e+006,7.072965529370125e+003,2.028900000000000e+002},
          {3.798929639616593e+008,-1.427306562607491e+006,6.859743479795654e+003,
          2.033900000000000e+002},{3.427034243188576e+008,-1.334365732814233e+006,
          6.654287012551113e+003,2.038900000000000e+002},{3.093461000479141e+008,
          -1.247990970222474e+006,6.456270819862391e+003,2.043900000000000e+002},
          {2.794066491203365e+008,-1.167684115936397e+006,6.265384847491296e+003,
          2.048900000000000e+002},{2.525185307660005e+008,-1.092987656856107e+006,
          6.081333540245373e+003,2.053899999999999e+002},{2.283558222313167e+008,
          -1.023480600819874e+006,5.903835032062275e+003,2.058900000000000e+002},
          {2.066285778103371e+008,-9.587754989355512e+005,5.732620476110842e+003,
          2.063899999999999e+002},{1.870796358504928e+008,-8.985159698708151e+005,
          5.567433409816551e+003,2.068900000000000e+002},{1.694800630152804e+008,
          -8.423737208584454e+005,5.408029086050894e+003,2.073900000000000e+002},
          {1.536254323472121e+008,-7.900460905552147e+005,5.254173889079566e+003,
          2.078900000000000e+002},{1.393350041292428e+008,-7.412546763455822e+005,
          5.105644838061499e+003,2.083900000000000e+002},{1.264461946876812e+008,
          -6.957420884142442e+005,4.962228931931791e+003,2.088900000000000e+002},
          {1.148149957717430e+008,-6.532714037371146e+005,4.823722794654673e+003,
          2.093900000000000e+002},{1.043126918759436e+008,-6.136238260582621e+005,
          4.689932103330038e+003,2.098900000000000e+002},{9.482399240733823e+007,
          -5.765972058455468e+005,4.560671161847407e+003,2.103900000000000e+002},
          {8.624641502669747e+007,-5.420050981894244e+005,4.435762520264600e+003,
          2.108900000000000e+002},{7.848790676326571e+007,-5.096749922949291e+005,
          4.315036509192491e+003,2.113899999999999e+002},{7.146637230514374e+007,
          -4.794475711409992e+005,4.198330916505517e+003,2.118899999999999e+002},
          {6.510826527489491e+007,-4.511754575867408e+005,4.085490594353537e+003,
          2.123900000000000e+002},{5.934772889807401e+007,-4.247223114761246e+005,
          3.976367129792119e+003,2.128900000000000e+002},{5.412562005348311e+007,
          -3.999618944172335e+005,3.870818517414752e+003,2.133899999999999e+002},
          {4.938925600232123e+007,-3.767775105272770e+005,3.768708878722507e+003,
          2.138899999999999e+002},{4.509087667312729e+007,-3.550607788424417e+005,
          3.669908110384081e+003,2.143900000000000e+002},{4.118807316164903e+007,
          -3.347115756562438e+005,3.574291699195102e+003,2.148900000000000e+002},
          {3.764247330924181e+007,-3.156368905942572e+005,3.481740374155148e+003,
          2.153899999999999e+002},{3.441971899342819e+007,-2.977505663723726e+005,
          3.392139916478927e+003,2.158900000000000e+002},{3.148883664649886e+007,
          -2.809726258964635e+005,3.305380896883451e+003,2.163899999999999e+002},
          {2.882206369704212e+007,-2.652289174340525e+005,3.221358471964407e+003,
          2.168900000000000e+002},{2.639430226411493e+007,-2.504505234176753e+005,
          3.139972148385238e+003,2.173900000000001e+002},{2.418303052952018e+007,
          -2.365735031462724e+005,3.061125608726445e+003,2.178900000000000e+002},
          {2.216790736643471e+007,-2.235384141346653e+005,2.984726499486276e+003,
          2.183900000000000e+002},{2.033061705830633e+007,-2.112900306234645e+005,
          2.910686262830227e+003,2.188900000000000e+002},{1.865461368328635e+007,
          -1.997769906568943e+005,2.838919956827780e+003,2.193900000000000e+002},
          {1.712501178845796e+007,-1.889515587375750e+005,2.769346100218770e+003,
          2.198900000000000e+002},{1.572830246673164e+007,-1.787692672877184e+005,
          2.701886501082210e+003,2.203900000000002e+002},{1.445234208083232e+007,
          -1.691887831467449e+005,2.636466131342296e+003,2.208899999999999e+002},
          {1.328611259790656e+007,-1.601715845366386e+005,2.573012964462273e+003,
          2.213899999999999e+002},{1.221967792218837e+007,-1.516818185846242e+005,
          2.511457857150583e+003,2.218899999999999e+002},{1.124402410901016e+007,
          -1.436860587692310e+005,2.451734410827016e+003,2.223900000000001e+002},
          {1.035100231090916e+007,-1.361531635944861e+005,2.393778859436568e+003,
          2.228900000000000e+002},{9.533236131047620e+006,-1.290541003018532e+005,
          2.337529949475997e+003,2.233899999999999e+002},{8.784032342642559e+006,
          -1.223617814028497e+005,2.282928828509020e+003,2.238899999999999e+002},
          {8.097324140450608e+006,-1.160509373912711e+005,2.229918944431192e+003,
          2.243900000000000e+002},{7.467609003399250e+006,-1.100979854201498e+005,
          2.178445944730142e+003,2.248900000000000e+002},{6.889898183747469e+006,
          -1.044809122220948e+005,2.128457581571682e+003,2.253900000000001e+002},
          {6.359654158917572e+006,-9.917915038790123e+004,2.079903618776534e+003,
          2.258900000000000e+002},{5.872759686767209e+006,-9.417349114733808e+004,
          2.032735749928480e+003,2.263900000000000e+002},{5.425475631504861e+006,
          -8.944598462814202e+004,1.986907513929262e+003,2.268900000000000e+002},
          {5.014390733055720e+006,-8.497983886637562e+004,1.942374214543448e+003,
          2.273900000000000e+002},{4.636415792979381e+006,-8.075936791787535e+004,
          1.899092852995913e+003,2.278900000000000e+002},{4.288733044060946e+006,
          -7.676988872480289e+004,1.857022047834165e+003,2.283900000000000e+002},
          {3.968773876673203e+006,-7.299765929671984e+004,1.816121971306828e+003,
          2.288899999999999e+002},{3.674202520100520e+006,-6.942982257803570e+004,
          1.776354286367471e+003,2.293900000000000e+002},{3.402892107203013e+006,
          -6.605434102471954e+004,1.737682082113611e+003,2.298900000000000e+002},
          {3.152896273279971e+006,-6.285993128052545e+004,1.700069813095759e+003,
          2.303899999999999e+002},{2.922447601033651e+006,-5.983603289980221e+004,
          1.663483248995434e+003,2.308899999999999e+002},{2.709926760057117e+006,
          -5.697273957445595e+004,1.627889413642931e+003,2.313900000000000e+002},
          {2.513861217833642e+006,-5.426077246627386e+004,1.593256539802403e+003,
          2.318900000000001e+002},{2.332900319601032e+006,-5.169142195505573e+004,
          1.559554014347537e+003,2.323900000000000e+002},{2.165813772476697e+006,
          -4.925652436360114e+004,1.526752336938422e+003,2.328900000000000e+002},
          {2.011475838578284e+006,-4.694841733751677e+004,1.494823071235126e+003,
          2.333899999999999e+002},{1.868856269356124e+006,-4.475990809519066e+004,
          1.463738803224226e+003,2.338900000000000e+002},{1.737013293432888e+006,
          -4.268424495431413e+004,1.433473101024697e+003,2.343900000000000e+002},
          {1.615084644443825e+006,-4.071508653570022e+004,1.404000474764923e+003,
          2.348899999999998e+002},{1.502280625890901e+006,-3.884647544872509e+004,
          1.375296339470493e+003,2.353900000000001e+002},{1.397877494187559e+006,
          -3.707281331859772e+004,1.347336979285312e+003,2.358900000000000e+002},
          {1.301213605644812e+006,-3.538884022447428e+004,1.320099513857462e+003,
          2.363899999999998e+002},{1.211679248380561e+006,-3.378960565339209e+004,
          1.293561863094709e+003,2.368900000000000e+002},{1.128718624184195e+006,
          -3.227045988925767e+004,1.267702720329528e+003,2.373900000000000e+002},
          {1.051819631323617e+006,-3.082702432545408e+004,1.242501517244634e+003,
          2.378900000000000e+002},{9.805119943329289e+005,-2.945517899158243e+004,
          1.217938398261965e+003,2.383900000000000e+002},{9.143661234246076e+005,
          -2.815104963832588e+004,1.193994193542140e+003,2.388899999999999e+002},
          {8.529843036096668e+005,-2.691098269234095e+004,1.170650388729732e+003,
          2.393900000000000e+002},{7.960030849987015e+005,-2.573154186886301e+004,
          1.147889104993057e+003,2.398900000000000e+002},{7.430884210129550e+005,
          -2.460948952764748e+004,1.125693071288439e+003,2.403900000000000e+002},
          {6.939312882245765e+005,-2.354177155605786e+004,1.104045600935325e+003,
          2.408900000000000e+002},{6.482492262091814e+005,-2.252551343062689e+004,
          1.082930572906883e+003,2.413899999999999e+002},{6.057812463458836e+005,
          -2.155800267024627e+004,1.062332406718743e+003,2.418899999999999e+002},
          {5.662875366021142e+005,-2.063668238211267e+004,1.042236044331130e+003,
          2.423899999999999e+002},{5.295464858440637e+005,-1.975913928732001e+004,
          1.022626929351548e+003,2.428900000000000e+002},{4.953547285884677e+005,
          -1.892309832108412e+004,1.003490989941396e+003,2.433899999999999e+002},
          {4.635243665572284e+005,-1.812641112749775e+004,9.848146189060615e+002,
          2.438900000000000e+002},{4.338818671474538e+005,-1.736704928321503e+004,
          9.665846574512200e+002,2.443900000000000e+002},{4.062679337763968e+005,
          -1.664309916254490e+004,9.487883794001973e+002,2.448899999999999e+002},
          {3.805346095862030e+005,-1.595275107074704e+004,9.314134731830150e+002,
          2.453899999999999e+002},{3.565460578222151e+005,-1.529429731212101e+004,
          9.144480292797495e+002,2.458899999999999e+002},{3.341763897850724e+005,
          -1.466612297632049e+004,8.978805234049410e+002,2.463900000000000e+002},
          {3.133095571597457e+005,-1.406670233964544e+004,8.816998038639424e+002,
          2.468900000000000e+002},{2.938381657336060e+005,-1.349459252458615e+004,
          8.658950773076953e+002,2.473899999999999e+002},{2.756629705093029e+005,
          -1.294842921334388e+004,8.504558962743154e+002,2.478900000000001e+002},
          {2.586922013389850e+005,-1.242692195684236e+004,8.353721466343773e+002,
          2.483899999999999e+002},{2.428410028923686e+005,-1.192884991972681e+004,
          8.206340356628965e+002,2.488900000000001e+002},{2.280307218527483e+005,
          -1.145305746217065e+004,8.062320804248278e+002,2.493899999999998e+002},
          {2.141886791630994e+005,-1.099845109336764e+004,7.921570972279910e+002,
          2.498900000000000e+002},{2.012474588055167e+005,-1.056399519338368e+004,
          7.784001905236512e+002,2.503900000000000e+002},{1.891447383294132e+005,
          -1.014870937969869e+004,7.649527432295186e+002,2.508900000000000e+002},
          {1.778225648933724e+005,-9.751664453811391e+003,7.518064063753014e+002,
          2.513900000000000e+002},{1.672274901217288e+005,-9.371980845757489e+003,
          7.389530906287266e+002,2.518900000000000e+002},{1.573096370463601e+005,
          -9.008824060035608e+003,7.263849560163876e+002,2.523900000000000e+002},
          {1.480229998054410e+005,-8.661403967241104e+003,7.140944046859372e+002,
          2.528899999999999e+002},{1.393247573204245e+005,-8.328970961973500e+003,
          7.020740713322290e+002,2.533900000000000e+002},{1.311751868668219e+005,
          -8.010814302914930e+003,6.903168158285998e+002,2.538900000000000e+002},
          {1.235374217684196e+005,-7.706259887656581e+003,6.788157153740614e+002,
          2.543900000000000e+002},{1.163771876379430e+005,-7.414668078450832e+003,
          6.675640569646922e+002,2.548900000000000e+002},{1.096627095692096e+005,
          -7.135432106638779e+003,6.565553304580889e+002,2.553900000000000e+002},
          {1.033643398452726e+005,-6.867975679189847e+003,6.457832212746632e+002,
          2.558899999999999e+002},{9.745461870325112e+004,-6.611752090606020e+003,
          6.352416044310508e+002,2.563899999999998e+002},{9.190798963753549e+004,
          -6.366242084979492e+003,6.249245375741506e+002,2.568900000000000e+002},
          {8.670064055849906e+004,-6.130952362236059e+003,6.148262549854942e+002,
          2.573900000000000e+002},{8.181042020600053e+004,-5.905414374178652e+003,
          6.049411618718673e+002,2.578900000000000e+002},{7.721677640854748e+004,
          -5.689183128996180e+003,5.952638286607794e+002,2.583899999999999e+002},
          {7.290044135202718e+004,-5.481835253654937e+003,5.857889850231684e+002,
          2.588900000000000e+002},{6.884362660689066e+004,-5.282968916694660e+003,
          5.765115155427385e+002,2.593900000000000e+002},{6.502964570767200e+004,
          -5.092201572104827e+003,5.674264535024774e+002,2.598899999999999e+002},
          {6.144296599615412e+004,-4.909169573093382e+003,5.585289768075917e+002,
          2.603900000000000e+002},{5.806916350594535e+004,-4.733527235738733e+003,
          5.498144031252836e+002,2.608900000000001e+002},{5.489471665728002e+004,
          -4.564945391819472e+003,5.412781848879703e+002,2.613899999999999e+002},
          {5.190705215061930e+004,-4.403111022700504e+003,5.329159054741148e+002,
          2.618899999999999e+002},{4.909445721484846e+004,-4.247726255069810e+003,
          5.247232746761317e+002,2.623900000000000e+002},{4.644593911428791e+004,
          -4.098507286040056e+003,5.166961244486026e+002,2.628900000000000e+002},
          {4.395128803961570e+004,-3.955184162531220e+003,5.088304055117806e+002,
          2.633899999999999e+002},{4.160096100295921e+004,-3.817499734155457e+003,
          5.011221830784011e+002,2.638900000000001e+002},{3.938601346943615e+004,
          -3.685208951092035e+003,4.935676332701902e+002,2.643900000000000e+002},
          {3.729813534244107e+004,-3.558078575814604e+003,4.861630399003062e+002,
          2.648900000000000e+002},{3.532951540796938e+004,-3.435886151050459e+003,
          4.789047905747109e+002,2.653900000000000e+002},{3.347288342828854e+004,
          -3.318419829035272e+003,4.717893738824646e+002,2.658900000000001e+002},
          {3.172142027917930e+004,-3.205477566352382e+003,4.648133758676585e+002,
          2.663899999999999e+002},{3.006875992796082e+004,-3.096866799830403e+003,
          4.579734772020614e+002,2.668899999999999e+002},{2.850893674371467e+004,
          -2.992403858160356e+003,4.512664500780765e+002,2.673900000000000e+002},
          {2.703637806135581e+004,-2.891913613497721e+003,4.446891554758121e+002,
          2.678900000000000e+002},{2.564585331227819e+004,-2.795228937660512e+003,
          4.382385402712435e+002,2.683899999999999e+002},{2.433248558704846e+004,
          -2.702190470535179e+003,4.319116347685376e+002,2.688900000000000e+002},
          {2.309167689222681e+004,-2.612645984757337e+003,4.257055498446611e+002,
          2.693900000000000e+002},{2.191914997435190e+004,-2.526450353074852e+003,
          4.196174748723824e+002,2.698899999999999e+002},{2.081087709618847e+004,
          -2.443464913240735e+003,4.136446749057724e+002,2.703900000000000e+002},
          {1.976308961002175e+004,-2.363557314740986e+003,4.077844886436558e+002,
          2.708900000000000e+002},{1.877225549790460e+004,-2.286601167769257e+003,
          4.020343260965227e+002,2.713900000000000e+002},{1.783505491279766e+004,
          -2.212475713419265e+003,3.963916663955540e+002,2.718900000000000e+002},
          {1.694838403963000e+004,-2.141065646731519e+003,3.908540558216300e+002,
          2.723900000000000e+002},{1.610932000557480e+004,-2.072260732910480e+003,
          3.854191056171448e+002,2.728899999999999e+002},{1.531512874676714e+004,
          -2.005955680031755e+003,3.800844902084921e+002,2.733900000000001e+002},
          {1.456323697582539e+004,-1.942049804693102e+003,3.748479451687998e+002,
          2.738900000000000e+002},{1.385123026469367e+004,-1.880446871012044e+003,
          3.697072655023023e+002,2.743899999999999e+002},{1.317684399562190e+004,
          -1.821054876924206e+003,3.646603038516667e+002,2.748899999999999e+002},
          {1.253794303834637e+004,-1.763785795953628e+003,3.597049687290192e+002,
          2.753899999999999e+002},{1.193253057409521e+004,-1.708555492422938e+003,
          3.548392230103814e+002,2.758900000000000e+002},{1.135872219923051e+004,
          -1.655283426022064e+003,3.500610821583481e+002,2.763900000000000e+002},
          {1.081475019376878e+004,-1.603892563634609e+003,3.453686128301867e+002,
          2.768900000000001e+002},{1.029894855746364e+004,-1.554309165597434e+003,
          3.407599312946576e+002,2.773900000000000e+002},{9.809756431292144e+003,
          -1.506462692323420e+003,3.362332020717720e+002,2.778900000000001e+002},
          {9.345698521645902e+003,-1.460285569720035e+003,3.317866364015975e+002,
          2.783899999999999e+002},{8.905390176188423e+003,-1.415713129876954e+003,
          3.274184910384032e+002,2.788900000000000e+002},{8.487528222283663e+003,
          -1.372683444667674e+003,3.231270668582708e+002,2.793900000000001e+002},
          {8.090883603193332e+003,-1.331137188443026e+003,3.189107075891501e+002,
          2.798899999999998e+002},{7.714300903571747e+003,-1.291017548047196e+003,
          3.147677986317169e+002,2.803899999999999e+002},{7.356691193390297e+003,
          -1.252270086933305e+003,3.106967658260311e+002,2.808900000000000e+002},
          {7.017027940720315e+003,-1.214842639685586e+003,3.066960743158503e+002,
          2.813900000000000e+002},{6.694344504639365e+003,-1.178685218691503e+003,
          3.027642274486991e+002,2.818900000000000e+002},{6.387729498401815e+003,
          -1.143749907833270e+003,2.988997656793167e+002,2.823900000000000e+002},
          {6.096323639887130e+003,-1.109990771522367e+003,2.951012655307434e+002,
          2.828900000000000e+002},{5.819316375605656e+003,-1.077363765273413e+003,
          2.913673385813619e+002,2.833899999999999e+002},{5.555945230723103e+003,
          -1.045826664792471e+003,2.876966304991468e+002,2.838900000000000e+002},
          {5.305486577084192e+003,-1.015338940849282e+003,2.840878200262260e+002,
          2.843899999999999e+002},{5.067262644382695e+003,-9.858617563664993e+002,
          2.805396181886476e+002,2.848899999999999e+002},{4.840629717527347e+003,
          -9.573578165466240e+002,2.770507672483719e+002,2.853900000000001e+002},
          {4.624982316899136e+003,-9.297913562094941e+002,2.736200399658823e+002,
          2.858899999999998e+002},{4.419748465054315e+003,-9.031280472312861e+002,
          2.702462386898002e+002,2.863899999999999e+002},{4.224387583152579e+003,
          -8.773349366812882e+002,2.669281945592340e+002,2.868900000000001e+002},
          {4.038388297731713e+003,-8.523803870286566e+002,2.636647667234346e+002,
          2.873900000000000e+002},{3.861269499591353e+003,-8.282340390911418e+002,
          2.604548416035581e+002,2.878899999999999e+002},{3.692574672364702e+003,
          -8.048667226026902e+002,2.572973320823326e+002,2.883900000000000e+002},
          {3.531873216036285e+003,-7.822504319031273e+002,2.541911768555779e+002,
          2.888899999999999e+002},{3.378757294095987e+003,-7.603582607212622e+002,
          2.511353396959848e+002,2.893899999999999e+002},{3.232842821404854e+003,
          -7.391643734589071e+002,2.481288088106870e+002,2.898899999999998e+002},
          {3.093764229251524e+003,-7.186439267744648e+002,2.451705961230077e+002,
          2.903899999999998e+002},{2.961178144974160e+003,-6.987730702280496e+002,
          2.422597367302420e+002,2.908899999999999e+002},{2.834757569070961e+003,
          -6.795288612382922e+002,2.393952881854896e+002,2.913899999999999e+002},
          {2.714194398673150e+003,-6.608892613772416e+002,2.365763299875632e+002,
          2.918900000000000e+002},{2.599196768073861e+003,-6.428330798822078e+002,
          2.338019629427569e+002,2.923899999999999e+002},{2.489487678826580e+003,
          -6.253399364968090e+002,2.310713086112715e+002,2.928900000000000e+002},
          {2.384805817113105e+003,-6.083902428896103e+002,2.283835087915235e+002,
          2.933899999999999e+002},{2.284902791850232e+003,-5.919651508239373e+002,
          2.257377249419197e+002,2.938899999999999e+002},{2.189543827088161e+003,
          -5.760465367399366e+002,2.231331377069458e+002,2.943900000000001e+002},
          {2.098506646267296e+003,-5.606169661265348e+002,2.205689463939640e+002,
          2.948899999999999e+002},{2.011580322023283e+003,-5.456596605580177e+002,
          2.180443684809316e+002,2.953900000000000e+002},{1.928564097136700e+003,
          -5.311584690552852e+002,2.155586391540247e+002,2.958899999999999e+002},
          {1.849269849310739e+003,-5.170978692137003e+002,2.131110108940667e+002,
          2.963899999999999e+002},{1.773516707295410e+003,-5.034628931867380e+002,
          2.107007529155836e+002,2.968900000000000e+002},{1.701135034894489e+003,
          -4.902391539141415e+002,2.083271508720442e+002,2.973899999999999e+002},
          {1.631962729032615e+003,-4.774127857226459e+002,2.059895063267681e+002,
          2.978900000000001e+002},{1.565846506555941e+003,-4.649704442461410e+002,
          2.036871364135052e+002,2.983900000000002e+002},{1.502641202683996e+003,
          -4.528992802485624e+002,2.014193734124408e+002,2.988900000000002e+002},
          {1.442208277348613e+003,-4.411869095737466e+002,1.991855643479903e+002,
          2.993899999999999e+002},{1.384416824560510e+003,-4.298214105524195e+002,
          1.969850706592951e+002,2.998899999999999e+002},{1.329142377546727e+003,
          -4.187912951655748e+002,1.948172677994267e+002,3.003899999999999e+002},
          {1.276266832977576e+003,-4.080854951975836e+002,1.926815448953401e+002,
          3.008900000000000e+002},{1.225677744534944e+003,-3.976933420081253e+002,
          1.905773043972621e+002,3.013899999999999e+002},{1.177268608034691e+003,
          -3.876045575132537e+002,1.885039617618329e+002,3.018900000000000e+002},
          {1.130938214911173e+003,-3.778092338214274e+002,1.864609451086512e+002,
          3.023900000000000e+002},{1.086590010013511e+003,-3.682978157856858e+002,
          1.844476949037983e+002,3.028899999999999e+002},{1.044132879850411e+003,
          -3.590610987951029e+002,1.824636636814579e+002,3.033900000000000e+002},
          {1.003479421950269e+003,-3.500901978022080e+002,1.805083156956392e+002,
          3.038900000000000e+002},{9.645474592133718e+002,-3.413765556572088e+002,
          1.785811266916289e+002,3.043899999999999e+002},{9.272577564186632e+002,
          -3.329119057516371e+002,1.766815835499424e+002,3.048899999999999e+002},
          {8.915361551869480e+002,-3.246882895151356e+002,1.748091840997496e+002,
          3.053899999999999e+002},{8.573109718488198e+002,-3.166980141610849e+002,
          1.729634367537797e+002,3.058900000000000e+002},{8.245149278413157e+002,
          -3.089336702127797e+002,1.711438603429205e+002,3.063900000000000e+002},
          {7.930833414616905e+002,-3.013880987490236e+002,1.693499837846950e+002,
          3.068899999999999e+002},{7.629551004957449e+002,-2.940543974650270e+002,
          1.675813458946156e+002,3.073899999999999e+002},{7.340718127746320e+002,
          -2.869259009969820e+002,1.658374951082294e+002,3.078900000000000e+002},
          {7.063778149375254e+002,-2.799961751758680e+002,1.641179892660677e+002,
          3.083899999999998e+002},{6.798204571715311e+002,-2.732590129072642e+002,
          1.624223953944419e+002,3.088899999999998e+002},{6.543490746840538e+002,
          -2.667084141948034e+002,1.607502894508461e+002,3.093900000000000e+002},
          {6.299159798870081e+002,-2.603385935161680e+002,1.591012561598878e+002,
          3.098899999999998e+002},{6.064752538059523e+002,-2.541439563436756e+002,
          1.574748887477705e+002,3.103899999999999e+002},{5.839833827181259e+002,
          -2.481191036566246e+002,1.558707887864211e+002,3.108899999999999e+002},
          {5.623990077331871e+002,-2.422588210581205e+002,1.542885659710487e+002,
          3.113900000000002e+002},{5.416823557921136e+002,-2.365580664806819e+002,
          1.527278379169916e+002,3.118899999999998e+002},{5.217959156466890e+002,
          -2.310119745447131e+002,1.511882300065326e+002,3.123900000000000e+002},
          {5.027036118421444e+002,-2.256158391224129e+002,1.496693751642845e+002,
          3.128900000000001e+002},{4.843711839704919e+002,-2.203651149878204e+002,
          1.481709137107541e+002,3.133899999999999e+002},{4.667659843054528e+002,
          -2.152554094514039e+002,1.466924931733644e+002,3.138900000000000e+002},
          {4.498567607109622e+002,-2.102824750478224e+002,1.452337681136751e+002,
          3.143899999999999e+002},{4.336138489909362e+002,-2.054422081085836e+002,
          1.437943999757566e+002,3.148900000000000e+002},{4.180087357727423e+002,
          -2.007306382064600e+002,1.423740569063953e+002,3.153900000000000e+002},
          {4.030144488980337e+002,-1.961439302658990e+002,1.409724136234017e+002,
          3.158899999999998e+002},{3.886050416261347e+002,-1.916783723946983e+002,
          1.395891512326833e+002,3.163899999999999e+002},{3.747559197643732e+002,
          -1.873303777536728e+002,1.382239571063902e+002,3.168899999999999e+002},
          {3.614434175252985e+002,-1.830964742279822e+002,1.368765247137150e+002,
          3.173900000000002e+002},{3.486450944768750e+002,-1.789733061102790e+002,
          1.355465535030190e+002,3.178900000000001e+002},{3.363394583248588e+002,
          -1.749576258474919e+002,1.342337487433366e+002,3.183899999999999e+002},
          {3.245059552231471e+002,-1.710462911782989e+002,1.329378213973440e+002,
          3.188900000000000e+002},{3.131249934400873e+002,-1.672362625597232e+002,
          1.316584879935901e+002,3.193900000000001e+002},{3.021778376318846e+002,
          -1.635245982990388e+002,1.303954704917012e+002,3.198900000000000e+002},
          {2.916465737356219e+002,-1.599084513847945e+002,1.291484961596401e+002,
          3.203900000000000e+002},{2.815140960863762e+002,-1.563850665721780e+002,
          1.279172974528968e+002,3.208899999999999e+002},{2.717640535010451e+002,
          -1.529517768326230e+002,1.267016118931412e+002,3.213899999999999e+002},
          {2.623807958853618e+002,-1.496060000695831e+002,1.255011819518896e+002,
          3.218899999999999e+002},{2.533493995716780e+002,-1.463452370568750e+002,
          1.243157549397372e+002,3.223900000000000e+002},{2.446555324337382e+002,
          -1.431670669227680e+002,1.231450828893681e+002,3.228899999999998e+002},
          {2.362855481501693e+002,-1.400691465868011e+002,1.219889224559401e+002,
          3.233900000000001e+002},{2.282263709932994e+002,-1.370492063764239e+002,
          1.208470348027104e+002,3.238900000000001e+002},{2.204654530507506e+002,
          -1.341050475503324e+002,1.197191855005348e+002,3.243900000000000e+002},
          {2.129908699326103e+002,-1.312345418623600e+002,1.186051444334383e+002,
          3.248899999999999e+002},{2.057911337612362e+002,-1.284356261218127e+002,
          1.175046856861692e+002,3.253900000000000e+002},{1.988552794177001e+002,
          -1.257063023229668e+002,1.164175874610275e+002,3.258900000000000e+002},
          {1.921728401770502e+002,-1.230446350569414e+002,1.153436319785049e+002,
          3.263899999999999e+002},{1.857337349822465e+002,-1.204487478255335e+002,
          1.142826053796536e+002,3.268899999999998e+002},{1.795283572515752e+002,
          -1.179168232471038e+002,1.132342976468749e+002,3.273899999999998e+002},
          {1.735474970466655e+002,-1.154470997486489e+002,1.121985025073361e+002,
          3.278900000000000e+002},{1.677823331351591e+002,-1.130378699689073e+002,
          1.111750173492029e+002,3.283900000000000e+002},{1.622244016835726e+002,
          -1.106874787369236e+002,1.101636431365233e+002,3.288900000000000e+002},
          {1.568656145421817e+002,-1.083943220437680e+002,1.091641843297179e+002,
          3.293899999999999e+002},{1.516982207140161e+002,-1.061568447400119e+002,
          1.081764488004225e+002,3.298899999999999e+002},{1.467147735728482e+002,
          -1.039735387115258e+002,1.072002477527532e+002,3.303900000000000e+002},
          {1.419081528245269e+002,-1.018429421114725e+002,1.062353956494466e+002,
          3.308900000000001e+002},{1.372715346463949e+002,-9.976363736558096e+001,
          1.052817101318265e+002,3.313899999999999e+002},{1.327983662960232e+002,
          -9.773424955603815e+001,1.043390119451407e+002,3.318900000000000e+002},
          {1.284823811146052e+002,-9.575344556746910e+001,1.034071248680371e+002,
          3.323899999999998e+002},{1.243175382743625e+002,-9.381993180831613e+001,
          1.024858756363024e+002,3.328900000000000e+002},{1.202980857716605e+002,
          -9.193245448523439e+001,1.015750938798825e+002,3.333900000000000e+002},
          {1.164184832888737e+002,-9.008979675148045e+001,1.006746120438895e+002,
          3.338900000000000e+002},{1.126734095942744e+002,-8.829077808760059e+001,
          9.978426532565882e+001,3.343900000000001e+002},{1.090577734365635e+002,
          -8.653425359100095e+001,9.890389160942104e+001,3.348899999999999e+002},
          {1.055666864095504e+002,-8.481911235197464e+001,9.803333139647950e+001,
          3.353900000000000e+002},{1.021954515577647e+002,-8.314427636901104e+001,
          9.717242774102454e+001,3.358900000000000e+002},{9.893956151385201e+001,
          -8.150869971730866e+001,9.632102618748574e+001,3.363900000000000e+002},
          {9.579468908688170e+001,-7.991136750831623e+001,9.547897470672068e+001,
          3.368899999999999e+002},{9.275669381231643e+001,-7.835129514294606e+001,
          9.464612363393020e+001,3.373900000000000e+002},{8.982156217702787e+001,
          -7.682752633542408e+001,9.382232560288357e+001,3.378899999999999e+002},
          {8.698548803471240e+001,-7.533913420559925e+001,9.300743549507918e+001,
          3.383900000000002e+002},{8.424476965419449e+001,-7.388521810035263e+001,
          9.220131036581432e+001,3.388900000000000e+002},{8.159588334052123e+001,
          -7.246490478296335e+001,9.140380939689695e+001,3.393900000000000e+002},
          {7.903542293508620e+001,-7.107734622418560e+001,9.061479382770111e+001,
          3.398900000000000e+002},{7.656012346841582e+001,-6.972171965580679e+001,
          8.983412690204482e+001,3.403900000000001e+002},{7.416684232872031e+001,
          -6.839722645285069e+001,8.906167380618470e+001,3.408900000000000e+002},
          {7.185255755015002e+001,-6.710309157552798e+001,8.829730161148777e+001,
          3.413899999999999e+002},{6.961436087200231e+001,-6.583856282410744e+001,
          8.754087921483382e+001,3.418899999999998e+002},{6.744071144058677e+001,
          -6.460275810641772e+001,8.679227669290511e+001,3.423900000000000e+002},
          {6.533736714406254e+001,-6.339506228364169e+001,8.605136666621638e+001,
          3.428900000000000e+002},{6.331010443040145e+001,-6.221493679466649e+001,
          8.531802314304329e+001,3.433900000000000e+002},{6.136356979419681e+001,
          -6.104400934164141e+001,8.458025754148792e+001,3.438982188586610e+002},
          {5.950910769914493e+001,-5.991653377419485e+001,8.386060214553304e+001,
          3.443990577691702e+002},{5.774213795912628e+001,-5.883273750086214e+001,
          8.315996185918330e+001,3.448915636307768e+002},{5.605740872805171e+001,
          -5.779050749965268e+001,8.247767612460307e+001,3.453758750902661e+002},
          {5.445002414326789e+001,-5.678785488691579e+001,8.181311338100387e+001,
          3.458521284875891e+002},{5.291543947575813e+001,-5.582290706691298e+001,
          8.116566953938508e+001,3.463204578942522e+002},{5.144941514216728e+001,
          -5.489389939019187e+001,8.053476654316889e+001,3.467809951510519e+002},
          {5.004800476275456e+001,-5.399916819680369e+001,7.991985102044619e+001,
          3.472338699051960e+002},{4.870752053753856e+001,-5.313714386862832e+001,
          7.932039301451977e+001,3.476792096467971e+002},{4.742453515559163e+001,
          -5.230634512701585e+001,7.873588479339902e+001,3.481171397447639e+002},
          {4.619582778847320e+001,-5.150537243699205e+001,7.816583972221676e+001,
          3.485477834820968e+002},{4.501839582534991e+001,-5.073290350231906e+001,
          7.760979121186911e+001,3.489712620905890e+002},{4.388943451850130e+001,
          -4.998768810694993e+001,7.706729172077169e+001,3.493876947849560e+002},
          {4.280631164785162e+001,-4.926854332619763e+001,7.653791181582945e+001,
          3.497971987964010e+002},{4.176655526408100e+001,-4.857434938684333e+001,
          7.602123928892645e+001,3.501998894056100e+002},{4.076786327604572e+001,
          -4.790404616352511e+001,7.551687832371779e+001,3.505958799752079e+002},
          {3.980805733673829e+001,-4.725662870019470e+001,7.502444870357830e+001,
          3.509852819816741e+002},{3.888510061148567e+001,-4.663114456970701e+001,
          7.454358507290264e+001,3.513682050467190e+002},{3.799708329453679e+001,
          -4.602669045951641e+001,7.407393623185125e+001,3.517447569681489e+002},
          {3.714219720456370e+001,-4.544240891400779e+001,7.361516447128999e+001,
          3.521150437502121e+002},{3.631874498673679e+001,-4.487748602903891e+001,
          7.316694494766297e+001,3.524791696334351e+002},{3.552513982192850e+001,
          -4.433114893405369e+001,7.272896508813832e+001,3.528372371239739e+002},
          {3.475986373173623e+001,-4.380266269275900e+001,7.230092402560834e+001,
          3.531893470224679e+002},{3.402150381919826e+001,-4.329132906864620e+001,
          7.188253207215109e+001,3.535355984524188e+002},{3.330871802177212e+001,
          -4.279648372667590e+001,7.147351021030326e+001,3.538760888880901e+002},
          {3.262024083566979e+001,-4.231749458406720e+001,7.107358961785731e+001,
          3.542109141819540e+002},{3.195487579527898e+001,-4.185375988374079e+001,
          7.068251121409816e+001,3.545401685916690e+002},{3.131148674881513e+001,
          -4.140470653297403e+001,7.030002523183052e+001,3.548639448066199e+002},
          {3.068901235671067e+001,-4.096978874137064e+001,6.992589080997549e+001,
          3.551823339740079e+002},{3.008642901657157e+001,-4.054848592928184e+001,
          6.955987560500161e+001,3.554954257245101e+002},{2.950278142274513e+001,
          -4.014030203900851e+001,6.920175542777736e+001,3.558033081975119e+002},
          {2.893714926772632e+001,-3.974476359913557e+001,6.885131389159386e+001,
          3.561060680659211e+002},{2.838867997995928e+001,-3.936141920744957e+001,
          6.850834208489954e+001,3.564037905605628e+002},{2.785653948598558e+001,
          -3.898983744199484e+001,6.817263825199957e+001,3.566965594941810e+002},
          {2.733994891367559e+001,-3.862960663002127e+001,6.784400749871969e+001,
          3.569844572850220e+002},{2.683817826345350e+001,-3.828033360882353e+001,
          6.752226150569864e+001,3.572675649800471e+002},{2.635049716009461e+001,
          -3.794164206628756e+001,6.720721825603974e+001,3.575459622777420e+002},
          {2.587625347730658e+001,-3.761317301384136e+001,6.689870178268673e+001,
          3.578197275505541e+002},{2.541479976649183e+001,-3.729458259106318e+001,
          6.659654191726963e+001,3.580889378669559e+002},{2.496551525675362e+001,
          -3.698554184967730e+001,6.630057406013974e+001,3.583536690131409e+002},
          {2.452710525070210e+001,-3.668572794713256e+001,6.601063893678912e+001,
          3.586139955143569e+002},{2.410360417001564e+001,-3.639490086428960e+001,
          6.572658259420633e+001,3.588699906558899e+002},{2.368210844621412e+001,
          -3.611258607414033e+001,6.544825524888769e+001,3.591217265036901e+002},
          {2.327622138968802e+001,-3.583876497287966e+001,6.517551349931662e+001,
          3.593692739246600e+002},{2.285763234098723e+001,-3.557279939313234e+001,
          6.490821598447343e+001,3.596127026066080e+002},{2.239716065038261e+001,
          -3.531437500835054e+001,6.464622739113473e+001,3.598520810778630e+002},
          {2.261286818614434e+001,-3.507154486626255e+001,6.438943523372159e+001,
          3.600874767265670e+002},{2.115907150454445e+001,-3.481174562600655e+001,
          6.413762093896931e+001,3.603189558196478e+002},{2.159545498645849e+001,
          -3.459060253341110e+001,6.389086012794930e+001,3.605465835214680e+002},
          {2.102568471888965e+001,-3.435729682605923e+001,6.364880929050617e+001,
          3.607704239121769e+002},{2.067684918221991e+001,-3.413518689782911e+001,
          6.341147902075354e+001,3.609905400057469e+002},{2.033460501975768e+001,
          -3.391960694365179e+001,6.317872830742419e+001,3.612069937677100e+002},
          {1.999858565664685e+001,-3.371036657708588e+001,6.295044799142224e+001,
          3.614198461326062e+002},{1.966841892720444e+001,-3.350728276179628e+001,
          6.272653214279693e+001,3.616291570211340e+002},{1.934374242040421e+001,
          -3.331017987964569e+001,6.250687794476657e+001,3.618349853570229e+002},
          {1.902410836898150e+001,-3.311888848756182e+001,6.229138557796490e+001,
          3.620373890836158e+002},{1.870908669701693e+001,-3.293324699210280e+001,
          6.207995811721918e+001,3.622364251801869e+002},{1.839809418279004e+001,
          -3.275309960418061e+001,6.187250141735893e+001,3.624321496779760e+002},
          {1.808335136498075e+001,-3.257823292493270e+001,6.166892388130226e+001,
          3.626246176759661e+002},{1.776248672564552e+001,-3.240847057790838e+001,
          6.146913652788158e+001,3.628138833563929e+002},{1.743245820179932e+001,
          -3.224362752288467e+001,6.127305262354953e+001,3.629999999999999e+002},
          {1.708940169785534e+001,-3.206925059654591e+001,6.106275077012659e+001,
          3.631999999999998e+002},{1.727072380355401e+001,-3.190283448428098e+001,
          6.085287055989324e+001,3.634000000000002e+002},{1.576467522519720e+001,
          -3.171731020772320e+001,6.064333258200428e+001,3.636000000000000e+002},
          {1.639061885722927e+001,-3.156729873543955e+001,6.043429544463123e+001,
          3.638000000000000e+002},{1.577581090427984e+001,-3.139814584618751e+001,
          6.022552408630595e+001,3.640000000000001e+002},{1.543114797734251e+001,
          -3.123725025299474e+001,6.001714130776343e+001,3.642000000000000e+002},
          {1.508206908869408e+001,-3.107920267388456e+001,5.980909872430626e+001,
          3.644000000000001e+002},{1.472796538577313e+001,-3.092406207912170e+001,
          5.960138055055287e+001,3.646000000000000e+002},{1.436821268934422e+001,
          -3.077189392866886e+001,5.939397035423640e+001,3.647999999999999e+002},
          {1.400211036945577e+001,-3.062276983306427e+001,5.918685099995032e+001,
          3.649999999999999e+002},{1.362888293958223e+001,-3.047676843426775e+001,
          5.898000459303437e+001,3.652000000000000e+002},{1.324767438217522e+001,
          -3.033397615333581e+001,5.877341241576365e+001,3.654000000000000e+002},
          {1.285753973119515e+001,-3.019448807281502e+001,5.856705485715880e+001,
          3.656000000000000e+002},{1.245741665183489e+001,-3.005840871434270e+001,
          5.836091133461882e+001,3.657999999999999e+002},{1.204608676545747e+001,
          -2.992585293758458e+001,5.815496020672768e+001,3.660000000000001e+002},
          {1.162216928497416e+001,-2.979694764877785e+001,5.794917867743944e+001,
          3.661999999999999e+002},{1.118402249211580e+001,-2.967183260501715e+001,
          5.774354268368643e+001,3.663999999999999e+002},{1.072966463770549e+001,
          -2.955066252866774e+001,5.753802677196912e+001,3.666000000000000e+002},
          {1.025660267328408e+001,-2.943360905079618e+001,5.733260395197137e+001,
          3.668000000000001e+002},{9.761584790130781e+000,-2.932086371792684e+001,
          5.712724552477193e+001,3.670000000000000e+002},{9.240175660907763e+000,
          -2.921264175923935e+001,5.692192087203171e+001,3.672000000000001e+002},
          {8.686057647179084e+000,-2.910918755650368e+001,5.671659719110131e+001,
          3.673999999999998e+002},{8.778234040826405e+000,-2.901811342102016e+001,
          5.651125648369048e+001,3.675999999999999e+002},{6.691629539833685e+000,
          -2.890243901808726e+001,5.630576331567251e+001,3.677999999999998e+002},
          {7.290370456106036e+000,-2.883742522272521e+001,5.610033249324230e+001,
          3.679999999999999e+002},{6.272233268873873e+000,-2.874834766050094e+001,
          5.589459420906075e+001,3.682000000000001e+002},{5.558422478759069e+000,
          -2.867317963045713e+001,5.568870519404406e+001,3.683999999999999e+002},
          {4.792961753723030e+000,-2.860487749510562e+001,5.548256579547770e+001,
          3.685999999999999e+002},{3.968238215541748e+000,-2.854396871234190e+001,
          5.527612109369429e+001,3.687999999999998e+002},{3.075217193011998e+000,
          -2.849105390721893e+001,5.506931114354074e+001,3.690000000000001e+002},
          {2.103060257219561e+000,-2.844681941762896e+001,5.486207027055930e+001,
          3.692000000000001e+002},{1.038687074059420e+000,-2.841205356272049e+001,
          5.465432623928827e+001,3.694000000000000e+002},{-1.339999048012931e-001,
          -2.838766434327866e+001,5.444599925272737e+001,3.696000000000000e+002},
          {-1.435063121990103e+000,-2.837470417780358e+001,5.423700075757526e+001,
          3.698000000000000e+002},{-2.890489367153537e+000,-2.837439436195233e+001,
          5.402723196589630e+001,3.700000000000001e+002},{-4.535509502325382e+000,
          -2.838815668289008e+001,5.381658203375368e+001,3.702000000000000e+002},
          {-6.421717110684526e+000,-2.841764003690377e+001,5.360492570392729e+001,
          3.704000000000001e+002},{-8.029122269107946e+000,-2.847153711327977e+001,
          5.339213717659963e+001,3.705999999999999e+002},{-1.150718130865884e+001,
          -2.852257064861725e+001,5.317796925804201e+001,3.708000000000000e+002},
          {-1.357244772388494e+001,-2.862919062243810e+001,5.296244024140553e+001,
          3.710000000000001e+002},{-1.717479675911297e+001,-2.874214450332900e+001,
          5.274508640521118e+001,3.711999999999999e+002},{-2.123801901866396e+001,
          -2.889134404513250e+001,5.252580043857113e+001,3.714000000000001e+002},
          {-2.619511142469762e+001,-2.907738790923127e+001,5.230424646131181e+001,
          3.716000000000000e+002},{-3.236073058364635e+001,-2.930723253179286e+001,
          5.208006194513168e+001,3.717999999999999e+002},{-4.022068942597398e+001,
          -2.958957539713408e+001,5.185280422638054e+001,3.720000000000000e+002},
          {-5.027803753687388e+001,-2.993866920656852e+001,5.162193160829787e+001,
          3.721999999999999e+002},{-6.436974496162212e+001,-3.035919422556437e+001,
          5.138671614373845e+001,3.724000000000002e+002},{-8.360686397848249e+001,
          -3.088595220083816e+001,5.114631483263473e+001,3.726000000000000e+002},
          {-1.100834389241486e+002,-3.155568586681570e+001,5.089950843562296e+001,
          3.728000000000001e+002},{-1.472841062914758e+002,-3.245099931262556e+001,
          5.064476196619719e+001,3.730000000000000e+002},{-2.021579877018242e+002,
          -3.370859211762419e+001,5.037989000027908e+001,3.732000000000001e+002},
          {-2.897791479469411e+002,-3.471839082840622e+001,5.017174758533965e+001,
          3.733500000000000e+002},{-4.370418417975305e+002,-3.595572803188362e+001,
          4.995306621058514e+001,3.735000000000001e+002},{-6.808564431390644e+002,
          -3.803753250618856e+001,4.971098502785520e+001,3.736561480000000e+002},
          {-1.079182893585270e+003,-4.178442673431590e+001,4.945933042367851e+001,
          3.738058199999999e+002},{-1.681835788759286e+003,-4.662329946397544e+001,
          4.925008325739737e+001,3.739180740000000e+002},{-2.582563222934587e+003,
          -5.134362044917342e+001,4.909428751215069e+001,3.739929099999999e+002},
          {-4.106828068576426e+003,-5.577687841590389e+001,4.896368572381315e+001,
          3.740490370000001e+002},{-5.107591845246606e+003,-6.580440293493800e+001,
          4.883933501194808e+001,3.740976804000001e+002},{-9.771765920564003e+003,
          -7.560712452291881e+001,4.870422526751046e+001,3.741425820000000e+002},
          {-8.755497642709564e+003,-8.742278426612906e+001,4.864183118847620e+001,
          3.741612909999998e+002},{-9.815118604201449e+003,-9.075723406919788e+001,
          4.861419440063168e+001,3.741687745999999e+002},{-1.598688798560589e+004,
          -9.374464327459545e+001,4.857016747633733e+001,3.741800000000001e+002},
          {-1.920875724714269e+004,-1.019624881152255e+002,4.852930969549549e+001,
          3.741899999999998e+002},{-1.636215913588905e+005,-7.659891465615223e+001,
          4.848251558276280e+001,3.741999999999999e+002},{-1.286897688417260e+006,
          1.186575607887113e+001,4.845730381784014e+001,3.742050000000000e+002},{
          8.838952576730371e+007,-4.445028478910222e+003,4.849792832024318e+001,
          3.742074999999999e+002}};
      constant Real[Ninterval, 4] ptcoef={{0.786553610980441,0.073986317581331,
          0.004029258982827,0.000095977628483},{0.804804842020852,
          0.075513868977931,0.004128852620146,0.000098693577477},{
          0.826483769874362,0.076781180144682,0.004214141994619,0.000101026437564},
          {0.852226781522051,0.079838214007716,0.004413722019840,
          0.000106516958458},{0.878734233127809,0.083011720420838,
          0.004622630654312,0.000112305941336},{0.905918938100631,
          0.086306406812799,0.004841289235230,0.000118409424841},{
          0.933873884997079,0.089726230581858,0.005070153132594,0.000124844693392},
          {0.962577238137988,0.093275895699320,0.005309687431187,
          0.000131629706447},{0.992070856558737,0.096959926219076,
          0.005560383405310,0.000138783529530},{1.022340779604642,
          0.100783239811202,0.005822748456693,0.000146326107976},{
          1.053408429650162,0.104750722856737,0.006097318061549,0.000154278611181},
          {1.085334401770672,0.108867191838833,0.006384645627683,
          0.000162663184614},{1.118066059070003,0.113138431880924,
          0.006685319756183,0.000171503506240},{1.151675830716446,
          0.117569521390065,0.006999950677252,0.000180824369499},{
          1.186152658253827,0.122166182229820,0.007329167943923,0.000190651710758},
          {1.221529325860328,0.126934198374854,0.007673642176701,
          0.000201013248529},{1.257786462283640,0.131879624460586,
          0.008034059624186,0.000211937791220},{1.294812956053328,
          0.137009131430195,0.008411150309429,0.000223456117470},{
          1.332050814897662,0.142331923230738,0.008805666323160,0.000235600452886},
          {1.369397755526468,0.147855890364265,0.009218393425041,
          0.000248404751272},{1.406816638143677,0.153467769902578,
          0.009641353399052,0.000261628465319},{1.444356079648527,
          0.158956456158090,0.010059134663008,0.000274788118369},{
          1.482496486580440,0.164593208638941,0.010491786565620,0.000288515879081},
          {1.521219525653765,0.170380509776158,0.010939707938024,
          0.000302831882662},{1.560542804418774,0.176320624445618,
          0.011403304275305,0.000317756801604},{1.600437543776211,
          0.182416074041046,0.011882987053658,0.000333311854289},{
          1.640936272107287,0.188669018847875,0.012379174551977,0.000349518813327},
          {1.681996400839473,0.195082050643184,0.012892290728097,
          0.000366400014143},{1.723656934024151,0.201657263429387,
          0.013422766529104,0.000383978363163},{1.765877582075693,
          0.208397225399801,0.013971038423670,0.000402277346453},{
          1.808673898875252,0.215304119402563,0.014537549727065,0.000421321037758},
          {1.852056948436205,0.222380208630733,0.015122749655067,
          0.000441134107092},{1.895976234842191,0.229628047386924,
          0.015727093310843,0.000461741828759},{1.940485837249081,
          0.237049568378319,0.016351042726376,0.000483170089585},{
          1.985535349395222,0.244647339911478,0.016995065014999,0.000505445397324},
          {2.031148612115400,0.252423430625727,0.017659634148470,
          0.000528594888329},{2.077302947391230,0.260380191193645,
          0.018345229588173,0.000552646335999},{2.124013371424510,
          0.268519730288320,0.019052337090330,0.000577628158512},{
          2.171233734600246,0.276844461955414,0.019781447908203,0.000603569426887},
          {2.219036879803186,0.285356138275785,0.020533059923821,
          0.000630499872733},{2.267319033113332,0.294057511278019,
          0.021307675460814,0.000658449896208},{2.316150758140982,
          0.302950218193697,0.022105804263753,0.000687450573315},{
          2.365499765564834,0.312036591386713,0.022927960463078,0.000717533664244},
          {2.415341254676885,0.321318803772746,0.023774664275808,
          0.000748731620229},{2.465702228666255,0.330798721201480,
          0.024646441777799,0.000781077591413},{2.516566337049237,
          0.340478491545039,0.025543824020845,0.000814605434250},{
          2.567900988365430,0.350360262236221,0.026467347650949,0.000849349718558},
          {2.619736333280843,0.360445798567964,0.027417555102175,
          0.000885345734951},{2.672048765758521,0.370737202172238,
          0.028394993495523,0.000922629502038},{2.724826587346702,
          0.381236432325441,0.029400215484282,0.000961237773163},{
          2.778063214522083,0.391945380908662,0.030433778913126,0.001001208043570},
          {2.831766036616288,0.402865857403683,0.031496246697041,
          0.001042578557225},{2.885908682390723,0.413999836240006,
          0.032588186505531,0.001085388313488},{2.940499375779766,
          0.425349047466033,0.033710171266653,0.001129677073668},{
          2.995518695471547,0.436915364909673,0.034862778477020,0.001175485367706},
          {3.050956509836956,0.448700547312638,0.036046590569830,
          0.001222854500461},{3.106820822095549,0.460706240111525,
          0.037262194688661,0.001271826558129},{3.163093309167843,
          0.472934226350843,0.038510182323064,0.001322444414376},{
          3.219746757773316,0.485386251264479,0.039791149597540,0.001374751736327},
          {3.276823378325092,0.498063672720634,0.041105697402525,
          0.001428792990668},{3.334256093194325,0.510968455863627,
          0.042454430092932,0.001484613449495},{3.392066452222572,
          0.524101941700382,0.043837957232333,0.001542259195759},{
          3.450267320729766,0.537465592429579,0.045256892052289,0.001601777129328},
          {3.508789067634338,0.551061252504325,0.046711851466142,
          0.001663214972080},{3.567677958706406,0.564890022697125,
          0.048203457357055,0.001726621273310},{3.626905151411771,
          0.578953490302442,0.049732334529406,0.001792045415320},{
          3.686462083749643,0.593253045708126,0.051299111947236,0.001859537618008},
          {3.746327635912001,0.607790095318200,0.052904422199431,
          0.001929148944129},{3.806521328539690,0.622565797973926,
          0.054548901665213,0.002000931304129},{3.867009632214078,
          0.637581603413359,0.056233189735702,0.002074937460871},{
          3.927782116924284,0.652838734378914,0.057957929579066,0.002151221034049},
          {3.988852365666806,0.668338275550249,0.059723767660887,
          0.002229836504888},{4.050192516216124,0.684081532186310,
          0.061531353270102,0.002310839220353},{4.111789278896813,
          0.700069639448781,0.063381339086498,0.002394285397225},{
          4.173651666210960,0.716303589828222,0.065274380831822,0.002480232126358},
          {4.235756676172436,0.732784540271985,0.067211136814012,
          0.002568737376544},{4.298085502042800,0.749513538707623,
          0.069192268324502,0.002659859998184},{4.360671661599279,
          0.766491347937005,0.071218439541212,0.002753659727090},{
          4.423438949366865,0.783719304937090,0.073290316468236,0.002850197187960},
          {4.486438551377852,0.801197930575199,0.075408568729196,
          0.002949533897579},{4.549635083346689,0.818928297908401,
          0.077573867304666,0.003051732268502},{4.613005208765145,
          0.836911289865486,0.079786885896258,0.003156855611648},{
          4.676574403683728,0.855147500168120,0.082048300614339,0.003264968139624},
          {4.740297050704474,0.873637909632577,0.084358789038483,
          0.003376134969544},{4.804190690507514,0.892383063052667,
          0.086719031350494,0.003490422125512},{4.868235121873531,
          0.911383726822147,0.089129709147211,0.003607896541475},{
          4.932419559693664,0.930640548615199,0.091591505998932,0.003728626063414},
          {4.996730104947655,0.950154145354210,0.094105107137860,
          0.003852679451797},{5.061189204396221,0.969924932558094,
          0.096671199500138,0.003980126383733},{5.125721774355183,
          0.989953806668835,0.099290470904280,0.004111037454977},{
          5.190399776670092,1.010240773734387,0.101963611687264,0.004245484181735},
          {5.255151436743157,1.030786704419071,0.104691312074425,
          0.004383539002791},{5.319997881680896,1.051591809289908,
          0.107474264565075,0.004525275280559},{5.384915083275455,
          1.072656564602096,0.110313162173150,0.004670767303162},{
          5.449915764807296,1.093981202980726,0.113208699187816,0.004820090285488},
          {5.514961084515890,1.115566214746911,0.116161570403907,
          0.004973320370546},{5.580069995165794,1.137411702858405,
          0.119172471924876,0.005130534630481},{5.645214917013816,
          1.159518032770311,0.122242100064668,0.005291811067763},{
          5.710397135075893,1.181885343682942,0.125371152069178,0.005457228615834},
          {5.775601905695197,1.204513844192818,0.128560325505952,
          0.005626867140010},{5.840835782784636,1.227403598430226,
          0.131810318497041,0.005800807438005},{5.906059494800497,
          1.250554880485784,0.135121829207348,0.005979131240455},{
          5.971301283679346,1.273967536407251,0.138495556564960,0.006161921211248},
          {6.036525184627135,1.297641782816887,0.141932199008561,
          0.006349260947941},{6.101742108554982,1.321577504276583,
          0.145432455530469,0.006541234981608},{6.166925944102037,
          1.345774777484733,0.148997024740760,0.006737928777106},{
          6.232083718610021,1.370233441641100,0.152626605432942,0.006939428732812},
          {6.297207184980851,1.394953425336797,0.156321895953925,
          0.007145822180530},{6.362277871137049,1.419934665093411,
          0.160083594379107,0.007357197385014},{6.427293032446297,
          1.445176960347283,0.163912398571472,0.007573643543593},{
          6.492248494825507,1.470680105264633,0.167809005838224,0.007795250785685},
          {6.557139915959902,1.496443877947695,0.171774112913575,
          0.008022110172037},{6.621948550316446,1.522468096828492,
          0.175808415864079,0.008254313693933},{6.686677764125916,
          1.548752416568682,0.179912610249625,0.008491954272338},{
          6.751318489523362,1.575296555162762,0.184087390680888,0.008735125756982},
          {6.815849328693517,1.602100243679581,0.188333450922353,
          0.008983922925176},{6.880294415977666,1.629162944906189,
          0.192651484067798,0.009238441480674},{6.944622895829550,
          1.656484438791168,0.197042181708333,0.009498778052406},{
          7.008826622849972,1.684064290571623,0.201506234762844,0.009765030192908},
          {7.072914856384893,1.711901963064116,0.206044333006924,
          0.010037296377091},{7.136877800207411,1.739997032582018,
          0.210657164762212,0.010315676000575},{7.200691051456989,
          1.768349094724015,0.215345417113497,0.010600269377903},{
          7.264377479650122,1.796957457787893,0.220109776102959,0.010891177740886},
          {7.327906141296870,1.825821737448506,0.224950925854684,
          0.011188503236811},{7.391293625276115,1.854941234807067,
          0.229869549469729,0.011492348926300},{7.454508371077754,
          1.884315510467502,0.234866328098409,0.011802818781492},{
          7.517569054229431,1.913943797155383,0.239941941727175,0.012120017683787},
          {7.580459415407503,1.943825542494100,0.245097068267364,
          0.012444051421826},{7.643171908708069,1.973960094001435,
          0.250332384098234,0.012775026689016},{7.705707996362623,
          2.004346732841488,0.255648563847159,0.013113051081326},{
          7.768059519623182,2.034984784600641,0.261046280194050,0.013458233094852},
          {7.830220904482947,2.065873531807347,0.266526203982097,
          0.013810682123266},{7.892188564751971,2.097012226673120,
          0.272089004114447,0.014170508455295},{7.953965487964128,
          2.128400080683881,0.277735347500195,0.014537823272081},{
          8.015523649434170,2.160036441620303,0.283465898846533,0.014912738644454},
          {8.076895462829125,2.191920302660508,0.289281321183433,
          0.015295367530163},{8.138044320167687,2.224051063573816,
          0.295182274777506,0.015685823771147},{8.198976439581513,
          2.256427805724049,0.301169418248213,0.016084222090402},{
          8.259707938402711,2.289049595720479,0.307243407828786,0.016490678089312},
          {8.320192607430975,2.321915814614592,0.313404897121920,
          0.016905308244463},{8.380470028810771,2.355025314333463,
          0.319654538135147,0.017328229904537},{8.440522518139051,
          2.388377335023929,0.325992979815505,0.017759561287442},{
          8.500322217978708,2.421971086721057,0.332420868948437,0.018199421476779},
          {8.559907453252212,2.455805402507063,0.338938850295470,
          0.018647930418875},{8.619247679352942,2.489879545144593,
          0.345547565459140,0.019105208919565},{8.678350338810887,
          2.524192502690502,0.352247654043904,0.019571378640574},{
          8.737200358793032,2.558743383285288,0.359039752909466,0.020046562096445},
          {8.795818738593697,2.593531090067868,0.365924496580261,
          0.020530882651035},{8.854183207405342,2.628554783799626,
          0.372902516607536,0.021024464514114},{8.912292637601727,
          2.663813451198047,0.379974442256104,0.021527432737748},{
          8.970164816146156,2.699305998657141,0.387140900144449,0.022039913212986},
          {9.027764581740044,2.735031616100854,0.394402513874834,
          0.022562032666223},{9.085123127706376,2.770989086540987,
          0.401759904933333,0.023093918655552},{9.142217145365851,
          2.807177536491606,0.409213691526334,0.023635699567366},{
          9.199057526581893,2.843595861945240,0.416764489523273,0.024187504612462},
          {9.255634156711325,2.880243086753219,0.424412911826686,
          0.024749463822588},{9.311949978406053,2.917118141884187,
          0.432159568722993,0.025321708046652},{9.368005011068972,
          2.954219981819242,0.440005067647167,0.025904368947099},{
          9.423798091407672,2.991547565855996,0.447950013236107,0.026497578996133},
          {9.479322284803363,3.029099871775003,0.455995007318796,
          0.027101471471982},{9.534586801784080,3.066875784845970,
          0.464140649013009,0.027716180455168},{9.589583111450359,
          3.104874298352855,0.472387534443667,0.028341840824758},{
          9.644318672936832,3.143094307303569,0.480736257056818,0.028978588254514},
          {9.698780209475908,3.181534819712769,0.489187407311572,
          0.029626559209175},{9.752988166020387,3.220194655215614,
          0.497741573065422,0.030285890940625},{9.806914003161001,
          3.259072911744028,0.506399338956173,0.030956721484151},{
          9.860588583346717,3.298168334723664,0.515161287270285,0.031639189654531},
          {9.913991884695866,3.337479997260490,0.524027996925208,
          0.032333435042396},{9.967130228266164,3.377006786609229,
          0.533000044348281,0.033039598010199},{10.020005553537565,
          3.416747632921908,0.542078003011462,0.033757819688613},{
          10.072615604413384,3.456701490940380,0.551262443523183,
          0.034488241972654},{10.124967253171006,3.496867269778813,
          0.560553933719096,0.035231007517885},{10.177046563723209,
          3.537243989500037,0.569953038482225,0.035986259736650},{
          10.228875748201631,3.577830469437759,0.579460320131242,
          0.036754142794284},{10.280445312958783,3.618625745018311,
          0.589076337835556,0.037534801605407},{10.331749969404274,
          3.659628796758036,0.598801648151134,0.038328381830030},{
          10.382798930610805,3.700838525857476,0.608636804932991,
          0.039135029869976},{10.433600732654398,3.742253873156421,
          0.618582359146748,0.039954892865162},{10.484133544637205,
          3.783873935436875,0.628638858864915,0.040788118689806},{
          10.534436373982112,3.825697478101712,0.638806849846641,
          0.041634855948772},{10.584473346798614,3.867723723077579,
          0.649086874493393,0.042495253974029},{10.634263232829829,
          3.909951529450528,0.659479473130387,0.043369462820802},{
          10.683818854528312,3.952379855381508,0.669985183113258,
          0.044257633264281},{10.733119485900088,3.995007844903166,
          0.680604538962431,0.045159916795814},{10.782187429189030,
          4.037834386520546,0.691338072953496,0.046076465619372},{
          10.831022040856825,4.080858550106148,0.702186314429305,
          0.047007432648198},{10.879606700772708,4.124079466970156,
          0.713149790186699,0.047952971501152},{10.927971273840956,
          4.167496015473688,0.724229024778087,0.048913236499386},{
          10.976106518013856,4.211107350457580,0.735424539778802,
          0.049888382663002},{11.024007342655198,4.254912573065150,
          0.746736854471000,0.050878565707475},{11.071698030565202,
          4.298910646304973,0.758166485812413,0.051883942040502},{
          11.119157876862268,4.343100810847359,0.769713947959052,
          0.052904668758722},{11.166410089929238,4.387482048337676,
          0.781379753083690,0.053940903644358},{11.213444532743557,
          4.432053567134218,0.793164410642923,0.054992805162211},{
          11.260274048538790,4.476814442825981,0.805068428005676,
          0.056060532456357},{11.306896593576145,4.521763862164671,
          0.817092310086160,0.057144245347173},{11.353322382593026,
          4.566900954540457,0.829236559658240,0.058244104328223},{
          11.399547252019955,4.612224948003909,0.841501677172442,
          0.059360270563319},{11.445587422729814,4.657734972153432,
          0.853888161066984,0.060492905883569},{11.491426255466461,
          4.703430353321102,0.866396507423689,0.061642172784548},{
          11.537096574565506,4.749310152874991,0.879027210611636,
          0.062808234423435},{11.582580184110803,4.795373768279950,
          0.891780762485170,0.063991254616361},{11.627892085691373,
          4.841620390979311,0.904657653309611,0.065191397835530},{
          11.673035757508945,4.888049318737771,0.917658371228776,
          0.066408829206806},{11.718011197256940,4.934659877239165,
          0.930783402516026,0.067643714507045},{11.762834239165681,
          4.981451328650070,0.944033231699365,0.068896220161631},{
          11.807497796646979,5.028423090503301,0.957408341337984,
          0.070166513242073},{11.852019325559198,5.075574453530177,
          0.970909212484283,0.071454761463596},{11.896393217304059,
          5.122904870887758,0.984536324306399,0.072761133182957},{
          11.940631343927475,5.170413703210555,0.998290154543469,
          0.074085797396168},{11.984740791999011,5.218100377914232,
          1.012171179272453,0.075428923736457},{12.028718632188408,
          5.265964390903449,1.026179873042613,0.076790682472158},{
          12.072586720369342,5.314005127040347,1.040316709128782,
          0.078171244504771},{12.116334688142151,5.362222187928859,
          1.054582159164051,0.079570781367113},{12.159978238056379,
          5.410615029139965,1.068976693754340,0.080989465221439},{
          12.203519113274206,5.459183225116353,1.083500782085046,
          0.082427468857874},{12.246973860534712,5.507926297975900,
          1.098154892266446,0.083884965692685},{12.290333050611526,
          5.556843940294234,1.112939491127611,0.085362129766796},{
          12.333616287920439,5.605935690440304,1.127855044729348,
          0.086859135744312},{12.376827944463761,5.655201226431555,
          1.142902017949415,0.088376158911288},{12.419970336161901,
          5.704640252028573,1.158080874821313,0.089913375174364},{
          12.463057868403830,5.754252431854722,1.173392078642345,
          0.091470961059675},{12.506093470453104,5.804037534286757,
          1.188836091849739,0.093049093711825},{12.549084484576550,
          5.853995321776277,1.204413376293114,0.094647950892901},{
          12.592041013933368,5.904125575040546,1.220124393236732,
          0.096267710981682},{12.634969844799203,5.954428128657826,
          1.235969603401023,0.097908552972900},{12.677879333523451,
          6.004902838096064,1.251949467106324,0.099570656476601},{
          12.720778138710589,6.055549591140720,1.268064444332499,
          0.101254201717648},{12.763677927417257,6.106368298174700,
          1.284314994816732,0.102959369535330},{12.806573690779381,
          6.157358983209033,1.300701578059685,0.104686341383082},{
          12.849495734467585,6.208521508652972,1.317224653725359,
          0.106435299328330},{12.892432395176041,6.259856026588764,
          1.333884681122604,0.108206426052510},{12.935407425706483,
          6.311362500376266,1.350682120030723,0.109999904851008},{
          12.978425056907367,6.363041066848615,1.367617430188535,
          0.111815919633535},{13.021491468318452,6.414891872038170,
          1.384691071730111,0.113654654924339},{13.064617370780807,
          6.466915068601184,1.401903505228866,0.115516295862749},{
          13.107822326512034,6.519110816528661,1.419255191755479,
          0.117401028203792},{13.151102428135824,6.571479448359150,
          1.436746592829065,0.119309038318884},{13.194475889857047,
          6.624021192307916,1.454378170915361,0.121240513196689},{
          13.237950456876277,6.676736391559659,1.472150389150132,
          0.123195640444242},{13.281543801507878,6.729625380540582,
          1.490063711663251,0.125174608288032},{13.325252146812181,
          6.782688650527698,1.508118603496211,0.127177605575334},{
          13.369105579817697,6.835926541870936,1.526315531104156,
          0.129204821775656},{13.413096345193450,6.889339667250363,
          1.544654961877694,0.131256446982442},{13.457252262710217,
          6.942928465635696,1.563137364930240,0.133332671914716},{
          13.501577668383591,6.996693581650487,1.581763210613397,
          0.135433687919157},{13.546081324560269,7.050635659475550,
          1.600532971040650,0.137559686972068},{13.590784720119347,
          7.104755327585545,1.619447120138809,0.139710861681738},{
          13.635691247339029,7.159053373072407,1.638506133564744,
          0.141887405290866},{13.680822070366473,7.213530525265771,
          1.657710489160656,0.144089511679116},{13.726188668268707,
          7.268187637271742,1.677060666796245,0.146317375365973},{
          13.771798297574913,7.323025625062165,1.696557148667505,
          0.148571191513651},{13.817664037870237,7.378045410406364,
          1.716200419477746,0.150851155930304},{13.863822536457358,
          7.433247873019335,1.735990966547698,0.153157465073401},{
          13.910252564596428,7.488634271483426,1.755929279538731,
          0.155490316053202},{13.957000220459447,7.544205509430398,
          1.776015851602120,0.157849906636426},{14.004059404788652,
          7.599962884516280,1.796251178364456,0.160236435250439},{
          14.051458652306392,7.655907531048133,1.816635759011231,
          0.162650100987143},{14.099212398107770,7.712040754313932,
          1.837170095861397,0.165091103607519},{14.147325830763135,
          7.768363954548588,1.857854694766285,0.167559643546089},{
          14.195829055713423,7.824878452918044,1.878690065435772,
          0.170055921915781},{14.244733952698137,7.881585764229075,
          1.899676721206714,0.172580140513001},{14.294057776086026,
          7.938487429382151,1.920815179546794,0.175132501822787},{
          14.343815086396987,7.995585069263414,1.942105962124181,
          0.177713209024381},{14.394032268232515,8.052880315699051,
          1.963549595058805,0.180322465996985},{14.444723227764078,
          8.110374956342044,1.985146608928002,0.182960477325750},{
          14.495902989738047,8.168070830084497,2.006897539164692,
          0.185627448307985},{14.547604591999210,8.225969763841938,
          2.028802926260754,0.188323584959739},{14.599830390476210,
          8.284073839908597,2.050863315657581,0.191049094022576},{
          14.652622712367227,8.342384989911224,2.073079258516169,
          0.193804182970581},{14.705976237638581,8.400905505967810,
          2.095451311216376,0.196589060017819},{14.759945876695406,
          8.459637417523181,2.117980036449677,0.199403934125846},{
          14.814518646197049,8.518583246343280,2.140666002382416,
          0.202249015011809},{14.869750175199750,8.577745187148663,
          2.163509784095016,0.205124513156487},{14.925639645519096,
          8.637125883725918,2.186511962629850,0.208030639813101},{
          14.982229688310740,8.696727802523457,2.209673126244849,
          0.210967607015953},{15.039533284178862,8.756553699721664,
          2.232993869911483,0.213935627589852},{15.097579737480817,
          8.816606318080309,2.256474796094395,0.216934915159529},{
          15.156404639376522,8.876888492665323,2.280116514767052,
          0.219965684159667},{15.216017087353354,8.937403307410889,
          2.303919643575055,0.223028149845113},{15.276468737781256,
          8.998153712061299,2.327884808606054,0.226122528301507},{
          15.337764957062324,9.059143049053603,2.352012643941528,
          0.229249036456430},{15.399953708033358,9.120374511511402,
          2.376303792775960,0.232407892090670},{15.463063557119732,
          9.181851562515480,2.400758907024612,0.235599313850235},{
          15.527112665343029,9.243577821571789,2.425378647972495,
          0.238823521258444},{15.592155238801022,9.305556836457487,
          2.450163686802990,0.242080734728696},{15.658205916070527,
          9.367792530614247,2.475114704329850,0.245371175577657},{
          15.725311601613303,9.430288756971484,2.500232392044810,
          0.248695066038703},{15.793507965239648,9.493049601511352,
          2.525517451946825,0.252052629276138},{15.862825932729402,
          9.556079312219197,2.550970597127956,0.255444089399622},{
          15.933312197602097,9.619382197849491,2.576592552254044,
          0.258869671479274},{16.004995953725416,9.682962824454661,
          2.602384053692833,0.262329601561279},{16.077934097300989,
          9.746825764001034,2.628345850269465,0.265824106683943},{
          16.152154592300423,9.810975932600028,2.654478703227895,
          0.269353414894413},{16.227712509060744,9.875418249703314,
          2.680783387196289,0.272917755265819},{16.304641683475939,
          9.940157940705490,2.707260690167921,0.276517357915222},{
          16.383003793998693,10.005200254894007,2.733911414380859,
          0.280152454021976},{16.462838398153838,10.070550777666666,
          2.760736376351767,0.283823275846862},{16.544196962610815,
          10.136215205238340,2.787736407777602,0.287530056751718},{
          16.627135322317265,10.202199422476509,2.814912355868767,
          0.291273031219949},{16.711706524449259,10.268509549183181,
          2.842265083851243,0.295052434877599},{16.797965223152705,
          10.335151911490948,2.869795471594543,0.298868504515166},{
          16.885973077432112,10.402133026596109,2.897504416190871,
          0.302721478110211},{16.975789197985613,10.469459668908286,
          2.925392832470037,0.306611594850730},{17.067475629391790,
          10.537138837988799,2.953461653692272,0.310539095159306},{
          17.161101261098594,10.605177754876001,2.981711832178946,
          0.314504220718140},{17.256727563447523,10.673583946230488,
          3.010144339891328,0.318507214494939},{17.354434081476601,
          10.742365112825921,3.038760169297755,0.322548320769679},{
          17.454286888967282,10.811529328281166,3.067560333823008,
          0.326627785162365},{17.556361872915055,10.881084891722661,
          3.096545868856221,0.330745854661660},{17.660747345879500,
          10.951040356809601,3.125717832414596,0.334902777654663},{
          17.767513251246932,11.021404704495929,3.155077305781520,
          0.339098803957625},{17.876753527147354,11.092187100141274,
          3.184625394700079,0.343334184847757},{17.988558020215013,
          11.163397102005085,3.214363229894611,0.347609173096297},{
          18.103011475980828,11.235044648907479,3.244291968095110,
          0.351924023002582},{18.220219931796926,11.307139934127857,
          3.274412793120600,0.356278990429461},{18.340280778986866,
          11.379693610445296,3.304726916567339,0.360674332839995},{
          18.463298080493942,11.452716694435287,3.335235579044130,
          0.365110309335374},{18.589380769544157,11.526220600337037,
          3.365940051173917,0.369587180694344},{18.718647779688055,
          11.600217138800916,3.396841634701593,0.374105209414034},{
          18.851216237562294,11.674718604461052,3.427941663564171,
          0.378664659752273},{18.987207173821421,11.749737745984419,
          3.459241505194474,0.383265797771458},{19.126757016277303,
          11.825287735512903,3.490742561796580,0.387908891384136},{
          19.270000698205109,11.901382297719167,3.522446271500800,
          0.392594210400251},{19.417078152378568,11.978035678304561,
          3.554354109854081,0.397322026576132},{19.568141318232165,
          12.055262635750358,3.586467591264484,0.402092613665429},{
          19.723341784072204,12.133078538964597,3.618788270391853,
          0.406906247471983},{19.882852937169588,12.211499277098069,
          3.651317743856020,0.411763205904696},{20.046837713802415,
          12.290541476213873,3.684057651628890,0.416663769034575},{
          20.215476229183036,12.370222346595941,3.717009679046383,
          0.421608219153951},{20.388962195235955,12.450559766172979,
          3.750175558448313,0.426596840838175},{20.567492357396723,
          12.531572377068581,3.783557070998268,0.431629921009646},{
          20.751272461251776,12.613279573840439,3.817156048763674,
          0.436707749004418},{20.940523114529331,12.695701516360126,
          3.850974376794579,0.441830616641583},{21.135476236295002,
          12.778859203541924,3.885013995236225,0.446998818295461},{
          21.336375814837982,12.862774515603268,3.919276901634197,
          0.452212650970746},{21.543467768371034,12.947470302848114,
          3.953765153318787,0.457472414380798},{21.757039843293096,
          13.032970233643164,3.988480870150037,0.462778411029265},{
          21.977357441327399,13.119299219389090,4.023426236698062,
          0.468130946295191},{22.204737719518644,13.206483027886401,
          4.058603505710217,0.473530328521646},{22.439488108542466,
          13.294548737309782,4.094015000456882,0.478976869108469},{
          22.681951162306543,13.383524517175067,4.129663118341967,
          0.484470882608819},{22.932481353049372,13.473439862652034,
          4.165550333923462,0.490012686830258},{23.191458098134174,
          13.564325589516613,4.201679202567487,0.495602602940237},{
          23.459284149429621,13.656213940965090,4.238052364104783,
          0.501240955576484},{23.736388399611037,13.749138669767067,
          4.274672546779892,0.506928072962465},{24.024430476092892,
          13.843130314827746,4.311542575726286,0.512664287028277},{
          24.322901123698131,13.938228205581177,4.348665367591055,
          0.518449933537306},{24.631006458958126,14.034476212891667,
          4.386043942312380,0.524285352219018},{24.947842383313581,
          14.133566333461264,4.424302227413089,0.530268052279225},{
          25.270996534558169,14.232467569803379,4.462269952561297,
          0.536214887057049},{25.600402310675729,14.330975064669545,
          4.499865784968846,0.542112503476356},{25.936148140993652,
          14.429098478934334,4.537090582375646,0.547960412315172},{
          26.278342961331273,14.526847123997111,4.573945317983731,
          0.553758163420801},{26.627081839098057,14.624230171354640,
          4.610431074409271,0.559505344514097},{26.982479035852489,
          14.721256475920658,4.646549038424966,0.565201580011704},{
          27.344634819583604,14.817934767851131,4.682300495420807,
          0.570846529867353},{27.713671593677677,14.914273470914237,
          4.717686824578717,0.576439888432411},{28.089691272397957,
          15.010280930582828,4.752709493736557,0.581981383336399},{
          28.472824854307039,15.105965165341871,4.787370055045711,
          0.587470774387750},{28.863193517870002,15.201334102546408,
          4.821670140178958,0.592907852495206},{29.260918302887685,
          15.296395505394935,4.855611456225897,0.598292438610054},{
          29.666132958462629,15.391156926950673,4.889195781620369,
          0.603624382689606},{30.078982460204806,15.485625755858862,
          4.922424962124026,0.608903562681821},{30.499592721193313,
          15.579809342711769,4.955300906990578,0.614129883531367},{
          30.928117472544855,15.673714785982705,4.987825585602939,
          0.619303276207172},{31.364710865969087,15.767349102050195,
          5.020001023779209,0.624423696751405},{31.809515123102404,
          15.860719254916436,5.051829300512150,0.629491125349948},{
          32.262705236081672,15.953831979977263,5.083312544958544,
          0.634505565424281},{32.724447907289544,16.046694000766831,
          5.114452933148136,0.639467042744666},{33.194897132039792,
          16.139312001629271,5.145252685204367,0.644375604564581},{
          33.674255019897664,16.231692414917958,5.175714062698377,
          0.649231318776222},{34.162693117856691,16.323841771582561,
          5.205839365624563,0.654034273086982},{34.660408283882070,
          16.415766446679168,5.235630930162420,0.658784574216433},{
          35.167590811037854,16.507472809522142,5.265091126045004,
          0.663482347114145},{35.684449944091867,16.598967127675568,
          5.294222354303641,0.668127734197491},{36.211206269977197,
          16.690255627599420,5.323027044937864,0.672720894609739},{
          36.748056707258620,16.781344600488524,5.351507654715894,
          0.677262003497751},{37.295248265383698,16.872240144915182,
          5.379666665308135,0.681751251309287},{37.852995971145809,
          16.962948488394094,5.407506580997999,0.686188843109573},{
          38.421564488506611,17.053475690433864,5.435029927062224,
          0.690574997916736},{39.001171266768537,17.143827988284571,
          5.462239247649191,0.694909948055925},{39.592097221535276,
          17.234011403696112,5.489137104365301,0.699193938531812},{
          40.194606324023972,17.324032074846357,5.515726074258302,
          0.703427226419012},{40.808938401803530,17.413896207928254,
          5.542008748346981,0.707610080270340},{41.435436776864577,
          17.503609730835098,5.567987730243535,0.711742779542350},{
          42.074330693130328,17.593178988541467,5.593665634167064,
          0.715825614037971},{42.725940101764373,17.682610023334441,
          5.619045084134955,0.719858883365846},{43.390590488356239,
          17.771908949085155,5.644128712167098,0.723842896416144},{
          44.070645121622796,17.861077799265878,5.668919158926054,
          0.727777970852333},{44.753184105407975,17.950153724907196,
          5.693419053900836,0.731664432618789},{45.474373691042267,
          18.039048771108984,5.717631098338662,0.735502615463705},{
          46.193899163412112,18.127899243718634,5.741557851475661,
          0.739292860480826},{46.996029946900421,18.216517946983732,
          5.765202097955019,0.743035515642772},{47.975217272766379,
          18.304869267108689,5.788566478022887,0.746730935410193},{
          46.875088973944962,18.397435734790200,5.811651899684304,
          0.750379480284763},{51.065991163454697,18.476818607729076,
          5.834469443821195,0.753981516503356},{49.333461744266728,
          18.573099243289850,5.857003438946910,0.757537415856357},{
          50.827892820844589,18.659006028627026,5.879277141033153,
          0.761047552504248},{51.658864029489543,18.747265541446783,
          5.901281540617321,0.764512309584712},{52.507342163173028,
          18.835468843734557,5.923021904004630,0.767932071140582},{
          53.373793178351164,18.923622470147773,5.944500865847515,
          0.771307225875759},{54.258789501497823,19.011732877688232,
          5.965721054625218,0.774638165973891},{55.162916478482941,
          19.099806756700104,5.986685091803454,0.777925286781048},{
          56.087116564192172,19.187850477830338,6.007395591520163,
          0.781168986499608},{57.032398932408853,19.275871118680147,
          6.027855159614455,0.784369665893400},{58.000369060093050,
          19.363875690575604,6.048066393969457,0.787527728003472},{
          59.016634487394832,19.451836730736815,6.068031895995421,
          0.790643577874778},{60.091857764934808,19.539739992232406,
          6.087754256968488,0.793717622293261},{61.240245331030316,
          19.627560573034796,6.107236083235058,0.796750269533514},{
          62.480561298708686,19.723763384189539,6.128269590423300,
          0.800019963066246},{61.700811904981713,19.825193831111250,
          6.149405839679586,0.803300925851243},{67.613280255293020,
          19.914643859675749,6.170653665148103,0.806593213984968},{
          65.160632861084636,20.026986310421218,6.191997393361786,
          0.809896884700018},{67.669033122940235,20.127441775170933,
          6.213461939269268,0.813211994514738},{69.158974688263967,
          20.233552143778557,6.235035431887980,0.816538605363333},{
          70.723256826348845,20.341932263338009,6.256723667414029,
          0.819876776933363},{72.367614994324157,20.452692130214967,
          6.278529139019087,0.823226571210103},{74.098101167452896,
          20.565950434907393,6.300454462542573,0.826588051543621},{
          75.921523426230067,20.681834359896129,6.322502386312879,
          0.829961282716883},{77.845391462064271,20.800480873586661,
          6.344675800844324,0.833346331019091},{79.877973252120924,
          20.922037773350514,6.366977749927341,0.836743264324587},{
          82.028526688840202,21.046664524133615,6.389411442986359,
          0.840152152177982},{84.307359657115470,21.174533750826306,
          6.411980268436992,0.843573065886157},{86.726134004965445,
          21.305832439883137,6.434687808816977,0.847006078617858},{
          89.298052645255225,21.440763800191853,6.457537857418896,
          0.850451265511744},{92.038364283034596,21.579548930296038,
          6.480534437230531,0.853908703793904},{94.965026588148092,
          21.722429035678608,6.503681822191650,0.857378472906041},{
          98.099651271544445,21.869668254286683,6.526984561549138,
          0.860860654645750},{101.469212866843510,22.021556781161863,
          6.550447508473278,0.864355333320771},{105.108611392323670,
          22.178415351638186,6.574075853974501,0.867862595919685},{
          109.065005486134880,22.340601002668283,6.597875168817166,
          0.871382532302410},{109.750042242080070,22.514375499939113,
          6.621849368866829,0.874915235415403},{122.164468808740280,
          22.670441678991452,6.646016608190354,0.878460801538834},{
          120.492493879440720,22.868998811452705,6.670353260952902,
          0.882019330576957},{127.651716860571530,23.050715346380404,
          6.694905768119855,0.885590923061522},{133.417901827374580,
          23.246144421955755,6.719657855196887,0.889175690895975},{
          139.724332490425070,23.449952674292600,6.744624090533837,
          0.892773744452224},{146.646067568266890,23.662885976357035,
          6.769813936652642,0.896385200660068},{154.272084490525660,
          23.885788232412818,6.795237725626818,0.900010181731173},{
          162.708903919517890,24.119617882190067,6.820906777869384,
          0.903648815653934},{172.084864641046120,24.365469173499047,
          6.846833542039902,0.907301236757100},{182.556942338038600,
          24.624596217120128,6.873031762800324,0.910967586354904},{
          194.319534415060760,24.898444814009999,6.899516681255775,
          0.914648013489756},{207.620595915041970,25.188686585937077,
          6.926305281144004,0.918342675792510},{222.788620730249990,
          25.497261589113076,6.953416591526287,0.922051740486512},{
          240.287692571162920,25.826419168838576,6.980872074207111,
          0.925775385569714},{256.799890482864780,26.185216782196846,
          7.008693832401432,0.929513801223933},{286.851617485832720,
          26.548780722767628,7.036921002156521,0.933267191524989},{
          308.757481229623580,26.973589993440147,7.065557892145567,
          0.937035776577968},{342.616615998311150,27.414357072890436,
          7.094674470820509,0.940819791613239},{381.652936748389780,
          27.901112273738025,7.124294167964932,0.944619499388744},{
          429.420511597585570,28.436458075451569,7.154472608250879,
          0.948435182728345},{488.956374804092890,29.029524488453990,
          7.185270948459126,0.952267155471084},{564.913569104604680,
          29.691719970341111,7.216763630423190,0.956115767213528},{
          662.593654854627520,30.440873759588669,7.249041648619902,
          0.959981411307655},{798.395259632387020,31.285522685311911,
          7.282225938437964,0.963864535640684},{984.858707574925800,
          32.266683177856073,7.316458408944520,0.967765657677109},{
          1240.731677732101800,33.435525835453468,7.351939105152393,
          0.971685384357021},{1599.976231716470900,34.896887003483748,
          7.388921872674265,0.975624447015660},{2129.911398579198200,
          36.824993793515745,7.427765289272872,0.979583747790001},{
          2973.337742375393600,38.358182172438710,7.458590833881339,
          0.982567188320956},{4392.068482735210600,40.182279884917335,
          7.491259295582522,0.985563285803890},{6744.182542887068800,
          43.093253924408778,7.527746112509292,0.988696515392235},{
          10586.401080300620000,48.112109166481709,7.566030993328872,
          0.991714705866086},{16414.657806854295000,54.433838984731196,
          7.598161821734584,0.993988954446224},{25171.400376638227000,
          60.516762902335024,7.622270849789598,0.995510777346757},{
          39924.646532205254000,66.237216173833630,7.642602684084054,
          0.996655475718842},{50014.862506044708000,78.880685852650700,
          7.662052700016630,0.997650144001249},{94512.909959942233000,
          91.545289401322989,7.683298623696445,0.998570741182521},{
          85789.631197521958000,106.331709600833660,7.693152458218265,
          0.998955116981272},{96484.149392753985000,110.551277570634270,
          7.697526525177595,0.999109011318793},{155745.736499270020000,
          114.483229466648910,7.704504194463604,0.999340021303733},{
          187336.117221347780000,124.858748457008220,7.710990375742048,
          0.999545993761771},{1561441.955568452100000,93.976965631416093,
          7.718432905786972,0.999752147562480},{12254471.880229050000000,-14.883471920491438,
          7.722448708901911,0.999855298039152},{-840729689.033797860000000,
          5473.418677569786300,7.715971952179429,0.999906892844623}};
      constant Real[Ninterval, 4] dltcoef={{-7.119202491756649e-001,-2.739402377062618e-001,
          -1.927672596844717e+000,3.108234546713844e+000},{-7.187746754592991e-001,
          -2.753459585506838e-001,-1.928038361308511e+000,3.106950869117843e+000},
          {-7.267169555982382e-001,-2.765215049130652e-001,-1.928347041349235e+000,
          3.105872508783626e+000},{-7.359380114100472e-001,-2.792612028934110e-001,
          -1.929054601531175e+000,3.103417366473884e+000},{-7.451596984095644e-001,
          -2.820546952208173e-001,-1.929773991238450e+000,3.100944868392513e+000},
          {-7.543868380432980e-001,-2.849025526846495e-001,-1.930505474697466e+000,
          3.098454883787075e+000},{-7.636195252102033e-001,-2.878055700919983e-001,
          -1.931249367470398e+000,3.095947126307967e+000},{-7.728608352753940e-001,
          -2.907644204639990e-001,-1.932005961304827e+000,3.093421411830454e+000},
          {-7.821138534967362e-001,-2.937798575560094e-001,-1.932775569789591e+000,
          3.090877503680519e+000},{-7.913807227613616e-001,-2.968525969010559e-001,
          -1.933558497589903e+000,3.088315215846500e+000},{-8.006644142147472e-001,
          -2.999834307075162e-001,-1.934355071871375e+000,3.085734309672668e+000},
          {-8.099668105946853e-001,-3.031731138060267e-001,-1.935165610880807e+000,
          3.083134597151535e+000},{-8.192918853252418e-001,-3.064225359625613e-001,
          -1.935990472438392e+000,3.080515785796513e+000},{-8.286413378736912e-001,
          -3.097325618705826e-001,-1.936830006147945e+000,3.077877633663473e+000},
          {-8.380195338699306e-001,-3.131039924173268e-001,-1.937684552795189e+000,
          3.075219949428117e+000},{-8.474270870580881e-001,-3.165378097414413e-001,
          -1.938554494310329e+000,3.072542437056092e+000},{-8.568696991541474e-001,
          -3.200348522413296e-001,-1.939440187491448e+000,3.069844902846438e+000},
          {-8.663006219851039e-001,-3.235963509846717e-001,-1.940342031243627e+000,
          3.067127048225000e+000},{-8.755969029666063e-001,-3.272238814054915e-001,
          -1.941260416087275e+000,3.064388625095321e+000},{-8.847451895324255e-001,
          -3.309187279025791e-001,-1.942195741563215e+000,3.061629384019479e+000},
          {-8.937320642447604e-001,-3.346053531802966e-001,-1.943129242827890e+000,
          3.058904739456490e+000},{-9.025917571346555e-001,-3.381523238866969e-001,
          -1.944028228246023e+000,3.056307824467905e+000},{-9.114372727199264e-001,
          -3.417348650176046e-001,-1.944936739647034e+000,3.053709701944858e+000},
          {-9.202705051593279e-001,-3.453529129795982e-001,-1.945854872015144e+000,
          3.051110359095721e+000},{-9.290943179147365e-001,-3.490064060917521e-001,
          -1.946782720180552e+000,3.048509783002059e+000},{-9.379113035378066e-001,
          -3.526952951802167e-001,-1.947720378827961e+000,3.045907960618840e+000},
          {-9.467220586520030e-001,-3.564195514784557e-001,-1.948667942508438e+000,
          3.043304878774594e+000},{-9.555308122884657e-001,-3.601791344616129e-001,
          -1.949625505711145e+000,3.040700524171566e+000},{-9.643382215985582e-001,
          -3.639740319079109e-001,-1.950593162835531e+000,3.038094883385813e+000},
          {-9.731477743382022e-001,-3.678042249680064e-001,-1.951571008256408e+000,
          3.035487942867281e+000},{-9.819604804460426e-001,-3.716697186165744e-001,
          -1.952559136308239e+000,3.032879688939842e+000},{-9.907792924725812e-001,
          -3.755705130003580e-001,-1.953557641352945e+000,3.030270107801308e+000},
          {-9.996061903488108e-001,-3.795066236033756e-001,-1.954566617769396e+000,
          3.027659185523410e+000},{-1.008442332217312e+000,-3.834780801466576e-001,
          -1.955586159975327e+000,3.025046908051736e+000},{-1.017291187118612e+000,
          -3.874849056387030e-001,-1.956616362486219e+000,3.022433261205659e+000},
          {-1.026154224708753e+000,-3.915271430094308e-001,-1.957657319899389e+000,
          3.019818230678225e+000},{-1.035032728246099e+000,-3.956048454200966e-001,
          -1.958709126923303e+000,3.017201802035997e+000},{-1.043929801274928e+000,
          -3.997180632397729e-001,-1.959771878421853e+000,3.014583960718895e+000},
          {-1.052846917422804e+000,-4.038668640643446e-001,-1.960845669410642e+000,
          3.011964692039990e+000},{-1.061785874617104e+000,-4.080513211658256e-001,
          -1.961930595091244e+000,3.009343981185274e+000},{-1.070749281155416e+000,
          -4.122715113299520e-001,-1.963026750875285e+000,3.006721813213400e+000},
          {-1.079738284824320e+000,-4.165275287976867e-001,-1.964134232385564e+000,
          3.004098173055395e+000},{-1.088755056537119e+000,-4.208194669364273e-001,
          -1.965253135509263e+000,3.001473045514344e+000},{-1.097802354172137e+000,
          -4.251474262252926e-001,-1.966383556395710e+000,2.998846415265045e+000},
          {-1.106880826500578e+000,-4.295115260316672e-001,-1.967525591470941e+000,
          2.996218266853638e+000},{-1.115992785290996e+000,-4.339118828275575e-001,
          -1.968679337486387e+000,2.993588584697207e+000},{-1.125140601947682e+000,
          -4.383486216067864e-001,-1.969844891518973e+000,2.990957353083350e+000},
          {-1.134325959887290e+000,-4.428218781489602e-001,-1.971022350993147e+000,
          2.988324556169727e+000},{-1.143550497239480e+000,-4.473317957093480e-001,
          -1.972211813704686e+000,2.985690177983577e+000},{-1.152816353482765e+000,
          -4.518785235407696e-001,-1.973413377839173e+000,2.983054202421210e+000},
          {-1.162124575492226e+000,-4.564622237902882e-001,-1.974627141987564e+000,
          2.980416613247473e+000},{-1.171478417504371e+000,-4.610830531229002e-001,
          -1.975853205189499e+000,2.977777394095186e+000},{-1.180878493083438e+000,
          -4.657411912857257e-001,-1.977091666913681e+000,2.975136528464554e+000},
          {-1.190327393133407e+000,-4.704368136453667e-001,-1.978342627116694e+000,
          2.972493999722552e+000},{-1.199826475242167e+000,-4.751701105286942e-001,
          -1.979606186233481e+000,2.969849791102279e+000},{-1.209378307645038e+000,
          -4.799412725128706e-001,-1.980882445220469e+000,2.967203885702293e+000},
          {-1.218983781081318e+000,-4.847505072639017e-001,-1.982171505551098e+000,
          2.964556266485916e+000},{-1.228645580953087e+000,-4.895980192041626e-001,
          -1.983473469263982e+000,2.961906916280511e+000},{-1.238364766758997e+000,
          -4.944840304122741e-001,-1.984788438951109e+000,2.959255817776730e+000},
          {-1.248143707380005e+000,-4.994087621624195e-001,-1.986116517808350e+000,
          2.956602953527749e+000},{-1.257984483464209e+000,-5.043724445474235e-001,
          -1.987457809637882e+000,2.953948305948456e+000},{-1.267888763237574e+000,
          -5.093753175730373e-001,-1.988812418869192e+000,2.951291857314631e+000},
          {-1.277858155074884e+000,-5.144176299820401e-001,-1.990180450575876e+000,
          2.948633589762087e+000},{-1.287894587132058e+000,-5.194996353591673e-001,
          -1.991562010506334e+000,2.945973485285792e+000},{-1.297999978447886e+000,
          -5.246215949107307e-001,-1.992957205097942e+000,2.943311525738964e+000},
          {-1.308176257926076e+000,-5.297837777066512e-001,-1.994366141495533e+000,
          2.940647692832132e+000},{-1.318425322007352e+000,-5.349864596992644e-001,
          -1.995788927575479e+000,2.937981968132178e+000},{-1.328749277117991e+000,
          -5.402299243599632e-001,-1.997225671960814e+000,2.935314333061348e+000},
          {-1.339149199599445e+000,-5.455144676665747e-001,-1.998676484040282e+000,
          2.932644768896240e+000},{-1.349628368224229e+000,-5.508403810419320e-001,
          -2.000141474006426e+000,2.929973256766762e+000},{-1.360187219274824e+000,
          -5.562079806971391e-001,-2.001620752838174e+000,2.927299777655058e+000},
          {-1.370828781127042e+000,-5.616175744949384e-001,-2.003114432369282e+000,
          2.924624312394423e+000},{-1.381554684130381e+000,-5.670694862446681e-001,
          -2.004622625272832e+000,2.921946841668168e+000},{-1.392367149953658e+000,
          -5.725640441787859e-001,-2.006145445098469e+000,2.919267346008476e+000},
          {-1.403267693522663e+000,-5.781015902025207e-001,-2.007683006276334e+000,
          2.916585805795218e+000},{-1.414258411895148e+000,-5.836824691160817e-001,
          -2.009235424161747e+000,2.913902201254752e+000},{-1.425341560697221e+000,
          -5.893070331970658e-001,-2.010802815044349e+000,2.911216512458685e+000},
          {-1.436518650340928e+000,-5.949756469199823e-001,-2.012385296164895e+000,
          2.908528719322610e+000},{-1.447792531093776e+000,-6.006886752803999e-001,
          -2.013982985751103e+000,2.905838801604813e+000},{-1.459164304671427e+000,
          -6.064465023213990e-001,-2.015596003013732e+000,2.903146738904952e+000},
          {-1.470637134656586e+000,-6.122495073552353e-001,-2.017224468204838e+000,
          2.900452510662714e+000},{-1.482211863834624e+000,-6.180980925227824e-001,
          -2.018868502597047e+000,2.897756096156425e+000},{-1.493891852120214e+000,
          -6.239926530648990e-001,-2.020528228550773e+000,2.895057474501652e+000},
          {-1.505678096610527e+000,-6.299336067257686e-001,-2.022203769494007e+000,
          2.892356624649756e+000},{-1.517574031346761e+000,-6.359213660358718e-001,
          -2.023895249984035e+000,2.889653525386434e+000},{-1.529580796468173e+000,
          -6.419563650573666e-001,-2.025602795693617e+000,2.886948155330209e+000},
          {-1.541701356804014e+000,-6.480390354850254e-001,-2.027326533467826e+000,
          2.884240492930909e+000},{-1.553937356952073e+000,-6.541698276740846e-001,
          -2.029066591313422e+000,2.881530516468101e+000},{-1.566290954997507e+000,
          -6.603491961874959e-001,-2.030823098450255e+000,2.878818204049505e+000},
          {-1.578765461793385e+000,-6.665775985380139e-001,-2.032596185332172e+000,
          2.876103533609368e+000},{-1.591361479469684e+000,-6.728555174296306e-001,
          -2.034385983640837e+000,2.873386482906806e+000},{-1.604083053178186e+000,
          -6.791834242424827e-001,-2.036192626363599e+000,2.870667029524126e+000},
          {-1.616931466226678e+000,-6.855618163240326e-001,-2.038016247762119e+000,
          2.867945150865093e+000},{-1.629909893369509e+000,-6.919911893411197e-001,
          -2.039856983439587e+000,2.865220824153184e+000},{-1.643020022349849e+000,
          -6.984720579442955e-001,-2.041714970334005e+000,2.862494026429801e+000},
          {-1.656264551293298e+000,-7.050049397229221e-001,-2.043590346770784e+000,
          2.859764734552450e+000},{-1.669646268624311e+000,-7.115903625664921e-001,
          -2.045483252474063e+000,2.857032925192886e+000},{-1.683167576151129e+000,
          -7.182288656970074e-001,-2.047393828594889e+000,2.854298574835218e+000},
          {-1.696831423652399e+000,-7.249209956676710e-001,-2.049322217741730e+000,
          2.851561659773992e+000},{-1.710639128268257e+000,-7.316673198056414e-001,
          -2.051268563987778e+000,2.848822156112223e+000},{-1.724594742236566e+000,
          -7.384683987028911e-001,-2.053233012939716e+000,2.846080039759406e+000},
          {-1.738700069789140e+000,-7.453248180187038e-001,-2.055215711717725e+000,
          2.843335286429471e+000},{-1.752958138408101e+000,-7.522371655871375e-001,
          -2.057216809020459e+000,2.840587871638726e+000},{-1.767371569680276e+000,
          -7.592060430135096e-001,-2.059236455133438e+000,2.837837770703736e+000},
          {-1.781943384385722e+000,-7.662320613766317e-001,-2.061274801963785e+000,
          2.835084958739185e+000},{-1.796676013498676e+000,-7.733158456018825e-001,
          -2.063332003066546e+000,2.832329410655683e+000},{-1.811572772917376e+000,
          -7.804580273271474e-001,-2.065408213682221e+000,2.829571101157551e+000},
          {-1.826636048726881e+000,-7.876592550863618e-001,-2.067503590753522e+000,
          2.826810004740544e+000},{-1.841869688783150e+000,-7.949201807533446e-001,
          -2.069618292975332e+000,2.824046095689560e+000},{-1.857275569898410e+000,
          -8.022414792244761e-001,-2.071752480798810e+000,2.821279348076279e+000},
          {-1.872858144207920e+000,-8.096238224870805e-001,-2.073906316498295e+000,
          2.818509735756786e+000},{-1.888619059956391e+000,-8.170679126024469e-001,
          -2.076079964156223e+000,2.815737232369135e+000},{-1.904561956423886e+000,
          -8.245744503054575e-001,-2.078273589745324e+000,2.812961811330880e+000},
          {-1.920690668385609e+000,-8.321441499275529e-001,-2.080487361132164e+000,
          2.810183445836552e+000},{-1.937007416473138e+000,-8.397777468295377e-001,
          -2.082721448109063e+000,2.807402108855102e+000},{-1.953516633870803e+000,
          -8.474759771845204e-001,-2.084976022451227e+000,2.804617773127296e+000},
          {-1.970220662325402e+000,-8.552396029642130e-001,-2.087251257918434e+000,
          2.801830411163055e+000},{-1.987123236442702e+000,-8.630693899925094e-001,
          -2.089547330324482e+000,2.799039995238766e+000},{-2.004228350601878e+000,
          -8.709661185707598e-001,-2.091864417548962e+000,2.796246497394527e+000},
          {-2.021538725971305e+000,-8.789305897778639e-001,-2.094202699573659e+000,
          2.793449889431357e+000},{-2.039058367884046e+000,-8.869636101217421e-001,
          -2.096562358541322e+000,2.790650142908356e+000},{-2.056791020141507e+000,
          -8.950660040405472e-001,-2.098943578769776e+000,2.787847229139806e+000},
          {-2.074740298046955e+000,-9.032386105028429e-001,-2.101346546799721e+000,
          2.785041119192230e+000},{-2.092910200608639e+000,-9.114822800669383e-001,
          -2.103771451439775e+000,2.782231783881398e+000},{-2.111304179015425e+000,
          -9.197978847153946e-001,-2.106218483783340e+000,2.779419193769277e+000},
          {-2.129926301106460e+000,-9.281863059214009e-001,-2.108687837277904e+000,
          2.776603319160936e+000},{-2.148780529001271e+000,-9.366484426859110e-001,
          -2.111179707746509e+000,2.773784130101387e+000},{-2.167870835137651e+000,
          -9.451852095934209e-001,-2.113694293436472e+000,2.770961596372379e+000},
          {-2.187201600827261e+000,-9.537975352704542e-001,-2.116231795062518e+000,
          2.768135687489128e+000},{-2.206776744200663e+000,-9.624863678682748e-001,
          -2.118792415842629e+000,2.765306372697000e+000},{-2.226600913877821e+000,
          -9.712526682985949e-001,-2.121376361551813e+000,2.762473620968124e+000},
          {-2.246678099895653e+000,-9.800974184540910e-001,-2.123983840556277e+000,
          2.759637400997960e+000},{-2.267012600006316e+000,-9.890216163020363e-001,
          -2.126615063865472e+000,2.756797681201793e+000},{-2.287609020074218e+000,
          -9.980262753763182e-001,-2.129270245181486e+000,2.753954429711178e+000},
          {-2.308472981636114e+000,-1.007112421979191e+000,-2.131949600945738e+000,
          2.751107614370312e+000},{-2.329607982655612e+000,-1.016281113082512e+000,
          -2.134653350367198e+000,2.748257202732345e+000},{-2.351019199384163e+000,
          -1.025533415332722e+000,-2.137381715498646e+000,2.745403162055640e+000},
          {-2.372711351753493e+000,-1.034870417426487e+000,-2.140134921268429e+000,
          2.742545459299940e+000},{-2.394689420941603e+000,-1.044293225304602e+000,
          -2.142913195543392e+000,2.739684061122500e+000},{-2.416958489696154e+000,
          -1.053802964837059e+000,-2.145716769171991e+000,2.736818933874121e+000},
          {-2.439523927931083e+000,-1.063400781249023e+000,-2.148545876038628e+000,
          2.733950043595136e+000},{-2.462390547826898e+000,-1.073087842531493e+000,
          -2.151400753117987e+000,2.731077356011314e+000},{-2.485563955690444e+000,
          -1.082865334488783e+000,-2.154281640529923e+000,2.728200836529693e+000},
          {-2.509049754370408e+000,-1.092734464087250e+000,-2.157188781596602e+000,
          2.725320450234344e+000},{-2.532853214807481e+000,-1.102696462282614e+000,
          -2.160122422893467e+000,2.722436161882056e+000},{-2.556980090750864e+000,
          -1.112752579055204e+000,-2.163082814316411e+000,2.719547935897943e+000},
          {-2.581436437132852e+000,-1.122904087457842e+000,-2.166070209130614e+000,
          2.716655736370978e+000},{-2.606227654816659e+000,-1.133152285306878e+000,
          -2.169084864037961e+000,2.713759527049444e+000},{-2.631360439576148e+000,
          -1.143498488007834e+000,-2.172127039239977e+000,2.710859271336302e+000},
          {-2.656840304856598e+000,-1.153944042779445e+000,-2.175196998484420e+000,
          2.707954932284481e+000},{-2.682673341601513e+000,-1.164490316871617e+000,
          -2.178295009149678e+000,2.705046472592083e+000},{-2.708866825204242e+000,
          -1.175138696975488e+000,-2.181421342304900e+000,2.702133854597497e+000},
          {-2.735426422726402e+000,-1.185890604592462e+000,-2.184576272760956e+000,
          2.699217040274428e+000},{-2.762359314107140e+000,-1.196747478763960e+000,
          -2.187760079160614e+000,2.696295991226843e+000},{-2.789671673506554e+000,
          -1.207710791213431e+000,-2.190973044027281e+000,2.693370668683814e+000},
          {-2.817371158194170e+000,-1.218782032275562e+000,-2.194215453856300e+000,
          2.690441033494273e+000},{-2.845464441688514e+000,-1.229962726999865e+000,
          -2.197487599162562e+000,2.687507046121677e+000},{-2.873958455587959e+000,
          -1.241254426116775e+000,-2.200789774573439e+000,2.684568666638566e+000},
          {-2.902860980914899e+000,-1.252658706018288e+000,-2.204122278897234e+000,
          2.681625854721035e+000},{-2.932179792788460e+000,-1.264177171262446e+000,
          -2.207485415203479e+000,2.678678569643088e+000},{-2.961921972458911e+000,
          -1.275811461710634e+000,-2.210879490886982e+000,2.675726770270900e+000},
          {-2.992095784809014e+000,-1.287563242185971e+000,-2.214304817763162e+000,
          2.672770415056979e+000},{-3.022708807675713e+000,-1.299434212241244e+000,
          -2.217761712139564e+000,2.669809462034204e+000},{-3.053769494827838e+000,
          -1.311426099021429e+000,-2.221250494908468e+000,2.666843868809768e+000},
          {-3.085286256712582e+000,-1.323540662532576e+000,-2.224771491625306e+000,
          2.663873592558999e+000},{-3.117267156964171e+000,-1.335779699224753e+000,
          -2.228325032589873e+000,2.660898590019072e+000},{-3.149721717942327e+000,
          -1.348145031420924e+000,-2.231911452951636e+000,2.657918817482606e+000},
          {-3.182657768442030e+000,-1.360638526376643e+000,-2.235531092775834e+000,
          2.654934230791132e+000},{-3.216085761856677e+000,-1.373262071886569e+000,
          -2.239184297168944e+000,2.651944785328451e+000},{-3.250013826855947e+000,
          -1.386017607184507e+000,-2.242871416329658e+000,2.648950436013852e+000},
          {-3.284451500134391e+000,-1.398907099420707e+000,-2.246592805684378e+000,
          2.645951137295225e+000},{-3.319409250572173e+000,-1.411932549809613e+000,
          -2.250348825973040e+000,2.642946843142023e+000},{-3.354896753611417e+000,
          -1.425096003296100e+000,-2.254139843338936e+000,2.639937507038096e+000},
          {-3.390924039417435e+000,-1.438399542162570e+000,-2.257966229444829e+000,
          2.636923081974400e+000},{-3.427501254566009e+000,-1.451845290352722e+000,
          -2.261828361566645e+000,2.633903520441551e+000},{-3.464639359689941e+000,
          -1.465435408601526e+000,-2.265726622713691e+000,2.630878774422248e+000},
          {-3.502349053636324e+000,-1.479172101786477e+000,-2.269661401730241e+000,
          2.627848795383550e+000},{-3.540641220590683e+000,-1.493057617817210e+000,
          -2.273633093408675e+000,2.624813534268998e+000},{-3.579527769324496e+000,
          -1.507094243675857e+000,-2.277642098611021e+000,2.621772941490594e+000},
          {-3.619019405104672e+000,-1.521284319088120e+000,-2.281688824370349e+000,
          2.618726966920613e+000},{-3.659128845786773e+000,-1.535630218848213e+000,
          -2.285773684035279e+000,2.615675559883270e+000},{-3.699868104366120e+000,
          -1.550134370620169e+000,-2.289897097369691e+000,2.612618669146215e+000},
          {-3.741248903588338e+000,-1.564799252976718e+000,-2.294059490683182e+000,
          2.609556242911866e+000},{-3.783284874324993e+000,-1.579627382536116e+000,
          -2.298261296982422e+000,2.606488228808574e+000},{-3.825988545927405e+000,
          -1.594621335053040e+000,-2.302502956067142e+000,2.603414573881602e+000},
          {-3.869373496014526e+000,-1.609783731499074e+000,-2.306784914694967e+000,
          2.600335224583944e+000},{-3.913453221956383e+000,-1.625117249152555e+000,
          -2.311107626695294e+000,2.597250126766952e+000},{-3.958241447222634e+000,
          -1.640624618733666e+000,-2.315471553123667e+000,2.594159225670774e+000},
          {-4.003752472151792e+000,-1.656308622508239e+000,-2.319877162411532e+000,
          2.591062465914611e+000},{-4.050001634221138e+000,-1.672172096388015e+000,
          -2.324324930505149e+000,2.587959791486772e+000},{-4.097002876636228e+000,
          -1.688217943259190e+000,-2.328815341006177e+000,2.584851145734526e+000},
          {-4.144772509543070e+000,-1.704449112223655e+000,-2.333348885357084e+000,
          2.581736471353761e+000},{-4.193325486276812e+000,-1.720868623261894e+000,
          -2.337926062964376e+000,2.578615710378421e+000},{-4.242678130201291e+000,
          -1.737479551563644e+000,-2.342547381387367e+000,2.575488804169740e+000},
          {-4.292847565917512e+000,-1.754285033725772e+000,-2.347213356495573e+000,
          2.572355693405246e+000},{-4.343849344050583e+000,-1.771288281606365e+000,
          -2.351924512625498e+000,2.569216318067544e+000},{-4.395701890165288e+000,
          -1.788492558606178e+000,-2.356681382789128e+000,2.566070617432879e+000},
          {-4.448422980721418e+000,-1.805901202887346e+000,-2.361484508818656e+000,
          2.562918530059439e+000},{-4.502030354716064e+000,-1.823517623449364e+000,
          -2.366334441565460e+000,2.559759993775440e+000},{-4.556542840854151e+000,
          -1.841345298947618e+000,-2.371231741081224e+000,2.556594945666951e+000},
          {-4.611979475168832e+000,-1.859387780568530e+000,-2.376176976819913e+000,
          2.553423322065466e+000},{-4.668359753577363e+000,-1.877648695147924e+000,
          -2.381170727826738e+000,2.550245058535221e+000},{-4.725704074969167e+000,
          -1.896131743036145e+000,-2.386213582948206e+000,2.547060089860238e+000},
          {-4.784032727943202e+000,-1.914840707513675e+000,-2.391306141027599e+000,
          2.543868350031094e+000},{-4.843367240144604e+000,-1.933779447928860e+000,
          -2.396449011131275e+000,2.540669772231420e+000},{-4.903729030960412e+000,
          -1.952951909731893e+000,-2.401642812755355e+000,2.537464288824098e+000},
          {-4.965140432874901e+000,-1.972362121662210e+000,-2.406888176055385e+000,
          2.534251831337176e+000},{-5.027623797901383e+000,-1.992014202447187e+000,
          -2.412185742069771e+000,2.531032330449472e+000},{-5.091203355130014e+000,
          -2.011912351777201e+000,-2.417536162974205e+000,2.527805715975873e+000},
          {-5.155903044122922e+000,-2.032060866670441e+000,-2.422940102297541e+000,
          2.524571916852306e+000},{-5.221747451923521e+000,-2.052464137830248e+000,
          -2.428398235181793e+000,2.521330861120394e+000},{-5.288761616135504e+000,
          -2.073126654030853e+000,-2.433911248632754e+000,2.518082475911771e+000},
          {-5.356971788598320e+000,-2.094052999648703e+000,-2.439479841788043e+000,
          2.514826687432050e+000},{-5.426404613215012e+000,-2.115247861646304e+000,
          -2.445104726181699e+000,2.511563420944447e+000},{-5.497087522474739e+000,
          -2.136716031186819e+000,-2.450786626016956e+000,2.508292600753025e+000},
          {-5.569049288882915e+000,-2.158462403870986e+000,-2.456526278452476e+000,
          2.505014150185588e+000},{-5.642317740633977e+000,-2.180491994108471e+000,
          -2.462324433881294e+000,2.501727991576171e+000},{-5.716923840072115e+000,
          -2.202809915912630e+000,-2.468181856254582e+000,2.498434046247153e+000},
          {-5.792897745374091e+000,-2.225421410091371e+000,-2.474099323354432e+000,
          2.495132234490956e+000},{-5.870270221041334e+000,-2.248331836268295e+000,
          -2.480077627130501e+000,2.491822475551335e+000},{-5.949074871981971e+000,
          -2.271546665967843e+000,-2.486117574029875e+000,2.488504687604241e+000},
          {-6.029343786707989e+000,-2.295071511647872e+000,-2.492219985295749e+000,
          2.485178787738241e+000},{-6.111112084568413e+000,-2.318912101810149e+000,
          -2.498385697352468e+000,2.481844691934497e+000},{-6.194414527198641e+000,
          -2.343074305694364e+000,-2.504615562124872e+000,2.478502315046275e+000},
          {-6.279286904596403e+000,-2.367564130914826e+000,-2.510910447403784e+000,
          2.475151570777977e+000},{-6.365767209259786e+000,-2.392387718285614e+000,
          -2.517271237235579e+000,2.471792371663692e+000},{-6.453892994198572e+000,
          -2.417551362201253e+000,-2.523698832280891e+000,2.468424629045237e+000},
          {-6.543704169328149e+000,-2.443061498363987e+000,-2.530194150230223e+000,
          2.465048253049680e+000},{-6.635241010728419e+000,-2.468924721455782e+000,
          -2.536758126185958e+000,2.461663152566336e+000},{-6.728545843224950e+000,
          -2.495147778765465e+000,-2.543391713097591e+000,2.458269235223206e+000},
          {-6.823660845563034e+000,-2.521737588158918e+000,-2.550095882171187e+000,
          2.454866407362863e+000},{-6.920630794798460e+000,-2.548701226486825e+000,
          -2.556871623333734e+000,2.451454574017748e+000},{-7.019501381475465e+000,
          -2.576045946160612e+000,-2.563719945667194e+000,2.448033638884867e+000},
          {-7.120319480255796e+000,-2.603779178381579e+000,-2.570641877882507e+000,
          2.444603504299888e+000},{-7.223133969609193e+000,-2.631908532839725e+000,
          -2.577638468809950e+000,2.441164071210579e+000},{-7.327994580174460e+000,
          -2.660441811671938e+000,-2.584710787882002e+000,2.437715239149616e+000},
          {-7.434952494647915e+000,-2.689387012530814e+000,-2.591859925646200e+000,
          2.434256906206702e+000},{-7.544061135790023e+000,-2.718752328646964e+000,
          -2.599086994305352e+000,2.430788968999999e+000},{-7.655375515661243e+000,
          -2.748546159812257e+000,-2.606393128252138e+000,2.427311322646844e+000},
          {-7.768951708993694e+000,-2.778777123466263e+000,-2.613779484621389e+000,
          2.423823860733729e+000},{-7.884848282627553e+000,-2.809454050978603e+000,
          -2.621247243887760e+000,2.420326475285515e+000},{-8.003125847080343e+000,
          -2.840586000686433e+000,-2.628797610445466e+000,2.416819056733866e+000},
          {-8.123845717615904e+000,-2.872182270696010e+000,-2.636431813223878e+000,
          2.413301493884877e+000},{-8.247072986653183e+000,-2.904252390209657e+000,
          -2.644151106340080e+000,2.409773673885860e+000},{-8.372873324207069e+000,
          -2.936806146623549e+000,-2.651956769727907e+000,2.406235482191265e+000},
          {-8.501315321522739e+000,-2.969853579297517e+000,-2.659850109837497e+000,
          2.402686802527732e+000},{-8.632470179999418e+000,-3.003404992656809e+000,
          -2.667832460322147e+000,2.399127516858195e+000},{-8.766410786955008e+000,
          -3.037470967875636e+000,-2.675905182763388e+000,2.395557505345058e+000},
          {-8.903213411118998e+000,-3.072062364995864e+000,-2.684069667421548e+000,
          2.391976646312385e+000},{-9.042955255058262e+000,-3.107190347094537e+000,
          -2.692327333987842e+000,2.388384816207067e+000},{-9.185717838632552e+000,
          -3.142866369671718e+000,-2.700679632411345e+000,2.384781889558960e+000},
          {-9.331585097693958e+000,-3.179102204446007e+000,-2.709128043701907e+000,
          2.381167738939921e+000},{-9.480643607373500e+000,-3.215909949936703e+000,
          -2.717674080783783e+000,2.377542234921738e+000},{-9.632982569905030e+000,
          -3.253302040635393e+000,-2.726319289385702e+000,2.373905246032896e+000},
          {-9.788696395803125e+000,-3.291291246777491e+000,-2.735065248964523e+000,
          2.370256638714140e+000},{-9.947880046656847e+000,-3.329890716053707e+000,
          -2.743913573608185e+000,2.366596277272798e+000},{-1.011063370599249e+001,
          -3.369113955782007e+000,-2.752865913065797e+000,2.362924023835830e+000},
          {-1.027706158128749e+001,-3.408974858849373e+000,-2.761923953732860e+000,
          2.359239738301529e+000},{-1.044726980264801e+001,-3.449487728026834e+000,
          -2.771089419696060e+000,2.355543278289857e+000},{-1.062137120153357e+001,
          -3.490667263098932e+000,-2.780364073859961e+000,2.351834499091345e+000},
          {-1.079948025851573e+001,-3.532528610310817e+000,-2.789749719020175e+000,
          2.348113253614504e+000},{-1.098171707046586e+001,-3.575087353790894e+000,
          -2.799248199077059e+000,2.344379392331725e+000},{-1.116820588443619e+001,
          -3.618359541657062e+000,-2.808861400235142e+000,2.340632763223555e+000},
          {-1.135907707782098e+001,-3.662361694756724e+000,-2.818591252274326e+000,
          2.336873211721342e+000},{-1.155446370525415e+001,-3.707110846632381e+000,
          -2.828439729829784e+000,2.333100580648148e+000},{-1.175450638810228e+001,
          -3.752624533595280e+000,-2.838408853794547e+000,2.329314710157896e+000},
          {-1.195935053540618e+001,-3.798920836053745e+000,-2.848500692695762e+000,
          2.325515437672646e+000},{-1.216914587843163e+001,-3.846018400646425e+000,
          -2.858717364169532e+000,2.321702597817966e+000},{-1.238405202330118e+001,
          -3.893936434232603e+000,-2.869061036519223e+000,2.317876022356294e+000},
          {-1.260423031369346e+001,-3.942694775750631e+000,-2.879533930237916e+000,
          2.314035540118215e+000},{-1.282985291483982e+001,-3.992313868676216e+000,
          -2.890138319734129e+000,2.310180976931594e+000},{-1.306109620929062e+001,
          -4.042814830660411e+000,-2.900876534982684e+000,2.306312155548434e+000},
          {-1.329814643430201e+001,-4.094219444695344e+000,-2.911750963375111e+000,
          2.302428895569415e+000},{-1.354119627426263e+001,-4.146550213873349e+000,
          -2.922764051537747e+000,2.298531013365968e+000},{-1.379044740846033e+001,
          -4.199830379609585e+000,-2.933918307290487e+000,2.294618321999826e+000},
          {-1.404610889345345e+001,-4.254083961469080e+000,-2.945216301668451e+000,
          2.290690631139917e+000},{-1.430840142757132e+001,-4.309335770863983e+000,
          -2.956660671054686e+000,2.286747746976495e+000},{-1.457755349316863e+001,
          -4.365611471997627e+000,-2.968254119347887e+000,2.282789472132388e+000},
          {-1.485380456670902e+001,-4.422937601107329e+000,-2.979999420291443e+000,
          2.278815605571237e+000},{-1.513740534264527e+001,-4.481341609033519e+000,
          -2.991899419865233e+000,2.274825942502599e+000},{-1.542861733910674e+001,
          -4.540851908926687e+000,-3.003957038785516e+000,2.270820274283760e+000},
          {-1.572771438306834e+001,-4.601497912391182e+000,-3.016175275142619e+000,
          2.266798388318140e+000},{-1.603498363566405e+001,-4.663310074910363e+000,
          -3.028557207138266e+000,2.262760067950089e+000},{-1.635072484269092e+001,
          -4.726319953306938e+000,-3.041105995942990e+000,2.258705092355959e+000},
          {-1.667525327132274e+001,-4.790560243365801e+000,-3.053824888716676e+000,
          2.254633236431245e+000},{-1.700889813746121e+001,-4.856064846889706e+000,
          -3.066717221736760e+000,2.250544270673617e+000},{-1.735200585595545e+001,
          -4.922868920071202e+000,-3.079786423691872e+000,2.246437961061666e+000},
          {-1.770493843523546e+001,-4.991008942657080e+000,-3.093036019134606e+000,
          2.242314068929141e+000},{-1.806807798479443e+001,-5.060522765468733e+000,
          -3.106469632112602e+000,2.238172350834463e+000},{-1.844182350134685e+001,
          -5.131449703543621e+000,-3.120090989928735e+000,2.234012558425291e+000},
          {-1.882659593895549e+001,-5.203830582698908e+000,-3.133903927164026e+000,
          2.229834438297898e+000},{-1.922283720003022e+001,-5.277707832656685e+000,
          -3.147912389827138e+000,2.225637731851087e+000},{-1.963101137194863e+001,
          -5.353125565238721e+000,-3.162120439758187e+000,2.221422175134389e+000},
          {-2.005160793417239e+001,-5.430129651245946e+000,-3.176532259252670e+000,
          2.217187498690242e+000},{-2.048514159347870e+001,-5.508767821782203e+000,
          -3.191152155899943e+000,2.212933427389840e+000},{-2.093215458382820e+001,
          -5.589089761522009e+000,-3.205984567694959e+000,2.208659680262342e+000},
          {-2.139321785013910e+001,-5.671147213614056e+000,-3.221034068411279e+000,
          2.204365970317081e+000},{-2.186893386429054e+001,-5.754994082273456e+000,
          -3.236305373268270e+000,2.200052004358388e+000},{-2.235993893520058e+001,
          -5.840686550619682e+000,-3.251803344885138e+000,2.195717482792680e+000},
          {-2.286690183868918e+001,-5.928283224318049e+000,-3.267532999536663e+000,
          2.191362099427353e+000},{-2.339053129045003e+001,-6.017845229047717e+000,
          -3.283499513835679e+000,2.186985541261074e+000},{-2.393157553110568e+001,
          -6.109436372639191e+000,-3.299708231679054e+000,2.182587488264950e+000},
          {-2.449082365362512e+001,-6.203123298466807e+000,-3.316164671630298e+000,
          2.178167613154133e+000},{-2.506911261829099e+001,-6.298975620761307e+000,
          -3.332874534743562e+000,2.173725581149273e+000},{-2.566732526965500e+001,
          -6.397066125615121e+000,-3.349843712746693e+000,2.169261049727270e+000},
          {-2.628639811323098e+001,-6.497470921823482e+000,-3.367078296797307e+000,
          2.164773668360732e+000},{-2.692732173142186e+001,-6.600269655973709e+000,
          -3.384584586646084e+000,2.160263078245440e+000},{-2.759114524502430e+001,
          -6.705545710843315e+000,-3.402369100397087e+000,2.155728912015202e+000},
          {-2.827898248761451e+001,-6.813386415478488e+000,-3.420438584828478e+000,
          2.151170793443279e+000},{-2.899201259869876e+001,-6.923883300413103e+000,
          -3.438800026289747e+000,2.146588337129650e+000},{-2.973148847503503e+001,
          -7.037132326714247e+000,-3.457460662309122e+000,2.141981148173250e+000},
          {-3.049873840109150e+001,-7.153234177647235e+000,-3.476427993824973e+000,
          2.137348821828268e+000},{-3.129517493940490e+001,-7.272294522510483e+000,
          -3.495709798247626e+000,2.132690943143583e+000},{-3.212229765000851e+001,
          -7.394424343175200e+000,-3.515314143246334e+000,2.128007086584252e+000},
          {-3.298170177292683e+001,-7.519740249452365e+000,-3.535249401439987e+000,
          2.123296815633989e+000},{-3.387508454061701e+001,-7.648364836976240e+000,
          -3.555524265971750e+000,2.118559682377430e+000},{-3.480425051048727e+001,
          -7.780427073933807e+000,-3.576147767071773e+000,2.113795227060935e+000},
          {-3.577112387256164e+001,-7.916062682686504e+000,-3.597129289704889e+000,
          2.109002977630553e+000},{-3.677775248212046e+001,-8.055414602783463e+000,
          -3.618478592274180e+000,2.104182449245703e+000},{-3.782632044661916e+001,
          -8.198633436873966e+000,-3.640205826613887e+000,2.099333143767018e+000},
          {-3.891915659162862e+001,-8.345877962293837e+000,-3.662321559229458e+000,
          2.094454549216663e+000},{-4.005874745570689e+001,-8.497315658007004e+000,
          -3.684836793965542e+000,2.089546139209324e+000},{-4.124774609923581e+001,
          -8.653123302578791e+000,-3.707762996136288e+000,2.084607372351954e+000},
          {-4.248898846355697e+001,-8.813487578187926e+000,-3.731112118317829e+000,
          2.079637691610172e+000},{-4.378550526414175e+001,-8.978605753438103e+000,
          -3.754896627843079e+000,2.074636523639093e+000},{-4.514053901757636e+001,
          -9.148686395755780e+000,-3.779129536196960e+000,2.069603278076170e+000},
          {-4.655756027868422e+001,-9.323950155855000e+000,-3.803824430401465e+000,
          2.064537346793447e+000},{-4.804028430092423e+001,-9.504630615340995e+000,
          -3.828995506585277e+000,2.059438103106440e+000},{-4.959269431334278e+001,
          -9.690975174726935e+000,-3.854657605931726e+000,2.054304900936606e+000},
          {-5.121906225977325e+001,-9.883246042911827e+000,-3.880826253119925e+000,
          2.049137073924143e+000},{-5.292396969033102e+001,-1.008172131188975e+001,
          -3.907517697516740e+000,2.043933934487611e+000},{-5.471233926943821e+001,
          -1.028669607165458e+001,-3.934748957389588e+000,2.038694772826543e+000},
          {-5.658946080723199e+001,-1.049848367280677e+001,-3.962537867252546e+000,
          2.033418855862916e+000},{-5.856102198737246e+001,-1.071741707506913e+001,
          -3.990903128739948e+000,2.028105426117049e+000},{-6.063314629294836e+001,
          -1.094385028946904e+001,-4.019864365275073e+000,2.022753700513037e+000},
          {-6.281242946118387e+001,-1.117815997880301e+001,-4.049442180792742e+000,
          2.017362869108480e+000},{-6.510598207265966e+001,-1.142074718300361e+001,
          -4.079658222944135e+000,2.011932093742810e+000},{-6.752147690312931e+001,
          -1.167203919014480e+001,-4.110535251172350e+000,2.006460506597967e+000},
          {-7.006720223331806e+001,-1.193249157665400e+001,-4.142097210058299e+000,
          2.000947208664683e+000},{-7.275211711338568e+001,-1.220259045397827e+001,
          -4.174369308405988e+000,1.995391268106987e+000},{-7.558591731733223e+001,
          -1.248285489197702e+001,-4.207378104671925e+000,1.989791718516892e+000},
          {-7.857910654055216e+001,-1.277383958744936e+001,-4.241151599238290e+000,
          1.984147557050459e+000},{-8.174307486950895e+001,-1.307613778749139e+001,
          -4.275719334227814e+000,1.978457742435633e+000},{-8.509018865469528e+001,
          -1.339038448212000e+001,-4.311112501590751e+000,1.972721192841308e+000},
          {-8.863388899758650e+001,-1.371725992427822e+001,-4.347364060230715e+000,
          1.966936783596048e+000},{-9.238880450061555e+001,-1.405749348404934e+001,
          -4.384508863125920e+000,1.961103344743806e+000},{-9.638803576032707e+001,
          -1.441179912568236e+001,-4.422583856657013e+000,1.955219658422624e+000},
          {-1.006355886419617e+002,-1.478104683078891e+001,-4.461628093181375e+000,
          1.949284456050977e+000},{-1.051313454597849e+002,-1.516621147525332e+001,
          -4.501682994351671e+000,1.943296415304725e+000},{-1.098726320850258e+002,
          -1.557562130758561e+001,-4.543476494807336e+000,1.937154374999355e+000},
          {-1.148328382566474e+002,-1.599730363449987e+001,-4.585776601560153e+000,
          1.931045251398180e+000},{-1.200188108246691e+002,-1.643068297329990e+001,
          -4.628499471591676e+000,1.924981823573037e+000},{-1.254402600577610e+002,
          -1.687609306545174e+001,-4.671650064463239e+000,1.918963711773316e+000},
          {-1.311072854774274e+002,-1.733387495899903e+001,-4.715233405571223e+000,
          1.912990539037578e+000},{-1.370304007377400e+002,-1.780437708974399e+001,
          -4.759254580973940e+000,1.907061931185782e+000},{-1.432205478371830e+002,
          -1.828795544632071e+001,-4.803718732234705e+000,1.901177516818668e+000},
          {-1.496891184999602e+002,-1.878497370717625e+001,-4.848631051484921e+000,
          1.895336927323218e+000},{-1.564479780964446e+002,-1.929580338699566e+001,
          -4.893996776657341e+000,1.889539796883510e+000},{-1.635094896114932e+002,
          -1.982082401614414e+001,-4.939821186869632e+000,1.883785762496075e+000},
          {-1.708865276896965e+002,-2.036042337835779e+001,-4.986109598005116e+000,
          1.878074463988980e+000},{-1.785925165319611e+002,-2.091499764565038e+001,
          -5.032867358670587e+000,1.872405544044007e+000},{-1.866414510420746e+002,
          -2.148495164496683e+001,-5.080099846220948e+000,1.866778648221036e+000},
          {-1.950479162106498e+002,-2.207069912489180e+001,-5.127812463129048e+000,
          1.861193424984080e+000},{-2.038271353278870e+002,-2.267266292380108e+001,
          -5.176010633724887e+000,1.855649525728495e+000},{-2.129949758145855e+002,
          -2.329127536217849e+001,-5.224699800985325e+000,1.850146604808510e+000},
          {-2.225680072626292e+002,-2.392697840643329e+001,-5.273885423907177e+000,
          1.844684319564753e+000},{-2.325635046039472e+002,-2.458022411269052e+001,
          -5.323572974870670e+000,1.839262330351306e+000},{-2.429995182741653e+002,
          -2.525147478994882e+001,-5.373767937627715e+000,1.833880300561732e+000},
          {-2.538948748098448e+002,-2.594120350769362e+001,-5.424475805224988e+000,
          1.828537896653741e+000},{-2.652692415314800e+002,-2.664989431255637e+001,
          -5.475702078602022e+000,1.823234788172320e+000},{-2.771431560702175e+002,
          -2.737804267118220e+001,-5.527452265174031e+000,1.817970647770634e+000},
          {-2.895380660742452e+002,-2.812615585599748e+001,-5.579731877863270e+000,
          1.812745151228864e+000},{-3.024763750171533e+002,-2.889475333428489e+001,
          -5.632546434409225e+000,1.807557977470461e+000},{-3.159814902028902e+002,
          -2.968436718887993e+001,-5.685901456916128e+000,1.802408808575871e+000},
          {-3.300778700110466e+002,-3.049554255611214e+001,-5.739802471693491e+000,
          1.797297329793238e+000},{-3.447910678389576e+002,-3.132883810210219e+001,
          -5.794255009340000e+000,1.792223229546456e+000},{-3.601477887192862e+002,
          -3.218482647037611e+001,-5.849264605126227e+000,1.787186199439965e+000},
          {-3.761759502852180e+002,-3.306409475164691e+001,-5.904836799592490e+000,
          1.782185934260666e+000},{-3.929047215975117e+002,-3.396724504852546e+001,
          -5.960977139338727e+000,1.777222131976677e+000},{-4.103646058482501e+002,
          -3.489489490975335e+001,-6.017691178152736e+000,1.772294493733011e+000},
          {-4.285874676385886e+002,-3.584767798721607e+001,-6.074984478170861e+000,
          1.767402723844187e+000},{-4.476066601835161e+002,-3.682624437371988e+001,
          -6.132862611514633e+000,1.762546529783868e+000},{-4.674570002533873e+002,
          -3.783126149387554e+001,-6.191331161679662e+000,1.757725622171409e+000},
          {-4.881749356184829e+002,-3.886341433245930e+001,-6.250395725677553e+000,
          1.752939714755772e+000},{-5.097985523417300e+002,-3.992340630042679e+001,
          -6.310061915750649e+000,1.748188524396310e+000},{-5.323676746229096e+002,
          -4.101195973874807e+001,-6.370335361660072e+000,1.743471771041181e+000},
          {-5.559239469182820e+002,-4.212981655933941e+001,-6.431221712923479e+000,
          1.738789177703054e+000},{-5.805109168157189e+002,-4.327773889908156e+001,
          -6.492726641214050e+000,1.734140470432367e+000},{-6.061741146091180e+002,
          -4.445650981673200e+001,-6.554855842839679e+000,1.729525378288342e+000},
          {-6.329602015454766e+002,-4.566693587314825e+001,-6.617615040532088e+000,
          1.724943633307832e+000},{-6.609250424371172e+002,-4.690982976130863e+001,
          -6.681009994698973e+000,1.720394970472067e+000},{-6.901042593869157e+002,
          -4.818608458142636e+001,-6.745046467541486e+000,1.715879127671711e+000},
          {-7.205706164247110e+002,-4.949651492478494e+001,-6.809730323163137e+000,
          1.711395845671781e+000},{-7.523401581588573e+002,-5.084211154381994e+001,
          -6.875067360429169e+000,1.706944868064385e+000},{-7.854200256589894e+002,
          -5.222382897866345e+001,-6.941063483168687e+000,1.702525941248357e+000},
          {-8.210353457106370e+002,-5.364030461686616e+001,-7.007725542909286e+000,
          1.698138814375824e+000},{-8.554766922517680e+002,-5.510143617018551e+001,
          -7.075055206156207e+000,1.693783239359508e+000},{-8.945408949715370e+002,
          -5.659285841589260e+001,-7.143067888804235e+000,1.689458970942078e+000},
          {-9.336319987298878e+002,-5.812951993780914e+001,-7.211759170575077e+000,
          1.685165765209987e+000},{-9.748070167487797e+002,-5.970600021779582e+001,
          -7.281141145128838e+000,1.680903383115732e+000},{-1.017797161099866e+003,
          -6.132462116161106e+001,-7.351218688149022e+000,1.676671586493826e+000},
          {-1.062683684456890e+003,-6.298650584026640e+001,-7.421998074872098e+000,
          1.672470140103473e+000},{-1.109551487921742e+003,-6.469280936461375e+001,
          -7.493485645708336e+000,1.668298811149195e+000},{-1.158489280848639e+003,
          -6.644471976211437e+001,-7.565687809091735e+000,1.664157369235286e+000},
          {-1.209589622929883e+003,-6.824345904605310e+001,-7.638611044176486e+000,
          1.660045586320429e+000},{-1.262949116295308e+003,-7.009028388353097e+001,
          -7.712261903592744e+000,1.655963236672332e+000},{-1.318668341934761e+003,
          -7.198648673326566e+001,-7.786647015696424e+000,1.651910096822905e+000},
          {-1.378234074012758e+003,-7.393131086849101e+001,-7.861773788109874e+000,
          1.647885945523818e+000},{-1.442265174772427e+003,-7.592462610887877e+001,
          -7.937649607034357e+000,1.643890563702867e+000},{-1.511481571183503e+003,
          -7.796562144522292e+001,-8.014283223597630e+000,1.639923734421354e+000},
          {-1.586722725865685e+003,-8.026846357280738e+001,-8.098960584225544e+000,
          1.635617913591073e+000},{-1.668825233579326e+003,-8.268094464949859e+001,
          -8.186167899408106e+000,1.631266166750611e+000},{-1.751894172577563e+003,
          -8.522351785771092e+001,-8.276024876610972e+000,1.626867109373032e+000},
          {-1.847472908821830e+003,-8.787922432899295e+001,-8.368677996958821e+000,
          1.622419288010019e+000},{-1.946491084587533e+003,-9.068266529460510e+001,
          -8.464253729359603e+000,1.617921174006821e+000},{-2.053978412575095e+003,
          -9.363129093939379e+001,-8.562915811238364e+000,1.613371162616998e+000},
          {-2.169922983260752e+003,-9.673869964576350e+001,-8.664826684394154e+000,
          1.608767561543369e+000},{-2.295197216249843e+003,-1.000170527865890e+002,
          -8.770163821231140e+000,1.604108587787459e+000},{-2.430785442417563e+003,
          -1.034797311140764e+002,-8.879118505262669e+000,1.599392359891713e+000},
          {-2.577801026632838e+003,-1.071414867500088e+002,-8.991897240203381e+000,
          1.594616890192578e+000},{-2.737506932622896e+003,-1.110186171022473e+002,
          -9.108723338184889e+000,1.589780076274507e+000},{-2.911339732177706e+003,
          -1.151291662320393e+002,-9.229838713457117e+000,1.584879691522251e+000},
          {-3.100938315519513e+003,-1.194931571822090e+002,-9.355505914598652e+000,
          1.579913374653328e+000},{-3.308178313364557e+003,-1.241328611774950e+002,
          -9.486010432931598e+000,1.574878618093619e+000},{-3.535213086559769e+003,
          -1.290731114786262e+002,-9.621663331956111e+000,1.569772755037022e+000},
          {-3.784523337361933e+003,-1.343416691601648e+002,-9.762804252286623e+000,
          1.564592945003904e+000},{-4.058976804769223e+003,-1.399696522448835e+002,
          -9.909804855879647e+000,1.559336157681449e+000},{-4.361900810987743e+003,
          -1.459920399445989e+002,-1.006307278746745e+001,1.553999154791511e+000},
          {-4.697170408589283e+003,-1.524482682241805e+002,-1.022305624605249e+001,
          1.548578469686142e+000},{-5.069316087288656e+003,-1.593829353173996e+002,
          -1.039024927974076e+001,1.543070384316234e+000},{-5.483655244797968e+003,
          -1.668466418498926e+002,-1.056519794058328e+001,1.537470903152320e+000},
          {-5.946453353590173e+003,-1.748969941438437e+002,-1.074850746706512e+001,
          1.531775723555805e+000},{-6.470411734157407e+003,-1.835913253448870e+002,
          -1.094085372023932e+001,1.525980202000237e+000},{-7.043187071142154e+003,
          -1.930474897871591e+002,-1.114297042220280e+001,1.520079315421806e+000},
          {-7.711933761545253e+003,-2.032681531837435e+002,-1.135574068537159e+001,
          1.514067616830629e+000},{-8.457541572806047e+003,-2.144378352863221e+002,
          -1.158005302355428e+001,1.507939179287543e+000},{-9.310061797401568e+003,
          -2.266315901380780e+002,-1.181700489705569e+001,1.501687551187454e+000},
          {-1.028612055393173e+004,-2.399941811640263e+002,-1.206779207559716e+001,
          1.495305668348962e+000},{-1.140941135333577e+004,-2.546856980795141e+002,
          -1.233378335486043e+001,1.488785783609071e+000},{-1.270936879154894e+004,
          -2.708950151984197e+002,-1.261654223773738e+001,1.482119368890722e+000},
          {-1.422287401592777e+004,-2.888462620691078e+002,-1.291786359692049e+001,
          1.475297002040697e+000},{-1.599657041959849e+004,-3.088070502047960e+002,
          -1.323981906420460e+001,1.468308231964111e+000},{-1.809004382910636e+004,
          -3.310990266311976e+002,-1.358481369182558e+001,1.461141416796625e+000},
          {-2.058025235609896e+004,-3.561115228088582e+002,-1.395565733388563e+001,
          1.453783528293291e+000},{-2.356778164825942e+004,-3.843193794845403e+002,
          -1.435565545638336e+001,1.446219913491735e+000},{-2.718581393635035e+004,
          -4.163064498517156e+002,-1.478872591139304e+001,1.438434001794348e+000},
          {-3.161318342772590e+004,-4.527969315541988e+002,-1.525955085475275e+001,
          1.430406941556335e+000},{-3.710725880796295e+004,-4.946758410121437e+002,
          -1.577378467014829e+001,1.422117144536678e+000},{-4.396402756633394e+004,
          -5.431789342797099e+002,-1.633827036775515e+001,1.413539708353296e+000},
          {-5.273878604465988e+004,-5.996007772929380e+002,-1.696157367093251e+001,
          1.404645675124891e+000},{-6.407490165878369e+004,-6.659850765960473e+002,
          -1.765417026519191e+001,1.395401054361457e+000},{-7.904776202793667e+004,
          -7.447144090654609e+002,-1.842951853955794e+001,1.385765574728270e+000},
          {-9.926766194745344e+004,-8.390379482241829e+002,-1.930485080869606e+001,
          1.375690927154873e+000},{-1.273095825071022e+005,-9.532400246900349e+002,
          -2.030280355373593e+001,1.365118418615304e+000},{-1.674562138620607e+005,
          -1.092995537492447e+003,-2.145377509289186e+001,1.353975640846269e+000},
          {-2.272198539857275e+005,-1.265667878999013e+003,-2.279974485733070e+001,
          1.342171664024869e+000},{-3.205446595310491e+005,-1.480352798561740e+003,
          -2.440067528762999e+001,1.329589871746868e+000},{-4.757004171335059e+005,
          -1.745534398035771e+003,-2.634638501786641e+001,1.316076873033058e+000},
          {-7.277874286905073e+005,-2.104072122532931e+003,-2.876388941251714e+001,
          1.301424533021810e+000},{-1.158269327743195e+006,-2.638285390348861e+003,
          -3.185184183947293e+001,1.285339230723633e+000},{-1.959002083113540e+006,
          -3.532523254029535e+003,-3.592185311796366e+001,1.267385221467623e+000},
          {-3.596005342715708e+006,-3.892843755514912e+003,-4.023498447113133e+001,
          1.252292339125201e+000},{-7.337307110377396e+006,-3.598464703219049e+003,
          -4.636507095266333e+001,1.235307228164419e+000},{-1.605717610482991e+007,
          -3.192373063618026e+003,-5.564203153249309e+001,1.214800598771303e+000},
          {-3.619723757401069e+007,-6.348690590601902e+003,-6.892252303788369e+001,
          1.191007390096094e+000},{-8.251938353183653e+007,-1.344847387729171e+004,
          -8.574522926416114e+001,1.168783843757871e+000},{-2.040599684077241e+008,
          -1.069786567964125e+004,-1.061289066146439e+002,1.150438269719548e+000},
          {-5.121867096552509e+008,1.456135255074863e+004,-1.331224976907382e+002,
          1.133590960463892e+000},{-1.208283139664454e+009,1.667633657013471e+004,
          -1.694988472006016e+002,1.115407413029604e+000},{-2.713573785229895e+009,
          -2.376510051574436e+005,-2.229542789125316e+002,1.093221801784601e+000},
          {-5.496859099556583e+009,-4.498406556454219e+005,-2.698490407608527e+002,
          1.081141798451352e+000},{-1.281003550443853e+010,-1.454397978181947e+005,
          -3.068797733762085e+002,1.075521362860637e+000},{-3.803997568288454e+010,
          7.244080350807136e+005,-3.862216588136204e+002,1.065839017041407e+000},
          {-1.282594878189864e+011,3.702125120753230e+006,-5.256416986606254e+002,
          1.055309382343471e+000},{-4.144936674091608e+011,2.980984288420191e+006,
          -6.792080235153045e+002,1.041458768913244e+000},{-8.964984509224136e+011,
          -5.905430282043110e+006,-8.516642522807352e+002,1.031926967645291e+000},
          {-7.355836465490852e+015,4.518177895310270e+010,-6.933068977626010e+004,
          1.025706312840203e+000}};
      constant Real[Ninterval, 4] dvtcoef={{3.665200884480820e-001,
          3.768263375039013e-002,2.190792329657455e-003,5.503960828374045e-005},{
          3.740100562223658e-001,3.839687254278058e-002,2.241470067816089e-003,
          5.651517998086539e-005},{3.828499115332361e-001,3.899054527468819e-002,
          2.284797395124333e-003,5.778081864475580e-005},{3.933222065720126e-001,
          4.041224383597725e-002,2.385959187504062e-003,6.075322570198209e-005},{
          4.040330124879073e-001,4.188279732592867e-002,2.491507351266832e-003,
          6.387796804156671e-005},{4.149858832885122e-001,4.340369917802586e-002,
          2.601623832550185e-003,6.716271877677985e-005},{4.261843979498587e-001,
          4.497658031312836e-002,2.716504756553497e-003,7.061574208320139e-005},{
          4.376320460159308e-001,4.660304907537514e-002,2.836349505162887e-003,
          7.424557939372635e-005},{4.493322760556361e-001,4.828479016768840e-002,
          2.961367887534022e-003,7.806127539077438e-005},{4.612885541291512e-001,
          5.002349607708437e-002,3.091775532306176e-003,8.207225038864295e-005},{
          4.735043599311913e-001,5.182093843609277e-002,3.227799262656286e-003,
          8.628847726670128e-005},{4.859830663248401e-001,5.367889630080813e-002,
          3.369672145850532e-003,9.072034242183301e-005},{4.987281155931236e-001,
          5.559927072115295e-002,3.517642230639391e-003,9.537893269130447e-005},{
          5.117427716648794e-001,5.758397405257353e-002,3.671964680832330e-003,
          1.002758063548368e-004},{5.250302993025363e-001,5.963492463599265e-002,
          3.832901617045873e-003,1.054230003569787e-004},{5.385939624651210e-001,
          6.175417109476790e-002,4.000731818279412e-003,1.108333568850559e-004},{
          5.524368943414315e-001,6.394372783418179e-002,4.175738556303638e-003,
          1.165201514339943e-004},{5.664900425757722e-001,6.620605134392597e-002,
          4.358222679301490e-003,1.224975427286338e-004},{5.805583121436652e-001,
          6.854424938506180e-002,4.548492850733371e-003,1.287802891593489e-004},{
          5.946086214220634e-001,7.096102605514981e-002,4.746869857737302e-003,
          1.353838849828342e-004},{6.086065747191686e-001,7.340678828072091e-002,
          4.949478977042500e-003,1.421827481986982e-004},{6.225914771181178e-001,
          7.579030259624107e-002,5.148953763370412e-003,1.489285080947021e-004},{
          6.367315613084956e-001,7.822925272680593e-002,5.354873479106979e-003,
          1.559450852216557e-004},{6.510248604875336e-001,8.072426859544872e-002,
          5.567387089688100e-003,1.632411903229065e-004},{6.654693630800921e-001,
          8.327597242098897e-002,5.786645233200854e-003,1.708257343021365e-004},{
          6.800630053891468e-001,8.588497856777670e-002,6.012800199529966e-003,
          1.787078304444174e-004},{6.948036854574047e-001,8.855189328122257e-002,
          6.246005909138952e-003,1.868967966091155e-004},{7.096892568246661e-001,
          9.127731455960417e-002,6.486417891145978e-003,1.954021573940052e-004},{
          7.247175349874265e-001,9.406183194968448e-002,6.734193261069997e-003,
          2.042336462698481e-004},{7.398863032918654e-001,9.690602637057491e-002,
          6.989490698063166e-003,2.134012076848844e-004},{7.551933077292230e-001,
          9.981047000578269e-002,7.252470421664215e-003,2.229149991386050e-004},{
          7.706362681974270e-001,1.027757261083910e-001,7.523294168294181e-003,
          2.327853932242564e-004},{7.862128763870087e-001,1.058023489048649e-001,
          7.802125167244362e-003,2.430229796396210e-004},{8.019208000233606e-001,
          1.088908834647968e-001,8.089128116419406e-003,2.536385671655344e-004},{
          8.177576857661010e-001,1.120418655935747e-001,8.384469157748138e-003,
          2.646431856117704e-004},{8.337211625135900e-001,1.152558217345552e-001,
          8.688315852326128e-003,2.760480877298891e-004},{8.498088435549523e-001,
          1.185332688891191e-001,9.000837155310458e-003,2.878647510927008e-004},{
          8.660183298445744e-001,1.218747145409911e-001,9.322203390615966e-003,
          3.001048799400485e-004},{8.823472121350809e-001,1.252806565984050e-001,
          9.652586225422304e-003,3.127804069906578e-004},{8.987930767579581e-001,
          1.287515833300165e-001,9.992158644551460e-003,3.259034952198205e-004},{
          9.153535027634360e-001,1.322879733585061e-001,1.034109492467412e-002,
          3.394865396027454e-004},{9.320260723490239e-001,1.358902955896432e-001,
          1.069957060853094e-002,3.535421688234263e-004},{9.488083651027407e-001,
          1.395590092481384e-001,1.106776247896205e-002,3.680832469489624e-004},{
          9.656979703504189e-001,1.432945638174619e-001,1.144584853306668e-002,
          3.831228750692304e-004},{9.826924805368605e-001,1.470973991054695e-001,
          1.183400795620025e-002,3.986743929019505e-004},{9.997894997984816e-001,
          1.509679452225744e-001,1.223242109616551e-002,4.147513803631108e-004},{
          1.016986646503764e+000,1.549066226184312e-001,1.264126943736927e-002,
          4.313676591028885e-004},{1.034281553150528e+000,1.589138421395006e-001,
          1.306073557508202e-002,4.485372940071116e-004},{1.051671869872525e+000,
          1.629900050717103e-001,1.349100318986285e-002,4.662745946644320e-004},{
          1.069155270937662e+000,1.671355031844444e-001,1.393225702213025e-002,
          4.845941167994041e-004},{1.086729447284750e+000,1.713507188579044e-001,
          1.438468284683222e-002,5.035106636716927e-004},{1.104392125557418e+000,
          1.756360250733073e-001,1.484846744851311e-002,5.230392874416344e-004},{
          1.122141050214495e+000,1.799917856279029e-001,1.532379859632389e-002,
          5.431952905025172e-004},{1.139974004762330e+000,1.844183551212992e-001,
          1.581086501965071e-002,5.639942267798111e-004},{1.157888800935349e+000,
          1.889160791550389e-001,1.630985638370746e-002,5.854519029978606e-004},{
          1.175883287892217e+000,1.934852944091692e-001,1.682096326567359e-002,
          6.075843799142949e-004},{1.193955352468680e+000,1.981263287911221e-001,
          1.734437713105463e-002,6.304079735227150e-004},{1.212102920438635e+000,
          2.028395015817585e-001,1.788029031044544e-002,6.539392562240593e-004},{
          1.230323959893689e+000,2.076251235778936e-001,1.842889597669781e-002,
          6.781950579671869e-004},{1.248616484149628e+000,2.124834972498307e-001,
          1.899038812248679e-002,7.031924673592142e-004},{1.266978553097518e+000,
          2.174149169184600e-001,1.956496153830370e-002,7.289488327461666e-004},{
          1.285408269937146e+000,2.224196689540113e-001,2.015281179091836e-002,
          7.554817632645458e-004},{1.303903795153633e+000,2.274980318933519e-001,
          2.075413520241562e-002,7.828091298644555e-004},{1.322463336930379e+000,
          2.326502767088909e-001,2.136912882953291e-002,8.109490663049821e-004},{
          1.341085156891751e+000,2.378766669763421e-001,2.199799044372205e-002,
          8.399199701224019e-004},{1.359767575223034e+000,2.431774590683698e-001,
          2.264091851168786e-002,8.697405035720730e-004},{1.378508965237237e+000,
          2.485529024112762e-001,2.329811217643337e-002,9.004295945446784e-004},{
          1.397307764139623e+000,2.540032396549401e-001,2.396977123901983e-002,
          9.320064374575882e-004},{1.416162464351274e+000,2.595287069634087e-001,
          2.465609614076989e-002,9.644904941221798e-004},{1.435071623389463e+000,
          2.651295341966611e-001,2.535728794626573e-002,9.979014945878779e-004},{
          1.454033862914496e+000,2.708059451751824e-001,2.607354832685021e-002,
          1.032259437963822e-003},{1.473047868841412e+000,2.765581579370460e-001,
          2.680507954482812e-002,1.067584593218963e-003},{1.492112386818882e+000,
          2.823863850138245e-001,2.755208443834308e-002,1.103897499961510e-003},{
          1.511226244667304e+000,2.882908335802246e-001,2.831476640706065e-002,
          1.141218969198648e-003},{1.530388322738662e+000,2.942717059001999e-001,
          2.909332939819350e-002,1.179570084077442e-003},{1.549597582529973e+000,
          3.003291994252179e-001,2.988797789375669e-002,1.218972200607816e-003},{
          1.568853054060884e+000,3.064635071695984e-001,3.069891689809663e-002,
          1.259446948368720e-003},{1.588153834283365e+000,3.126748179903948e-001,
          3.152635192639908e-002,1.301016231198290e-003},{1.607499102743188e+000,
          3.189633167940680e-001,3.237048899399019e-002,1.343702227869144e-003},{
          1.626888102366270e+000,3.253291849447598e-001,3.323153460615338e-002,
          1.387527392749791e-003},{1.646320164489830e+000,3.317726004172473e-001,
          3.410969574909326e-002,1.432514456453111e-003},{1.665794682688201e+000,
          3.382937382564183e-001,3.500517988125847e-002,1.478686426473104e-003},{
          1.685311138825627e+000,3.448927707221959e-001,3.591819492593865e-002,
          1.526066587810795e-003},{1.704869084047406e+000,3.515698677202811e-001,
          3.684894926422587e-002,1.574678503590567e-003},{1.724468158770434e+000,
          3.583251969986714e-001,3.779765172916720e-002,1.624546015667824e-003},{
          1.744108067700997e+000,3.651589246073122e-001,3.876451160038527e-002,
          1.675693245229228e-003},{1.763788610501295e+000,3.720712150319988e-001,
          3.974973859999501e-002,1.728144593386518e-003},{1.783509661384779e+000,
          3.790622316554051e-001,4.075354288886299e-002,1.781924741765163e-003},{
          1.803271169098520e+000,3.861321370576751e-001,4.177613506405691e-002,
          1.837058653088839e-003},{1.823073183620778e+000,3.932810932079064e-001,
          4.281772615719370e-002,1.893571571760980e-003},{1.842915816106496e+000,
          4.005092620304885e-001,4.387852763320605e-002,1.951489024444566e-003},{
          1.862799271892769e+000,4.078168055176666e-001,4.495875139067014e-002,
          2.010836820641158e-003},{1.882723840320363e+000,4.152038861479577e-001,
          4.605860976245487e-002,2.071641053270659e-003},{1.902689896843988e+000,
          4.226706672139174e-001,4.717831551747944e-002,2.133928099252665e-003},{
          1.922697890394811e+000,4.302173132196612e-001,4.831808186330070e-002,
          2.197724620090751e-003},{1.942748370153087e+000,4.378439900664124e-001,
          4.947812244984428e-002,2.263057562460898e-003},{1.962841961294967e+000,
          4.455508655515563e-001,5.065865137358835e-002,2.329954158805294e-003},{
          1.982979377414200e+000,4.533381096250566e-001,5.185988318307852e-002,
          2.398441927932571e-003},{2.003161423573253e+000,4.612058947322305e-001,
          5.308203288516229e-002,2.468548675625884e-003},{2.023388978688615e+000,
          4.691543962461522e-001,5.432531595209598e-002,2.540302495259932e-003},{
          2.043663032156556e+000,4.771837926209295e-001,5.558994832988842e-002,
          2.613731768428245e-003},{2.063984632955979e+000,4.852942660390235e-001,
          5.687614644693947e-002,2.688865165581934e-003},{2.084354942844196e+000,
          4.934860024349729e-001,5.818412722451828e-002,2.765731646681043e-003},{
          2.104775202157050e+000,5.017591920850383e-001,5.951410808727019e-002,
          2.844360461860065e-003},{2.125246731719251e+000,5.101140299143760e-001,
          6.086630697524879e-002,2.924781152108464e-003},{2.145770960466568e+000,
          5.185507157095545e-001,6.224094235686584e-002,3.007023549967835e-003},{
          2.166349393201155e+000,5.270694546814225e-001,6.363823324234659e-002,
          3.091117780246803e-003},{2.186983629134377e+000,5.356704576934424e-001,
          6.505839919869993e-002,3.177094260754839e-003},{2.207675360445951e+000,
          5.443539416465710e-001,6.650166036532459e-002,3.264983703056519e-003},{
          2.228426369973906e+000,5.531201298632031e-001,6.796823747062697e-002,
          3.354817113247326e-003},{2.249238522655806e+000,5.619692524824012e-001,
          6.945835184963980e-002,3.446625792752342e-003},{2.270113792409218e+000,
          5.709015466811348e-001,7.097222546277789e-002,3.540441339149131e-003},{
          2.291054235680260e+000,5.799172572176781e-001,7.251008091513399e-002,
          3.636295647016205e-003},{2.312061997510860e+000,5.890166367384575e-001,
          7.407214147719843e-002,3.734220908808123e-003},{2.333139328790219e+000,
          5.981999460648496e-001,7.565863110647320e-002,3.834249615758862e-003},{
          2.354288566264979e+000,6.074674546965987e-001,7.726977446981624e-002,
          3.936414558814613e-003},{2.375512137218167e+000,6.168194411357968e-001,
          7.890579696711332e-002,4.040748829597290e-003},{2.396812574191011e+000,
          6.262561931938135e-001,8.056692475586602e-002,4.147285821400253e-003},{
          2.418192505865444e+000,6.357780084481650e-001,8.225338477660042e-002,
          4.256059230217468e-003},{2.439654638189181e+000,6.453851947021946e-001,
          8.396540477941994e-002,4.367103055807411e-003},{2.461201802244242e+000,
          6.550780701048645e-001,8.570321335190975e-002,4.480451602793228e-003},{
          2.482836910050617e+000,6.648569638275532e-001,8.746703994730097e-002,
          4.596139481800508e-003},{2.504562958561007e+000,6.747222163788872e-001,
          8.925711491435891e-002,4.714201610633784e-003},{2.526383089076794e+000,
          6.846741796996655e-001,9.107366952835992e-002,4.834673215493565e-003},{
          2.548300479768189e+000,6.947132181729661e-001,9.291693602203711e-002,
          4.957589832234993e-003},{2.570318477197365e+000,7.048397082466733e-001,
          9.478714761948791e-002,5.082987307669528e-003},{2.592440465382741e+000,
          7.150540396336219e-001,9.668453856884922e-002,5.210901800911450e-003},{
          2.614669982458294e+000,7.253566149948452e-001,9.860934417835919e-002,
          5.341369784769924e-003},{2.637010642561412e+000,7.357478508657601e-001,
          1.005618008515189e-001,5.474428047188929e-003},{2.659466158279287e+000,
          7.462281778772136e-001,1.025421461246414e-001,5.610113692735653e-003},{
          2.682040381265263e+000,7.567980409850534e-001,1.045506187051913e-001,
          5.748464144139502e-003},{2.704737228505560e+000,7.674579003195780e-001,
          1.065874585105618e-001,5.889517143882839e-003},{2.727560756610687e+000,
          7.782082311537123e-001,1.086529067092295e-001,6.033310755844878e-003},{
          2.750515116663080e+000,7.890495246405542e-001,1.107472057618116e-001,
          6.179883367000695e-003},{2.773604564123278e+000,7.999822881587377e-001,
          1.128705994640319e-001,6.329273689176290e-003},{2.796833481101817e+000,
          8.110070456381986e-001,1.150233329907212e-001,6.481520760861736e-003},{
          2.820206359500705e+000,8.221243381278066e-001,1.172056529406883e-001,
          6.636663949083662e-003},{2.843727786952501e+000,8.333347242992452e-001,
          1.194178073829910e-001,6.794742951338803e-003},{2.867402504168878e+000,
          8.446387806027250e-001,1.216600459047351e-001,6.955797797590129e-003},{
          2.891235314964451e+000,8.560371022382086e-001,1.239326196590929e-001,
          7.119868852327294e-003},{2.915231207685412e+000,8.675303029206455e-001,
          1.262357814161839e-001,7.286996816692764e-003},{2.939395228384068e+000,
          8.791190161294715e-001,1.285697856130808e-001,7.457222730675805e-003},{
          2.963732594119631e+000,8.908038948858174e-001,1.309348884073418e-001,
          7.630587975375205e-003},{2.988248610630383e+000,9.025856127699617e-001,
          1.333313477298497e-001,7.807134275333398e-003},{3.012948756836480e+000,
          9.144648639316437e-001,1.357594233405432e-001,7.986903700942813e-003},{
          3.037838552477580e+000,9.264423643191631e-001,1.382193768838317e-001,
          8.169938670926896e-003},{3.062923779323181e+000,9.385188509558488e-001,
          1.407114719478523e-001,8.356281954897082e-003},{3.088210210949279e+000,
          9.506950840800934e-001,1.432359741212169e-001,8.545976675988148e-003},{
          3.113703846840580e+000,9.629718461669161e-001,1.457931510558516e-001,
          8.739066313572597e-003},{3.139410816633882e+000,9.753499432105148e-001,
          1.483832725273125e-001,8.935594706057733e-003},{3.165337344775792e+000,
          9.878302053998029e-001,1.510066104981779e-001,9.135606053765535e-003},{
          3.191489836188858e+000,1.000413487150973e+000,1.536634391835181e-001,
          9.339144921898232e-003},{3.217874837362654e+000,1.013100667985528e+000,
          1.563540351164809e-001,9.546256243591650e-003},{3.244499017871583e+000,
          1.025892653177059e+000,1.590786772160487e-001,9.756985323057694e-003},{
          3.271369233348681e+000,1.038790373981308e+000,1.618376468567759e-001,
          9.971377838818435e-003},{3.298492456712199e+000,1.051794788668075e+000,
          1.646312279389412e-001,1.018947984703397e-002},{3.325875855766680e+000,
          1.064906882678220e+000,1.674597069616482e-001,1.041133778492568e-002},{
          3.353526720988624e+000,1.078127669689009e+000,1.703233730962368e-001,
          1.063699847429761e-002},{3.381452539482126e+000,1.091458191811743e+000,
          1.732225182626495e-001,1.086650912515772e-002},{3.409660934355382e+000,
          1.104899520630803e+000,1.761574372062440e-001,1.109991733944163e-002},{
          3.438159712928544e+000,1.118452757551656e+000,1.791284275774465e-001,
          1.133727111484079e-002},{3.466956886644510e+000,1.132119034446490e+000,
          1.821357900125424e-001,1.157861884873769e-002},{3.496060578876284e+000,
          1.145899514855565e+000,1.851798282158324e-001,1.182400934225040e-002},{
          3.525479158448411e+000,1.159795393897511e+000,1.882608490453275e-001,
          1.207349180438865e-002},{3.555221150625067e+000,1.173807899612132e+000,
          1.913791625981357e-001,1.232711585632465e-002},{3.585295253530584e+000,
          1.187938293517513e+000,1.945350822993449e-001,1.258493153578014e-002},{
          3.615710419947444e+000,1.202187870979279e+000,1.977289249926884e-001,
          1.284698930153326e-002},{3.646475741855814e+000,1.216557962688612e+000,
          2.009610110319655e-001,1.311334003804746e-002},{3.677600534221765e+000,
          1.231049934891233e+000,2.042316643764733e-001,1.338403506022480e-002},{
          3.709094341468303e+000,1.245665190249085e+000,2.075412126872400e-001,
          1.365912611828753e-002},{3.740966909400527e+000,1.260405168872820e+000,
          2.108899874254873e-001,1.393866540278966e-002},{3.773228176367919e+000,
          1.275271349170827e+000,2.142783239537165e-001,1.422270554976199e-002},{
          3.805888377290767e+000,1.290265248201987e+000,2.177065616394706e-001,
          1.451129964599359e-002},{3.838957884662454e+000,1.305388423503501e+000,
          2.211750439596317e-001,1.480450123445293e-002},{3.872447399709886e+000,
          1.320642472860455e+000,2.246841186100514e-001,1.510236431985103e-002},{
          3.906367799894601e+000,1.336029036255819e+000,2.282341376142729e-001,
          1.540494337435146e-002},{3.940730251550222e+000,1.351549796109007e+000,
          2.318254574376806e-001,1.571229334342844e-002},{3.975546173467691e+000,
          1.367206478594881e+000,2.354584391022789e-001,1.602446965187828e-002},{
          4.010827215553952e+000,1.383000854730738e+000,2.391334483049296e-001,
          1.634152820998645e-002},{4.046585350875875e+000,1.398934740935574e+000,
          2.428508555387394e-001,1.666352541985450e-002},{4.082832758036515e+000,
          1.415010000798975e+000,2.466110362157002e-001,1.699051818189041e-002},{
          4.119582040102078e+000,1.431228545024562e+000,2.504143707946231e-001,
          1.732256390146564e-002},{4.156845889599819e+000,1.447592334476850e+000,
          2.542612449081177e-001,1.765972049574360e-002},{4.194637505310675e+000,
          1.464103378865951e+000,2.581520494986178e-001,1.800204640068241e-002},{
          4.232970236952464e+000,1.480763740213331e+000,2.620871809503179e-001,
          1.834960057821798e-002},{4.271857846363231e+000,1.497575532404973e+000,
          2.660670412307083e-001,1.870244252362888e-002},{4.311314452870784e+000,
          1.514540923036616e+000,2.700920380312623e-001,1.906063227308990e-002},{
          4.351354365658449e+000,1.531662135547257e+000,2.741625849122226e-001,
          1.942423041141704e-002},{4.391992415882795e+000,1.548941448644654e+000,
          2.782791014540191e-001,1.979329808000918e-002},{4.433243686970854e+000,
          1.566381199477114e+000,2.824420134068151e-001,2.016789698499184e-002},{
          4.475123641314885e+000,1.583983784131202e+000,2.866517528484842e-001,
          2.054808940556589e-002},{4.517648207096858e+000,1.601751658807016e+000,
          2.909087583444591e-001,2.093393820256836e-002},{4.560833550448293e+000,
          1.619687342607780e+000,2.952134751100056e-001,2.132550682724936e-002},{
          4.604696396499985e+000,1.637793417179381e+000,2.995663551808326e-001,
          2.172285933027002e-002},{4.649253796372554e+000,1.656072529916263e+000,
          3.039678575822974e-001,2.212606037092869e-002},{4.694523265092098e+000,
          1.674527394692921e+000,3.084184485074046e-001,2.253517522661828e-002},{
          4.740522712955659e+000,1.693160794008574e+000,3.129186014966691e-001,
          2.295026980252321e-002},{4.787270576136158e+000,1.711975580058748e+000,
          3.174687976240633e-001,2.337141064156014e-002},{4.834785712163620e+000,
          1.730974677253755e+000,3.220695256857244e-001,2.379866493456965e-002},{
          4.883087485591644e+000,1.750161083541156e+000,3.267212823955581e-001,
          2.423210053076392e-002},{4.932195710571193e+000,1.769537872699258e+000,
          3.314245725842074e-001,2.467178594843879e-002},{4.982130846586524e+000,
          1.789108195340259e+000,3.361799094048092e-001,2.511779038595532e-002},{
          5.032913690335282e+000,1.808875282735387e+000,3.409878145406674e-001,
          2.557018373299858e-002},{5.084565761601779e+000,1.828842446624347e+000,
          3.458488184239917e-001,2.602903658212011e-002},{5.137109093797749e+000,
          1.849013082945023e+000,3.507634604540620e-001,2.649442024057316e-002},{
          5.190566200241511e+000,1.869390674036088e+000,3.557322892248459e-001,
          2.696640674244556e-002},{5.244960447391115e+000,1.889978789056404e+000,
          3.607558627598103e-001,2.744506886110065e-002},{5.300315503010739e+000,
          1.910781089611307e+000,3.658347487465493e-001,2.793048012193356e-002},{
          5.356655984977632e+000,1.931801328375829e+000,3.709695247877092e-001,
          2.842271481544970e-002},{5.414006939214302e+000,1.953043355008492e+000,
          3.761607786475629e-001,2.892184801067763e-002},{5.472394280173591e+000,
          1.974511116073609e+000,3.814091085150813e-001,2.942795556892076e-002},{
          5.531844552982697e+000,1.996208659464594e+000,3.867151232667687e-001,
          2.994111415786121e-002},{5.592384986946350e+000,2.018140136745433e+000,
          3.920794427409197e-001,3.046140126602264e-002},{5.654043699138815e+000,
          2.040309805072126e+000,3.975026980190738e-001,3.098889521760342e-002},{
          5.716849502278652e+000,2.062722031519653e+000,4.029855317122437e-001,
          3.152367518768998e-002},{5.780832066643861e+000,2.085381295218880e+000,
          4.085285982589873e-001,3.206582121785987e-002},{5.846021876769548e+000,
          2.108292190975333e+000,4.141325642292472e-001,3.261541423218720e-002},{
          5.912450295234973e+000,2.131459432255390e+000,4.197981086381419e-001,
          3.317253605366047e-002},{5.980149653199785e+000,2.154887854369196e+000,
          4.255259232680015e-001,3.373726942102519e-002},{6.049153080922429e+000,
          2.178582419018171e+000,4.313167129985944e-001,3.430969800606264e-002},{
          6.119494843356140e+000,2.202548216154015e+000,4.371711961503690e-001,
          3.488990643131756e-002},{6.191210090835239e+000,2.226790469534412e+000,
          4.430901048323289e-001,3.547798028828864e-002},{6.264335024681378e+000,
          2.251314539600350e+000,4.490741853049658e-001,3.607400615609312e-002},{
          6.338906985205288e+000,2.276125927352816e+000,4.551241983514239e-001,
          3.667807162062186e-002},{6.414964364223934e+000,2.301230279236725e+000,
          4.612409196589499e-001,3.729026529419736e-002},{6.492546755911735e+000,
          2.326633390771490e+000,4.674251402137614e-001,3.791067683575024e-002},{
          6.571694919608382e+000,2.352341211514662e+000,4.736776667056718e-001,
          3.853939697152988e-002},{6.652450889812159e+000,2.378359849304511e+000,
          4.799993219463535e-001,3.917651751636464e-002},{6.734857960020156e+000,
          2.404695575420992e+000,4.863909452991119e-001,3.982213139548871e-002},{
          6.818960762407748e+000,2.431354829314535e+000,4.928533931226813e-001,
          4.047633266695239e-002},{6.904805348414572e+000,2.458344223655918e+000,
          4.993875392280697e-001,4.113921654463405e-002},{6.992439181126046e+000,
          2.485670550059953e+000,5.059942753490215e-001,4.181087942187155e-002},{
          7.081911236169231e+000,2.513340784316515e+000,5.126745116281625e-001,
          4.249141889573267e-002},{7.173272004697938e+000,2.541362092459206e+000,
          5.194291771172804e-001,4.318093379194453e-002},{7.266573617083629e+000,
          2.569741836357898e+000,5.262592202942233e-001,4.387952419050236e-002},{
          7.361869906936396e+000,2.598487580031925e+000,5.331656095952206e-001,
          4.458729145197930e-002},{7.459216347534869e+000,2.627607096681667e+000,
          5.401493339641285e-001,4.530433824455851e-002},{7.558670349451412e+000,
          2.657108374111654e+000,5.472114034211771e-001,4.603076857181219e-002},{
          7.660291079236791e+000,2.686999623211421e+000,5.543528496461990e-001,
          4.676668780125031e-002},{7.764139728783404e+000,2.717289283930944e+000,
          5.615747265851068e-001,4.751220269366371e-002},{7.870279478141036e+000,
          2.747986033541306e+000,5.688781110727400e-001,4.826742143328870e-002},{
          7.978775648099929e+000,2.779098793974625e+000,5.762641034782924e-001,
          4.903245365881855e-002},{8.089695695459456e+000,2.810636740433291e+000,
          5.837338283705550e-001,4.980741049529092e-002},{8.203109430764046e+000,
          2.842609309100674e+000,5.912884352069108e-001,5.059240458687938e-002},{
          8.319088992819991e+000,2.875026206633575e+000,5.989290990433451e-001,
          5.138755013061993e-002},{8.437709001965207e+000,2.907897418922941e+000,
          6.066570212701816e-001,5.219296291110302e-002},{8.559046630712071e+000,
          2.941233220726810e+000,6.144734303718776e-001,5.300876033616472e-002},{
          8.683181769475304e+000,2.975044185275829e+000,6.223795827131393e-001,
          5.383506147361033e-002},{8.810197102877758e+000,3.009341194858236e+000,
          6.303767633513405e-001,5.467198708900607e-002},{8.940178073287749e+000,
          3.044135452087358e+000,6.384662868774791e-001,5.551965968457501e-002},{
          9.073213421245114e+000,3.079438488879136e+000,6.466494982886871e-001,
          5.637820353923723e-002},{9.209394871242861e+000,3.115262180887050e+000,
          6.549277738848125e-001,5.724774474983270e-002},{9.348817398676971e+000,
          3.151618758416641e+000,6.633025222039423e-001,5.812841127356715e-002},{
          9.491579474545942e+000,3.188520818472828e+000,6.717751849883596e-001,
          5.902033297172826e-002},{9.637783262374123e+000,3.225981337955358e+000,
          6.803472381840313e-001,5.992364165471453e-002},{9.787534478331198e+000,
          3.264013689063900e+000,6.890201929749196e-001,6.083847112842355e-002},{
          9.940942732178327e+000,3.302631652132191e+000,6.977955968597331e-001,
          6.176495724204956e-002},{1.009812202265841e+001,3.341849429269576e+000,
          7.066750347651324e-001,6.270323793734337e-002},{1.025919010297298e+001,
          3.381681664493669e+000,7.156601301940823e-001,6.365345329938531e-002},{
          1.042426957493940e+001,3.422143454409642e+000,7.247525464307929e-001,
          6.461574560892680e-002},{1.059348749063613e+001,3.463250369255583e+000,
          7.339539877745911e-001,6.559025939636394e-002},{1.076697585846694e+001,
          3.505018468612565e+000,7.432662008315984e-001,6.657714149739567e-002},{
          1.094487160471041e+001,3.547464321529919e+000,7.526909758485252e-001,
          6.757654111043801e-002},{1.112731703673556e+001,3.590605024361887e+000,
          7.622301481021555e-001,6.858860985585549e-002},{1.131446020990981e+001,
          3.634458220845387e+000,7.718855993386348e-001,6.961350183708254e-002},{
          1.150645448169887e+001,3.679042126940943e+000,7.816592592654319e-001,
          7.065137370370449e-002},{1.170345995510019e+001,3.724375546279324e+000,
          7.915531071140711e-001,7.170238471657543e-002},{1.190564234904387e+001,
          3.770477901775988e+000,8.015691732425808e-001,7.276669681505513e-002},{
          1.211317480895882e+001,3.817369250831911e+000,8.117095408270398e-001,
          7.384447468644079e-002},{1.232623678221967e+001,3.865070319658420e+000,
          8.219763475927884e-001,7.493588583769051e-002},{1.254501551614812e+001,
          3.913602522481210e+000,8.323717876409130e-001,7.604110066951828e-002},{
          1.276970570264624e+001,3.962987994216706e+000,8.428981133273581e-001,
          7.716029255296762e-002},{1.300051006140023e+001,4.013249618094449e+000,
          8.535576372305411e-001,7.829363790855323e-002},{1.323763982202276e+001,
          4.064411055841034e+000,8.643527341958465e-001,7.944131628808258e-002},{
          1.348131510325956e+001,4.116496780178591e+000,8.752858434632413e-001,
          8.060351045926384e-002},{1.373176523992096e+001,4.169532109259019e+000,
          8.863594708830151e-001,8.178040649321636e-002},{1.398922935368295e+001,
          4.223543241273606e+000,8.975761912265102e-001,8.297219385500314e-002},{
          1.425395688597875e+001,4.278557291550713e+000,9.089386505921364e-001,
          8.417906549731447e-002},{1.452620788323131e+001,4.334602332815509e+000,
          9.204495689124428e-001,8.540121795743366e-002},{1.480625390155680e+001,
          4.391707434003711e+000,9.321117425728144e-001,8.663885145762519e-002},{
          1.509437843512102e+001,4.449902704716440e+000,9.439280471367345e-001,
          8.789217000909319e-002},{1.539087726927183e+001,4.509219341703720e+000,
          9.559014401917926e-001,8.916138151966196e-002},{1.569605974666963e+001,
          4.569689672974459e+000,9.680349643254816e-001,9.044669790534268e-002},{
          1.601024873436720e+001,4.631347212300324e+000,9.803317502206551e-001,
          9.174833520595821e-002},{1.633378209073554e+001,4.694226707614670e+000,
          9.927950199017923e-001,9.306651370500110e-002},{1.666701262562578e+001,
          4.758364201213424e+000,1.005428090113279e+000,9.440145805391902e-002},{
          1.701031014311637e+001,4.823797081430276e+000,1.018234375865878e+000,
          9.575339740102105e-002},{1.736406085678517e+001,4.890564153189856e+000,
          1.031217394122572e+000,9.712256552522060e-002},{1.772866946580232e+001,
          4.958705695446524e+000,1.044380767679338e+000,9.850920097482693e-002},{
          1.810455972114648e+001,5.028263532980517e+000,1.057728229205364e+000,
          9.991354721162990e-002},{1.849217554137902e+001,5.099281108341590e+000,
          1.071263625479878e+000,1.013358527605123e-001},{1.889198201807828e+001,
          5.171803558649142e+000,1.084990921826914e+000,1.027763713648547e-001},{
          1.930446710896825e+001,5.245877793634559e+000,1.098914206763288e+000,
          1.042353621480049e-001},{1.973014205980786e+001,5.321552585652118e+000,
          1.113037696859451e+000,1.057130897811017e-001},{2.016954403973725e+001,
          5.398878652454267e+000,1.127365741851098e+000,1.072098246575545e-001},{
          2.062323620612181e+001,5.477908760805788e+000,1.141902829977046e+000,
          1.087258430745073e-001},{2.109181035758059e+001,5.558697820064092e+000,
          1.156653593603386e+000,1.102614274216203e-001},{2.157588804150967e+001,
          5.641302992575035e+000,1.171622815106442e+000,1.118168663775389e-001},{
          2.207612293451024e+001,5.725783803384387e+000,1.186815433061205e+000,
          1.133924551144240e-001},{2.259320168853458e+001,5.812202265487298e+000,
          1.202236548730634e+000,1.149884955109506e-001},{2.312784738048727e+001,
          5.900622998303927e+000,1.217891432902972e+000,1.166052963742056e-001},{
          2.368082059232428e+001,5.991113369373331e+000,1.233785533055696e+000,
          1.182431736709384e-001},{2.425292225768141e+001,6.083743633219402e+000,
          1.249924480910505e+000,1.199024507686403e-001},{2.484499632728939e+001,
          6.178587082451594e+000,1.266314100373835e+000,1.215834586869736e-001},{
          2.545793213201633e+001,6.275720210738291e+000,1.282960415894291e+000,
          1.232865363600859e-001},{2.609266741838787e+001,6.375222882468171e+000,
          1.299869661270916e+000,1.250120309103875e-001},{2.675019182339740e+001,
          6.477178512979792e+000,1.317048288932363e+000,1.267602979344092e-001},{
          2.743154975809655e+001,6.581674264927436e+000,1.334502979714424e+000,
          1.285317018013878e-001},{2.813784419975337e+001,6.688801252695598e+000,
          1.352240653180803e+000,1.303266159652730e-001},{2.887024103476939e+001,
          6.798654759803430e+000,1.370268478512396e+000,1.321454232908995e-001},{
          2.962997256101324e+001,6.911334476958677e+000,1.388593885998045e+000,
          1.339885163951065e-001},{3.041834222256269e+001,7.026944749204763e+000,
          1.407224579184756e+000,1.358562980036433e-001},{3.123673065041534e+001,
          7.145594837012060e+000,1.426168547717874e+000,1.377491813247640e-001},{
          3.208659867260553e+001,7.267399213620009e+000,1.445434080900596e+000,
          1.396675904404572e-001},{3.296949558164943e+001,7.392477853249294e+000,
          1.465029782083446e+000,1.416119607163322e-001},{3.388706321309404e+001,
          7.520956569516788e+000,1.484964583852694e+000,1.435827392312659e-001},{
          3.484104425992344e+001,7.652967352967133e+000,1.505247764160289e+000,
          1.455803852279572e-001},{3.583328871585933e+001,7.788648749509054e+000,
          1.525888963393957e+000,1.476053705856567e-001},{3.686576173093582e+001,
          7.928146259087701e+000,1.546898202497619e+000,1.496581803163948e-001},{
          3.794055292138633e+001,8.071612759939052e+000,1.568285902204809e+000,
          1.517393130861525e-001},{3.905988423567278e+001,8.219208975969522e+000,
          1.590062903450447e+000,1.538492817625102e-001},{4.022612278917213e+001,
          8.371103955820873e+000,1.612240489091282e+000,1.559886139904228e-001},{
          4.144178802231272e+001,8.527475626063863e+000,1.634830406955019e+000,
          1.581578527979038e-001},{4.270956760743552e+001,8.688511337873317e+000,
          1.657844894438090e+000,1.603575572335084e-001},{4.403232828703730e+001,
          8.854408498051546e+000,1.681296704630431e+000,1.625883030377006e-001},{
          4.541313048616726e+001,9.025375228265101e+000,1.705199134198361e+000,
          1.648506833502761e-001},{4.685524481402835e+001,9.201631075280597e+000,
          1.729566053114142e+000,1.671453094562547e-001},{4.836216874299397e+001,
          9.383407786556877e+000,1.754411936372791e+000,1.694728115728024e-001},{
          4.993764414063455e+001,9.570950149359556e+000,1.779751897873626e+000,
          1.718338396799571e-001},{5.158568206789742e+001,9.764516870993175e+000,
          1.805601726664191e+000,1.742290643981639e-001},{5.331057910775004e+001,
          9.964381592476455e+000,1.831977925638632e+000,1.766591779158699e-001},{
          5.511694763067611e+001,1.017083391162707e+001,1.858897753082626e+000,
          1.791248949706736e-001},{5.700974172252563e+001,1.038418054494647e+001,
          1.886379267098844e+000,1.816269538878832e-001},{5.899428511832413e+001,
          1.060474658549166e+001,1.914441373282820e+000,1.841661176805712e-001},{
          6.107630828637804e+001,1.083287683601744e+001,1.943103875942831e+000,
          1.867431752156427e-001},{6.326198278685594e+001,1.106893730143000e+001,
          1.972387533071627e+000,1.893589424508101e-001},{6.555796198384681e+001,
          1.131331679368660e+001,2.002314115513010e+000,1.920142637477639e-001},{
          6.797142895789277e+001,1.156642867112690e+001,2.032906470660536e+000,
          1.947100132673632e-001},{7.051014259118738e+001,1.182871277708803e+001,
          2.064188591054464e+000,1.974470964531552e-001},{7.318249755499194e+001,
          1.210063750757317e+001,2.096185688455698e+000,2.002264516101225e-001},{
          7.599758305520270e+001,1.238270212416496e+001,2.128924273762562e+000,
          2.030490515862381e-001},{7.896525487015090e+001,1.267543924938139e+001,
          2.162432243469748e+000,2.059159055650721e-001},{8.209620970424231e+001,
          1.297941764134553e+001,2.196738973190282e+000,2.088280609785455e-001},{
          8.540207522795785e+001,1.329524520372681e+001,2.231875419045990e+000,
          2.117866055497768e-001},{8.889550374943779e+001,1.362357234194895e+001,
          2.267874227597210e+000,2.147926694769878e-001},{9.259028368620527e+001,
          1.396509562361649e+001,2.304769855305945e+000,2.178474277705093e-001},{
          9.651829128424471e+001,1.432049438243640e+001,2.342598758507877e+000,
          2.209521027562080e-001},{1.006827813095549e+002,1.469059898846239e+001,
          2.381399399667429e+000,2.241079667600002e-001},{1.050830383090181e+002,
          1.507634001775476e+001,2.421212499782385e+000,2.273163449897145e-001},{
          1.097159532822494e+002,1.548598574903566e+001,2.462761236361068e+000,
          2.306327012079619e-001},{1.145551746011481e+002,1.590751402734798e+001,
          2.504820150180328e+000,2.339568479963077e-001},{1.196071879274800e+002,
          1.634031428204418e+001,2.547304783567245e+000,2.372813206159512e-001},{
          1.248813064046870e+002,1.678468557395838e+001,2.590218919465339e+000,
          2.406057414176631e-001},{1.303872537968743e+002,1.724093475889964e+001,
          2.633566376628655e+000,2.439297408582211e-001},{1.361351893482151e+002,
          1.770937668244954e+001,2.677351009715642e+000,2.472529573723386e-001},{
          1.421357200157020e+002,1.819033445609385e+001,2.721576709359743e+000,
          2.505750372458958e-001},{1.483999250325510e+002,1.868413966908177e+001,
          2.766247402420666e+000,2.538956344906715e-001},{1.549393793818828e+002,
          1.919113263274907e+001,2.811367052239077e+000,2.572144107206163e-001},{
          1.617661691499202e+002,1.971166267036393e+001,2.856939658935786e+000,
          2.605310350297162e-001},{1.688929248323650e+002,2.024608833018471e+001,
          2.902969259872029e+000,2.638451838715473e-001},{1.763328352717475e+002,
          2.079477771318220e+001,2.949459930036376e+000,2.671565409405210e-001},{
          1.840996840769975e+002,2.135810869815029e+001,2.996415782636564e+000,
          2.704647970548957e-001},{1.922078676314314e+002,2.193646927847552e+001,
          3.043840969616666e+000,2.737696500416193e-001},{2.006724283454303e+002,
          2.253025783125822e+001,3.091739682337686e+000,2.770708046228763e-001},{
          2.095090814552011e+002,2.313988343722962e+001,3.140116152252167e+000,
          2.803679723045419e-001},{2.187342515473353e+002,2.376576617580840e+001,
          3.188974651669187e+000,2.836608712664611e-001},{2.283650918868312e+002,
          2.440833750459543e+001,3.238319494505725e+000,2.869492262544885e-001},{
          2.384195342056883e+002,2.506804051982763e+001,3.288155037218739e+000,
          2.902327684744187e-001},{2.489163138911711e+002,2.574533035608010e+001,
          3.338485679629001e+000,2.935112354877263e-001},{2.598750056133280e+002,
          2.644067453977188e+001,3.389315865882125e+000,2.967843711090281e-001},{
          2.713160677769612e+002,2.715455332610006e+001,3.440650085468187e+000,
          3.000519253054244e-001},{2.832608847937721e+002,2.788746007968089e+001,
          3.492492874226473e+000,3.033136540975304e-001},{2.957317919551732e+002,
          2.863990172314495e+001,3.544848815373224e+000,3.065693194622797e-001},{
          3.087521441999503e+002,2.941239903121475e+001,3.597722540707405e+000,
          3.098186892373309e-001},{3.223463482749902e+002,3.020548711562214e+001,
          3.651118731652995e+000,3.130615370273069e-001},{3.365398966901275e+002,
          3.101971587811786e+001,3.705042120439269e+000,3.162976421114645e-001},{
          3.513594557285981e+002,3.185565030489221e+001,3.759497491412099e+000,
          3.195267893531296e-001},{3.668328823476213e+002,3.271387106452257e+001,
          3.814489682103804e+000,3.227487691105892e-001},{3.829892914752884e+002,
          3.359497489941416e+001,3.870023584585280e+000,3.259633771495039e-001},{
          3.998591128097355e+002,3.449957509744066e+001,3.926104146732770e+000,
          3.291704145568308e-001},{4.174741627149792e+002,3.542830194413114e+001,
          3.982736373535119e+000,3.323696876561623e-001},{4.358676805476378e+002,
          3.638180331176448e+001,4.039925328339042e+000,3.355610079244262e-001},{
          4.550744161800611e+002,3.736074507936995e+001,4.097676134274746e+000,
          3.387441919099929e-001},{4.751306901524957e+002,3.836581169669577e+001,
          4.155993975546389e+000,3.419190611519825e-001},{4.960744587857732e+002,
          3.939770673337638e+001,4.214884098795508e+000,3.450854421009716e-001},{
          5.179454167679796e+002,4.045715335623541e+001,4.274351814507482e+000,
          3.482431660408029e-001},{5.407850064016650e+002,4.154489509408396e+001,
          4.334402498261381e+000,3.513920690115978e-001},{5.646366068557300e+002,
          4.266169608345259e+001,4.395041592346873e+000,3.545319917339359e-001},{
          5.895455040095308e+002,4.380834204753403e+001,4.456274606836136e+000,
          3.576627795341116e-001},{6.155612607453704e+002,4.498563613130256e+001,
          4.518107123265989e+000,3.607842822704025e-001},{6.427223576125481e+002,
          4.619443542018386e+001,4.580544778714099e+000,3.638963542604584e-001},{
          6.711025648658506e+002,4.743553149708603e+001,4.643593333070903e+000,
          3.669988542095214e-001},{7.007318473518636e+002,4.870987626352949e+001,
          4.707258525584453e+000,3.700916451436019e-001},{7.316684143282685e+002,
          5.001834629107649e+001,4.771546260300777e+000,3.731745943241331e-001},{
          7.639419550281848e+002,5.136190630000230e+001,4.836462461289155e+000,
          3.762475732019301e-001},{7.981063801427506e+002,5.274052724808852e+001,
          4.902013540645013e+000,3.793104573307563e-001},{8.326445111213358e+002,
          5.415893280165836e+001,4.968203781164648e+000,3.823631262876042e-001},{
          8.700148252485711e+002,5.561171210577200e+001,5.035043285535354e+000,
          3.854054635554983e-001},{9.083445124296225e+002,5.710569757459630e+001,
          5.102533934520626e+000,3.884373570657309e-001},{9.485314487146718e+002,
          5.863925936997953e+001,5.170684545601461e+000,3.914586976410323e-001},{
          9.905087195242919e+002,6.021400337316415e+001,5.239500994607786e+000,
          3.944693805727305e-001},{1.034356723979786e+003,6.183105555221405e+001,
          5.308989797804546e+000,3.974693046888213e-001},{1.080159595815648e+003,
          6.349157319187947e+001,5.379157557964565e+000,4.004583724710528e-001},{
          1.128005029381322e+003,6.519674650368150e+001,5.450010965169889e+000,
          4.034364899924996e-001},{1.177984892396054e+003,6.694779842280083e+001,
          5.521556798559543e+000,4.064035668556144e-001},{1.230194856555584e+003,
          6.874598675922586e+001,5.593801926683446e+000,4.093595161310650e-001},{
          1.284735013104745e+003,7.059260392256267e+001,5.666753309253390e+000,
          4.123042542968513e-001},{1.343063556661926e+003,7.248693578584985e+001,
          5.740418684403948e+000,4.152377011781763e-001},{1.405790811881685e+003,
          7.442887970010709e+001,5.814805784873986e+000,4.181597798876019e-001},{
          1.473628412214821e+003,7.641766308616965e+001,5.889923696754936e+000,
          4.210704167656976e-001},{1.547407873141551e+003,7.866215579136075e+001,
          5.972913138476412e+000,4.242404029888886e-001},{1.626876447829412e+003,
          8.101582333818058e+001,6.058368241520675e+000,4.274553962053971e-001},{
          1.710703024156860e+003,8.348992183014360e+001,6.146409820007483e+000,
          4.307167462684176e-001},{1.802548130038754e+003,8.608556958507408e+001,
          6.237172430960432e+000,4.340258706136082e-001},{1.900281151393451e+003,
          8.881903955788455e+001,6.330791655209080e+000,4.373842594703591e-001},{
          2.005807564700644e+003,9.169671712011228e+001,6.427420948078083e+000,
          4.407934798537481e-001},{2.119670462816548e+003,9.473022727133676e+001,
          6.527221444915404e+000,4.442551829095661e-001},{2.242730739132749e+003,
          9.793155623939180e+001,6.630367354240099e+000,4.477711093076878e-001},{
          2.375959842441208e+003,1.013138933328462e+002,6.737046497801452e+000,
          4.513430963808632e-001},{2.520456586920368e+003,1.048917812479968e+002,
          6.847461700925177e+000,4.549730857610047e-001},{2.677467781456748e+003,
          1.086812872066808e+002,6.961832360108455e+000,4.586631318040276e-001},{
          2.848411757693430e+003,1.127002025269144e+002,7.080396212881112e+000,
          4.624154109045756e-001},{3.034907040997281e+003,1.169682716660580e+002,
          7.203411344095176e+000,4.662322318172513e-001},{3.238806348401873e+003,
          1.215074586972124e+002,7.331158464655384e+000,4.701160471199219e-001},{
          3.462237522477920e+003,1.263422571775514e+002,7.463943508185539e+000,
          4.740694659762597e-001},{3.707652735358812e+003,1.315000523822533e+002,
          7.602100598730761e+000,4.780952683808143e-001},{3.977888247502366e+003,
          1.370115455154723e+002,7.745995453845659e+000,4.821964211012325e-001},{
          4.276236889578777e+003,1.429112533343024e+002,7.896029299613393e+000,
          4.863760955695669e-001},{4.606537129126736e+003,1.492380973967760e+002,
          8.052643391311207e+000,4.906376880197965e-001},{4.973281708728467e+003,
          1.560361047391914e+002,8.216324251440401e+000,4.949848422233832e-001},{
          5.381752513871990e+003,1.633552406824528e+002,8.387609764809310e+000,
          4.994214752410864e-001},{5.838187327949046e+003,1.712524067572989e+002,
          8.567096297611432e+000,5.039518066908266e-001},{6.350807137284905e+003,
          1.797913262134226e+002,8.755447517735441e+000,5.085803921309421e-001},{
          6.925260369284571e+003,1.890530284782858e+002,8.953400783448563e+000,
          5.133121612816783e-001},{7.577609824964002e+003,1.991109013463354e+002,
          9.161790857189885e+000,5.181524619605371e-001},{8.315968280243349e+003,
          2.100768343459340e+002,9.381540170293199e+000,5.231071115480921e-001},{
          9.158060724816223e+003,2.220603128331959e+002,9.613703198825842e+000,
          5.281824536278080e-001},{1.012263317307919e+004,2.351976050029865e+002,
          9.859467222735550e+000,5.333854293394884e-001},{1.123327851126173e+004,
          2.496472646859635e+002,1.012018401525426e+001,5.387236561640729e-001},{
          1.251933369982379e+004,2.655964641799241e+002,1.039739833055877e+001,
          5.442055229446516e-001},{1.401759699687882e+004,2.832674508259391e+002,
          1.069288439806393e+001,5.498403020789378e-001},{1.577465893041188e+004,
          3.029257728808081e+002,1.100869114048111e+001,5.556382833229867e-001},{
          1.785011289937452e+004,3.248908324502644e+002,1.134719868472852e+001,
          5.616109344677590e-001},{2.032103368180682e+004,3.495495532976501e+002,
          1.171118962875876e+001,5.677710957231201e-001},{2.328832453018373e+004,
          3.773742333550699e+002,1.210393982355082e+001,5.741332167790789e-001},{
          2.688585484152241e+004,4.089460996964476e+002,1.252933527138577e+001,
          5.807136484549550e-001},{3.129385590668408e+004,4.449866873513151e+002,
          1.299202446564990e+001,5.875310049495469e-001},{3.675989831311496e+004,
          4.863985403526961e+002,1.349762008289207e+001,5.946066185193436e-001},{
          4.362525762024865e+004,5.343309081037533e+002,1.405296523588706e+001,
          6.019651167819491e-001},{5.238361908669422e+004,5.902358641369289e+002,
          1.466651102006858e+001,6.096351651125723e-001},{6.374468368510970e+004,
          6.560106923559654e+002,1.534880715327808e+001,6.176504358167559e-001},{
          7.877675453751416e+004,7.341156222195222e+002,1.611324444329973e+001,
          6.260508899137485e-001},{9.912569226684302e+004,8.277977359185787e+002,
          1.697708892301073e+001,6.348845111387733e-001},{1.274244982488466e+005,
          9.413602952665652e+002,1.796305186238983e+001,6.442096900359834e-001},{
          1.680683685966994e+005,1.080502797828005e+003,1.910170745210420e+001,
          6.540985866240503e-001},{2.287813361407409e+005,1.252634522697668e+003,
          2.043539039017945e+001,6.646420006807282e-001},{3.240258081936964e+005,
          1.466745135891141e+003,2.202482398980625e+001,6.759566538738161e-001},{
          4.831368343637143e+005,1.731166540009913e+003,2.396123098126818e+001,
          6.881964979202373e-001},{7.431179345815331e+005,2.088970442340921e+003,
          2.637425972841378e+001,7.015710980094142e-001},{1.189850152483235e+006,
          2.623880187705014e+003,2.946733032297955e+001,7.163772638856115e-001},{
          2.026594777734833e+006,3.525448589659171e+003,3.356057915998095e+001,
          7.330575520262048e-001},{3.751171121950996e+006,3.860303175516215e+003,
          3.792933932492554e+001,7.472071449747023e-001},{7.724209728178185e+006,
          3.466433188520202e+003,4.418715889618908e+001,7.632728136051334e-001},{
          1.704546786687731e+007,2.883198938498763e+003,5.372439594779554e+001,
          7.828757764751581e-001},{3.866227285949533e+007,6.044071408154451e+003,
          6.745335104083873e+001,8.059157661363587e-001},{8.834871476634434e+007,
          1.351199514790031e+004,8.499422051220881e+001,8.277377240352702e-001},{
          2.176025209942091e+008,1.094228648933841e+004,1.064266208208614e+002,
          8.459822722289890e-001},{5.417031709599584e+008,-1.429287025490565e+004,
          1.349265846505103e+002,8.629254292602316e-001},{1.260427879479906e+009,
          -1.145901868204451e+004,1.733305321359170e+002,8.814128590616269e-001},
          {2.813184466308078e+009,2.559435030649040e+005,2.304564317758250e+002,
          9.042234397623542e-001},{5.626351338748589e+009,4.809820508206572e+005,
          2.799571429006732e+002,9.167366942666617e-001},{1.296968662926528e+010,
          1.817347953863243e+005,3.184401164168030e+002,9.225727665578075e-001},{
          3.830247925197880e+010,-6.819911380346881e+005,4.005374222642562e+002,
          9.326388658049110e-001},{1.287778778901221e+011,-3.655758707469311e+006,
          5.430609568313491e+002,9.435863614001090e-001},{4.268494326672124e+011,
          -3.288472239150366e+006,7.033859556657586e+002,9.579454741567478e-001},
          {1.034173853201191e+012,4.083865055613008e+006,8.820734693646336e+002,
          9.677749072712484e-001},{7.360535318331335e+015,-4.520887554536115e+010,
          6.939753852333379e+004,9.741584695812871e-001}};
      constant Real[Ninterval, 4] dlcoef={{-1.238492681682227e+010,
          2.155273044551285e+006,-4.784064764172629e+002,3.108234546713846e+000},
          {-1.105429598046165e+010,2.040848348264662e+006,-4.669490356904236e+002,
          3.106950869117842e+000},{-9.690084649689146e+009,1.940606112928544e+006,
          -4.575230025626220e+002,3.105872508783625e+000},{-8.318064398350635e+009,
          1.756735969737722e+006,-4.369950152503960e+002,3.103417366473883e+000},
          {-7.140296347581058e+009,1.590320343200648e+006,-4.174017246617847e+002,
          3.100944868392514e+000},{-6.129570508708958e+009,1.439711927840652e+006,
          -3.987007300239189e+002,3.098454883787075e+000},{-5.261965140039352e+009,
          1.303395508058584e+006,-3.808503361523602e+002,3.095947126307966e+000},
          {-4.517289395063499e+009,1.180016669264855e+006,-3.638116590837542e+002,
          3.093421411830455e+000},{-3.878070615519906e+009,1.068342896840991e+006,
          -3.475472372378163e+002,3.090877503680521e+000},{-3.329405690851281e+009,
          9.672641008273838e+005,-3.320217101263023e+002,3.088315215846500e+000},
          {-2.858440705800047e+009,8.757716096217774e+005,-3.172010279329125e+002,
          3.085734309672665e+000},{-2.454126160678405e+009,7.929540898201873e+005,
          -3.030530265360140e+002,3.083134597151535e+000},{-2.107077441640843e+009,
          7.179881425904200e+005,-2.895465270173005e+002,3.080515785796512e+000},
          {-1.809136833923553e+009,6.501257495370673e+005,-2.766520552391303e+002,
          3.077877633663473e+000},{-1.553367992062939e+009,5.886942597143862e+005,
          -2.643417895971250e+002,3.075219949428117e+000},{-1.333788491394850e+009,
          5.330816167622649e+005,-2.525887134919396e+002,3.072542437056091e+000},
          {-1.145286689441753e+009,4.827368491822371e+005,-2.413675362576479e+002,
          3.069844902846438e+000},{-9.842004535366566e+008,4.371863251742306e+005,
          -2.306539304447653e+002,3.067127048225000e+000},{-8.481738668343931e+008,
          3.960467172138331e+005,-2.204253861258150e+002,3.064388625095322e+000},
          {-7.331751535883956e+008,3.589111400199431e+005,-2.106602384512079e+002,
          3.061629384019479e+000},{-6.358170209106354e+008,3.259263366450451e+005,
          -2.015181373167670e+002,3.058904739456489e+000},{-5.528785395381644e+008,
          2.973604756002514e+005,-1.932383784377713e+002,3.056307824467903e+000},
          {-4.812120579273270e+008,2.714695510765162e+005,-1.853567632253349e+002,
          3.053709701944857e+000},{-4.192283489842466e+008,2.479880869216736e+005,
          -1.778517183038584e+002,3.051110359095722e+000},{-3.655664548207343e+008,
          2.266781162415372e+005,-1.707029553047223e+002,3.048509783002060e+000},
          {-3.190676294329081e+008,2.073267347249426e+005,-1.638913968450548e+002,
          3.045907960618840e+000},{-2.787357163663924e+008,1.897427160373918e+005,
          -1.573990874235835e+002,3.043304878774594e+000},{-2.437229798017070e+008,
          1.737549055396368e+005,-1.512091344388983e+002,3.040700524171564e+000},
          {-2.132978996593800e+008,1.592092608304189e+005,-1.453056252302879e+002,
          3.038094883385813e+000},{-1.868371040328432e+008,1.459677646993695e+005,
          -1.396735798552919e+002,3.035487942867281e+000},{-1.638025501528403e+008,
          1.339061001971329e+005,-1.342988785546285e+002,3.032879688939840e+000},
          {-1.437323978319605e+008,1.229125376644445e+005,-1.291682166376668e+002,
          3.030270107801310e+000},{-1.262309428194057e+008,1.128866441350699e+005,
          -1.242690519881137e+002,3.027659185523409e+000},{-1.109546795986899e+008,
          1.037377107884577e+005,-1.195895502947782e+002,3.025046908051736e+000},
          {-9.761012432391328e+007,9.538426669141714e+004,-1.151185537187768e+002,
          3.022433261205660e+000},{-8.594246238515522e+007,8.775266482730758e+004,
          -1.108455268357315e+002,3.019818230678227e+000},{-7.573256602113859e+007,
          8.077656161927809e+004,-1.067605270066560e+002,3.017201802035995e+000},
          {-6.679050808234609e+007,7.439599879519979e+004,-1.028541631348516e+002,
          3.014583960718893e+000},{-5.895272357387779e+007,6.855689098463632e+004,
          -9.911756599444276e+001,3.011964692039987e+000},{-5.207642434522393e+007,
          6.321021881030477e+004,-9.554235139999366e+001,3.009343981185272e+000},
          {-4.603952482299992e+007,5.831185001665622e+004,-9.212060006254087e+001,
          3.006721813213399e+000},{-4.073465329002590e+007,5.382164282445671e+004,
          -8.884481728610524e+001,3.004098173055394e+000},{-3.606947830186065e+007,
          4.970338252471794e+004,-8.570791975358135e+001,3.001473045514342e+000},
          {-3.196365751713583e+007,4.592422769921850e+004,-8.270320400275625e+001,
          2.998846415265044e+000},{-2.834709613390578e+007,4.245437522415161e+004,
          -7.982432520669138e+001,2.996218266853638e+000},{-2.515904141651271e+007,
          3.926683364274947e+004,-7.706527859170076e+001,2.993588584697207e+000},
          {-2.234661006197257e+007,3.633710429345421e+004,-7.442037731654195e+001,
          2.990957353083351e+000},{-1.986350933749488e+007,3.364291054328384e+004,
          -7.188423367010003e+001,2.988324556169726e+000},{-1.766954634469551e+007,
          3.116404764577806e+004,-6.945174434254167e+001,2.985690177983576e+000},
          {-1.572958710525628e+007,2.888213723781383e+004,-6.711807172295707e+001,
          2.983054202421209e+000},{-1.401292644023167e+007,2.678046159635360e+004,
          -6.487862947013215e+001,2.980416613247471e+000},{-1.249270190404953e+007,
          2.484380595914790e+004,-6.272906834224337e+001,2.977777394095186e+000},
          {-1.114546757050897e+007,2.305832820575798e+004,-6.066526313144936e+001,
          2.975136528464554e+000},{-9.950639193150809e+006,2.141140730200463e+004,
          -5.868329902325385e+001,2.972493999722552e+000},{-8.890218298855454e+006,
          1.989154845489648e+004,-5.677946086303228e+001,2.969849791102278e+000},
          {-7.948405774843407e+006,1.848826513773720e+004,-5.495022127059669e+001,
          2.967203885702293e+000},{-7.111322017747801e+006,1.719198739978693e+004,
          -5.319223050409758e+001,2.964556266485915e+000},{-6.366802347563332e+006,
          1.599398533656803e+004,-5.150230698139536e+001,2.961906916280511e+000},
          {-5.704155755187705e+006,1.488628445368870e+004,-4.987742750713409e+001,
          2.959255817776730e+000},{-5.113936916982337e+006,1.386158907991517e+004,
          -4.831471847609879e+001,2.956602953527748e+000},{-4.587897845661234e+006,
          1.291324557621612e+004,-4.681144900015597e+001,2.953948305948456e+000},
          {-4.118721316950063e+006,1.203515316230080e+004,-4.536502121962786e+001,
          2.951291857314630e+000},{-3.699968686669407e+006,1.122173374498905e+004,
          -4.397296471188466e+001,2.948633589762085e+000},{-3.325990419032289e+006,
          1.046788709710375e+004,-4.263292938338680e+001,2.945973485285792e+000},
          {-2.991756337877007e+006,9.768928695956120e+003,-4.134267792650781e+001,
          2.943311525738965e+000},{-2.692851052844252e+006,9.120574676046892e+003,
          -4.010008148277442e+001,2.940647692832129e+000},{-2.425364090781395e+006,
          8.518894238993196e+003,-3.890311277023815e+001,2.937981968132176e+000},
          {-2.185839011929014e+006,7.960282125333197e+003,-3.774984110719230e+001,
          2.935314333061347e+000},{-1.971208238001473e+006,7.441427276955104e+003,
          -3.663842719615118e+001,2.932644768896239e+000},{-1.778765554998854e+006,
          6.959293235989100e+003,-3.556711877550735e+001,2.929973256766761e+000},
          {-1.606107055594805e+006,6.511088393081703e+003,-3.453424555743582e+001,
          2.927299777655057e+000},{-1.451097834519724e+006,6.094246543433254e+003,
          -3.353821526499588e+001,2.924624312394422e+000},{-1.311849093123074e+006,
          5.706410424466297e+003,-3.257750979381026e+001,2.921946841668166e+000},
          {-1.186680867573490e+006,5.345410405839227e+003,-3.165068106360730e+001,
          2.919267346008474e+000},{-1.074098219451101e+006,5.009249251722629e+003,
          -3.075634760904577e+001,2.916585805795216e+000},{-9.727750675061081e+005,
          4.696089510241781e+003,-2.989319134752533e+001,2.913902201254751e+000},
          {-8.815305960940811e+005,4.404238143974260e+003,-2.905995415563471e+001,
          2.911216512458684e+000},{-7.993100073168422e+005,4.132133894522016e+003,
          -2.825543489024561e+001,2.908528719322610e+000},{-7.251808108065209e+005,
          3.878340434733169e+003,-2.747848687199868e+001,2.905838801604811e+000},
          {-6.583036582047840e+005,3.641529386009533e+003,-2.672801450587870e+001,
          2.903146738904952e+000},{-5.979351488970650e+005,3.420477830640781e+003,
          -2.600297151102254e+001,2.900452510662714e+000},{-5.434106276898081e+005,
          3.214056119358886e+003,-2.530235797279994e+001,2.897756096156425e+000},
          {-4.941345433408149e+005,3.021220273636314e+003,-2.462521817165470e+001,
          2.895057474501652e+000},{-4.495775001488223e+005,2.841007253447881e+003,
          -2.397063865119245e+001,2.892356624649757e+000},{-4.092637696142438e+005,
          2.672525730358106e+003,-2.333774582158626e+001,2.889653525386433e+000},
          {-3.727690426212300e+005,2.514952386918597e+003,-2.272570432440947e+001,
          2.886948155330209e+000},{-3.397130883384123e+005,2.367525415691009e+003,
          -2.213371501440320e+001,2.884240492930909e+000},{-3.097553540585333e+005,
          2.229539894807050e+003,-2.156101328018909e+001,2.881530516468100e+000},
          {-2.825898974603600e+005,2.100342961405521e+003,-2.100686736953992e+001,
          2.878818204049503e+000},{-2.579442208981614e+005,1.979331007278646e+003,
          -2.047057696315193e+001,2.876103533609366e+000},{-2.355710977468511e+005,
          1.865943220530542e+003,-1.995147135640385e+001,2.873386482906805e+000},
          {-2.152510718952486e+005,1.759661471895166e+003,-1.944890854277082e+001,
          2.870667029524125e+000},{-1.967854522379427e+005,1.660004272608494e+003,
          -1.896227340604679e+001,2.867945150865090e+000},{-1.799963227248120e+005,
          1.566525526716963e+003,-1.849097676756957e+001,2.865220824153183e+000},
          {-1.647232316787083e+005,1.478811021808096e+003,-1.803445403318663e+001,
          2.862494026429800e+000},{-1.508223569587723e+005,1.396476642378965e+003,
          -1.759216415836827e+001,2.859764734552452e+000},{-1.381636164814771e+005,
          1.319165275775219e+003,-1.716358843294191e+001,2.857032925192887e+000},
          {-1.266302756204947e+005,1.246545535418823e+003,-1.674822959952733e+001,
          2.854298574835218e+000},{-1.161168631137604e+005,1.178309260666872e+003,
          -1.634561076107631e+001,2.851561659773991e+000},{-1.065283929681333e+005,
          1.114170085655529e+003,-1.595527452413494e+001,2.848822156112222e+000},
          {-9.777902898360457e+004,1.053861608696577e+003,-1.557678207604774e+001,
          2.846080039759405e+000},{-8.979154479537536e+004,9.971361867131301e+002,
          -1.520971239323694e+001,2.843335286429471e+000},{-8.249581780149181e+004,
          9.437630558793404e+002,-1.485366135803301e+001,2.840587871638727e+000},
          {-7.582881406187733e+004,8.935276800414810e+002,-1.450824112401567e+001,
          2.837837770703734e+000},{-6.973331684484918e+004,8.462300547482139e+002,
          -1.417307927722939e+001,2.835084958739184e+000},{-6.415772301025310e+004,
          8.016839926065475e+002,-1.384781823535527e+001,2.832329410655682e+000},
          {-5.905519971849246e+004,7.597158559545809e+002,-1.353211453405775e+001,
          2.829571101157552e+000},{-5.438340177539967e+004,7.201638399218540e+002,
          -1.322563825532957e+001,2.826810004740545e+000},{-5.010398989213503e+004,
          6.828770586818224e+002,-1.292807241099001e+001,2.824046095689559e+000},
          {-4.618216375504041e+004,6.477146970338505e+002,-1.263911237047971e+001,
          2.821279348076278e+000},{-4.258637278865216e+004,6.145453580284924e+002,
          -1.235846534594279e+001,2.818509735756785e+000},{-3.928799334523628e+004,
          5.832463833869973e+002,-1.208584987510642e+001,2.815737232369135e+000},
          {-3.626107008446607e+004,5.537032511254856e+002,-1.182099533490190e+001,
          2.812961811330881e+000},{-3.348198605783714e+004,5.258089299140838e+002,
          -1.156364146280048e+001,2.810183445836552e+000},{-3.092930799948825e+004,
          4.994634350699143e+002,-1.131353793886240e+001,2.807402108855102e+000},
          {-2.858356718774496e+004,4.745733110816813e+002,-1.107044395139554e+001,
          2.804617773127295e+000},{-2.642699292972316e+004,4.510511035622531e+002,
          -1.083412778305086e+001,2.801830411163054e+000},{-2.444349338561342e+004,
          4.288151035012024e+002,-1.060436646834351e+001,2.799039995238765e+000},
          {-2.261838452021139e+004,4.077888022404431e+002,-1.038094537815669e+001,
          2.796246497394526e+000},{-2.093827593537573e+004,3.879005747406519e+002,
          -1.016365789510950e+001,2.793449889431356e+000},{-1.939098963577922e+004,
          3.690833932437830e+002,-9.952305091079492e+000,2.790650142908357e+000},
          {-1.796543440841462e+004,3.512744857770907e+002,-9.746695394200888e+000,
          2.787847229139806e+000},{-1.665145478671165e+004,3.344149940989051e+002,
          -9.546644276491429e+000,2.785041119192228e+000},{-1.543982996581212e+004,
          3.184498209919203e+002,-9.351973998366489e+000,2.782231783881397e+000},
          {-1.432210669598613e+004,3.033272642915332e+002,-9.162513291636291e+000,
          2.779419193769276e+000},{-1.329059840415068e+004,2.889988870529622e+002,
          -8.978097130361970e+000,2.776603319160937e+000},{-1.233825052722389e+004,
          2.754192080986946e+002,-8.798566446195549e+000,2.773784130101386e+000},
          {-1.145863709207734e+004,2.625455884031810e+002,-8.623767918906500e+000,
          2.770961596372379e+000},{-1.064587614821500e+004,2.503379954642477e+002,
          -8.453553723390042e+000,2.768135687489127e+000},{-9.894583021419403e+003,
          2.387588397329175e+002,-8.287781316214854e+000,2.765306372696999e+000},
          {-9.199834391098546e+003,2.277728276390388e+002,-8.126313229068519e+000,
          2.762473620968123e+000},{-8.557121363365739e+003,2.173468013975267e+002,
          -7.969016862161412e+000,2.759637400997958e+000},{-7.962313251536238e+003,
          2.074496022604224e+002,-7.815764293296074e+000,2.756797681201794e+000},
          {-7.411623241071581e+003,1.980519411509770e+002,-7.666432093866367e+000,
          2.753954429711179e+000},{-6.901589290252236e+003,1.891262933062386e+002,
          -7.520901156344275e+000,2.751107614370310e+000},{-6.429018668504029e+003,
          1.806467434145949e+002,-7.379056511362362e+000,2.748257202732345e+000},
          {-5.991001909044038e+003,1.725889472108416e+002,-7.240787192269098e+000,
          2.745403162055639e+000},{-5.584856439473709e+003,1.649299712560422e+002,
          -7.105986051583309e+000,2.742545459299940e+000},{-5.208118092244479e+003,
          1.576482310857538e+002,-6.974549631033893e+000,2.739684061122499e+000},
          {-4.858536339451712e+003,1.507234256770707e+002,-6.846378022696069e+000,
          2.736818933874121e+000},{-4.534025576845524e+003,1.441364021997527e+002,
          -6.721374710980710e+000,2.733950043595136e+000},{-4.232680321240590e+003,
          1.378691440330893e+002,-6.599446472802768e+000,2.731077356011313e+000},
          {-3.952748909345426e+003,1.319046712312123e+002,-6.480503232709889e+000,
          2.728200836529692e+000},{-3.692609478366457e+003,1.262269600752981e+002,
          -6.364457941874171e+000,2.725320450234344e+000},{-3.450780099779326e+003,
          1.208209269116236e+002,-6.251226483812403e+000,2.722436161882055e+000},
          {-3.225890664374303e+003,1.156723332618167e+002,-6.140727542679162e+000,
          2.719547935897942e+000},{-3.016682125991474e+003,1.107677541103619e+002,
          -6.032882511285902e+000,2.716655736370977e+000},{-2.821990248596265e+003,
          1.060945140428862e+002,-5.927615383023561e+000,2.713759527049444e+000},
          {-2.640746879338374e+003,1.016406614326807e+002,-5.824852664925329e+000,
          2.710859271336301e+000},{-2.471964523626565e+003,9.739490626074014e+001,
          -5.724523273535363e+000,2.707954932284481e+000},{-2.314730837568900e+003,
          9.334658567014867e+001,-5.626558451896237e+000,2.705046472592083e+000},
          {-2.168208526525156e+003,8.948563835359066e+001,-5.530891688550211e+000,
          2.702133854597495e+000},{-2.031619097394213e+003,8.580254532064717e+001,
          -5.437458623108411e+000,2.699217040274426e+000},{-1.904248100892504e+003,
          8.228832275596824e+001,-5.346196983339631e+000,2.696295991226843e+000},
          {-1.785432953219038e+003,7.893447181267172e+001,-5.257046496811301e+000,
          2.693370668683814e+000},{-1.674562836953798e+003,7.573296108764812e+001,
          -5.169948826535308e+000,2.690441033494273e+000},{-1.571072232234745e+003,
          7.267619282823553e+001,-5.084847496875256e+000,2.687507046121676e+000},
          {-1.474438413222446e+003,6.975698100090553e+001,-5.001687829570725e+000,
          2.684568666638568e+000},{-1.384177903371559e+003,6.696852671757033e+001,
          -4.920416878738944e+000,2.681625854721034e+000},{-1.299843535198407e+003,
          6.430439600004813e+001,-4.840983369252954e+000,2.678678569643088e+000},
          {-1.221020634106669e+003,6.175849648989043e+001,-4.763337636576003e+000,
          2.675726770270898e+000},{-1.147326026570235e+003,5.932506215554464e+001,
          -4.687431572745481e+000,2.672770415056979e+000},{-1.078404076039887e+003,
          5.699863018706918e+001,-4.613218568350649e+000,2.669809462034204e+000},
          {-1.013926021509312e+003,5.477402792669884e+001,-4.540653463065229e+000,
          2.666843868809767e+000},{-9.535859458173311e+002,5.264635101631857e+001,
          -4.469692491629795e+000,2.663873592558998e+000},{-8.971017903285012e+002,
          5.061095614294467e+001,-4.400293240651299e+000,2.660898590019072e+000},
          {-8.442100723223150e+002,4.866343605671213e+001,-4.332414594549864e+000,
          2.657918817482606e+000},{-7.946678515348818e+002,4.679961714885733e+001,
          -4.266016699189970e+000,2.654934230791131e+000},{-7.482488676648289e+002,
          4.501553841960071e+001,-4.201060911438582e+000,2.651944785328449e+000},
          {-7.047431728617579e+002,4.330744315658079e+001,-4.137509761479857e+000,
          2.648950436013851e+000},{-6.639558744821053e+002,4.167176730429927e+001,
          -4.075326912123187e+000,2.645951137295226e+000},{-6.257057100641964e+002,
          4.010512796775672e+001,-4.014477119746307e+000,2.642946843142023e+000},
          {-5.898246346182218e+002,3.860431527293839e+001,-3.954926198543035e+000,
          2.639937507038096e+000},{-5.561557244035386e+002,3.716627939672841e+001,
          -3.896640982412575e+000,2.636923081974399e+000},{-5.245536700749274e+002,
          3.578812653072018e+001,-3.839589294597946e+000,2.633903520441549e+000},
          {-4.948831814045453e+002,3.446710725683307e+001,-3.783739911111038e+000,
          2.630878774422248e+000},{-4.670181331795835e+002,3.320060869244811e+001,
          -3.729062529754870e+000,2.627848795383549e+000},{-4.408411680577592e+002,
          3.198614837687174e+001,-3.675527740772351e+000,2.624813534268998e+000},
          {-4.162434320780575e+002,3.082136815496841e+001,-3.623106997289613e+000,
          2.621772941490593e+000},{-3.931227261553422e+002,2.970402334199991e+001,
          -3.571772583810418e+000,2.618726966920612e+000},{-3.713848005366851e+002,
          2.863198333302012e+001,-3.521497594697411e+000,2.615675559883269e+000},
          {-3.509411299166285e+002,2.760321878319193e+001,-3.472255900926836e+000,
          2.612618669146214e+000},{-3.317092974307500e+002,2.661580012155591e+001,
          -3.424022129678430e+000,2.609556242911867e+000},{-3.136127904025766e+002,
          2.566789269818100e+001,-3.376771639026537e+000,2.606488228808575e+000},
          {-2.965798073836402e+002,2.475774875702146e+001,-3.330480491611001e+000,
          2.603414573881601e+000},{-2.805435913300593e+002,2.388370594280104e+001,
          -3.285125435370047e+000,2.600335224583943e+000},{-2.654419571434289e+002,
          2.304418190389038e+001,-3.240683879734343e+000,2.597250126766951e+000},
          {-2.512164673588557e+002,2.223766834090091e+001,-3.197133873379682e+000,
          2.594159225670773e+000},{-2.378128746065777e+002,2.146273034130477e+001,
          -3.154454087136033e+000,2.591062465914610e+000},{-2.251804620611885e+002,
          2.071800061360175e+001,-3.112623791404769e+000,2.587959791486772e+000},
          {-2.132716404393391e+002,2.000217565128110e+001,-3.071622837510624e+000,
          2.584851145734526e+000},{-2.020422322936485e+002,1.931401462635231e+001,
          -3.031431641412206e+000,2.581736471353761e+000},{-1.914506566618751e+002,
          1.865233349451230e+001,-2.992031162913385e+000,2.578615710378421e+000},
          {-1.814582337456608e+002,1.801600450360726e+001,-2.953402891597071e+000,
          2.575488804169740e+000},{-1.720286483594544e+002,1.740395163665135e+001,
          -2.915528828069439e+000,2.572355693405244e+000},{-1.631280051948557e+002,
          1.681514914240465e+001,-2.878391469604711e+000,2.569216318067544e+000},
          {-1.547245214939870e+002,1.624861828468630e+001,-2.841973793789774e+000,
          2.566070617432879e+000},{-1.467885075935258e+002,1.570342560672776e+001,
          -2.806259244455594e+000,2.562918530059438e+000},{-1.392920759633892e+002,
          1.517867995891996e+001,-2.771231716523010e+000,2.559759993775438e+000},
          {-1.322092377618008e+002,1.467353144997319e+001,-2.736875543385945e+000,
          2.556594945666950e+000},{-1.255154520422071e+002,1.418716782019382e+001,
          -2.703175481732913e+000,2.553423322065465e+000},{-1.191879144732180e+002,
          1.371881463196889e+001,-2.670116701239096e+000,2.550245058535220e+000},
          {-1.132051254329855e+002,1.326773160149195e+001,-2.637684769449511e+000,
          2.547060089860237e+000},{-1.075469689833722e+002,1.283321196746067e+001,
          -2.605865641505036e+000,2.543868350031094e+000},{-1.021945855468274e+002,
          1.241458057792133e+001,-2.574645647887416e+000,2.540669772231418e+000},
          {-9.713024121213921e+001,1.201119215362063e+001,-2.544011483057522e+000,
          2.537464288824097e+000},{-9.233735633732306e+001,1.162243039375014e+001,
          -2.513950195251489e+000,2.534251831337175e+000},{-8.780030483853737e+001,
          1.124770586654619e+001,-2.484449174984496e+000,2.531032330449471e+000},
          {-8.350447678244254e+001,1.088645546210887e+001,-2.455496146003123e+000,
          2.527805715975874e+000},{-7.943610746442556e+001,1.053814048023886e+001,
          -2.427079154442550e+000,2.524571916852306e+000},{-7.558228169765363e+001,
          1.020224588737254e+001,-2.399186560121682e+000,2.521330861120392e+000},
          {-7.193088597970828e+001,9.878279171064129e+000,-2.371807027150768e+000,
          2.518082475911769e+000},{-6.847048516239306e+001,9.565768889163360e+000,
          -2.344929514629048e+000,2.514826687432048e+000},{-6.519039610308946e+001,
          9.264264386688476e+000,-2.318543269061701e+000,2.511563420944446e+000},
          {-6.208052306641781e+001,8.973334052099887e+000,-2.292637814810399e+000,
          2.508292600753025e+000},{-5.913139743958612e+001,8.692564973814662e+000,
          -2.267202947101239e+000,2.505014150185589e+000},{-5.633408892514787e+001,
          8.421561745547976e+000,-2.242228723666145e+000,2.501727991576170e+000},
          {-5.368023596268498e+001,8.159946044547962e+000,-2.217705457774197e+000,
          2.498434046247153e+000},{-5.116192490033033e+001,7.907355281104470e+000,
          -2.193623710100769e+000,2.495132234490955e+000},{-4.877172908422913e+001,
          7.663442373803837e+000,-2.169974282641104e+000,2.491822475551334e+000},
          {-4.650265985770452e+001,7.427874856171875e+000,-2.146748211408460e+000,
          2.488504687604243e+000},{-4.434811779628213e+001,7.200334084917268e+000,
          -2.123936759740916e+000,2.485178787738240e+000},{-4.230190317998800e+001,
          6.980514860596383e+000,-2.101531412363795e+000,2.481844691934497e+000},
          {-4.035816750319500e+001,6.768124621635819e+000,-2.079523868792742e+000,
          2.478502315046275e+000},{-3.851139744312152e+001,6.562882936055023e+000,
          -2.057906037559458e+000,2.475151570777977e+000},{-3.675639931468597e+001,
          6.364520986088379e+000,-2.036670030451280e+000,2.471792371663693e+000},
          {-3.508827447219454e+001,6.172781005619186e+000,-2.015808156820983e+000,
          2.468424629045237e+000},{-3.350240391913771e+001,5.987415808641527e+000,
          -1.995312918218178e+000,2.465048253049681e+000},{-3.199442787158013e+001,
          5.808188295000401e+000,-1.975177003091340e+000,2.461663152566335e+000},
          {-3.056024706213614e+001,5.634871106705811e+000,-1.955393281837274e+000,
          2.458269235223206e+000},{-2.919596443353868e+001,5.467245898489124e+000,
          -1.935954801423811e+000,2.454866407362862e+000},{-2.789793559611147e+001,
          5.305103425707614e+000,-1.916854781506048e+000,2.451454574017747e+000},
          {-2.666269215914849e+001,5.148242631442525e+000,-1.898086608731207e+000,
          2.448033638884868e+000},{-2.548697421306633e+001,4.996470669372890e+000,
          -1.879643833139071e+000,2.444603504299887e+000},{-2.436770123450288e+001,
          4.849602373431799e+000,-1.861520163342853e+000,2.441164071210578e+000},
          {-2.330195977537568e+001,4.707459922705984e+000,-1.843709462409692e+000,
          2.437715239149616e+000},{-2.228699227843552e+001,4.569872530071029e+000,
          -1.826205743845993e+000,2.434256906206701e+000},{-2.132020684497282e+001,
          4.436676277522927e+000,-1.809003167843803e+000,2.430788968999998e+000},
          {-2.039914018532746e+001,4.307713579632853e+000,-1.792096036957894e+000,
          2.427311322646843e+000},{-1.952146936347992e+001,4.182833098600734e+000,
          -1.775478792886058e+000,2.423823860733728e+000},{-1.868499316966931e+001,
          4.061889380846185e+000,-1.759146012624790e+000,2.420326475285513e+000},
          {-1.788763992768876e+001,3.944742723944577e+000,-1.743092405205007e+000,
          2.416819056733864e+000},{-1.712743344254924e+001,3.831258705580187e+000,
          -1.727312807882854e+000,2.413301493884874e+000},{-1.640252210380573e+001,
          3.721308274346385e+000,-1.711802183566103e+000,2.409773673885858e+000},
          {-1.571113655820867e+001,3.614767188724737e+000,-1.696555616858599e+000,
          2.406235482191265e+000},{-1.505161347050935e+001,3.511516100089723e+000,
          -1.681568311719631e+000,2.402686802527732e+000},{-1.442237501501945e+001,
          3.411440183535207e+000,-1.666835588003566e+000,2.399127516858194e+000},
          {-1.382192281792874e+001,3.314428957926218e+000,-1.652352878705905e+000,
          2.395557505345059e+000},{-1.324884440234419e+001,3.220376204778547e+000,
          -1.638115727371166e+000,2.391976646312384e+000},{-1.270179534791704e+001,
          3.129179660595857e+000,-1.624119785066449e+000,2.388384816207066e+000},
          {-1.217950533160762e+001,3.040740960771689e+000,-1.610360808057413e+000,
          2.384781889558960e+000},{-1.168077185108037e+001,2.954965440505362e+000,
          -1.596834655106244e+000,2.381167738939920e+000},{-1.120445287471011e+001,
          2.871761949263363e+000,-1.583537284982829e+000,2.377542234921738e+000},
          {-1.074945938906329e+001,2.791042690386217e+000,-1.570464754127387e+000,
          2.373905246032895e+000},{-1.031477532863617e+001,2.712723290948242e+000,
          -1.557613214714723e+000,2.370256638714139e+000},{-9.899418059077929e+000,
          2.636722293125727e+000,-1.544978911524978e+000,2.366596277272797e+000},
          {-9.502469882015735e+000,2.562961407683305e+000,-1.532558180831734e+000,
          2.362924023835828e+000},{-9.123051186031617e+000,2.491365115660259e+000,
          -1.520347447494355e+000,2.359239738301530e+000},{-8.760330847138221e+000,
          2.421860710047537e+000,-1.508343223428605e+000,2.355543278289859e+000},
          {-8.413522164671106e+000,2.354378147536363e+000,-1.496542105459269e+000,
          2.351834499091346e+000},{-8.081872986226925e+000,2.288849868571785e+000,
          -1.484940773296089e+000,2.348113253614503e+000},{-7.764673182380162e+000,
          2.225210809410545e+000,-1.473535988024564e+000,2.344379392331724e+000},
          {-7.461247253240972e+000,2.163398232030816e+000,-1.462324590067311e+000,
          2.340632763223554e+000},{-7.170954402974354e+000,2.103351655486919e+000,
          -1.451303497568699e+000,2.336873211721342e+000},{-6.893183429082948e+000,
          2.045012734099102e+000,-1.440469704675801e+000,2.333100580648147e+000},
          {-6.627356535854197e+000,1.988325235265094e+000,-1.429820280102758e+000,
          2.329314710157896e+000},{-6.372924033280025e+000,1.933234904863000e+000,
          -1.419352365401565e+000,2.325515437672646e+000},{-6.129360718270444e+000,
          1.879689376009046e+000,-1.409063173503607e+000,2.321702597817965e+000},
          {-5.896172583475862e+000,1.827638183228592e+000,-1.398949987494580e+000,
          2.317876022356293e+000},{-5.672883417268298e+000,1.777032546809523e+000,
          -1.389010158827584e+000,2.314035540118214e+000},{-5.459048060392687e+000,
          1.727825480131581e+000,-1.379241106510718e+000,2.310180976931593e+000},
          {-5.254234210794342e+000,1.679971515124929e+000,-1.369640315213699e+000,
          2.306312155548433e+000},{-5.058040409876274e+000,1.633426877234746e+000,
          -1.360205334751793e+000,2.302428895569415e+000},{-4.870075449851535e+000,
          1.588149172977625e+000,-1.350933778115679e+000,2.298531013365968e+000},
          {-4.689974661286671e+000,1.544097561802145e+000,-1.341823321100738e+000,
          2.294618321999826e+000},{-4.517385486985614e+000,1.501232515510214e+000,
          -1.332871700581220e+000,2.290690631139916e+000},{-4.351976351638122e+000,
          1.459515900408742e+000,-1.324076713954947e+000,2.286747746976495e+000},
          {-4.193429409227905e+000,1.418910831861334e+000,-1.315436217803243e+000,
          2.282789472132387e+000},{-4.041441822526155e+000,1.379381663626085e+000,
          -1.306948127133261e+000,2.278815605571236e+000},{-3.895727955783459e+000,
          1.340893969545224e+000,-1.298610414512591e+000,2.274825942502597e+000},
          {-3.756011643772165e+000,1.303414407478659e+000,-1.290421108956039e+000,
          2.270820274283760e+000},{-3.622034405547364e+000,1.266910796845365e+000,
          -1.282378295516774e+000,2.266798388318138e+000},{-3.493546180189254e+000,
          1.231351952460242e+000,-1.274480114091720e+000,2.262760067950088e+000},
          {-3.370310607726903e+000,1.196707735821732e+000,-1.266724759068044e+000,
          2.258705092355959e+000},{-3.252103437476587e+000,1.162948988902917e+000,
          -1.259110478484196e+000,2.254633236431245e+000},{-3.138708072538556e+000,
          1.130047448209561e+000,-1.251635573300534e+000,2.250544270673615e+000},
          {-3.029921490748561e+000,1.097975801268001e+000,-1.244298397138752e+000,
          2.246437961061666e+000},{-2.925547647484275e+000,1.066707556584218e+000,
          -1.237097355384933e+000,2.242314068929141e+000},{-2.825400740172198e+000,
          1.036217072961828e+000,-1.230030904983982e+000,2.238172350834462e+000},
          {-2.729304069234395e+000,1.006479509244643e+000,-1.223097553890867e+000,
          2.234012558425291e+000},{-2.637088175181507e+000,9.774707739265413e-001,
          -1.216295860641661e+000,2.229834438297897e+000},{-2.548592797119484e+000,
          9.491675292708579e-001,-1.209624434141700e+000,2.225637731851086e+000},
          {-2.463663423753487e+000,9.215471164859220e-001,-1.203081933219051e+000,
          2.221422175134388e+000},{-2.382154682227609e+000,8.945875849149885e-001,
          -1.196667066602152e+000,2.217187498690240e+000},{-2.303926482472558e+000,
          8.682676066340345e-001,-1.190378592501879e+000,2.212933427389838e+000},
          {-2.228846495422617e+000,8.425664957592878e-001,-1.184215318682858e+000,
          2.208659680262342e+000},{-2.156787119809440e+000,8.174641394548649e-001,
          -1.178176102225793e+000,2.204365970317081e+000},{-2.087628043470757e+000,
          7.929410200343601e-001,-1.172259849701592e+000,2.200052004358389e+000},
          {-2.021254023899635e+000,7.689781539219797e-001,-1.166465517041273e+000,
          2.195717482792678e+000},{-1.957555062242275e+000,7.455570794959029e-001,
          -1.160792109727399e+000,2.191362099427352e+000},{-1.896426533402995e+000,
          7.226598392117595e-001,-1.155238682973756e+000,2.186985541261074e+000},
          {-1.837768826064559e+000,7.002689535529851e-001,-1.149804341937003e+000,
          2.182587488264949e+000},{-1.781486665007183e+000,6.783673926406706e-001,
          -1.144488242010365e+000,2.178167613154132e+000},{-1.727489645225360e+000,
          6.569385677311423e-001,-1.139289589251027e+000,2.173725581149271e+000},
          {-1.675691487477748e+000,6.359662992671422e-001,-1.134207640777898e+000,
          2.169261049727270e+000},{-1.626009927752474e+000,6.154347993672957e-001,
          -1.129241705325752e+000,2.164773668360731e+000},{-1.578367042581602e+000,
          5.953286591428831e-001,-1.124391143878772e+000,2.160263078245440e+000},
          {-1.532688000054525e+000,5.756328107329074e-001,-1.119655370298758e+000,
          2.155728912015201e+000},{-1.488902369669526e+000,5.563325343394894e-001,
          -1.115033852224612e+000,2.151170793443280e+000},{-1.446942756513707e+000,
          5.374134146917063e-001,-1.110526111833913e+000,2.146588337129652e+000},
          {-1.406744919308124e+000,5.188613303492935e-001,-1.106131726888593e+000,
          2.141981148173249e+000},{-1.368248520348087e+000,5.006624488336312e-001,
          -1.101850331860153e+000,2.137348821828268e+000},{-1.331395630230789e+000,
          4.828031818949505e-001,-1.097681619010324e+000,2.132690943143583e+000},
          {-1.296131540592206e+000,4.652701873924490e-001,-1.093625339819990e+000,
          2.128007086584252e+000},{-1.262404709408866e+000,4.480503487048833e-001,
          -1.089681306389480e+000,2.123296815633988e+000},{-1.230165851283160e+000,
          4.311307419976398e-001,-1.085849392958450e+000,2.118559682377429e+000},
          {-1.199368710297917e+000,4.144986359366915e-001,-1.082129537707425e+000,
          2.113795227060934e+000},{-1.169969608591567e+000,3.981414637443046e-001,
          -1.078521744549609e+000,2.109002977630553e+000},{-1.141927349834720e+000,
          3.820468046501531e-001,-1.075026085156083e+000,2.104182449245702e+000},
          {-1.115203082457214e+000,3.662023649698341e-001,-1.071642701147781e+000,
          2.099333143767018e+000},{-1.089760490754199e+000,3.505959636314658e-001,
          -1.068371806469075e+000,2.094454549216662e+000},{-1.065565676036384e+000,
          3.352155103263428e-001,-1.065213689919650e+000,2.089546139209323e+000},
          {-1.042586729117127e+000,3.200489791680136e-001,-1.062168717889230e+000,
          2.084607372351953e+000},{-1.020794201818640e+000,3.050843996188034e-001,
          -1.059237337384420e+000,2.079637691610172e+000},{-1.000160851423267e+000,
          2.903098297929833e-001,-1.056420079188220e+000,2.074636523639092e+000},
          {-9.806614973337507e-001,2.757133333948358e-001,-1.053717561313666e+000,
          2.069603278076170e+000},{-9.622732693844609e-001,2.612829629773606e-001,
          -1.051130492745526e+000,2.064537346793446e+000},{-9.449750965802405e-001,
          2.470067276370440e-001,-1.048659677405065e+000,2.059438103106439e+000},
          {-9.287484495069965e-001,2.328725849863756e-001,-1.046306018534049e+000,
          2.054304900936606e+000},{-9.135767353123816e-001,2.188684014719849e-001,
          -1.044070523246075e+000,2.049137073924143e+000},{-8.994453596884484e-001,
          2.049819299554718e-001,-1.041954307568271e+000,2.043933934487611e+000},
          {-8.863420305972949e-001,1.912007886144718e-001,-1.039958601844730e+000,
          2.038694772826542e+000},{-8.742566684377657e-001,1.775124284430896e-001,
          -1.038084756497729e+000,2.033418855862917e+000},{-8.631812697459577e-001,
          1.639040998219162e-001,-1.036334248261912e+000,2.028105426117050e+000},
          {-8.531101234321912e-001,1.503628248396395e-001,-1.034708686935291e+000,
          2.022753700513037e+000},{-8.440398362033877e-001,1.368753624716768e-001,
          -1.033209822617653e+000,2.017362869108479e+000},{-8.359695776931154e-001,
          1.234281750538496e-001,-1.031839553532223e+000,2.011932093742809e+000},
          {-8.289005178126103e-001,1.100073763809098e-001,-1.030599934401732e+000,
          2.006460506597966e+000},{-8.228370327534438e-001,9.659871547150999e-002,
          -1.029493185682019e+000,2.000947208664684e+000},{-8.177855931109604e-001,
          8.318750209275284e-002,-1.028521703215806e+000,1.995391268106987e+000},
          {-8.137559409386451e-001,6.975858534653368e-002,-1.027688069030039e+000,
          1.989791718516891e+000},{-8.107605455362672e-001,5.629628320384371e-002,
          -1.026995062703656e+000,1.984147557050458e+000},{-8.088151684966699e-001,
          4.278433685925803e-002,-1.026445673888504e+000,1.978457742435633e+000},
          {-8.079389176695084e-001,2.920584547725917e-002,-1.026043115762180e+000,
          1.972721192841307e+000},{-8.081545055075236e-001,1.554320066626404e-002,
          -1.025790839663862e+000,1.966936783596047e+000},{-8.094885690941598e-001,
          1.778015394473135e-003,-1.025692550981584e+000,1.961103344743805e+000},
          {-8.119862698864362e-001,-1.210870698156008e-002,-1.025752227366026e+000,
          1.955219658422625e+000},{-8.156795691276541e-001,-2.613710375287741e-002,
          -1.025974136034128e+000,1.949284456050977e+000},{-8.205859499113112e-001,
          -4.032871488155882e-002,-1.026362854927959e+000,1.943296415304725e+000},
          {-8.267080955867543e-001,-5.494775286888999e-002,-1.026933948323617e+000,
          1.937154374999355e+000},{-8.340034681281544e-001,-6.956792894448306e-002,
          -1.027675693302118e+000,1.931045251398180e+000},{-8.424606360805104e-001,
          -8.417588056073176e-002,-1.028583863802415e+000,1.924981823573036e+000},
          {-8.520744170015872e-001,-9.878905079285071e-002,-1.029655444551397e+000,
          1.918963711773316e+000},{-8.628424957952819e-001,-1.134242872327940e-001,
          -1.030887586075559e+000,1.912990539037579e+000},{-8.747657918779217e-001,
          -1.280978812135765e-001,-1.032277595480934e+000,1.907061931185783e+000},
          {-8.878479382283583e-001,-1.428256278541051e-001,-1.033822927640486e+000,
          1.901177516818667e+000},{-9.020955906247847e-001,-1.576228613739366e-001,
          -1.035521177062222e+000,1.895336927323218e+000},{-9.175179556117891e-001,
          -1.725045083448280e-001,-1.037370070125957e+000,1.889539796883510e+000},
          {-9.341272433353944e-001,-1.874851158489946e-001,-1.039367457933408e+000,
          1.883785762496073e+000},{-9.519380335091618e-001,-2.025789039960535e-001,
          -1.041511309452197e+000,1.878074463988979e+000},{-9.709677271759698e-001,
          -2.177997890193544e-001,-1.043799705248612e+000,1.872405544044008e+000},
          {-9.912364175083539e-001,-2.331614219124641e-001,-1.046230831486630e+000,
          1.866778648221036e+000},{-1.012766648729506e+000,-2.486772255078792e-001,
          -1.048802974335914e+000,1.861193424984079e+000},{-1.035583653239251e+000,
          -2.643604184910795e-001,-1.051514514791885e+000,1.855649525728494e+000},
          {-1.059715403422719e+000,-2.802240450910093e-001,-1.054363923766542e+000,
          1.850146604808510e+000},{-1.085192428404830e+000,-2.962810076523094e-001,
          -1.057349757490633e+000,1.844684319564752e+000},{-1.112047840284971e+000,
          -3.125440918568987e-001,-1.060470653253161e+000,1.839262330351305e+000},
          {-1.140317779786924e+000,-3.290259844501270e-001,-1.063725325428120e+000,
          1.833880300561731e+000},{-1.170040772767701e+000,-3.457393129150245e-001,
          -1.067112561661264e+000,1.828537896653743e+000},{-1.201258334460249e+000,
          -3.626966549827271e-001,-1.070631219467131e+000,1.823234788172321e+000},
          {-1.234015008677897e+000,-3.799105645052093e-001,-1.074280222931547e+000,
          1.817970647770632e+000},{-1.268357889035586e+000,-3.973936035490504e-001,
          -1.078058559640830e+000,1.812745151228863e+000},{-1.304337381224103e+000,
          -4.151583481991378e-001,-1.081965277933464e+000,1.807557977470460e+000},
          {-1.342006818795918e+000,-4.332174201542663e-001,-1.085999484193767e+000,
          1.802408808575871e+000},{-1.381422811192989e+000,-4.515835009140273e-001,
          -1.090160340433320e+000,1.797297329793238e+000},{-1.422645114412084e+000,
          -4.702693556220330e-001,-1.094447061989566e+000,1.792223229546457e+000},
          {-1.465736793308509e+000,-4.892878500123289e-001,-1.098858915416110e+000,
          1.787186199439965e+000},{-1.510764665910317e+000,-5.086519632583179e-001,
          -1.103395216529062e+000,1.782185934260665e+000},{-1.557798713989053e+000,
          -5.283748197187160e-001,-1.108055328517688e+000,1.777222131976678e+000},
          {-1.606913024249304e+000,-5.484696901100445e-001,-1.112838660328233e+000,
          1.772294493733011e+000},{-1.658185052376375e+000,-5.689500256907437e-001,
          -1.117744665009237e+000,1.767402723844188e+000},{-1.711696835419274e+000,
          -5.898294555775258e-001,-1.122772838338994e+000,1.762546529783867e+000},
          {-1.767533848479072e+000,-6.111218280850936e-001,-1.127922717367707e+000,
          1.757725622171410e+000},{-1.825786241452084e+000,-6.328412048781662e-001,
          -1.133193879281465e+000,1.752939714755770e+000},{-1.886548675522292e+000,
          -6.550018871713900e-001,-1.138585940177355e+000,1.748188524396311e+000},
          {-1.949919791236933e+000,-6.776184419015450e-001,-1.144098553976703e+000,
          1.743471771041181e+000},{-2.016003811123379e+000,-7.007056923572437e-001,
          -1.149731411542488e+000,1.738789177703054e+000},{-2.084909407036162e+000,
          -7.242787611639050e-001,-1.155484239633304e+000,1.734140470432365e+000},
          {-2.156750372091127e+000,-7.483530737647965e-001,-1.161356800148957e+000,
          1.729525378288342e+000},{-2.231627926685809e+000,-7.729445823064577e-001,
          -1.167348888802051e+000,1.724943633307832e+000},{-2.309782982776231e+000,
          -7.980678185970754e-001,-1.173460339702013e+000,1.720394970472067e+000},
          {-2.391033663426555e+000,-8.237439135656604e-001,-1.179691000681487e+000,
          1.715879127671712e+000},{-2.475869227142783e+000,-8.499832002901067e-001,
          -1.186040793336751e+000,1.711395845671781e+000},{-2.563702595314027e+000,
          -8.768125482108226e-001,-1.192509607048069e+000,1.706944868064386e+000},
          {-2.653854883122921e+000,-9.042518387765622e-001,-1.199097403535986e+000,
          1.702525941248357e+000},{-2.766079959594875e+000,-9.320924259943205e-001,
          -1.205804687265605e+000,1.698138814375825e+000},{-2.836837888537308e+000,
          -9.612314004857536e-001,-1.212628993373840e+000,1.693783239359507e+000},
          {-2.962833314784326e+000,-9.901728646594288e-001,-1.219575772839467e+000,
          1.689458970942077e+000},{-3.065797818595779e+000,-1.020307105997146e+000,
          -1.226639028725659e+000,1.685165765209986e+000},{-3.179146555811669e+000,
          -1.051016019187351e+000,-1.233822305642099e+000,1.680903383115731e+000},
          {-3.297284348618891e+000,-1.082440812070858e+000,-1.241124966094870e+000,
          1.676671586493826e+000},{-3.420414306708996e+000,-1.114602326672745e+000,
          -1.248547175601712e+000,1.672470140103473e+000},{-3.548747934055633e+000,
          -1.147521940179529e+000,-1.256089127934521e+000,1.668298811149195e+000},
          {-3.682505857052307e+000,-1.181221572474609e+000,-1.263751044854284e+000,
          1.664157369235286e+000},{-3.821915807343334e+000,-1.215723723768695e+000,
          -1.271533175757266e+000,1.660045586320429e+000},{-3.967214733237526e+000,
          -1.251051449579780e+000,-1.279435797479266e+000,1.655963236672333e+000},
          {-4.118645118574411e+000,-1.287228408806640e+000,-1.287459213783149e+000,
          1.651910096822906e+000},{-4.280211341706425e+000,-1.324244351504146e+000,
          -1.295603825538186e+000,1.647885945523818e+000},{-4.453514772407470e+000,
          -1.362099245447999e+000,-1.303870050532300e+000,1.643890563702867e+000},
          {-4.640395688977453e+000,-1.400781827377156e+000,-1.312258462550433e+000,
          1.639923734421353e+000},{-4.842972282220500e+000,-1.444303609727521e+000,
          -1.321571915960135e+000,1.635617913591072e+000},{-5.077818607817462e+000,
          -1.489650226742146e+000,-1.331210828298044e+000,1.631266166750613e+000},
          {-5.269519269425579e+000,-1.537901012173168e+000,-1.341188853488693e+000,
          1.626867109373032e+000},{-5.551431069675780e+000,-1.587320333609772e+000,
          -1.351529036102523e+000,1.622419288010019e+000},{-5.808923042237106e+000,
          -1.639958440934728e+000,-1.362242057327564e+000,1.617921174006821e+000},
          {-6.095719050661056e+000,-1.695055063945981e+000,-1.373352317843512e+000,
          1.613371162616998e+000},{-6.404369551367121e+000,-1.752995378033357e+000,
          -1.384879806897964e+000,1.608767561543370e+000},{-6.737074974434417e+000,
          -1.813996281601904e+000,-1.396847279282773e+000,1.604108587787460e+000},
          {-7.096314427293298e+000,-1.878296278283565e+000,-1.409279272349471e+000,
          1.599392359891712e+000},{-7.484885584665084e+000,-1.946158190784704e+000,
          -1.422202288280279e+000,1.594616890192578e+000},{-7.905955622871398e+000,
          -2.017872214308587e+000,-1.435644999776433e+000,1.589780076274508e+000},
          {-8.363119801992593e+000,-2.093759464249109e+000,-1.449638482309929e+000,
          1.584879691522251e+000},{-8.860470601969707e+000,-2.174176076790771e+000,
          -1.464216477264085e+000,1.579913374653328e+000},{-9.402681541299199e+000,
          -2.259517940676243e+000,-1.479415690927240e+000,1.574878618093620e+000},
          {-9.995105596234213e+000,-2.350226224176583e+000,-1.495276135046780e+000,
          1.569772755037022e+000},{-1.064389482985112e+001,-2.446793798326975e+000,
          -1.511841516075586e+000,1.564592945003904e+000},{-1.135614240262710e+001,
          -2.549772781901460e+000,-1.529159681274163e+000,1.559336157681449e+000},
          {-1.214005414414541e+001,-2.659783392395340e+000,-1.547283131791800e+000,
          1.553999154791512e+000},{-1.300515543255768e+001,-2.777524377540540e+000,
          -1.566269614684388e+000,1.548578469686142e+000},{-1.396253928239969e+001,
          -2.903785372223432e+000,-1.586182808281310e+000,1.543070384316234e+000},
          {-1.502516407943721e+001,-3.039461566365826e+000,-1.607093118455835e+000,
          1.537470903152320e+000},{-1.620820834955008e+001,-3.185571181481919e+000,
          -1.629078606872898e+000,1.531775723555805e+000},{-1.756861317903349e+001,
          -3.342859695130933e+000,-1.652227062158571e+000,1.525980202000237e+000},
          {-1.896992968076159e+001,-3.514753551909730e+000,-1.676629844756208e+000,
          1.520079315421806e+000},{-2.070940498674979e+001,-3.698607679814522e+000,
          -1.702409666201476e+000,1.514067616830629e+000},{-2.258006445102759e+001,
          -3.900361852777759e+000,-1.729670196587357e+000,1.507939179287543e+000},
          {-2.472640864504724e+001,-4.119997968335903e+000,-1.758560156062154e+000,
          1.501687551187454e+000},{-2.717555760930571e+001,-4.360330688942441e+000,
          -1.789232432463443e+000,1.495305668348961e+000},{-2.998453612050399e+001,
          -4.624174865325230e+000,-1.821864001930955e+000,1.488785783609070e+000},
          {-3.322400657923019e+001,-4.914848588452856e+000,-1.856657070400842e+000,
          1.482119368890723e+000},{-3.698227739969207e+001,-5.236285870597177e+000,
          -1.893843826546765e+000,1.475297002040697e+000},{-4.137073781469906e+001,
          -5.593179752915376e+000,-1.933692326201029e+000,1.468308231964111e+000},
          {-4.653129624345377e+001,-5.991165877519198e+000,-1.976513837575755e+000,
          1.461141416796625e+000},{-5.264671942271787e+001,-6.437059666295744e+000,
          -2.022672094596102e+000,1.453783528293291e+000},{-5.995516440181747e+001,
          -6.939166169402911e+000,-2.072595066915272e+000,1.446219913491736e+000},
          {-6.877091752349767e+001,-7.507688498893050e+000,-2.126790093032183e+000,
          1.438434001794347e+000},{-7.951434352644553e+001,-8.155272910741649e+000,
          -2.185863560319914e+000,1.430406941556337e+000},{-9.282260741855799e+001,
          -8.896990368881466e+000,-2.250548709297550e+000,1.422117144536678e+000},
          {-1.092705800731509e+002,-9.755978248450887e+000,-2.321727653966861e+000,
          1.413539708353296e+000},{-1.303440861742615e+002,-1.075180658002727e+001,
          -2.400520525131451e+000,1.404645675124892e+000},{-1.573817172536041e+002,
          -1.192284129304266e+001,-2.488271989475859e+000,1.395401054361456e+000},
          {-1.929469781047582e+002,-1.330915824062231e+001,-2.586733173534589e+000,
          1.385765574728271e+000},{-2.407515409275657e+002,-1.496747918474029e+001,
          -2.698134813608466e+000,1.375690927154873e+000},{-3.067296511299643e+002,
          -1.697224306116501e+001,-2.825409191622562e+000,1.365118418615304e+000},
          {-4.007152627101729e+002,-1.942210540851691e+001,-2.972493248817588e+000,
          1.353975640846269e+000},{-5.399185840310040e+002,-2.244503642183699e+001,
          -3.144822779164391e+000,1.342171664024869e+000},{-7.560716744000814e+002,
          -2.620100919290446e+001,-3.350155100053136e+000,1.329589871746869e+000},
          {-1.113449606842879e+003,-3.084021110135518e+001,-3.600109952519693e+000,
          1.316076873033058e+000},{-1.690504862425243e+003,-3.710261655467448e+001,
          -3.911155756406296e+000,1.301424533021810e+000},{-2.670061268217115e+003,
          -4.640046513281821e+001,-4.309071967361942e+000,1.285339230723633e+000},
          {-4.481748438342077e+003,-6.187707883736660e+001,-4.834386672670042e+000,
          1.267385221467624e+000},{-8.164522417664276e+003,-6.838329256029518e+001,
          -5.390905548063032e+000,1.252292339125201e+000},{-1.652878983123607e+004,
          -6.410911523659486e+001,-6.181751840615706e+000,1.235307228164419e+000},
          {-3.589814816980765e+004,-5.850303396906464e+001,-7.379682885213981e+000,
          1.214800598771303e+000},{-8.037263246538142e+004,-1.135710262603827e+002,
          -9.097826769016773e+000,1.191007390096093e+000},{-1.821922090737477e+005,
          -2.354776316590442e+002,-1.127469694751144e+001,1.168783843757871e+000},
          {-4.484262360427870e+005,-1.929406030066214e+002,-1.390923719646678e+001,
          1.150438269719548e+000},{-1.121046496283366e+006,2.244014433727998e+002,
          -1.739509749280907e+001,1.133590960463892e+000},{-2.637332052450561e+006,
          2.537931543190984e+002,-2.209765636576909e+001,1.115407413029603e+000},
          {-5.907648512403362e+006,-4.012624018357776e+003,-2.901240599782692e+001,
          1.093221801784601e+000},{-1.195665812647725e+007,-7.565697091202631e+003,
          -3.507390000142389e+001,1.081141798451352e+000},{-2.784190228559279e+007,
          -2.474660221277177e+003,-3.985563387169906e+001,1.075521362860637e+000},
          {-8.260002532389586e+007,1.207599307914400e+004,-5.010461096457156e+001,
          1.065839017041407e+000},{-2.783054150157432e+008,6.191392637195736e+004,
          -6.812180721814856e+001,1.055309382343470e+000},{-8.984303648430897e+008,
          4.972036367617193e+004,-8.797612069577760e+001,1.041458768913245e+000},
          {-1.938721107426129e+009,-9.947883920780817e+004,-1.102739497257638e+002,
          1.031926967645291e+000},{-1.596711708673011e+013,7.576033677883548e+008,
          -8.980126598064539e+003,1.025706312840203e+000}};
      constant Real[Ninterval, 4] dvcoef={{4.918869918230695e+005,-1.567555888877598e+002,
          5.437208630256651e-001,5.503960828374048e-005},{4.550378123449924e+005,
          -1.523735197978206e+002,5.428795951631563e-001,5.651517998086538e-005},
          {4.154435854155241e+005,-1.485249049854512e+002,5.421736401433307e-001,
          5.778081864475579e-005},{3.741482472743288e+005,-1.409517385019123e+002,
          5.405774106280010e-001,6.075322570198208e-005},{3.367178855870678e+005,
          -1.337561394903371e+002,5.389802274088923e-001,6.387796804156671e-005},
          {3.032331897449884e+005,-1.269325231900327e+002,5.373822526407004e-001,
          6.716271877677984e-005},{2.729783236073526e+005,-1.204513648774790e+002,
          5.357833746302725e-001,7.061574208320135e-005},{2.457737771951380e+005,
          -1.143004549600878e+002,5.341836871213043e-001,7.424557939372635e-005},
          {2.212418903451594e+005,-1.084606313277702e+002,5.325831835730194e-001,
          7.806127539077440e-005},{1.991932319373264e+005,-1.029188757389579e+002,
          5.309819330350911e-001,8.207225038864295e-005},{1.793568834640014e+005,
          -9.765862295132199e+001,5.293799351427024e-001,8.628847726670124e-005},
          {1.614383537622045e+005,-9.266330277412550e+001,5.277772334623126e-001,
          9.072034242183298e-005},{1.453621714686960e+005,-8.792412794039890e+001,
          5.261738672668539e-001,9.537893269130447e-005},{1.308585174350236e+005,
          -8.342408029607272e+001,5.245698186895845e-001,1.002758063548368e-004},
          {1.178099872852326e+005,-7.915315147317665e+001,5.229651805648193e-001,
          1.054230003569786e-004},{1.060542653282609e+005,-7.509881556093026e+001,
          5.213599463406871e-001,1.108333568850558e-004},{9.549308124088842e+004,
          -7.125147962403636e+001,5.197541987519517e-001,1.165201514339942e-004},
          {8.600354913972432e+004,-6.759972330879310e+001,5.181479357221414e-001,
          1.224975427286338e-004},{7.761649543341427e+004,-6.414066678887514e+001,
          5.165412858073596e-001,1.287802891593490e-004},{7.020537948517055e+004,
          -6.086565981704204e+001,5.149343233861899e-001,1.353838849828343e-004},
          {6.362526510536840e+004,-5.781701794798269e+001,5.133590847200070e-001,
          1.421827481986982e-004},{5.777602598727927e+004,-5.506082706782908e+001,
          5.118681842941606e-001,1.489285080947021e-004},{5.249423222977891e+004,
          -5.245136198830269e+001,5.103869134700294e-001,1.559450852216556e-004},
          {4.772771403525848e+004,-4.998041590145706e+001,5.089152331130584e-001,
          1.632411903229066e-004},{4.341758916708818e+004,-4.763947665576765e+001,
          5.074530908455733e-001,1.708257343021365e-004},{3.952482258441854e+004,
          -4.542149360328381e+001,5.060004500938848e-001,1.787078304444174e-004},
          {3.599853857184100e+004,-4.331871999300164e+001,5.045572556408491e-001,
          1.868967966091156e-004},{3.281073717790914e+004,-4.132521822148750e+001,
          5.031234772300364e-001,1.954021573940050e-004},{2.991928864379426e+004,
          -3.943405746218934e+001,5.016990585808311e-001,2.042336462698480e-004},
          {2.730136743929938e+004,-3.764000095251405e+001,5.002839707362081e-001,
          2.134012076848843e-004},{2.492659063635537e+004,-3.593720253748594e+001,
          4.988781632750814e-001,2.229149991386049e-004},{2.276955125736159e+004,
          -3.432046079500933e+001,4.974815975109458e-001,2.327853932242566e-004},
          {2.081432755389784e+004,-3.278542777406340e+001,4.960942426492074e-001,
          2.430229796396210e-004},{1.903499917129547e+004,-3.132692253363413e+001,
          4.947160448050079e-001,2.536385671655345e-004},{1.741916761544805e+004,
          -2.994121669633407e+001,4.933469804327021e-001,2.646431856117704e-004},
          {1.594856799673893e+004,-2.862400374594620e+001,4.919870030103821e-001,
          2.760480877298892e-004},{1.461071366209510e+004,-2.737169558264001e+001,
          4.906360810069271e-001,2.878647510927006e-004},{1.339168327690314e+004,
          -2.618061339571608e+001,4.892941746173027e-001,3.001048799400484e-004},
          {1.228253049325166e+004,-2.504768084200302e+001,4.879612544780885e-001,
          3.127804069906575e-004},{1.126892157829276e+004,-2.396930264453291e+001,
          4.866372742930647e-001,3.259034952198203e-004},{1.034662065878251e+004,
          -2.294316241182801e+001,4.853222187890683e-001,3.394865396027453e-004},
          {9.503700936201338e+003,-2.196597276324068e+001,4.840160361000067e-001,
          3.535421688234263e-004},{8.734018189448401e+003,-2.103534947204093e+001,
          4.827187038678896e-001,3.680832469489622e-004},{8.031366011875803e+003,
          -2.014888458104759e+001,4.814301896622395e-001,3.831228750692300e-004},
          {7.388578355618841e+003,-1.930410181604127e+001,4.801504565658148e-001,
          3.986743929019504e-004},{6.800574870580942e+003,-1.849890723067505e+001,
          4.788794784376936e-001,4.147513803631108e-004},{6.262968091501257e+003,
          -1.773131649952538e+001,4.776172260185485e-001,4.313676591028885e-004},
          {5.770389109765950e+003,-1.699924277022264e+001,4.763636637585473e-001,
          4.485372940071114e-004},{5.319190052222050e+003,-1.630094266002941e+001,
          4.751187671980786e-001,4.662745946644320e-004},{4.905748845902255e+003,
          -1.563469347603085e+001,4.738825069166632e-001,4.845941167994040e-004},
          {4.526685334231427e+003,-1.499884943133974e+001,4.726548535498104e-001,
          5.035106636716925e-004},{4.178772802276819e+003,-1.439183882285007e+001,
          4.714357786189442e-001,5.230392874416343e-004},{3.859530682062243e+003,
          -1.381226047506382e+001,4.702252575271995e-001,5.431952905025171e-004},
          {3.566271424600439e+003,-1.325870013942056e+001,4.690232613675992e-001,
          5.639942267798111e-004},{3.296870650297050e+003,-1.272989003696022e+001,
          4.678297654512661e-001,5.854519029978606e-004},{3.049276098691007e+003,
          -1.222459719155169e+001,4.666447430986029e-001,6.075843799142949e-004},
          {2.821484408536768e+003,-1.174163338947488e+001,4.654681678733132e-001,
          6.304079735227145e-004},{2.611896527283416e+003,-1.127992855916830e+001,
          4.643000166997424e-001,6.539392562240592e-004},{2.419079453141731e+003,
          -1.083846133076433e+001,4.631402651077743e-001,6.781950579671866e-004},
          {2.241307272262556e+003,-1.041617660727023e+001,4.619888855086836e-001,
          7.031924673592141e-004},{2.077658736699405e+003,-1.001223689974768e+001,
          4.608458599404298e-001,7.289488327461664e-004},{1.926777017074004e+003,
          -9.625702150971902e+000,4.597111603812837e-001,7.554817632645456e-004},
          {1.787519449312663e+003,-9.255727615109393e+000,4.585847646064639e-001,
          7.828091298644552e-004},{1.659179395402279e+003,-8.901591924409631e+000,
          4.574666539228491e-001,8.109490663049823e-004},{1.540633616703145e+003,
          -8.562472211245941e+000,4.563568005087656e-001,8.399199701224020e-004},
          {1.431161858142325e+003,-8.237690859137757e+000,4.552551859319501e-001,
          8.697405035720722e-004},{1.330023377555299e+003,-7.926573334195409e+000,
          4.541617883382710e-001,9.004295945446778e-004},{1.236573482343776e+003,
          -7.628487285308340e+000,4.530765866476337e-001,9.320064374575882e-004},
          {1.150117985277077e+003,-7.342803184259996e+000,4.519995585201517e-001,
          9.644904941221798e-004},{1.070158684587523e+003,-7.068970548333955e+000,
          4.509306856964692e-001,9.979014945878772e-004},{9.961748371914198e+002,
          -6.806438520833332e+000,4.498699469983624e-001,1.032259437963822e-003},
          {9.276477356080152e+002,-6.554674171966223e+000,4.488173216777321e-001,
          1.067584593218963e-003},{8.641833883415839e+002,-6.313201947850644e+000,
          4.477727918978972e-001,1.103897499961509e-003},{8.053877216782303e+002,
          -6.081553232617854e+000,4.467363378201690e-001,1.141218969198647e-003},
          {7.508679837063625e+002,-5.859273363957273e+000,4.457079396593727e-001,
          1.179570084077442e-003},{7.003121955106866e+002,-5.645950416545300e+000,
          4.446875799042271e-001,1.218972200607816e-003},{6.534229224786275e+002,
          -5.441184593317924e+000,4.436752399301383e-001,1.259446948368720e-003},
          {6.098701132482534e+002,-5.244576566367364e+000,4.426709003094503e-001,
          1.301016231198290e-003},{5.694693580848956e+002,-5.055795182260655e+000,
          4.416745463024567e-001,1.343702227869144e-003},{5.319187630216652e+002,
          -4.874464882088055e+000,4.406861567650555e-001,1.387527392749791e-003},
          {4.970284952496925e+002,-4.700273550639881e+000,4.397057168100576e-001,
          1.432514456453111e-003},{4.646073398256017e+002,-4.532911236187518e+000,
          4.387332091303748e-001,1.478686426473104e-003},{4.344436320778534e+002,
          -4.372067882144371e+000,4.377686155875123e-001,1.526066587810795e-003},
          {4.063942942181745e+002,-4.217474280320218e+000,4.368119214276980e-001,
          1.574678503590567e-003},{3.802841770186233e+002,-4.068850532622352e+000,
          4.358631089330863e-001,1.624546015667824e-003},{3.559769108797973e+002,
          -3.925944939917800e+000,4.349221629490394e-001,1.675693245229227e-003},
          {3.333402909463835e+002,-3.788512906615899e+000,4.339890675369079e-001,
          1.728144593386517e-003},{3.122536180170024e+002,-3.656321586479176e+000,
          4.330638070558099e-001,1.781924741765163e-003},{2.925902763184365e+002,
          -3.529142319538135e+000,4.321463655932412e-001,1.837058653088838e-003},
          {2.742740781970119e+002,-3.406778654781579e+000,4.312367299211879e-001,
          1.893571571760979e-003},{2.571759037143193e+002,-3.289008496189263e+000,
          4.303348822713388e-001,1.951489024444565e-003},{2.412316234199518e+002,
          -3.175655844670625e+000,4.294408108599679e-001,2.010836820641156e-003},
          {2.263479765419118e+002,-3.066528653226592e+000,4.285544996055142e-001,
          2.071641053270657e-003},{2.124540881441975e+002,-2.961454863028191e+000,
          4.276759349468488e-001,2.133928099252665e-003},{1.994738967239204e+002,
          -2.860263446005821e+000,4.268051024338398e-001,2.197724620090749e-003},
          {1.873507685079785e+002,-2.762800207342723e+000,4.259419892085835e-001,
          2.263057562460898e-003},{1.760176881347635e+002,-2.668907362024899e+000,
          4.250865807774918e-001,2.329954158805295e-003},{1.654238211245136e+002,
          -2.578442894138812e+000,4.242388645871290e-001,2.398441927932571e-003},
          {1.555155973132484e+002,-2.491265813149157e+000,4.233988271501935e-001,
          2.468548675625884e-003},{1.462467369395943e+002,-2.407244188793173e+000,
          4.225664558320871e-001,2.540302495259932e-003},{1.375706942965182e+002,
          -2.326249402371831e+000,4.217417377784478e-001,2.613731768428245e-003},
          {1.294517522416703e+002,-2.248163891647594e+000,4.209246611933187e-001,
          2.688865165581934e-003},{1.218462678465571e+002,-2.172866771201884e+000,
          4.201152129124728e-001,2.765731646681044e-003},{1.147234040530867e+002,
          -2.100250995085103e+000,4.193133818831384e-001,2.844360461860063e-003},
          {1.080479787286075e+002,-2.030208123787794e+000,4.185191557975788e-001,
          2.924781152108462e-003},{1.017920655477493e+002,-1.962638710731280e+000,
          4.177325235641014e-001,3.007023549967833e-003},{9.592579946784062e+001,
          -1.897443919649623e+000,4.169534734756494e-001,3.091117780246804e-003},
          {9.042335241081501e+001,-1.834531404942512e+000,4.161819947150213e-001,
          3.177094260754840e-003},{8.526160053959171e+001,-1.773813276822706e+000,
          4.154180766062474e-001,3.264983703056518e-003},{8.041750410261692e+001,
          -1.715203736662323e+000,4.146617082903334e-001,3.354817113247324e-003},
          {7.586988596025167e+001,-1.658621120070368e+000,4.139128794048740e-001,
          3.446625792752341e-003},{7.159914621790271e+001,-1.603987470082015e+000,
          4.131715799027952e-001,3.540441339149129e-003},{6.758805543380534e+001,
          -1.551228969555801e+000,4.124378000649125e-001,3.636295647016206e-003},
          {6.381901401260075e+001,-1.500273202161896e+000,4.117115299747857e-001,
          3.734220908808124e-003},{6.027654566266498e+001,-1.451051972887889e+000,
          4.109927603593492e-001,3.834249615758861e-003},{5.694686162949886e+001,
          -1.403500300021269e+000,4.102814821535462e-001,3.936414558814610e-003},
          {5.381464616126993e+001,-1.357553381609505e+000,4.095776860201926e-001,
          4.040748829597288e-003},{5.086862121268142e+001,-1.313152746254192e+000,
          4.088813639116348e-001,4.147285821400251e-003},{4.809696746170313e+001,
          -1.270240281248384e+000,4.081925071806428e-001,4.256059230217466e-003},
          {4.548795219446311e+001,-1.228759645993116e+000,4.075111074687371e-001,
          4.367103055807410e-003},{4.303153877084944e+001,-1.188658139770851e+000,
          4.068371571482173e-001,4.480451602793230e-003},{4.071884002550738e+001,
          -1.149885475769847e+000,4.061706487359031e-001,4.596139481800510e-003},
          {3.853982359631466e+001,-1.112391283466330e+000,4.055115744704507e-001,
          4.714201610633783e-003},{3.648706442220689e+001,-1.076129903100120e+000,
          4.048599277728404e-001,4.834673215493562e-003},{3.455203104072965e+001,
          -1.041055261831986e+000,4.042157015223190e-001,4.957589832234991e-003},
          {3.272824992696282e+001,-1.007125200219632e+000,4.035788895850664e-001,
          5.082987307669529e-003},{3.100819917421405e+001,-9.742971021566538e-001,
          4.029494853695961e-001,5.210901800911449e-003},{2.938585708234636e+001,
          -9.425316926626286e-001,4.023274832668355e-001,5.341369784769924e-003},
          {2.785532702736859e+001,-9.117906925683219e-001,4.017128776362615e-001,
          5.474428047188925e-003},{2.641089462970517e+001,-8.820370796524276e-001,
          4.011056631033509e-001,5.610113692735653e-003},{2.504744509854464e+001,
          -8.532356843531500e-001,4.005058347752553e-001,5.748464144139499e-003},
          {2.376012690680433e+001,-8.253525682988094e-001,3.999133879843608e-001,
          5.889517143882834e-003},{2.254436515950055e+001,-7.983550679575092e-001,
          3.993283183805698e-001,6.033310755844880e-003},{2.139577493846826e+001,
          -7.722116978256376e-001,3.987506219417533e-001,6.179883367000695e-003},
          {2.031075898178054e+001,-7.468929148919709e-001,3.981802951854477e-001,
          6.329273689176286e-003},{1.928498435038579e+001,-7.223687585378505e-001,
          3.976173344075094e-001,6.481520760861736e-003},{1.831546512863807e+001,
          -6.986123544713665e-001,3.970617370876304e-001,6.636663949083660e-003},
          {1.739874302112455e+001,-6.755964878582553e-001,3.965135003282964e-001,
          6.794742951338802e-003},{1.653149368600032e+001,-6.532950634486524e-001,
          3.959726218194969e-001,6.955797797590126e-003},{1.571136413855040e+001,
          -6.316842473860278e-001,3.954391000465521e-001,7.119868852327289e-003},
          {1.493511547753208e+001,-6.107391370754174e-001,3.949129329852181e-001,
          7.286996816692762e-003},{1.420039845144105e+001,-5.904373123215700e-001,
          3.943941198649326e-001,7.457222730675804e-003},{1.350506994592831e+001,
          -5.707570615830940e-001,3.938826600000119e-001,7.630587975375203e-003},
          {1.284647108422737e+001,-5.516762826357500e-001,3.933785526503101e-001,
          7.807134275333396e-003},{1.222277796478104e+001,-5.331751751866478e-001,
          3.928817982791715e-001,7.986903700942806e-003},{1.163191695951530e+001,
          -5.152338073353088e-001,3.923923971864010e-001,8.169938670926894e-003},
          {1.107213284474227e+001,-4.978333946436397e-001,3.919103503368385e-001,
          8.356281954897082e-003},{1.054149664309521e+001,-4.809552921213819e-001,
          3.914356588874424e-001,8.545976675988149e-003},{1.003852662470317e+001,
          -4.645822992591858e-001,3.909683248378932e-001,8.739066313572592e-003},
          {9.561664872804187e+000,-4.486973760480717e-001,3.905083502824061e-001,
          8.935594706057733e-003},{9.109335246091527e+000,-4.332839483801887e-001,
          3.900557377878584e-001,9.135606053765538e-003},{8.680382947929710e+000,
          -4.183267593479249e-001,3.896104907230568e-001,9.339144921898225e-003},
          {8.273324247996497e+000,-4.038101468153956e-001,3.891726123742362e-001,
          9.546256243591643e-003},{7.887079182136844e+000,-3.897198414232183e-001,
          3.887421070574992e-001,9.756985323057689e-003},{7.520443323253075e+000,
          -3.760415771209294e-001,3.883189792052398e-001,9.971377838818433e-003},
          {7.172391400254022e+000,-3.627618922961474e-001,3.879032339530123e-001,
          1.018947984703397e-002},{6.841893907962348e+000,-3.498676232857845e-001,
          3.874948768109323e-001,1.041133778492567e-002},{6.527997017874895e+000,
          -3.373461375524688e-001,3.870939138736296e-001,1.063699847429761e-002},
          {6.229808364298923e+000,-3.251852702502093e-001,3.867003517682037e-001,
          1.086650912515772e-002},{5.946507856507541e+000,-3.133733224079474e-001,
          3.863141976591653e-001,1.109991733944163e-002},{5.677262450077949e+000,
          -3.018988533524630e-001,3.859354591756860e-001,1.133727111484078e-002},
          {5.421352794634765e+000,-2.907510173390247e-001,3.855641446431972e-001,
          1.157861884873768e-002},{5.178044952198035e+000,-2.799191865535771e-001,
          3.852002628309458e-001,1.182400934225040e-002},{4.946713848640733e+000,
          -2.693932865271758e-001,3.848438232049179e-001,1.207349180438865e-002},
          {4.726667248951112e+000,-2.591633075488187e-001,3.844948356365955e-001,
          1.232711585632465e-002},{4.517394406394665e+000,-2.492199984536905e-001,
          3.841533108804939e-001,1.258493153578013e-002},{4.318248173877903e+000,
          -2.395539223666578e-001,3.838192599352582e-001,1.284698930153326e-002},
          {4.128755543462441e+000,-2.301564276641476e-001,3.834926948075274e-001,
          1.311334003804745e-002},{3.948400040450002e+000,-2.210188987207532e-001,
          3.831736278767949e-001,1.338403506022480e-002},{3.776706557031288e+000,
          -2.121330737099716e-001,3.828620722535667e-001,1.365912611828752e-002},
          {3.613235615589715e+000,-2.034909988612184e-001,3.825580417231296e-001,
          1.393866540278966e-002},{3.457552934484986e+000,-1.950849326143231e-001,
          3.822615507012779e-001,1.422270554976199e-002},{3.309289747397522e+000,
          -1.869075184953642e-001,3.819726143711710e-001,1.451129964599359e-002},
          {3.168027635565692e+000,-1.789514180717389e-001,3.816912484468373e-001,
          1.480450123445292e-002},{3.033432541611965e+000,-1.712097771328688e-001,
          3.814174695766434e-001,1.510236431985102e-002},{2.905177939665958e+000,
          -1.636758970404103e-001,3.811512950075380e-001,1.540494337435146e-002},
          {2.782931144489786e+000,-1.563432183214555e-001,3.808927426753809e-001,
          1.571229334342843e-002},{2.666380912718784e+000,-1.492054387832750e-001,
          3.806418313441766e-001,1.602446965187827e-002},{2.555276695079573e+000,
          -1.422566004739850e-001,3.803985806210800e-001,1.634152820998644e-002},
          {2.449295076606051e+000,-1.354906337033831e-001,3.801630106447514e-001,
          1.666352541985449e-002},{2.348233464609053e+000,-1.289020699204486e-001,
          3.799351427205061e-001,1.699051818189040e-002},{2.251825859416809e+000,
          -1.224852907459614e-001,3.797149986002554e-001,1.732256390146563e-002},
          {2.159830546635063e+000,-1.162349453169496e-001,3.795026010329486e-001,
          1.765972049574360e-002},{2.072058189589333e+000,-1.101459982440797e-001,
          3.792979737057716e-001,1.800204640068242e-002},{1.988279437621665e+000,
          -1.042133641825461e-001,3.791011409474683e-001,1.834960057821797e-002},
          {1.908304088873131e+000,-9.843225925896297e-002,3.789121281419708e-001,
          1.870244252362887e-002},{1.831966481347027e+000,-9.279808329654883e-002,
          3.787309615388108e-001,1.906063227308990e-002},{1.759063885369890e+000,
          -8.730619512825491e-002,3.785576681372098e-001,1.942423041141704e-002},
          {1.689442954866666e+000,-8.195229176988321e-002,3.783922761004630e-001,
          1.979329808000917e-002},{1.622952654628118e+000,-7.673215449994221e-002,
          3.782348144266670e-001,2.016789698499184e-002},{1.559425467803564e+000,
          -7.164160304756834e-002,3.780853130129168e-001,2.054808940556589e-002},
          {1.498739703281514e+000,-6.667675646191087e-002,3.779438029211383e-001,
          2.093393820256837e-002},{1.440744669602029e+000,-6.183368436111730e-002,
          3.778103160133016e-001,2.132550682724936e-002},{1.385323321761285e+000,
          -5.710870924118614e-002,3.776848853473129e-001,2.172285933027002e-002},
          {1.332347619367673e+000,-5.249817996692605e-002,3.775675449108211e-001,
          2.212606037092868e-002},{1.281706587252000e+000,-4.799861330288496e-002,
          3.774583298354774e-001,2.253517522661828e-002},{1.233286775513597e+000,
          -4.360659269821209e-002,3.773572762902370e-001,2.295026980252321e-002},
          {1.186989610982328e+000,-3.931885012278981e-002,3.772644216056396e-001,
          2.337141064156014e-002},{1.142709310723802e+000,-3.513215772395206e-002,
          3.771798041763876e-001,2.379866493456963e-002},{1.100364054184835e+000,
          -3.104347409546139e-002,3.771034636540305e-001,2.423210053076392e-002},
          {1.059849057888973e+000,-2.704971323541650e-002,3.770354407144567e-001,
          2.467178594843880e-002},{1.021092249072365e+000,-2.314803353433318e-002,
          3.769757774433468e-001,2.511779038595530e-002},{9.840075377705944e-001,
          -1.933557117879185e-002,3.769245169864941e-001,2.557018373299856e-002},
          {9.485193352610145e-001,-1.560958934131050e-002,3.768817038258078e-001,
          2.602903658212011e-002},{9.145571430630910e-001,-1.196743397082525e-002,
          3.768473837166201e-001,2.649442024057316e-002},{8.820469590864203e-001,
          -8.406493879188376e-003,3.768216036884748e-001,2.696640674244555e-002},
          {8.509285119314395e-001,-4.924290603556751e-003,3.768044121832929e-001,
          2.744506886110065e-002},{8.211340609415847e-001,-1.518356287428216e-003,
          3.767958589199679e-001,2.793048012193355e-002},{7.926086375394551e-001,
          1.813649114228547e-003,3.767959950973827e-001,2.842271481544971e-002},{
          7.652929944655803e-001,5.074044032923294e-003,3.768048732667741e-001,
          2.892184801067763e-002},{7.391329197825297e-001,8.265062590104030e-003,
          3.768225474785089e-001,2.942795556892074e-002},{7.140800335116605e-001,
          1.138886128687014e-002,3.768490732805331e-001,2.994111415786120e-002},{
          6.900802188495476e-001,1.444758203811515e-002,3.768845076851303e-001,
          3.046140126602262e-002},{6.670923614724178e-001,1.744324178592566e-002,
          3.769289093561197e-001,3.098889521760341e-002},{6.450691071878270e-001,
          2.037785914287436e-002,3.769823384460632e-001,3.152367518768998e-002},{
          6.239696575093529e-001,2.325336642648719e-002,3.770448567964210e-001,
          3.206582121785987e-002},{6.037510611099373e-001,2.607166756790367e-002,
          3.771165278758674e-001,3.261541423218719e-002},{5.843794053727025e-001,
          2.883457191774331e-002,3.771974169112035e-001,3.317253605366046e-002},{
          5.658147755261427e-001,3.154389410629092e-002,3.772875907776753e-001,
          3.373726942102517e-002},{5.480231161544660e-001,3.420136776566449e-002,
          3.773871182015341e-001,3.430969800606262e-002},{5.309724570385872e-001,
          3.680868184153350e-002,3.774960697125371e-001,3.488990643131756e-002},{
          5.146295233740406e-001,3.936750010466255e-002,3.776145176754647e-001,
          3.547798028828863e-002},{4.989652245345753e-001,4.187942343633730e-002,
          3.777425363985507e-001,3.607400615609310e-002},{4.839508951570389e-001,
          4.434602120425499e-002,3.778802021164517e-001,3.667807162062187e-002},{
          4.695586251393293e-001,4.676882656463798e-002,3.780275930601468e-001,
          3.729026529419736e-002},{4.557625505429792e-001,4.914932842369436e-002,
          3.781847895177411e-001,3.791067683575024e-002},{4.425376937773825e-001,
          5.148898190841291e-002,3.783518738637359e-001,3.853939697152988e-002},{
          4.298602277084476e-001,5.378920663485787e-002,3.785289306177614e-001,
          3.917651751636464e-002},{4.177069453640965e-001,5.605139045206042e-002,
          3.787160464931026e-001,3.982213139548867e-002},{4.060584771999545e-001,
          5.827687113517555e-002,3.789133104735820e-001,4.047633266695239e-002},{
          3.948906268608474e-001,6.046699738585702e-002,3.791208137811170e-001,
          4.113921654463403e-002},{3.841870232133331e-001,6.262303268347103e-002,
          3.793386501060483e-001,4.181087942187154e-002},{3.739265762012089e-001,
          6.474625902500740e-002,3.795669154584302e-001,4.249141889573269e-002},{
          3.640921561536769e-001,6.683790154597202e-002,3.798057084001543e-001,
          4.318093379194452e-002},{3.546670821834087e-001,6.889916478367825e-002,
          3.800551300119356e-001,4.387952419050235e-002},{3.456348352625734e-001,
          7.093123341959720e-002,3.803152839747856e-001,4.458729145197930e-002},{
          3.369785561122604e-001,7.293527279624670e-002,3.805862766488284e-001,
          4.530433824455851e-002},{3.286851767658728e-001,7.491239979095070e-002,
          3.808682171819050e-001,4.603076857181217e-002},{3.207394347235971e-001,
          7.686373551656341e-002,3.811612174764944e-001,4.676668780125029e-002},{
          3.131280975545644e-001,7.879036541765304e-002,3.814653923662434e-001,
          4.751220269366369e-002},{3.058374247107702e-001,8.069336289010372e-002,
          3.817808596349681e-001,4.826742143328867e-002},{2.988566601058779e-001,
          8.257376243678892e-002,3.821077401446526e-001,4.903245365881852e-002},{
          2.921719464565475e-001,8.443261163535294e-002,3.824461578200114e-001,
          4.980741049529087e-002},{2.857739928784489e-001,8.627090300499446e-002,
          3.827962398805592e-001,5.059240458687936e-002},{2.796503942775182e-001,
          8.808964658709946e-002,3.831581167626421e-001,5.138755013061990e-002},{
          2.737916253179937e-001,8.988981115731574e-002,3.835319223574790e-001,
          5.219296291110304e-002},{2.681881525413893e-001,9.167235767109909e-002,
          3.839177940069860e-001,5.300876033616471e-002},{2.628297823694911e-001,
          9.343824154080706e-002,3.843158726191478e-001,5.383506147361034e-002},{
          2.577083882939691e-001,9.518838846980050e-002,3.847263028172936e-001,
          5.467198708900604e-002},{2.528146968098489e-001,9.692372676861677e-002,
          3.851492329671904e-001,5.551965968457499e-002},{2.481407625412646e-001,
          9.864516159899474e-002,3.855848153536583e-001,5.637820353923723e-002},{
          2.436792821405074e-001,1.003535861532541e-001,3.860332062506214e-001,
          5.724774474983266e-002},{2.394228253416791e-001,1.020498895213405e-001,
          3.864945660289071e-001,5.812841127356713e-002},{2.353627081090076e-001,
          1.037349621793819e-001,3.869690592847504e-001,5.902033297172822e-002},{
          2.314947402031453e-001,1.054096452054131e-001,3.874568550524591e-001,
          5.992364165471450e-002},{2.278102791323715e-001,1.070748228351733e-001,
          3.879581267137887e-001,6.083847112842353e-002},{2.243046124050026e-001,
          1.087313304366365e-001,3.884730523862753e-001,6.176495724204952e-002},{
          2.209710682148270e-001,1.103800228757795e-001,3.890018148594768e-001,
          6.270323793734339e-002},{2.178041486530274e-001,1.120217365977945e-001,
          3.895446018605192e-001,6.365345329938535e-002},{2.147992288835744e-001,
          1.136572986272354e-001,3.901016061552393e-001,6.461574560892683e-002},{
          2.119504441278575e-001,1.152875476716101e-001,3.906730256654490e-001,
          6.559025939636390e-002},{2.092533159443932e-001,1.169133040170711e-001,
          3.912590637138232e-001,6.657714149739562e-002},{2.067032739670428e-001,
          1.185353897562482e-001,3.918599291191595e-001,6.757654111043797e-002},{
          2.042961465696757e-001,1.201546233006569e-001,3.924758363922071e-001,
          6.858860985585547e-002},{2.020274264697294e-001,1.217718271650500e-001,
          3.931070059001712e-001,6.961350183708251e-002},{1.998934200278083e-001,
          1.233878153258157e-001,3.937536640855738e-001,7.065137370370449e-002},{
          1.978906676118772e-001,1.250034030877950e-001,3.944160436227127e-001,
          7.170238471657542e-002},{1.960149967375316e-001,1.266194158856914e-001,
          3.950943836109010e-001,7.276669681505510e-002},{1.942639589257347e-001,
          1.282366627914691e-001,3.957889298488906e-001,7.384447468644079e-002},{
          1.926334395158679e-001,1.298559775451477e-001,3.964999349368981e-001,
          7.493588583769048e-002},{1.911216527090522e-001,1.314781710093624e-001,
          3.972276586428074e-001,7.604110066951825e-002},{1.897244443573727e-001,
          1.331040891931062e-001,3.979723679677965e-001,7.716029255296758e-002},{
          1.884406453288555e-001,1.347345473673733e-001,3.987343375897471e-001,
          7.829363790855320e-002},{1.872665265601232e-001,1.363704021692120e-001,
          3.995138498928030e-001,7.944131628808254e-002},{1.862007615810149e-001,
          1.380124863528179e-001,4.003111954501998e-001,8.060351045926381e-002},{
          1.852405381185921e-001,1.396616628531729e-001,4.011266731139843e-001,
          8.178040649321632e-002},{1.843843241480039e-001,1.413187870896886e-001,
          4.019605904389793e-001,8.297219385500310e-002},{1.836301668974131e-001,
          1.429847328561038e-001,4.028132638873196e-001,8.417906549731445e-002},{
          1.829760794685091e-001,1.446603849414294e-001,4.036850191842593e-001,
          8.540121795743359e-002},{1.824211264871903e-001,1.463466283642914e-001,
          4.045761916625467e-001,8.663885145762512e-002},{1.819631618475816e-001,
          1.480443786791565e-001,4.054871265152293e-001,8.789217000909319e-002},{
          1.816016538481242e-001,1.497545442283934e-001,4.064181792768163e-001,
          8.916138151966188e-002},{1.813349324261531e-001,1.514780668535952e-001,
          4.073697160521965e-001,9.044669790534266e-002},{1.811620760240895e-001,
          1.532158932804673e-001,4.083421140201370e-001,9.174833520595821e-002},{
          1.810826213005452e-001,1.549689846495924e-001,4.093357617802799e-001,
          9.306651370500112e-002},{1.810952242372437e-001,1.567383340769575e-001,
          4.103510597385373e-001,9.440145805391896e-002},{1.811998433905139e-001,
          1.585249366978412e-001,4.113884206505568e-001,9.575339740102104e-002},{
          1.813956689375554e-001,1.603298228620418e-001,4.124482699601924e-001,
          9.712256552522057e-002},{1.816823933789322e-001,1.621540381227494e-001,
          4.135310463731760e-001,9.850920097482685e-002},{1.820599684503609e-001,
          1.639986506841799e-001,4.146372023209510e-001,9.991354721162989e-002},{
          1.825281279631850e-001,1.658647591954069e-001,4.157672044730891e-001,
          1.013358527605122e-001},{1.830871732976372e-001,1.677534826607340e-001,
          4.169215343307577e-001,1.027763713648546e-001},{1.837369499625757e-001,
          1.696659773067486e-001,4.181006887506906e-001,1.042353621480049e-001},{
          1.844781042590138e-001,1.716034189674459e-001,4.193051806207994e-001,
          1.057130897811016e-001},{1.853108783667900e-001,1.735670247032512e-001,
          4.205355394147057e-001,1.072098246575544e-001},{1.862361146072027e-001,
          1.755580382624963e-001,4.217923119273905e-001,1.087258430745072e-001},{
          1.872542658540640e-001,1.775777478187758e-001,4.230760629130649e-001,
          1.102614274216203e-001},{1.883664161066458e-001,1.796274712137456e-001,
          4.243873758852488e-001,1.118168663775390e-001},{1.895736042833884e-001,
          1.817085709127874e-001,4.257268538261469e-001,1.133924551144239e-001},{
          1.908769430286885e-001,1.838224530798516e-001,4.270951200211710e-001,
          1.149884955109506e-001},{1.922778327149997e-001,1.859705667570249e-001,
          4.284928189189925e-001,1.166052963742057e-001},{1.937778134238934e-001,
          1.881544096840238e-001,4.299206170087649e-001,1.182431736709383e-001},{
          1.953785161419524e-001,1.903755314738871e-001,4.313792037637430e-001,
          1.199024507686402e-001},{1.970818360106390e-001,1.926355337251292e-001,
          4.328692926418148e-001,1.215834586869736e-001},{1.988898297699773e-001,
          1.949360754056711e-001,4.343916221158705e-001,1.232865363600858e-001},{
          2.008046698894440e-001,1.972788765871647e-001,4.359469567739310e-001,
          1.250120309103874e-001},{2.028288942436377e-001,1.996657181573041e-001,
          4.375360884891066e-001,1.267602979344092e-001},{2.049649981449501e-001,
          2.020984525641909e-001,4.391598376128025e-001,1.285317018013877e-001},{
          2.072159412632179e-001,2.045789987236268e-001,4.408190543010555e-001,
          1.303266159652730e-001},{2.095848139500683e-001,2.071093533752463e-001,
          4.425146198364234e-001,1.321454232908996e-001},{2.120747994517689e-001,
          2.096915950472666e-001,4.442474480766267e-001,1.339885163951064e-001},{
          2.146896366486244e-001,2.123278812982627e-001,4.460184869960368e-001,
          1.358562980036432e-001},{2.174330624393193e-001,2.150204647564746e-001,
          4.478287202391585e-001,1.377491813247640e-001},{2.203091662968168e-001,
          2.177716908634281e-001,4.496791688610775e-001,1.396675904404572e-001},{
          2.233224795982417e-001,2.205840035106147e-001,4.515708931119363e-001,
          1.416119607163322e-001},{2.264775934106465e-001,2.234599582551517e-001,
          4.535049943124936e-001,1.435827392312657e-001},{2.297796161462891e-001,
          2.264022198467781e-001,4.554826169139364e-001,1.455803852279571e-001},{
          2.332339727580958e-001,2.294135744742551e-001,4.575049506012141e-001,
          1.476053705856567e-001},{2.368464516137537e-001,2.324969364640791e-001,
          4.595732325689487e-001,1.496581803163948e-001},{2.406231945523244e-001,
          2.356553566145465e-001,4.616887499294117e-001,1.517393130861526e-001},{
          2.445708289741049e-001,2.388920286712658e-001,4.638528422778431e-001,
          1.538492817625101e-001},{2.486964917723498e-001,2.422102993641000e-001,
          4.660669044016151e-001,1.559886139904228e-001},{2.530076500232799e-001,
          2.456136819772180e-001,4.683323891611289e-001,1.581578527979037e-001},{
          2.575124198255152e-001,2.491058607958477e-001,4.706508105994867e-001,
          1.603575572335084e-001},{2.622194715578140e-001,2.526907061233002e-001,
          4.730237471960758e-001,1.625883030377006e-001},{2.671380191367600e-001,
          2.563722872425211e-001,4.754528453647684e-001,1.648506833502761e-001},{
          2.722780089338211e-001,2.601548827603011e-001,4.779398231980150e-001,
          1.671453094562546e-001},{2.776499422163085e-001,2.640429994212740e-001,
          4.804864744277954e-001,1.694728115728024e-001},{2.832652297087600e-001,
          2.680413810642935e-001,4.830946727123900e-001,1.718338396799571e-001},{
          2.891360595449805e-001,2.721550304002138e-001,4.857663761527585e-001,
          1.742290643981639e-001},{2.952753902018427e-001,2.763892276998674e-001,
          4.885036321697845e-001,1.766591779158700e-001},{3.016972268760389e-001,
          2.807495456513702e-001,4.913085827436155e-001,1.791248949706735e-001},{
          3.084166142336471e-001,2.852418733111838e-001,4.941834699821898e-001,
          1.816269538878832e-001},{3.154496431133436e-001,2.898724405299774e-001,
          4.971306421192923e-001,1.841661176805713e-001},{3.228136488040175e-001,
          2.946478403193760e-001,5.001525599745869e-001,1.867431752156427e-001},{
          3.305272701993334e-001,2.995750572746494e-001,5.032518038700848e-001,
          1.893589424508100e-001},{3.386106566497629e-001,3.046614955486481e-001,
          5.064310810895980e-001,1.920142637477638e-001},{3.470853252620201e-001,
          3.099150166755338e-001,5.096932338829231e-001,1.947100132673631e-001},{
          3.559747578322673e-001,3.153439644648628e-001,5.130412481742362e-001,
          1.974470964531553e-001},{3.653040508329576e-001,3.209572158003464e-001,
          5.164782628307193e-001,2.002264516101224e-001},{3.751005268804078e-001,
          3.267642117238987e-001,5.200075798247715e-001,2.030490515862380e-001},{
          3.853936367929098e-001,3.327750113808939e-001,5.236326750964294e-001,
          2.059159055650719e-001},{3.962153242954108e-001,3.390003384908145e-001,
          5.273572104049557e-001,2.088280609785455e-001},{4.076002326752048e-001,
          3.454516381993498e-001,5.311850461311969e-001,2.117866055497767e-001},{
          4.195859580454628e-001,3.521411385938809e-001,5.351202551856762e-001,
          2.147926694769877e-001},{4.322133830106544e-001,3.590819173408294e-001,
          5.391671381277255e-001,2.178474277705093e-001},{4.455847504181922e-001,
          3.662869712655928e-001,5.433302434909894e-001,2.209521027562080e-001},{
          4.597024094143034e-001,3.737717322143078e-001,5.476143770879206e-001,
          2.241079667600003e-001},{4.745555429725229e-001,3.815533474816013e-001,
          5.520246277787561e-001,2.273163449897146e-001},{4.901257557583882e-001,
          3.897937038015808e-001,5.566421198401972e-001,2.306327012079619e-001},{
          5.063188762578222e-001,3.982520969512932e-001,5.613313187177943e-001,
          2.339568479963076e-001},{5.231506865568163e-001,4.069158720726419e-001,
          5.660827733888582e-001,2.372813206159511e-001},{5.406462578991202e-001,
          4.157904644940312e-001,5.708968304793926e-001,2.406057414176632e-001},{
          5.588316450226307e-001,4.248814441409453e-001,5.757738454519713e-001,
          2.439297408582211e-001},{5.777342003001672e-001,4.341945133486757e-001,
          5.807141825807703e-001,2.472529573723387e-001},{5.973823532328585e-001,
          4.437355186814879e-001,5.857182148492396e-001,2.505750372458956e-001},{
          6.178058903813788e-001,4.535104497074449e-001,5.907863239449198e-001,
          2.538956344906717e-001},{6.390358272679809e-001,4.635254487171909e-001,
          5.959189001915087e-001,2.572144107206164e-001},{6.611046329585031e-001,
          4.737868116278242e-001,6.011163425492457e-001,2.605310350297160e-001},{
          6.840461012924548e-001,4.843009977730023e-001,6.063790585717825e-001,
          2.638451838715473e-001},{7.078955339544499e-001,4.950746315277593e-001,
          6.117074644259439e-001,2.671565409405211e-001},{7.326898428585754e-001,
          5.061145075622476e-001,6.171019848856783e-001,2.704647970548958e-001},{
          7.584674735300413e-001,5.174275997007870e-001,6.225630533267513e-001,
          2.737696500416191e-001},{7.852685225837038e-001,5.290210645205079e-001,
          6.280911117643314e-001,2.770708046228762e-001},{8.131349523353069e-001,
          5.409022444662868e-001,6.336866108855748e-001,2.803679723045419e-001},{
          8.421104635778781e-001,5.530786787453849e-001,6.393500100554367e-001,
          2.836608712664611e-001},{8.722406215697443e-001,5.655581071809576e-001,
          6.450817773793988e-001,2.869492262544884e-001},{9.035731218920524e-001,
          5.783484730140734e-001,6.508823897607542e-001,2.902327684744185e-001},{
          9.361575777347176e-001,5.914579359394194e-001,6.567523329200065e-001,
          2.935112354877266e-001},{9.700458060496284e-001,6.048948732292336e-001,
          6.626921014911419e-001,2.967843711090281e-001},{1.005291989370011e+000,
          6.186678860505348e-001,6.687021990776449e-001,3.000519253054242e-001},{
          1.041952490869116e+000,6.327858120001110e-001,6.747831383002202e-001,
          3.033136540975303e-001},{1.080086214331775e+000,6.472577257095189e-001,
          6.809354409115697e-001,3.065693194622796e-001},{1.119754627068662e+000,
          6.620929484858137e-001,6.871596378556201e-001,3.098186892373309e-001},{
          1.161021912738447e+000,6.773010550003773e-001,6.934562693572517e-001,
          3.130615370273069e-001},{1.203954887498334e+000,6.928918842065448e-001,
          6.998258850011435e-001,3.162976421114647e-001},{1.248623406898427e+000,
          7.088755407142894e-001,7.062690438568339e-001,3.195267893531296e-001},{
          1.295100419859135e+000,7.252624056040015e-001,7.127863145497119e-001,
          3.227487691105891e-001},{1.343461839212578e+000,7.420631486316124e-001,
          7.193782753529641e-001,3.259633771495041e-001},{1.393787066100554e+000,
          7.592887285293669e-001,7.260455143290677e-001,3.291704145568307e-001},{
          1.446158832199879e+000,7.769504079175785e-001,7.327886293986805e-001,
          3.323696876561625e-001},{1.500663624657993e+000,7.950597567053790e-001,
          7.396082284751718e-001,3.355610079244260e-001},{1.557391483641027e+000,
          8.136286676665213e-001,7.465049295460156e-001,3.387441919099931e-001},{
          1.616436486202836e+000,8.326693587008284e-001,7.534793608199935e-001,
          3.419190611519823e-001},{1.677896904646256e+000,8.521943838823333e-001,
          7.605321608220843e-001,3.450854421009717e-001},{1.741874983769677e+000,
          8.722166491849841e-001,7.676639784917609e-001,3.482431660408027e-001},{
          1.808477704796359e+000,8.927494114574271e-001,7.748754733450998e-001,
          3.513920690115978e-001},{1.877816685279789e+000,9.138062955612120e-001,
          7.821673155490562e-001,3.545319917339357e-001},{1.950008110826083e+000,
          9.354013076198702e-001,7.895401860415601e-001,3.576627795341115e-001},{
          2.025176264842242e+000,9.575488033850547e-001,7.969947767714907e-001,
          3.607842822704026e-001},{2.103446939662919e+000,9.802636143987048e-001,
          8.045317904513486e-001,3.638963542604584e-001},{2.184913845243859e+000,
          1.003561394684095e+000,8.121519401501026e-001,3.669988542095216e-001},{
          2.269763220050740e+000,1.027456793165435e+000,8.198559544878306e-001,
          3.700916451436019e-001},{2.357786913578639e+000,1.051969888877999e+000,
          8.276445572115562e-001,3.731745943241333e-001},{2.448578982729761e+000,
          1.077119371791434e+000,8.355184943898608e-001,3.762475732019303e-001},{
          2.554495397712962e+000,1.102780965056649e+000,8.434788475409446e-001,
          3.793104573307565e-001},{2.636142944230747e+000,1.129517864911584e+000,
          8.515248441466035e-001,3.823631262876039e-001},{2.753576242195605e+000,
          1.156408150188240e+000,8.596606204334905e-001,3.854054635554983e-001},{
          2.858337969405045e+000,1.184320228835573e+000,8.678832015184743e-001,
          3.884373570657307e-001},{2.971207245092491e+000,1.212877645710290e+000,
          8.761955271692427e-001,3.914586976410320e-001},{3.088790819517250e+000,
          1.242174717307695e+000,8.845979360059516e-001,3.944693805727305e-001},{
          3.211290782525183e+000,1.272231405920666e+000,8.930912596503021e-001,
          3.974693046888215e-001},{3.338918141302322e+000,1.303068219692468e+000,
          9.016763420849130e-001,4.004583724710529e-001},{3.471892018272730e+000,
          1.334706240150083e+000,9.103540397044045e-001,4.034364899924997e-001},{
          3.610440645775533e+000,1.367167120982722e+000,9.191252214485987e-001,
          4.064035668556145e-001},{3.754800508814665e+000,1.400473111418473e+000,
          9.279907688104051e-001,4.093595161310653e-001},{3.905216477735271e+000,
          1.434647058532653e+000,9.369515758788880e-001,4.123042542968515e-001},{
          4.065670804884121e+000,1.469678174488928e+000,9.460086192933500e-001,
          4.152377011781764e-001},{4.237761502904625e+000,1.505565867821763e+000,
          9.551628791098028e-001,4.181597798876018e-001},{4.423332904730818e+000,
          1.542298398896243e+000,9.644154775777063e-001,4.210704167656975e-001},{
          4.624516092786303e+000,1.583704725720241e+000,9.746473707878920e-001,
          4.242404029888883e-001},{4.850196574686571e+000,1.626991736963335e+000,
          9.851937689726753e-001,4.274553962053975e-001},{5.056790030629979e+000,
          1.672846557345158e+000,9.960690537668240e-001,4.307167462684177e-001},{
          5.322780585611914e+000,1.720316041896115e+000,1.007293551783249e+000,
          4.340258706136082e-001},{5.581856116174721e+000,1.770664322860376e+000,
          1.018880860299036e+000,4.373842594703593e-001},{5.866088407465559e+000,
          1.823520560177389e+000,1.030853140388873e+000,4.407934798537482e-001},{
          6.171923002120571e+000,1.879189565923113e+000,1.043230569280668e+000,
          4.442551829095663e-001},{6.501535536191801e+000,1.937885751613769e+000,
          1.056035595849955e+000,4.477711093076880e-001},{6.857377194386117e+000,
          1.999844889612192e+000,1.069292431020710e+000,4.513430963808631e-001},{
          7.242214043652889e+000,2.065326797427353e+000,1.083027227973919e+000,
          4.549730857610047e-001},{7.659178646510535e+000,2.134618343011173e+000,
          1.097268285542566e+000,4.586631318040277e-001},{8.111827066134506e+000,
          2.208036973520845e+000,1.112046277772487e+000,4.624154109045757e-001},{
          8.604208529071581e+000,2.285934758959754e+000,1.127394514184514e+000,
          4.662322318172514e-001},{9.140948252644797e+000,2.368703086413673e+000,
          1.143349235435159e+000,4.701160471199221e-001},{9.727346257355944e+000,
          2.456778125271054e+000,1.159949950207535e+000,4.740694659762598e-001},{
          1.036949636473117e+001,2.550647201445953e+000,1.177239820295516e+000,
          4.780952683808142e-001},{1.107442943815378e+001,2.650856267473131e+000,
          1.195266102140809e+000,4.821964211012327e-001},{1.185028605617332e+001,
          2.758018689992081e+000,1.214080654794935e+000,4.863760955695670e-001},{
          1.270652798974013e+001,2.872825592971998e+000,1.233740526395416e+000,
          4.906376880197966e-001},{1.365419174621447e+001,2.996058162729545e+000,
          1.254308633466170e+000,4.949848422233832e-001},{1.470620059822895e+001,
          3.128602227412618e+000,1.275854551067133e+000,4.994214752410865e-001},{
          1.587774199700023e+001,3.271465705618580e+000,1.298455434935754e+000,
          5.039518066908264e-001},{1.720674254013149e+001,3.425586345730544e+000,
          1.322197606263238e+000,5.085803921309422e-001},{1.863402248089567e+001,
          3.593353579496717e+000,1.347174025974930e+000,5.133121612816782e-001},{
          2.032390211918452e+001,3.774153760759719e+000,1.373499219827730e+000,
          5.181524619605369e-001},{2.218601347832784e+001,3.971869398731903e+000,
          1.401284417001323e+000,5.231071115480921e-001},{2.431252464422925e+001,
          4.187482117105547e+000,1.430671346578243e+000,5.281824536278078e-001},{
          2.673985851010544e+001,4.423583955149483e+000,1.461812601611662e+000,
          5.333854293394883e-001},{2.952491937183151e+001,4.682968036424375e+000,
          1.494883366150635e+000,5.387236561640727e-001},{3.273828578159125e+001,
          4.968928762622564e+000,1.530083871593750e+000,5.442055229446516e-001},{
          3.646825750913934e+001,5.285374439016692e+000,1.567644134852697e+000,
          5.498403020789376e-001},{4.082633712570511e+001,5.636970657586560e+000,
          1.607829829067538e+000,5.556382833229866e-001},{4.595475926455129e+001,
          6.029324175734520e+000,1.650949619985925e+000,5.616109344677590e-001},{
          5.203696918320384e+001,6.469220871161562e+000,1.697364417633431e+000,
          5.677710957231201e-001},{5.931241581636025e+001,6.964936570782171e+000,
          1.747499159582017e+000,5.741332167790794e-001},{6.809776191782187e+001,
          7.526647036007701e+000,1.801857981792066e+000,5.807136484549547e-001},{
          7.881778054554678e+001,8.166974540194117e+000,1.861043982241702e+000,
          5.875310049495474e-001},{9.207856359262058e+001,8.901415236315513e+000,
          1.925786076833259e+000,5.946066185193436e-001},{1.085962925592044e+002,
          9.751235331139156e+000,1.996968777326911e+000,6.019651167819492e-001},{
          1.296612727594772e+002,1.073953725331416e+001,2.075696926484503e+000,
          6.096351651125727e-001},{1.568149508938095e+002,1.190149594899319e+001,
          2.163329563019325e+000,6.176504358167556e-001},{1.925895489261716e+002,
          1.327895255374134e+001,2.261610095071371e+000,6.260508899137490e-001},{
          2.407894220277205e+002,1.492863095592906e+001,2.372777247256969e+000,
          6.348845111387734e-001},{3.074933991972216e+002,1.692543720677949e+001,
          2.499777113694852e+000,6.442096900359834e-001},{4.028115941258301e+002,
          1.936864049070909e+001,2.646574749423806e+000,6.540985866240505e-001},{
          5.444627680553028e+002,2.238732251366779e+001,2.818658896530704e+000,
          6.646420006807281e-001},{7.654263901392872e+002,2.613984326739216e+001,
          3.023895327133340e+000,6.759566538738164e-001},{1.132473145221229e+003,
          3.077464245663644e+001,3.274097890822487e+000,6.881964979202373e-001},{
          1.728456306009293e+003,3.703669144378617e+001,3.586095407785845e+000,
          7.015710980094141e-001},{2.746345210190641e+003,4.636511685430635e+001,
          3.986312539776484e+000,7.163772638856115e-001},{4.641775374977525e+003,
          6.199723710600262e+001,4.516428772903993e+000,7.330575520262050e-001},{
          8.525657962231340e+003,6.810054194649604e+001,5.081630948855855e+000,
          7.472071449747022e-001},{1.741572862879567e+004,6.219045752188775e+001,
          5.890642485434674e+000,7.632728136051337e-001},{3.813458054210775e+004,
          5.370618375512508e+001,7.124228169883730e+000,7.828757764751582e-001},{
          8.589158440190039e+004,1.090981683303350e+002,8.902873285623791e+000,
          8.059157661363586e-001},{1.951303750681718e+005,2.375849575768755e+002,
          1.117514113283684e+001,8.277377240352704e-001},{4.782548713012288e+005,
          1.986473214368117e+002,1.394735114459777e+001,8.459822722289891e-001},{
          1.185655347397813e+006,-2.174684780917248e+002,1.762979102357640e+001,
          8.629254292602320e-001},{2.750846962420604e+006,-1.629109294341851e+002,
          2.259666061556802e+001,8.814128590616266e-001},{6.123913630880820e+006,
          4.322208699496733e+003,2.998861227777463e+001,9.042234397623542e-001},{
          1.223685185147719e+007,8.090218357744150e+003,3.638774289535504e+001,
          9.167366942666613e-001},{2.818621443600825e+007,3.085711548192580e+003,
          4.135729893033309e+001,9.225727665578074e-001},{8.316585285067827e+007,
          -1.136324148807467e+004,5.196252092604191e+001,9.326388658049112e-001},
          {2.794244200228550e+008,-6.113667992222013e+004,7.038061963269288e+001,
          9.435863614001085e-001},{9.252325428804928e+008,-5.487463721818197e+004,
          9.110802490104044e+001,9.579454741567480e-001},{2.237265034221097e+009,
          6.896819415082679e+004,1.142108494843807e+002,9.677749072712486e-001},{
          1.597732512872630e+013,-7.580581567199930e+008,8.988788796440838e+003,
          9.741584695812871e-001}};
      constant Real[Ninterval, 4] hlcoef={{7.395064117384627e+009,-1.280865388176200e+006,
          2.821575750527614e+002,1.833836171003976e-001},{6.597504135407492e+009,
          -1.212511325876777e+006,2.753491351615672e+002,1.841406426859871e-001},
          {5.780271674084454e+009,-1.152633155136978e+006,2.697490006419553e+002,
          1.847764786820451e-001},{4.958860729534658e+009,-1.042899311995140e+006,
          2.575580906113897e+002,1.862237508639398e-001},{4.254225882522524e+009,
          -9.436430636231016e+005,2.459280611632260e+002,1.876807622923263e-001},
          {3.649929287231926e+009,-8.538684890799312e+005,2.348330720290646e+002,
          1.891475943673219e-001},{3.131540328303725e+009,-7.726606490030770e+005,
          2.242477593033248e+002,1.906244199793511e-001},{2.686884429215740e+009,
          -6.992021917100513e+005,2.141484795719950e+002,1.921113515976508e-001},
          {2.305436681190764e+009,-6.327500405900241e+005,2.045124826635191e+002,
          1.936085324364108e-001},{1.978225892136117e+009,-5.726354169435729e+005,
          1.953183098525792e+002,1.951160756856359e-001},{1.697521363709874e+009,
          -5.182511799267425e+005,1.865453222831365e+002,1.966341253040380e-001},
          {1.456683048691095e+009,-4.690492050108880e+005,1.781740380829120e+002,
          1.981627952385604e-001},{1.250074360886440e+009,-4.245346083004282e+005,
          1.701855963205966e+002,1.997022606387281e-001},{1.072800606962726e+009,
          -3.842582037066196e+005,1.625621803354005e+002,2.012526666726048e-001},
          {9.207021541607516e+008,-3.478163169361438e+005,1.552869834519622e+002,
          2.028141285158312e-001},{7.901943344753319e+008,-3.148419383589053e+005,
          1.483437057813515e+002,2.043868226073761e-001},{6.782161334430934e+008,
          -2.850048993978956e+005,1.417170959818027e+002,2.059708649963459e-001},
          {5.825727219202920e+008,-2.580214571990632e+005,1.353924992211892e+002,
          2.075664330398644e-001},{5.018477901925672e+008,-2.336618459414496e+005,
          1.293563597550240e+002,2.091736741482984e-001},{4.336339749859386e+008,
          -2.116826692784306e+005,1.235956428311352e+002,2.107927362153820e-001},
          {3.759101976651321e+008,-1.921682462515702e+005,1.182042406216403e+002,
          2.123911161514204e-001},{3.267571477181848e+008,-1.752745050595466e+005,
          1.133228792803702e+002,2.139142206063779e-001},{2.843020873596044e+008,
          -1.599683613280694e+005,1.086775876446765e+002,2.154377045739531e-001},
          {2.475979262638457e+008,-1.460916038079511e+005,1.042554766441906e+002,
          2.169615822712266e-001},{2.158340827399827e+008,-1.335024950386115e+005,
          1.000444324122937e+002,2.184858675939239e-001},{1.883207309006085e+008,
          -1.220742895035692e+005,9.603307088337355e+001,2.200105741258566e-001},
          {1.644651841228906e+008,-1.116932087097448e+005,9.221068373842154e+001,
          2.215357151481048e-001},{1.437632632379007e+008,-1.022574640228438e+005,
          8.856720217299345e+001,2.230613036479431e-001},{1.257801607275091e+008,
          -9.367549193296053e+004,8.509314677627712e+001,2.245873523275273e-001},
          {1.101454874055535e+008,-8.586529010338520e+004,8.177959848067110e+001,
          2.261138736123414e-001},{9.653972368356156e+007,-7.875303244948787e+004,
          7.861815481978856e+001,2.276408796594130e-001},{8.468871988652200e+007,
          -7.227239695689626e+004,7.560090235615557e+001,2.291683823653079e-001},
          {7.435767250336401e+007,-6.636379223835093e+004,7.272038489459962e+001,
          2.306963933739068e-001},{6.534286001294021e+007,-6.097342167031716e+004,
          6.996957046343296e+001,2.322249240839693e-001},{5.747027807155222e+007,
          -5.605298520200417e+004,6.734183209615867e+001,2.337539856564991e-001},
          {5.058892155208572e+007,-5.155884014645571e+004,6.483091539577785e+001,
          2.352835890219054e-001},{4.456897749091873e+007,-4.745168641553626e+004,
          6.243092046710518e+001,2.368137448869720e-001},{3.929797808634566e+007,
          -4.369602037553607e+004,6.013627711697743e+001,2.383444637416446e-001},
          {3.467909626236541e+007,-4.025982723829874e+004,5.794172688510435e+001,
          2.398757558656324e-001},{3.062784360211651e+007,-3.711410238256247e+004,
          5.584230094500428e+001,2.414076313348311e-001},{2.707199455967587e+007,
          -3.423274054960324e+004,5.383330780575171e+001,2.429401000275848e-001},
          {2.394806063151847e+007,-3.159200650084850e+004,5.191030928225440e+001,
          2.444731716307669e-001},{2.120145854494023e+007,-2.917049319028297e+004,
          5.006911233397096e+001,2.460068556457158e-001},{1.878470848130406e+007,
          -2.694879400670043e+004,4.830575024370947e+001,2.475411613940012e-001},
          {1.665640139112113e+007,-2.490930349109187e+004,4.661646985518280e+001,
          2.490760980230453e-001},{1.478065625824185e+007,-2.303608166989841e+004,
          4.499772037807755e+001,2.506116745115950e-001},{1.312624886938225e+007,
          -2.131466500927661e+004,4.344614015879794e+001,2.521478996750478e-001},
          {1.166585545469223e+007,-1.973190580002538e+004,4.195854541513062e+001,
          2.536847821706443e-001},{1.037575804683703e+007,-1.827588228385652e+004,
          4.053192137337701e+001,2.552223305025196e-001},{9.235229821301350e+006,
          -1.693575336267236e+004,3.916341110770780e+001,2.567605530266264e-001},
          {8.226161529454760e+006,-1.570166014825697e+004,3.785030689607822e+001,
          2.582994579555294e-001},{7.332714409838634e+006,-1.456463239248035e+004,
          3.659004174391924e+001,2.598390533630776e-001},{6.541067280596239e+006,
          -1.351651109839700e+004,3.538018157148768e+001,2.613793471889549e-001},
          {5.839089097217685e+006,-1.254985887421323e+004,3.421841707983741e+001,
          2.629203472431124e-001},{5.216174993443639e+006,-1.165790355620624e+004,
          3.310255732922824e+001,2.644620612100892e-001},{4.663018167146263e+006,
          -1.083446843025749e+004,3.203052265688924e+001,2.660044966532249e-001},
          {4.171444464302824e+006,-1.007391792850541e+004,3.100033862903940e+001,
          2.675476610187589e-001},{3.734291063599596e+006,-9.371112234283090e+003,
          3.001013038565671e+001,2.690915616398324e-001},{3.345264196959495e+006,
          -8.721357281608769e+003,2.905811682622430e+001,2.706362057403845e-001},
          {2.998804824052956e+006,-8.120359510245587e+003,2.814260537246550e+001,
          2.721816004389522e-001},{2.690059117043254e+006,-7.564203866773062e+003,
          2.726198786072066e+001,2.737277527523759e-001},{2.414722165518809e+006,
          -7.049301389752438e+003,2.641473480407623e+001,2.752746695994082e-001},
          {2.169006576676412e+006,-6.572371181362734e+003,2.559939204631222e+001,
          2.768223578042399e-001},{1.949589547380671e+006,-6.130413910998713e+003,
          2.481457654061498e+001,2.783708240999319e-001},{1.753513335070667e+006,
          -5.720675273235230e+003,2.405897188170692e+001,2.799200751317631e-001},
          {1.578181984153911e+006,-5.340636910887383e+003,2.333132571024671e+001,
          2.814701174605012e-001},{1.421296797534924e+006,-4.987988415116040e+003,
          2.263044564557126e+001,2.830209575655875e-001},{1.280826297625475e+006,
          -4.660611060652745e+003,2.195519632940761e+001,2.845726018482448e-001},
          {1.154967887885402e+006,-4.356559333855659e+003,2.130449633293048e+001,
          2.861250566345134e-001},{1.042131487251255e+006,-4.074049315833184e+003,
          2.067731557349638e+001,2.876783281782094e-001},{9.409048828988477e+005,
          -3.811441190960783e+003,2.007267232055989e+001,2.892324226638147e-001},
          {8.500340926125752e+005,-3.567227768237408e+003,1.948963084447095e+001,
          2.907873462092958e-001},{7.684098011669957e+005,-3.340024748034876e+003,
          1.892729914062116e+001,2.923431048688557e-001},{6.950454961539843e+005,
          -3.128558197222760e+003,1.838482647741899e+001,2.938997046356221e-001},
          {6.290634426463042e+005,-2.931655562235562e+003,1.786140137631819e+001,
          2.954571514442698e-001},{5.696851277746989e+005,-2.748238224841836e+003,
          1.735624969777203e+001,2.970154511735833e-001},{5.162174096472578e+005,
          -2.577312465118152e+003,1.686863261843808e+001,2.985746096489578e-001},
          {4.680412177608077e+005,-2.417962027029424e+003,1.639784486931878e+001,
          3.001346326448444e-001},{4.246092785921820e+005,-2.269344049512283e+003,
          1.594321324426641e+001,3.016955258871379e-001},{3.854290946306968e+005,
          -2.130679129811940e+003,1.550409461031256e+001,3.032572950555081e-001},
          {3.500644784375472e+005,-2.001249801636266e+003,1.507987485327908e+001,
          3.048199457856796e-001},{3.181254941087923e+005,-1.880393392444164e+003,
          1.466996714224077e+001,3.063834836716620e-001},{2.892627964124076e+005,
          -1.767497553444107e+003,1.427381064630017e+001,3.079479142679245e-001},
          {2.631658597077979e+005,-1.661997457406561e+003,1.389086939175560e+001,
          3.095132430915293e-001},{2.395556802770178e+005,-1.563370394708744e+003,
          1.352063085122437e+001,3.110794756242089e-001},{2.181834226552594e+005,
          -1.471133577957063e+003,1.316260497547039e+001,3.126466173144076e-001},
          {1.988261272748282e+005,-1.384840332961980e+003,1.281632300534341e+001,
          3.142146735792670e-001},{1.812841164270276e+005,-1.304077374256214e+003,
          1.248133648021494e+001,3.157836498065826e-001},{1.653780267940605e+005,
          -1.228461972770334e+003,1.215721625109387e+001,3.173535513567038e-001},
          {1.509481016353733e+005,-1.157640295687853e+003,1.184355163838609e+001,
          3.189243835644045e-001},{1.378494330329677e+005,-1.091283635929976e+003,
          1.153994936397996e+001,3.204961517407096e-001},{1.259533798538558e+005,
          -1.029088314073179e+003,1.124603300581368e+001,3.220688611746812e-001},
          {1.151434947602917e+005,-9.707721560066344e+002,1.096144193815056e+001,
          3.236425171351746e-001},{1.053155086752598e+005,-9.160737446488935e+002,
          1.068583076706654e+001,3.252171248725524e-001},{9.637539799014138e+004,
          -8.647503663978431e+002,1.041886853531754e+001,3.267926896203659e-001},
          {8.823888454783670e+004,-8.165769553308005e+002,1.016023811189488e+001,
          3.283692165970028e-001},{8.082975256302909e+004,-7.713442852693606e+002,
          9.909635478268301e+000,3.299467110073037e-001},{7.407960702001616e+004,
          -7.288582119329744e+002,9.666769207898108e+000,3.315251780441446e-001},
          {6.792665838390439e+004,-6.889382110921721e+002,9.431359824692734e+000,
          3.331046228899912e-001},{6.231526198828789e+004,-6.514165353801458e+002,
          9.203139298263135e+000,3.346850507184217e-001},{5.719513812339059e+004,
          -6.161371424524319e+002,8.981850501633565e+000,3.362664666956208e-001},
          {5.252104982234649e+004,-5.829549835215390e+002,8.767246744918761e+000,
          3.378488759818509e-001},{4.825192751323921e+004,-5.517349069002831e+002,
          8.559091257223685e+000,3.394322837328866e-001},{4.435085262412058e+004,
          -5.223512693230589e+002,8.357156812102812e+000,3.410166951014356e-001},
          {4.078431692402485e+004,-4.946869454272916e+002,8.161225235617962e+000,
          3.426021152385257e-001},{3.752210023182508e+004,-4.686329059593669e+002,
          7.971087052548851e+000,3.441885492948688e-001},{3.453677849407373e+004,
          -4.440874766662903e+002,7.786541067524770e+000,3.457760024222062e-001},
          {3.180355626502269e+004,-4.209559160395517e+002,7.607394028698087e+000,
          3.473644797746268e-001},{2.929998425341201e+004,-3.991498796401928e+002,
          7.433460265705899e+000,3.489539865098665e-001},{2.700568725535247e+004,
          -3.785869240593804e+002,7.264561353833670e+000,3.505445277905829e-001},
          {2.490219323552633e+004,-3.591901229932722e+002,7.100525811207305e+000,
          3.521361087856166e-001},{2.297274465666998e+004,-3.408876693791219e+002,
          6.941188795306921e+000,3.537287346712248e-001},{2.120214641232764e+004,
          -3.236125217409932e+002,6.786391817255598e+000,3.553224106323019e-001},
          {1.957657344633676e+004,-3.073020267951967e+002,6.635982461076544e+000,
          3.569171418635831e-001},{1.808347931117164e+004,-2.918976581600808e+002,
          6.489814137991496e+000,3.585129335708239e-001},{1.671146762926517e+004,
          -2.773447131490234e+002,6.347745831608338e+000,3.601097909719717e-001},
          {1.545013740159694e+004,-2.635920046989097e+002,6.209641855271004e+000,
          3.617077192983143e-001},{1.429006951012745e+004,-2.505917089097457e+002,
          6.075371650375700e+000,3.633067237956181e-001},{1.322266968511326e+004,
          -2.382990480062072e+002,5.944809543387017e+000,3.649068097252486e-001},
          {1.224010132039165e+004,-2.266721040737960e+002,5.817834554960569e+000,
          3.665079823652802e-001},{1.133523722405783e+004,-2.156716504900735e+002,
          5.694330210582269e+000,3.681102470115885e-001},{1.050158642348279e+004,
          -2.052609525375157e+002,5.574184345532527e+000,3.697136089789342e-001},
          {9.733206313299734e+003,-1.954055676141257e+002,5.457288921742155e+000,
          3.713180736020321e-001},{9.024700730222718e+003,-1.860732540723482e+002,
          5.343539877398015e+000,3.729236462366104e-001},{8.371123402082400e+003,
          -1.772337586979163e+002,5.232836941729546e+000,3.745303322604583e-001},
          {7.767976360117369e+003,-1.688587391346637e+002,5.125083500057396e+000,
          3.761381370744614e-001},{7.211132037590188e+003,-1.609215840176348e+002,
          5.020186427402752e+000,3.777470661036311e-001},{6.696830442802067e+003,
          -1.533973451085674e+002,4.918055965107774e+000,3.793571247981251e-001},
          {6.221630107308341e+003,-1.462626001578099e+002,4.818605572961186e+000,
          3.809683186342531e-001},{5.782380642858814e+003,-1.394953568738606e+002,
          4.721751803873504e+000,3.825806531154816e-001},{5.376201651577415e+003,
          -1.330749668179309e+002,4.627414182825382e+000,3.841941337734274e-001},
          {5.000455207451565e+003,-1.269820315075479e+002,4.535515085732524e+000,
          3.858087661688454e-001},{4.652724834587218e+003,-1.211983226404149e+002,
          4.445979627643788e+000,3.874245558926092e-001},{4.330795240187265e+003,
          -1.157067060614417e+002,4.358735554805467e+000,3.890415085666860e-001},
          {4.032641019365463e+003,-1.104910799208306e+002,4.273713143506992e+000,
          3.906596298451056e-001},{3.756394747613435e+003,-1.055362848885977e+002,
          4.190845093212067e+000,3.922789254149277e-001},{3.500354297338667e+003,
          -1.008280802229431e+002,4.110066446614686e+000,3.938994009971991e-001},
          {3.262950609227280e+003,-9.635305138220821e+001,4.031314482734651e+000,
          3.955210623479115e-001},{3.042742369663052e+003,-9.209857304695458e+001,
          3.954528640335044e+000,3.971439152589546e-001},{2.838413065597216e+003,
          -8.805277060758006e+001,3.879650436609394e+000,3.987679655590649e-001},
          {2.648742989264185e+003,-8.420444188141711e+001,3.806623374949973e+000,
          4.003932191147761e-001},{2.472617600983757e+003,-8.054304904610477e+001,
          3.735392885948790e+000,4.020196818313603e-001},{2.309012318091831e+003,
          -7.705866086409024e+001,3.665906242883802e+000,4.036473596537750e-001},
          {2.156978720419112e+003,-7.374190599668950e+001,3.598112490902449e+000,
          4.052762585676071e-001},{2.015650036432498e+003,-7.058396265218144e+001,
          3.531962391385521e+000,4.069063846000124e-001},{1.884225012048499e+003,
          -6.757650377249485e+001,3.467408345228365e+000,4.085377438206608e-001},
          {1.761967295914424e+003,-6.471167807273380e+001,3.404404338708559e+000,
          4.101703423426775e-001},{1.648196125371299e+003,-6.198207308290163e+001,
          3.342905880402665e+000,4.118041863235865e-001},{1.542286784888126e+003,
          -5.938069940472492e+001,3.282869949941535e+000,4.134392819662572e-001},
          {1.443661841752103e+003,-5.690095495331793e+001,3.224254937399627e+000,
          4.150756355198507e-001},{1.351787821483400e+003,-5.453660450267201e+001,
          3.167020594458915e+000,4.167132532807668e-001},{1.266175045567968e+003,
          -5.228176450788781e+001,3.111127986917860e+000,4.183521415935981e-001},
          {1.186368387856992e+003,-5.013086904303047e+001,3.056539439710153e+000,
          4.199923068520857e-001},{1.111950039713011e+003,-4.807866488602586e+001,
          3.003218499628963e+000,4.216337555000751e-001},{1.042532610364972e+003,
          -4.612018271016708e+001,2.951129883955490e+000,4.232764940324793e-001},
          {9.777589417052835e+002,-4.425072650328128e+001,2.900239442556008e+000,
          4.249205289962486e-001},{9.172983979562611e+002,-4.246585399078810e+001,
          2.850514114630586e+000,4.265658669913391e-001},{8.608453554430503e+002,
          -4.076136366761418e+001,2.801921891149074e+000,4.282125146716945e-001},
          {8.081171471965247e+002,-3.913328048140521e+001,2.754431776852438e+000,
          4.298604787462255e-001},{7.588523354947266e+002,-3.757784280141392e+001,
          2.708013754148967e+000,4.315097659798046e-001},{7.128085053227204e+002,
          -3.609148886941360e+001,2.662638747952767e+000,4.331603831942572e-001},
          {6.697616301899591e+002,-3.467084767166227e+001,2.618278593896983e+000,
          4.348123372693731e-001},{6.295038171706216e+002,-3.331272564117698e+001,
          2.574906004565767e+000,4.364656351439127e-001},{5.918428655279847e+002,
          -3.201409883532291e+001,2.532494540378606e+000,4.381202838166297e-001},
          {5.565999606334636e+002,-3.077210029665694e+001,2.491018578065730e+000,
          4.397762903473017e-001},{5.236101967728564e+002,-2.958401561514848e+001,
          2.450453285249495e+000,4.414336618577676e-001},{4.927195823157568e+002,
          -2.844726859478019e+001,2.410774588999436e+000,4.430924055329756e-001},
          {4.637860960803320e+002,-2.735941953218890e+001,2.371959154294425e+000,
          4.447525286220433e-001},{4.366774822365882e+002,-2.631815311065120e+001,
          2.333984354679967e+000,4.464140384393267e-001},{4.112710296977796e+002,
          -2.532127349245170e+001,2.296828250141353e+000,4.480769423654994e-001},
          {3.874528219662709e+002,-2.436669747558107e+001,2.260469563259040e+000,
          4.497412478486488e-001},{3.651169185882785e+002,-2.345244781267422e+001,
          2.224887656378541e+000,4.514069624053770e-001},{3.441650927913553e+002,
          -2.257664839246537e+001,2.190062510638771e+000,4.530740936219221e-001},
          {3.245056450427372e+002,-2.173751677003992e+001,2.155974703738442e+000,
          4.547426491552871e-001},{3.060536399057885e+002,-2.093336163040314e+001,
          2.122605392018528e+000,4.564126367343871e-001},{2.887300097307417e+002,
          -2.016257613322068e+001,2.089936289195907e+000,4.580840641612062e-001},
          {2.724610482918949e+002,-1.942363328612018e+001,2.057949648179311e+000,
          4.597569393119745e-001},{2.571781773457540e+002,-1.871508235114862e+001,
          2.026628243849622e+000,4.614312701383573e-001},{2.428177694319144e+002,
          -1.803554520313706e+001,1.995955355734756e+000,4.631070646686624e-001},
          {2.293201220245030e+002,-1.738371018461584e+001,1.965914749708475e+000,
          4.647843310090629e-001},{2.166301416228736e+002,-1.675833219262003e+001,
          1.936490665160709e+000,4.664630773448359e-001},{2.046961071710434e+002,
          -1.615822543778556e+001,1.907667795779915e+000,4.681433119416241e-001},
          {1.934698629445243e+002,-1.558226242939191e+001,1.879431277425193e+000,
          4.698250431467114e-001},{1.829066943899449e+002,-1.502937113484294e+001,
          1.851766673341252e+000,4.715082793903179e-001},{1.729646537632953e+002,
          -1.449853037846985e+001,1.824659958829607e+000,4.731930291869178e-001},
          {1.636047362947269e+002,-1.398876887679239e+001,1.798097509845817e+000,
          4.748793011365756e-001},{1.547905996606153e+002,-1.349916208755315e+001,
          1.772066089112747e+000,4.765671039263029e-001},{1.464881127185945e+002,
          -1.302882884420155e+001,1.746552833172282e+000,4.782564463314370e-001},
          {1.386655781437395e+002,-1.257693080761831e+001,1.721545242210061e+000,
          4.799473372170469e-001},{1.312933609201193e+002,-1.214266917026167e+001,
          1.697031166940830e+000,4.816397855393539e-001},{1.243436673524583e+002,
          -1.172528246603632e+001,1.672998797715616e+000,4.833338003471823e-001},
          {1.177906812224748e+002,-1.132404579365274e+001,1.649436654853634e+000,
          4.850293907834343e-001},{1.116101176422379e+002,-1.093826750962181e+001,
          1.626333576621976e+000,4.867265660865868e-001},{1.057793766234323e+002,
          -1.056728882118992e+001,1.603678710849861e+000,4.884253355922194e-001},
          {1.002772484594161e+002,-1.021048121888435e+001,1.581461504068653e+000,
          4.901257087345642e-001},{9.508393109691426e+001,-9.867245539491131e+000,
          1.559671692999208e+000,4.918276950480881e-001},{9.018086100582940e+001,
          -9.537010120052251e+000,1.538299295044362e+000,4.935313041690984e-001},
          {8.555069486770042e+001,-9.219229747811003e+000,1.517334600000931e+000,
          4.952365458373848e-001},{8.117714599214482e+001,-8.913383954440521e+000,
          1.496768161220113e+000,4.969434298978837e-001},{7.704503147414225e+001,
          -8.618976357910185e+000,1.476590788161609e+000,4.986519663023814e-001},
          {7.314002294338168e+001,-8.335532613364549e+000,1.456793537585971e+000,
          5.003621651112420e-001},{6.944879810386360e+001,-8.062600431450619e+000,
          1.437367707389535e+000,5.020740364951754e-001},{6.595880156239269e+001,
          -7.799747511242599e+000,1.418304827863057e+000,5.037875907370351e-001},
          {6.265828559603662e+001,-7.546561136231898e+000,1.399596655606285e+000,
          5.055028382336494e-001},{5.953623627670859e+001,-7.302647062139070e+000,
          1.381235166362647e+000,5.072197894976949e-001},{5.658229760929855e+001,
          -7.067628502368594e+000,1.363212548354849e+000,5.089384551595994e-001},
          {5.378678727776725e+001,-6.841145600895276e+000,1.345521196299155e+000,
          5.106588459694897e-001},{5.114058172786601e+001,-6.622854212012143e+000,
          1.328153704681671e+000,5.123809727991734e-001},{4.863514814255605e+001,
          -6.412425552714074e+000,1.311102862409988e+000,5.141048466441640e-001},
          {4.626245004092587e+001,-6.209545123139677e+000,1.294361646523955e+000,
          5.158304786257448e-001},{4.401494669041566e+001,-6.013912245135423e+000,
          1.277923217027002e+000,5.175578799930805e-001},{4.188556400289667e+001,
          -5.825239391259091e+000,1.261780911389945e+000,5.192870621253667e-001},
          {3.986762775448643e+001,-5.643251367096637e+000,1.245928239132817e+000,
          5.210180365340277e-001},{3.795489834408001e+001,-5.467685094511304e+000,
          1.230358877298484e+000,5.227508148649598e-001},{3.614148268541150e+001,
          -5.298288645847125e+000,1.215066664937051e+000,5.244854089008243e-001},
          {3.442185278609600e+001,-5.134821009449518e+000,1.200045598933553e+000,
          5.262218305633868e-001},{3.279079584820779e+001,-4.977051405468687e+000,
          1.185289829131247e+000,5.279600919159078e-001},{3.124342934154262e+001,
          -4.824759024073568e+000,1.170793654218353e+000,5.297002051655871e-001},
          {2.977513427897120e+001,-4.677732260255681e+000,1.156551516988663e+000,
          5.314421826660609e-001},{2.838157596586128e+001,-4.535768567068232e+000,
          1.142558000732308e+000,5.331860369199514e-001},{2.705867366805578e+001,
          -4.398673923357351e+000,1.128807824937147e+000,5.349317805814788e-001},
          {2.580257661383335e+001,-4.266262403536937e+000,1.115295841412068e+000,
          5.366794264591228e-001},{2.460966531506359e+001,-4.138355917689477e+000,
          1.102017030714079e+000,5.384289875183563e-001},{2.347652634935337e+001,
          -4.014783768732895e+000,1.088966498339614e+000,5.401804768844284e-001},
          {2.239994189186168e+001,-3.895382342766132e+000,1.076139471288119e+000,
          5.419339078452174e-001},{2.137688056201431e+001,-3.779994809266803e+000,
          1.063531294680509e+000,5.436892938541545e-001},{2.040448375466456e+001,
          -3.668470797273908e+000,1.051137428418400e+000,5.454466485332009e-001},
          {1.948005543173328e+001,-3.560666110129647e+000,1.038953444001990e+000,
          5.472059856759085e-001},{1.860105179024829e+001,-3.456442449726411e+000,
          1.026975021437601e+000,5.489673192505425e-001},{1.776507969598140e+001,
          -3.355667198759821e+000,1.015197946286714e+000,5.507306634032858e-001},
          {1.696986640316189e+001,-3.258213021837012e+000,1.003618106544807e+000,
          5.524960324615093e-001},{1.621328376128235e+001,-3.163957875125649e+000,
          9.922314902636222e-001,5.542634409371333e-001},{1.549330911573373e+001,
          -3.072784521087606e+000,9.810341822990482e-001,5.560329035300551e-001},
          {1.480803983183346e+001,-2.984580503003917e+000,9.700223620937467e-001,
          5.578044351316714e-001},{1.415567829505791e+001,-2.899237854035364e+000,
          9.591923008786090e-001,5.595780508284809e-001},{1.353452476308944e+001,
          -2.816652899819644e+000,9.485403592247703e-001,5.613537659057762e-001},
          {1.294297073501526e+001,-2.736726076361296e+000,9.380629846710600e-001,
          5.631315958514251e-001},{1.237950327534221e+001,-2.659361822105834e+000,
          9.277567094758138e-001,5.649115563597501e-001},{1.184268567697761e+001,
          -2.584468285143181e+000,9.176181481050070e-001,5.666936633355001e-001},
          {1.133116273830062e+001,-2.511957258765677e+000,9.076439952813108e-001,
          5.684779328979236e-001},{1.084365039059536e+001,-2.441743973937185e+000,
          8.978310237189942e-001,5.702643813849461e-001},{1.037893959350994e+001,
          -2.373747016076154e+000,8.881760821711557e-001,5.720530253574520e-001},
          {9.935878258780905e+000,-2.307888066176576e+000,8.786760932029253e-001,
          5.738438816036776e-001},{9.513385220488097e+000,-2.244091925599429e+000,
          8.693280515875038e-001,5.756369671437167e-001},{9.110429465384806e+000,
          -2.182286226388107e+000,8.601290220482226e-001,5.774322992341427e-001},
          {8.726039979294475e+000,-2.122401439791754e+000,8.510761377549098e-001,
          5.792298953727533e-001},{8.359296620034248e+000,-2.064370690628830e+000,
          8.421665983411981e-001,5.810297733034353e-001},{8.009325561958333e+000,
          -2.008129640143733e+000,8.333976682171725e-001,5.828319510211679e-001},
          {7.675302688422919e+000,-1.953616435842042e+000,8.247666750114966e-001,
          5.846364467771462e-001},{7.356443958617260e+000,-1.900771540092228e+000,
          8.162710077803924e-001,5.864432790840537e-001},{7.052008531129983e+000,
          -1.849537692088942e+000,8.079081155885138e-001,5.882524667214695e-001},
          {6.761294720818636e+000,-1.799859789804134e+000,7.996755058885832e-001,
          5.900640287414285e-001},{6.483636498372520e+000,-1.751684788990636e+000,
          7.915707430302340e-001,5.918779844741284e-001},{6.218399337511639e+000,
          -1.704961609984714e+000,7.835914468426860e-001,5.936943535337977e-001},
          {5.964989501232742e+000,-1.659641156314279e+000,7.757352914082837e-001,
          5.955131558247273e-001},{5.722834924601525e+000,-1.615676059262124e+000,
          7.680000032840613e-001,5.973344115474654e-001},{5.491399638620130e+000,
          -1.573020782408741e+000,7.603833606797970e-001,5.991581412051937e-001},
          {5.270171046295689e+000,-1.531631422179552e+000,7.528831917957080e-001,
          6.009843656102799e-001},{5.058664298813443e+000,-1.491465712692528e+000,
          7.454973738143860e-001,6.028131058910203e-001},{4.856420435950218e+000,
          -1.452482946378775e+000,7.382238316110306e-001,6.046443834985716e-001},
          {4.663000885144658e+000,-1.414643871536506e+000,7.310605365115268e-001,
          6.064782202140927e-001},{4.477991405897813e+000,-1.377910693546225e+000,
          7.240055053241036e-001,6.083146381560854e-001},{4.300998038136363e+000,
          -1.342246980204123e+000,7.170567991024387e-001,6.101536597879579e-001},
          {4.131646836878849e+000,-1.307617618348851e+000,7.102125221204546e-001,
          6.119953079258070e-001},{3.969581617344602e+000,-1.273988750409006e+000,
          7.034708208117358e-001,6.138396057464396e-001},{3.814464999241590e+000,
          -1.241327747944722e+000,6.968298828181920e-001,6.156865767956317e-001},
          {3.665976419552412e+000,-1.209603147585341e+000,6.902879359474882e-001,
          6.175362449966364e-001},{3.523809639869346e+000,-1.178784591650163e+000,
          6.838432472111192e-001,6.193886346589591e-001},{3.387676101076204e+000,
          -1.148842831128321e+000,6.774941220149650e-001,6.212437704873943e-001},
          {3.257298408715396e+000,-1.119749615703440e+000,6.712389030704746e-001,
          6.231016775913520e-001},{3.132416234122967e+000,-1.091477733912388e+000,
          6.650759697593417e-001,6.249623814944699e-001},{3.012777923461127e+000,
          -1.064000880818915e+000,6.590037370124431e-001,6.268259081445352e-001},
          {2.898148500487827e+000,-1.037293729191567e+000,6.530206548146291e-001,
          6.286922839237189e-001},{2.788300228906221e+000,-1.011331780554530e+000,
          6.471252070509176e-001,6.305615356591386e-001},{2.683019744175228e+000,
          -9.860914343814429e-001,6.413159110771507e-001,6.324336906337702e-001},
          {2.582101558543176e+000,-9.615498742641666e-001,6.355913166870878e-001,
          6.343087765977056e-001},{2.485351726258790e+000,-9.376850950754241e-001,
          6.299500055923686e-001,6.361868217797954e-001},{2.392584780774969e+000,
          -9.144758355198807e-001,6.243905905769184e-001,6.380678548996677e-001},
          {2.303623809125252e+000,-8.919015614137316e-001,6.189117148779868e-001,
          6.399519051801563e-001},{2.218301716484065e+000,-8.699424569246335e-001,
          6.135120515563689e-001,6.418390023601502e-001},{2.136457313721100e+000,
          -8.485793527805717e-001,6.081903027200146e-001,6.437291767078821e-001},
          {2.057939227794259e+000,-8.277937602603399e-001,6.029451990970640e-001,
          6.456224590346728e-001},{1.982601361773348e+000,-8.075677868124656e-001,
          5.977754992194658e-001,6.475188807091614e-001},{1.910305422321021e+000,
          -7.878841579305617e-001,5.926799890174284e-001,6.494184736720295e-001},
          {1.840919973864347e+000,-7.687261800830212e-001,5.876574811656280e-001,
          6.513212704512502e-001},{1.774318431447832e+000,-7.500776989994216e-001,
          5.827068144958507e-001,6.532273041778850e-001},{1.710381605636034e+000,
          -7.319231195156424e-001,5.778268536008011e-001,6.551366086024576e-001},
          {1.648994688751223e+000,-7.142473440233981e-001,5.730164881656592e-001,
          6.570492181119113e-001},{1.590048725123274e+000,-6.970357821918966e-001,
          5.682746325952985e-001,6.589651677472103e-001},{1.533439874027392e+000,
          -6.802743224911976e-001,5.636002254787615e-001,6.608844932215886e-001},
          {1.479068697158344e+000,-6.639493087403419e-001,5.589922291190146e-001,
          6.628072309394806e-001},{1.426840869536403e+000,-6.480475369725340e-001,
          5.544496291369960e-001,6.647334180161881e-001},{1.376665618585289e+000,
          -6.325562192444207e-001,5.499714339749598e-001,6.666630922982865e-001},
          {1.328457187000894e+000,-6.174629937261502e-001,5.455566745780982e-001,
          6.685962923848331e-001},{1.282133030214725e+000,-6.027558831242498e-001,
          5.412044038917494e-001,6.705330576494062e-001},{1.237614927340746e+000,
          -5.884233016021722e-001,5.369136965737760e-001,6.724734282630155e-001},
          {1.194827579250900e+000,-5.744540212110448e-001,5.326836485547319e-001,
          6.744174452179302e-001},{1.153699645170108e+000,-5.608371784476705e-001,
          5.285133767701128e-001,6.763651503524762e-001},{1.114162811162155e+000,
          -5.475622466470426e-001,5.244020187578001e-001,6.783165863768431e-001},
          {1.076151709993373e+000,-5.346190261721666e-001,5.203487323673905e-001,
          6.802717968999631e-001},{1.039604087616986e+000,-5.219976374666073e-001,
          5.163526954775388e-001,6.822308264575041e-001},{1.004460456200703e+000,
          -5.096885048943938e-001,5.124131056874093e-001,6.841937205410585e-001},
          {9.706638785677234e-001,-4.976823447415940e-001,5.085291800511675e-001,
          6.861605256285703e-001},{9.381600986563852e-001,-4.859701585652561e-001,
          5.047001548417265e-001,6.881312892160738e-001},{9.068972242668986e-001,
          -4.745432188080312e-001,5.009252852952014e-001,6.901060598508284e-001},
          {8.768256265898535e-001,-4.633930593762060e-001,4.972038453990545e-001,
          6.920848871659001e-001},{8.478980422480926e-001,-4.525114688501092e-001,
          4.935351276972386e-001,6.940678219163016e-001},{8.200690560722610e-001,
          -4.418904741373326e-001,4.899184430790607e-001,6.960549160167504e-001},
          {7.932955365213841e-001,-4.315223407060223e-001,4.863531206494093e-001,
          6.980462225811568e-001},{7.675361442985631e-001,-4.213995555141402e-001,
          4.828385075364002e-001,7.000417959639271e-001},{7.427512593575009e-001,
          -4.115148200888941e-001,4.793739687774626e-001,7.020416918031972e-001},
          {7.189033117426465e-001,-4.018610486495977e-001,4.759588872229961e-001,
          7.040459670661056e-001},{6.959561135742333e-001,-3.924313488754276e-001,
          4.725926633925903e-001,7.060546800962171e-001},{6.738752033854085e-001,
          -3.832190229838893e-001,4.692747154481086e-001,7.080678906632436e-001},
          {6.526277468276821e-001,-3.742175581148609e-001,4.660044791174469e-001,
          7.100856600151843e-001},{6.321821747106798e-001,-3.654206137379463e-001,
          4.627814076433050e-001,7.121080509330365e-001},{6.125084635885677e-001,
          -3.568220214675603e-001,4.596049718063618e-001,7.141351277882394e-001},
          {5.935779282079696e-001,-3.484157741858985e-001,4.564746599098449e-001,
          7.161669566030067e-001},{5.753631542423251e-001,-3.401960190266252e-001,
          4.533899778172436e-001,7.182036051137486e-001},{5.578379080634269e-001,
          -3.321570502209607e-001,4.503504490128227e-001,7.202451428377567e-001},
          {5.409772378490252e-001,-3.242933053050536e-001,4.473556146977857e-001,
          7.222916411433742e-001},{5.247573236514336e-001,-3.165993558732946e-001,
          4.444050338858265e-001,7.243431733238683e-001},{5.091553583120583e-001,
          -3.090699001449694e-001,4.414982835460874e-001,7.263998146752452e-001},
          {4.941496650179276e-001,-3.016997600084108e-001,4.386349587914129e-001,
          7.284616425782706e-001},{4.797195893441171e-001,-2.944838727153321e-001,
          4.358146730674687e-001,7.305287365849668e-001},{4.658454159189164e-001,
          -2.874172838318425e-001,4.330370583894325e-001,7.326011785098984e-001},
          {4.525084286368681e-001,-2.804951429879555e-001,4.303017656275229e-001,
          7.346790525265499e-001},{4.396907169839087e-001,-2.737126945641282e-001,
          4.276084648056008e-001,7.367624452691657e-001},{4.273754112892716e-001,
          -2.670652769945731e-001,4.249568454808719e-001,7.388514459404123e-001},
          {4.155464136560620e-001,-2.605483107212597e-001,4.223466171076617e-001,
          7.409461464252765e-001},{4.041884380013781e-001,-2.541572941142669e-001,
          4.197775095020359e-001,7.430466414116397e-001},{3.932870578905699e-001,
          -2.478877986781748e-001,4.172492733426532e-001,7.451530285179989e-001},
          {3.828286467935785e-001,-2.417354613025955e-001,4.147616807084972e-001,
          7.472654084288583e-001},{3.728003160347851e-001,-2.356959769333881e-001,
          4.123145256850712e-001,7.493838850383399e-001},{3.631899496533657e-001,
          -2.297650933614912e-001,4.099076250447146e-001,7.515085656026301e-001},
          {3.539861802648743e-001,-2.239386040074048e-001,4.075408189796285e-001,
          7.536395609019181e-001},{3.451784395377778e-001,-2.182123418981641e-001,
          4.052139719155342e-001,7.557769854125394e-001},{3.367567308090195e-001,
          -2.125821679594597e-001,4.029269733841373e-001,7.579209574901114e-001},
          {3.287119984291083e-001,-2.070439719882496e-001,4.006797390434232e-001,
          7.600715995645146e-001},{3.210357123305466e-001,-2.015936547953648e-001,
          3.984722116891958e-001,7.622290383476353e-001},{3.137202183461909e-001,
          -1.962271288064989e-001,3.963043624830746e-001,7.643934050549112e-001},
          {3.067585099743523e-001,-1.909403032422600e-001,3.941761921936149e-001,
          7.665648356417625e-001},{3.001443621673701e-001,-1.857290784658068e-001,
          3.920877326274295e-001,7.687434710561505e-001},{2.938722968103650e-001,
          -1.805893348436715e-001,3.900390481551737e-001,7.709294575085852e-001},
          {2.879376064535850e-001,-1.755169227244073e-001,3.880302373994634e-001,
          7.731229467610636e-001},{2.823363799596992e-001,-1.705076514427414e-001,
          3.860614350793771e-001,7.753240964365381e-001},{2.770447885477484e-001,
          -1.655569164888013e-001,3.841328126374664e-001,7.775330703507134e-001},
          {2.720819561369693e-001,-1.606606552857484e-001,3.822445839373179e-001,
          7.797500388681229e-001},{2.674653113933975e-001,-1.558148244688060e-001,
          3.803970049600344e-001,7.819751792846662e-001},{2.632075572084795e-001,
          -1.509385793371179e-001,3.785610382540837e-001,7.842454607100902e-001},
          {2.593330708233911e-001,-1.461744656606448e-001,3.767934811627194e-001,
          7.864914180935034e-001},{2.558290465748489e-001,-1.415248268445518e-001,
          3.750961409463570e-001,7.887085704890959e-001},{2.526817192496980e-001,
          -1.369820489145218e-001,3.734669282636506e-001,7.908973098182515e-001},
          {2.498786057610260e-001,-1.325389045601303e-001,3.719038491266883e-001,
          7.930580228550742e-001},{2.474085267751381e-001,-1.281885279708624e-001,
          3.704049999203535e-001,7.951910912877180e-001},{2.452614346122534e-001,
          -1.239243863767887e-001,3.689685626896172e-001,7.972968917785244e-001},
          {2.434284168742104e-001,-1.197402577787785e-001,3.675928007377211e-001,
          7.993757960231415e-001},{2.419015528622072e-001,-1.156302067314484e-001,
          3.662760544672607e-001,8.014281708086085e-001},{2.406739735415517e-001,
          -1.115885662953330e-001,3.650167374937393e-001,8.034543780705155e-001},
          {2.397396425750860e-001,-1.076099145903805e-001,3.638133329505207e-001,
          8.054547749492954e-001},{2.390934524095718e-001,-1.036890607294186e-001,
          3.626643900605662e-001,8.074297138456664e-001},{2.387311440820192e-001,
          -9.982102656507678e-002,3.615685208685295e-001,8.093795424753392e-001},
          {2.386492238235064e-001,-9.600103014473647e-002,3.605243971745443e-001,
          8.113046039230223e-001},{2.388449516089252e-001,-9.222447197204525e-002,
          3.595307476540946e-001,8.132052366957213e-001},{2.393163909364370e-001,
          -8.848692277977732e-002,3.585863551396568e-001,8.150817747754554e-001},
          {2.400622369503420e-001,-8.478410739725760e-002,3.576900540368518e-001,
          8.169345476714047e-001},{2.410819093473880e-001,-8.111189587840884e-002,
          3.568407279242882e-001,8.187638804714793e-001},{2.423755227229712e-001,
          -7.746629151231736e-002,3.560373072597538e-001,8.205700938934316e-001},
          {2.439437903097885e-001,-7.384341869908345e-002,3.552787672180464e-001,
          8.223535043354756e-001},{2.457880841300521e-001,-7.023951497682976e-002,
          3.545641256673672e-001,8.241144239264422e-001},{2.479104628840352e-001,
          -6.665092199321671e-002,3.538924412424807e-001,8.258531605755627e-001},
          {2.503135014091841e-001,-6.307407345043224e-002,3.532628115142414e-001,
          8.275700180218225e-001},{2.530004736674350e-001,-5.950549117251455e-002,
          3.526743712965212e-001,8.292652958829614e-001},{2.559752230366451e-001,
          -5.594177412647441e-002,3.521262910014856e-001,8.309392897040731e-001},
          {2.592422310622398e-001,-5.237959267551613e-002,3.516177751155357e-001,
          8.325922910059250e-001},{2.628065531267236e-001,-4.881568009199424e-002,
          3.511480607379117e-001,8.342245873328724e-001},{2.666738567720074e-001,
          -4.524682709852055e-002,3.507164162151467e-001,8.358364623005091e-001},
          {2.708504884539047e-001,-4.166987608244501e-002,3.503221398361055e-001,
          8.374281956429612e-001},{2.753433071879429e-001,-3.808171199029962e-002,
          3.499645585884929e-001,8.390000632598814e-001},{2.801599037196582e-001,
          -3.447926077765695e-002,3.496430270117127e-001,8.405523372631366e-001},
          {2.853083921105367e-001,-3.085947960555782e-002,3.493569260683962e-001,
          8.420852860231959e-001},{2.907976806313661e-001,-2.721935651026936e-002,
          3.491056621189848e-001,8.435991742151832e-001},{2.966371720783940e-001,
          -2.355589928273860e-002,3.488886658983132e-001,8.450942628646833e-001},
          {3.028370462889118e-001,-1.986613619310260e-002,3.487053916015641e-001,
          8.465708093931487e-001},{3.094081917821564e-001,-1.614710890028537e-002,
          3.485553159714244e-001,8.480290676631032e-001},{3.163620364755382e-001,
          -1.239586542273052e-002,3.484379374449686e-001,8.494692880229420e-001},
          {3.237109529050010e-001,-8.609462422221065e-003,3.483527753712113e-001,
          8.508917173514538e-001},{3.314679191860245e-001,-4.784954014192033e-003,
          3.482993692124245e-001,8.522965991020172e-001},{3.396466627040896e-001,
          -9.193907609769285e-004,3.482772778363755e-001,8.536841733464595e-001},
          {3.482573639782674e-001,2.990234168183047e-003,3.482860786936271e-001,
          8.550546768185773e-001},{3.573435870189764e-001,6.946512750374164e-003,
          3.483253684425491e-001,8.564083429573437e-001},{3.668456015562940e-001,
          1.095357014539229e-002,3.483947564910607e-001,8.577454019497183e-001},{
          3.768666032330697e-001,1.501283216327796e-002,3.484938791513281e-001,
          8.590660807729463e-001},{3.872502858387614e-001,1.912964792928498e-002,
          3.486223735021649e-001,8.603706032376969e-001},{3.978260416786913e-001,
          2.330753852682181e-002,3.487799024495905e-001,8.616591900276418e-001},{
          4.132101935168742e-001,2.749646402204903e-002,3.489662637387618e-001,
          8.629320587422359e-001},{4.184545943199193e-001,3.190595255298934e-002,
          3.491805658203261e-001,8.641894239321634e-001},{4.362824413649418e-001,
          3.618297429472679e-002,3.494237843557785e-001,8.654314971271906e-001},{
          4.482605603718436e-001,4.065324239822417e-002,3.496942108258070e-001,
          8.666584870394793e-001},{4.622330316257493e-001,4.516985999042349e-002,
          3.499923862104077e-001,8.678705992003968e-001},{4.768622286036364e-001,
          4.976455970008947e-002,3.503178747560284e-001,8.690680364449238e-001},{
          4.921745241725010e-001,5.444066904880778e-002,3.506704352553635e-001,
          8.702509987148481e-001},{5.081973839874943e-001,5.920156908963686e-002,
          3.510498387111092e-001,8.714196831463595e-001},{5.249595720422131e-001,
          6.405069424380409e-002,3.514558679881682e-001,8.725742841082431e-001},{
          5.424905347559086e-001,6.899154202103656e-002,3.518883174461503e-001,
          8.737149932396073e-001},{5.608210429624480e-001,7.402766394847896e-002,
          3.523469926362302e-001,8.748419994872339e-001},{5.799822127345404e-001,
          7.916267804090524e-002,3.528317099190555e-001,8.759554891424319e-001},{
          6.004830519290501e-001,8.439587774540482e-002,3.533423051135982e-001,
          8.770556458774835e-001},{6.225303530662254e-001,8.972780116427569e-002,
          3.538786230951095e-001,8.781426507816023e-001},{6.463610750175416e-001,
          9.515751995040138e-002,3.544405351945316e-001,8.792166823964106e-001},{
          6.722471844825647e-001,1.012426405366949e-001,3.550840958618995e-001,
          8.803766342353709e-001},{7.038651077223995e-001,1.075468486721946e-001,
          3.557708387936919e-001,8.815427655306450e-001},{7.251393379424058e-001,
          1.142877363408631e-001,3.565023423314873e-001,8.827152564770329e-001},{
          7.642524395207234e-001,1.210851585997144e-001,3.572820846551236e-001,
          8.838942963354349e-001},{7.967358094127701e-001,1.283613467605374e-001,
          3.581108233391086e-001,8.850800842450453e-001},{8.338699793357391e-001,
          1.359403244468062e-001,3.589921197256534e-001,8.862728294157951e-001},{
          8.739157757386329e-001,1.438882241405927e-001,3.599284806768164e-001,
          8.874727525584538e-001},{9.171674240348069e-001,1.522338614296611e-001,
          3.609228706786188e-001,8.886800863594736e-001},{9.639566900146391e-001,
          1.610089362976866e-001,3.619784903446237e-001,8.898950765022780e-001},{
          1.014658245902457e+000,1.702483983739543e-001,3.630988007319633e-001,
          8.911179826999973e-001},{1.069696500740114e+000,1.799908580537642e-001,
          3.642875508037436e-001,8.923490798353885e-001},{1.129553586989754e+000,
          1.902790629163924e-001,3.655488084631469e-001,8.935886592217480e-001},{
          1.194778730658964e+000,2.011604495101677e-001,3.668869957374470e-001,
          8.948370300007601e-001},{1.265999604715109e+000,2.126877807800234e-001,
          3.683069287846877e-001,8.960945206957666e-001},{1.343935603653501e+000,
          2.249198920053187e-001,3.698138634914989e-001,8.973614809419384e-001},{
          1.429414190654427e+000,2.379225551311867e-001,3.714135476414637e-001,
          8.986382834183703e-001},{1.523389963185659e+000,2.517694999845817e-001,
          3.731122807290428e-001,8.999253260114501e-001},{1.626967987465184e+000,
          2.665436073713666e-001,3.749169828303232e-001,9.012230342439003e-001},{
          1.741431587530111e+000,2.823383211013446e-001,3.768352741049624e-001,
          9.025318640101248e-001},{1.868275831068914e+000,2.992593167802703e-001,
          3.788755669150111e-001,9.038523046659105e-001},{2.009247253435497e+000,
          3.174264875499637e-001,3.810471728982508e-001,9.051848825296176e-001},{
          2.166391087168643e+000,3.369763061640536e-001,3.833604278633734e-001,
          9.065301648630008e-001},{2.349101814944340e+000,3.579901484020978e-001,
          3.858270141057033e-001,9.078887644133517e-001},{2.531929749610997e+000,
          3.810226519207810e-001,3.884588003903566e-001,9.092613446151097e-001},{
          2.767188003052499e+000,4.055286490868840e-001,3.912727602985009e-001,
          9.106486255694756e-001},{3.016217450507473e+000,4.324970058988013e-001,
          3.942818356613025e-001,9.120513915273417e-001},{3.303389261208595e+000,
          4.618306962042632e-001,3.975063679209401e-001,9.134704971443424e-001},{
          3.631549916126941e+000,4.939281587987267e-001,4.009666241813926e-001,
          9.149068790734376e-001},{4.008482779288279e+000,5.291694395449363e-001,
          4.046862435629703e-001,9.163615656490546e-001},{4.443846750534742e+000,
          5.680030693371376e-001,4.086922722032931e-001,9.178356901063999e-001},{
          4.949731196871531e+000,6.109615086616571e-001,4.130158106084739e-001,
          9.193305059167702e-001},{5.541409643335976e+000,6.586807872014066e-001,
          4.176928163006187e-001,9.208474050863027e-001},{6.238372675901206e+000,
          7.119257358914435e-001,4.227651072505875e-001,9.223879401412338e-001},{
          7.065766386999059e+000,7.716226265930281e-001,4.282816280479594e-001,
          9.239538507389419e-001},{8.056416694649682e+000,8.389018864217007e-001,
          4.343000631122791e-001,9.255470961380512e-001},{9.253723462876144e+000,
          9.151544772853499e-001,4.408889145566523e-001,9.271698951653059e-001},{
          1.071584561649215e+001,1.002107267105648e+000,4.481302092757962e-001,
          9.288247758812972e-001},{1.253214033900518e+001,1.101808734948876e+000,
          4.561233615389971e-001,9.305146379456196e-001},{1.477897062418504e+001,
          1.217485995326902e+000,4.649880047213420e-001,9.322428318295400e-001},{
          1.766908561621815e+001,1.351719349121241e+000,4.748770243380275e-001,
          9.340132606989513e-001},{2.138486266524388e+001,1.509883643514754e+000,
          4.859733964211321e-001,9.358305148113010e-001},{2.628754637519723e+001,
          1.697451202895145e+000,4.985169448163012e-001,9.377000442304936e-001},{
          3.289856626810693e+001,1.922256316265470e+000,5.128135873286412e-001,
          9.396284013530487e-001},{4.205492727375339e+001,2.194581754116503e+000,
          5.292667488868058e-001,9.416235666436306e-001},{5.514876558372439e+001,
          2.528063775283584e+000,5.484198767596652e-001,9.436954119389488e-001},{
          7.462633427723064e+001,2.940368260878233e+000,5.710261164676607e-001,
          9.458563710445010e-001},{1.050184348991562e+002,3.453462949853480e+000,
          5.981648072853771e-001,9.481224427923183e-001},{1.555495965673860e+002,
          4.087350044552481e+000,6.314608944041468e-001,9.505147490704314e-001},{
          2.376339218745235e+002,4.944818621598538e+000,6.732270162071558e-001,
          9.530620700536182e-001},{3.778931105604901e+002,6.223871768745157e+000,
          7.270999546100488e-001,9.558052023498382e-001},{6.392510022959895e+002,
          8.369904048358965e+000,7.988184626507228e-001,9.588050299738381e-001},{
          1.175214125741375e+003,9.200515050596998e+000,8.756729054310770e-001,
          9.612797327158309e-001},{2.404391521144330e+003,8.351201828031256e+000,
          9.861434004464017e-001,9.640175305607321e-001},{5.280178052685498e+003,
          7.052137331238425e+000,1.155225153751228e+000,9.672632864915536e-001},{
          1.195185547887987e+004,1.436266930835130e+001,1.399691464502437e+000,
          9.709593911907505e-001},{2.738163303986884e+004,3.128192142643308e+001,
          1.713086045447508e+000,9.743575124934957e-001},{6.813367902015221e+004,
          2.245954110359909e+001,2.098339086431259e+000,9.771334786926074e-001},{
          1.719549070722432e+005,-4.567581958920449e+001,2.615376615379705e+000,
          9.796670698052391e-001},{4.072927452321919e+005,-5.632241381576800e+001,
          3.317614691567385e+000,9.823925310148151e-001},{9.174334612404156e+005,
          5.978559879130236e+002,4.355002072346393e+000,9.857167565271496e-001},{
          1.863229120547296e+006,1.146180212440694e+003,5.277266586606779e+000,
          9.875311446084982e-001},{4.352587282561689e+006,3.435290432960140e+002,
          6.013725056438802e+000,9.883772225822374e-001},{1.294720023425507e+007,
          -1.952316825630777e+003,7.598845776825704e+000,9.898384444052550e-001},
          {4.368922580067658e+007,-9.798242269889981e+003,1.040268251220144e+001,
          9.914339076346728e-001},{1.412163489780696e+008,-7.929973860030538e+003,
          1.348982180175535e+001,9.935448201066974e-001},{3.054619794272863e+008,
          1.543075051399528e+004,1.697364990930417e+001,9.950069147908655e-001},{
          2.513842293016319e+012,-1.192762798969687e+008,1.413409677685541e+003,
          9.959656981502529e-001}};
      constant Real[Ninterval, 4] hvcoef={{3.418719024828741e+009,-6.021500887201227e+005,
          1.372239895761628e+002,8.595917694423992e-001},{3.054310565670096e+009,
          -5.705938691014666e+005,1.340221742560438e+002,8.599600896018758e-001},
          {2.680326377990845e+009,-5.429463074242631e+005,1.313866487967003e+002,
          8.602696780537780e-001},{2.303779913727746e+009,-4.921392562770898e+005,
          1.256410111646926e+002,8.609751352703259e-001},{1.980129780009944e+009,
          -4.460960668130493e+005,1.201498857905039e+002,8.616864231415984e-001},
          {1.702029460983321e+009,-4.043727836958034e+005,1.149020405579111e+002,
          8.624035880113733e-001},{1.463001841507740e+009,-3.665601613605881e+005,
          1.098863963717011e+002,8.631267209320035e-001},{1.257578888846852e+009,
          -3.322921639231642e+005,1.050926221990266e+002,8.638558834346060e-001},
          {1.081020151317802e+009,-3.012351730865443e+005,1.005107466086200e+002,
          8.645911520991180e-001},{9.292788756444820e+008,-2.730884033777993e+005,
          9.613135173247430e+001,8.653325887404106e-001},{7.988592072529383e+008,
          -2.475781452734592e+005,9.194535249523334e+001,8.660802702489665e-001},
          {6.867517994789405e+008,-2.244567953084133e+005,8.794416126688296e+001,
          8.668342586830016e-001},{5.903993090097249e+008,-2.035004093727184e+005,
          8.411943557310387e+001,8.675946462312558e-001},{5.075739967569540e+008,
          -1.845052128758624e+005,8.046328280923146e+001,8.683615102740704e-001},
          {4.363803981359935e+008,-1.672877964071615e+005,7.696824858217629e+001,
          8.691349132544352e-001},{3.751811369685484e+008,-1.516810195389626e+005,
          7.362707753938845e+001,8.699149478489386e-001},{3.225757764446142e+008,
          -1.375342639486588e+005,7.043297686856677e+001,8.707016766933142e-001},
          {2.775632019164234e+008,-1.247180148068888e+005,6.737939987231324e+001,
          8.714951927224426e-001},{2.395047937120040e+008,-1.131276569986563e+005,
          6.446029045026621e+001,8.722955738779207e-001},{2.072894646248908e+008,
          -1.026516293164950e+005,6.166981089182345e+001,8.731028981691641e-001},
          {1.799822430252400e+008,-9.333464537306117e+004,5.905402123864285e+001,
          8.739009311042776e-001},{1.566914275764715e+008,-8.525624087305536e+004,
          5.668205775153147e+001,8.746623083398238e-001},{1.365420998913238e+008,
          -7.792553082576592e+004,5.442145459347433e+001,8.754247647693702e-001},
          {1.190945653358361e+008,-7.126911585540987e+004,5.226630523340383e+001,
          8.761882924491433e-001},{1.039717710388903e+008,-6.522111942123056e+004,
          5.021104820325436e+001,8.769528833328070e-001},{9.085238634246235e+007,
          -5.972253866425365e+004,4.825044784911309e+001,8.777185292709222e-001},
          {7.945976285392952e+007,-5.472031010955200e+004,4.637957044109646e+001,
          8.784852220104472e-001},{6.955828718931271e+007,-5.016689134145316e+004,
          4.459376897054184e+001,8.792529531942909e-001},{6.094432939926156e+007,
          -4.601943690028419e+004,4.288866070740672e+001,8.800217143609221e-001},
          {5.344423567813414e+007,-4.223952028854783e+004,4.126011513927500e+001,
          8.807914969440196e-001},{4.690790693157751e+007,-3.879248539780872e+004,
          3.970423429382681e+001,8.815622922721852e-001},{4.120636628965157e+007,
          -3.564715093489797e+004,3.821734102078233e+001,8.823340915687035e-001},
          {3.622900976104898e+007,-3.277545861657008e+004,3.679596497500520e+001,
          8.831068859513512e-001},{3.187967036644944e+007,-3.015203386420734e+004,
          3.543682780067873e+001,8.838806664322682e-001},{2.807613578829654e+007,
          -2.775406516810798e+004,3.413683515396600e+001,8.846554239178743e-001},
          {2.474692036340034e+007,-2.556090563904067e+004,3.289306188961926e+001,
          8.854311492088450e-001},{2.183049697968674e+007,-2.355393699418945e+004,
          3.170274439968934e+001,8.862078330001338e-001},{1.927347019859899e+007,
          -2.171631328406215e+004,3.056326941876671e+001,8.869854658810615e-001},
          {1.702981751333125e+007,-2.003282321642497e+004,2.947216618883089e+001,
          8.877640383354423e-001},{1.505930006594837e+007,-1.848966312427858e+004,
          2.842709641996708e+001,8.885435407417774e-001},{1.332750187738691e+007,
          -1.707439527076683e+004,2.742584914811091e+001,8.893239633734973e-001},
          {1.180409908173095e+007,-1.577569115143173e+004,2.646632952888870e+001,
          8.901052963992563e-001},{1.046300091887967e+007,-1.458332162795913e+004,
          2.554655563707482e+001,8.908875298832820e-001},{9.281478450960947e+006,
          -1.348800001880907e+004,2.466464976005302e+001,8.916706537857801e-001},
          {8.239677365327914e+006,-1.248128939600677e+004,2.381883271013455e+001,
          8.924546579633877e-001},{7.320375014028021e+006,-1.155554134563862e+004,
          2.300741887638321e+001,8.932395321696804e-001},{6.508564560677815e+006,
          -1.070380653674440e+004,2.222881017899560e+001,8.940252660557324e-001},
          {5.791092789698311e+006,-9.919758901292089e+003,2.148149097099744e+001,
          8.948118491707285e-001},{5.156530698970656e+006,-9.197655328178946e+003,
          2.076402412172987e+001,8.955992709626238e-001},{4.594876945645325e+006,
          -8.532266312855607e+003,2.007504587669628e+001,8.963875207788541e-001},
          {4.097381930359949e+006,-7.918830001821591e+003,1.941326196319786e+001,
          8.971765878670993e-001},{3.656383109691083e+006,-7.353008221313214e+003,
          1.877744374229622e+001,8.979664613760915e-001},{3.265186685897589e+006,
          -6.830850362101170e+003,1.816642466513669e+001,8.987571303564701e-001},
          {2.917909279006009e+006,-6.348750551159110e+003,1.757909652930962e+001,
          8.995485837616878e-001},{2.609402060809861e+006,-5.903421540440110e+003,
          1.701440658291143e+001,9.003408104489590e-001},{2.335140768578981e+006,
          -5.491861404071661e+003,1.647135426048376e+001,9.011337991802549e-001},
          {2.091146761265873e+006,-5.111327878744832e+003,1.594898842221833e+001,
          9.019275386233419e-001},{1.873929941363969e+006,-4.759317050348291e+003,
          1.544640477086862e+001,9.027220173528617e-001},{1.680420118072653e+006,
          -4.433539445570736e+003,1.496274316343266e+001,9.035172238514534e-001},
          {1.507901694720669e+006,-4.131898344129412e+003,1.449718519666387e+001,
          9.043131465109192e-001},{1.354001888305344e+006,-3.852479913913011e+003,
          1.404895235600572e+001,9.051097736334237e-001},{1.216613076782086e+006,
          -3.593527497504629e+003,1.361730330460103e+001,9.059070934327353e-001},
          {1.093879091249427e+006,-3.353433477948261e+003,1.320153238778303e+001,
          9.067050940355028e-001},{9.841701033319680e+005,-3.130726664519008e+003,
          1.280096767078483e+001,9.075037634825668e-001},{8.860331097677258e+005,
          -2.924054367261154e+003,1.241496883316571e+001,9.083030897303053e-001},
          {7.981918624483937e+005,-2.732178555007192e+003,1.204292601630526e+001,
          9.091030606520103e-001},{7.195149237111326e+005,-2.553962145681973e+003,
          1.168425789742630e+001,9.099036640393030e-001},{6.490013601859985e+005,
          -2.388361283829961e+003,1.133841032591765e+001,9.107048876035626e-001},
          {5.857619638546082e+005,-2.234416399557152e+003,1.100485487724143e+001,
          9.115067189773976e-001},{5.290116852906891e+005,-2.091246746576212e+003,
          1.068308765988832e+001,9.123091457161393e-001},{4.780525034495146e+005,
          -1.958041849488108e+003,1.037262790050762e+001,9.131121552993566e-001},
          {4.322639370581367e+005,-1.834056004290414e+003,1.007301685198876e+001,
          9.139157351323971e-001},{3.910966072603547e+005,-1.718603636258115e+003,
          9.783816732166672e+000,9.147198725479478e-001},{3.540614298472962e+005,
          -1.611053173940656e+003,9.504609563667259e+000,9.155245548076196e-001},
          {3.207227948052809e+005,-1.510822716204718e+003,9.234996229867011e+000,
          9.163297691035424e-001},{2.906939935011917e+005,-1.417376462988183e+003,
          8.974595578775290e+000,9.171355025599859e-001},{2.636303793313987e+005,
          -1.330220294731111e+003,8.723043464518558e+000,9.179417422349862e-001},
          {2.392237992914084e+005,-1.248898152561119e+003,8.479991917683572e+000,
          9.187484751219944e-001},{2.172016592892052e+005,-1.172990137423081e+003,
          8.245108450295883e+000,9.195556881515287e-001},{1.973183307798826e+005,
          -1.102107553390677e+003,8.018075097948199e+000,9.203633681928409e-001},
          {1.793561202392878e+005,-1.035892282235062e+003,7.798587940806567e+000,
          9.211715020555885e-001},{1.631202275964593e+005,-9.740132377691543e+002,
          7.586356268239432e+000,9.219800764915146e-001},{1.484359488552449e+005,
          -9.161641833684364e+002,7.381101972870521e+000,9.227890781961310e-001},
          {1.351478825430181e+005,-8.620624032575208e+002,7.182559013917762e+000,
          9.235984938104057e-001},{1.231162519279247e+005,-8.114460113623057e+002,
          6.990472737830404e+000,9.244083099224488e-001},{1.122162968415116e+005,
          -7.640729129202056e+002,6.804599425001765e+000,9.252185130692011e-001},
          {1.023361278541669e+005,-7.197189192332255e+002,6.624705719443992e+000,
          9.260290897381156e-001},{9.337545308914331e+004,-6.781764164807573e+002,
          6.450568157340423e+000,9.268400263688406e-001},{8.524409931480192e+004,
          -6.392529690945879e+002,6.281972695119674e+000,9.276513093548937e-001},
          {7.786169679505364e+004,-6.027705240567450e+002,6.118714310110324e+000,
          9.284629250453276e-001},{7.115526319693035e+004,-5.685635173312871e+002,
          5.960596482051478e+000,9.292748597463896e-001},{6.505997236969629e+004,
          -5.364788721222958e+002,5.807430942404182e+000,9.300870997231673e-001},
          {5.951708365389362e+004,-5.063742243350591e+002,5.659037156140247e+000,
          9.308996312012252e-001},{5.447396049317387e+004,-4.781175751106457e+002,
          5.515242057235346e+000,9.317124403682275e-001},{4.988309687503692e+004,
          -4.515862663149072e+002,5.375879663496088e+000,9.325255133755377e-001},
          {4.570187946719245e+004,-4.266664669336558e+002,5.240790784971295e+000,
          9.333388363398144e-001},{4.189173749451424e+004,-4.032522688537788e+002,
          5.109822677685524e+000,9.341523953445763e-001},{3.841803267326960e+004,
          -3.812453207114073e+002,4.982828795533794e+000,9.349661764417548e-001},
          {3.524944619171859e+004,-3.605540968469249e+002,4.859668478530708e+000,
          9.357801656532230e-001},{3.235775262493093e+004,-3.410934828706502e+002,
          4.740206710402045e+000,9.365943489722998e-001},{2.971742749441942e+004,
          -3.227842408832863e+002,4.624313855555895e+000,9.374087123652322e-001},
          {2.730548973676348e+004,-3.055526590426766e+002,4.511865434271594e+000,
          9.382232417726517e-001},{2.510105818186500e+004,-2.893300011512208e+002,
          4.402741870199007e+000,9.390379231110015e-001},{2.308534946321419e+004,
          -2.740523193986549e+002,4.296828310919137e+000,9.398527422739368e-001},
          {2.124130171607308e+004,-2.596599553908384e+002,4.194014387044316e+000,
          9.406676851337009e-001},{1.955351648008638e+004,-2.460973335068810e+002,
          4.094194041865801e+000,9.414827375424566e-001},{1.800800960501098e+004,
          -2.333125885677086e+002,3.997265326620004e+000,9.422978853336017e-001},
          {1.659212825450676e+004,-2.212573565008916e+002,3.903130237563751e+000,
          9.431131143230387e-001},{1.529440870224837e+004,-2.098865061302326e+002,
          3.811694539213896e+000,9.439284103104196e-001},{1.410443891357347e+004,
          -1.991578904408298e+002,3.722867600418599e+000,9.447437590803492e-001},
          {1.301277276409646e+004,-1.890321548645134e+002,3.636562246885636e+000,
          9.455591464035549e-001},{1.201083501871745e+004,-1.794725379233024e+002,
          3.552694612840763e+000,9.463745580380161e-001},{1.109084452413765e+004,
          -1.704446937374686e+002,3.471184001267795e+000,9.471899797300593e-001},
          {1.024571699447709e+004,-1.619165024398652e+002,3.391952746393233e+000,
          9.480053972154118e-001},{9.469018895726013e+003,-1.538579391475356e+002,
          3.314926093557165e+000,9.488207962202151e-001},{8.754902558872502e+003,
          -1.462409215712277e+002,3.240032074179658e+000,9.496361624619982e-001},
          {8.098027596251695e+003,-1.390391545991529e+002,3.167201386524235e+000,
          9.504514816506080e-001},{7.493554482491891e+003,-1.322280542592093e+002,
          3.096367297109474e+000,9.512667394890960e-001},{6.937064709883011e+003,
          -1.257845873818821e+002,3.027465520734622e+000,9.520819216745656e-001},
          {6.424526737209824e+003,-1.196871778019022e+002,2.960434126813456e+000,
          9.528970138989733e-001},{5.952271592786267e+003,-1.139156214553171e+002,
          2.895213446237914e+000,9.537120018498824e-001},{5.516955702461954e+003,
          -1.084509856459832e+002,2.831745975134339e+000,9.545268712111753e-001},
          {5.115516193281917e+003,-1.032755079240082e+002,2.769976284441141e+000,
          9.553416076637196e-001},{4.745169939215222e+003,-9.837255018506627e+001,
          2.709850945954599e+000,9.561561968859864e-001},{4.403364440818750e+003,
          -9.372649095365175e+001,2.651318440509086e+000,9.569706245546216e-001},
          {4.087776994953164e+003,-8.932268622183530e+001,2.594329091528175e+000,
          9.577848763449695e-001},{3.796275090953450e+003,-8.514737826931575e+001,
          2.538834982469134e+000,9.585989379315498e-001},{3.526914794156184e+003,
          -8.118766109964749e+001,2.484789895870575e+000,9.594127949884909e-001},
          {3.277915891545599e+003,-7.743141105727378e+001,2.432149240012017e+000,
          9.602264331899009e-001},{3.047647797709957e+003,-7.386723790355531e+001,
          2.380869986715188e+000,9.610398382102077e-001},{2.834618789109123e+003,
          -7.048444111730269e+001,2.330910611325176e+000,9.618529957244332e-001},
          {2.637461957139128e+003,-6.727296213941031e+001,2.282231032479775e+000,
          9.626658914084311e-001},{2.454924432505965e+003,-6.422334375285149e+001,
          2.234792556533058e+000,9.634785109390691e-001},{2.285857047983956e+003,
          -6.132669141282386e+001,2.188557823874969e+000,9.642908399943569e-001},
          {2.129208461400737e+003,-5.857464160828975e+001,2.143490758529177e+000,
          9.651028642535350e-001},{1.984008976569308e+003,-5.595931630261283e+001,
          2.099556514899462e+000,9.659145693971051e-001},{1.849374081739265e+003,
          -5.347331044763390e+001,2.056721437955760e+000,9.667259411068088e-001},
          {1.724488078442418e+003,-5.110964503808447e+001,2.014953009798691e+000,
          9.675369650655664e-001},{1.608601317477169e+003,-4.886174815058493e+001,
          1.974219811466410e+000,9.683476269573521e-001},{1.501028549020432e+003,
          -4.672343509185431e+001,1.934491482280281e+000,9.691579124670265e-001},
          {1.401134787382134e+003,-4.468886871440314e+001,1.895738673701978e+000,
          9.699678072801187e-001},{1.308339375774190e+003,-4.275255490962074e+001,
          1.857933019816026e+000,9.707772970825509e-001},{1.222108228029781e+003,
          -4.090931316053910e+001,1.821047094970709e+000,9.715863675603226e-001},
          {1.141946857646252e+003,-3.915425280944660e+001,1.785054378319671e+000,
          9.723950043991366e-001},{1.067402981642193e+003,-3.748276735761835e+001,
          1.749929225855599e+000,9.732031932839743e-001},{9.980583833327522e+002,
          -3.589050668361879e+001,1.715646831952266e+000,9.740109198986281e-001},
          {9.335284820523360e+002,-3.437336708372298e+001,1.682183202119270e+000,
          9.748181699251741e-001},{8.734576475077868e+002,-3.292747251868510e+001,
          1.649515121362005e+000,9.756249290433984e-001},{8.175192743315979e+002,
          -3.154916618621505e+001,1.617620128283343e+000,9.764311829301763e-001},
          {7.654113989059594e+002,-3.023499246048811e+001,1.586476484703391e+000,
          9.772369172587978e-001},{7.168549261326022e+002,-2.898168620253393e+001,
          1.556063150963355e+000,9.780421176982415e-001},{6.715934871869085e+002,
          -2.778616486120676e+001,1.526359761996525e+000,9.788467699124019e-001},
          {6.293887964147959e+002,-2.664551120825474e+001,1.497346599661789e+000,
          9.796508595592697e-001},{5.900219253252941e+002,-2.555697044888610e+001,
          1.469004573803481e+000,9.804543722900537e-001},{5.532898465620945e+002,
          -2.451793564352644e+001,1.441315196411080e+000,9.812572937482607e-001},
          {5.190052723541189e+002,-2.352594208801040e+001,1.414260562393762e+000,
          9.820596095687246e-001},{4.869947579083630e+002,-2.257865727178197e+001,
          1.387823327724877e+000,9.828613053765841e-001},{4.570979184019152e+002,
          -2.167387417193229e+001,1.361986690424303e+000,9.836623667862149e-001},
          {4.291663436174557e+002,-2.080950381084881e+001,1.336734371291882e+000,
          9.844627794001081e-001},{4.030627155807368e+002,-1.998356855725961e+001,
          1.312050595629924e+000,9.852625288077083e-001},{3.786596714281382e+002,
          -1.919419513223841e+001,1.287920075411151e+000,9.860616005841896e-001},
          {3.558394376680569e+002,-1.843960978347813e+001,1.264327993086148e+000,
          9.868599802892032e-001},{3.344927057914483e+002,-1.771813153942693e+001,
          1.241259984529670e+000,9.876576534655511e-001},{3.145183552120479e+002,
          -1.702816801518539e+001,1.218702124146350e+000,9.884546056378373e-001},
          {2.958222994740287e+002,-1.636820898671438e+001,1.196640908911924e+000,
          9.892508223110540e-001},{2.783177026940484e+002,-1.573682393871353e+001,
          1.175063245364513e+000,9.900462889691248e-001},{2.619234894737551e+002,
          -1.513265481908928e+001,1.153956433685712e+000,9.908409910734041e-001},
          {2.465648216723021e+002,-1.455441492324349e+001,1.133308156602596e+000,
          9.916349140611203e-001},{2.321720020070755e+002,-1.400088277850550e+001,
          1.113106464537580e+000,9.924280433437820e-001},{2.186803377779052e+002,
          -1.347089951583520e+001,1.093339764259556e+000,9.932203643055251e-001},
          {2.060297477025833e+002,-1.296336530904619e+001,1.073996806711151e+000,
          9.940118623014244e-001},{1.941643451397283e+002,-1.247723593031160e+001,
          1.055066675366082e+000,9.948025226557459e-001},{1.830322811700511e+002,
          -1.201152018223532e+001,1.036538775470238e+000,9.955923306601620e-001},
          {1.725851592956317e+002,-1.156527611442914e+001,1.018402822732162e+000,
          9.963812715719111e-001},{1.627781181669557e+002,-1.113760956039830e+001,
          1.000648834052838e+000,9.971693306119173e-001},{1.535693860011035e+002,
          -1.072767076272634e+001,9.832671167175504e-001,9.979564929628543e-001},
          {1.449200191421523e+002,-1.033465196230555e+001,9.662482590600698e-001,
          9.987427437671671e-001},{1.367937717065337e+002,-9.957785484393540e+000,
          9.495831215921720e-001,9.995280681250476e-001},{1.291569872589011e+002,
          -9.596341801355912e+000,9.332628281122665e-001,1.000312451092355e+000},
          {1.219781077764371e+002,-9.249626474109293e+000,9.172787563965046e-001,
          1.001095877678499e+000},{1.152279668782842e+002,-8.916979963771544e+000,
          9.016225314369730e-001,1.001878332844262e+000},{1.088792020192482e+002,
          -8.597774082924014e+000,8.862860157568774e-001,1.002659801499583e+000},
          {1.029063235987208e+002,-8.291411320542892e+000,8.712613030194463e-001,
          1.003440268501293e+000},{9.728564785438825e+001,-7.997323365549272e+000,
          8.565407104574884e-001,1.004219718650792e+000},{9.199496304063413e+001,
          -7.714968773139151e+000,8.421167710251819e-001,1.004998136691686e+000},
          {8.701360359900153e+001,-7.443832377910562e+000,8.279822274408061e-001,
          1.005775507307376e+000},{8.232230443717428e+001,-7.183423666195218e+000,
          8.141300250683886e-001,1.006551815118586e+000},{7.790298199800353e+001,
          -6.933275074571325e+000,8.005533052628054e-001,1.007327044680851e+000},
          {7.373882736821794e+001,-6.692941599684643e+000,7.872454000252229e-001,
          1.008101180481954e+000},{6.981412051815975e+001,-6.461999122789390e+000,
          7.741998252916442e-001,1.008874206939307e+000},{6.611412526808580e+001,
          -6.240043296990975e+000,7.614102753125023e-001,1.009646108397281e+000},
          {6.262513663235084e+001,-6.026689038670938e+000,7.488706175635427e-001,
          1.010416869124489e+000},{5.933427241821190e+001,-5.821568909235316e+000,
          7.365748866372953e-001,1.011186473311012e+000},{5.622953202093046e+001,
          -5.624332795860875e+000,7.245172797819842e-001,1.011954905065573e+000},
          {5.329965683889058e+001,-5.434646641163655e+000,7.126921513657769e-001,
          1.012722148412655e+000},{5.053413008036412e+001,-5.252191899271087e+000,
          7.010940083901317e-001,1.013488187289570e+000},{4.792309187394095e+001,
          -5.076664589645531e+000,6.897175055906588e-001,1.014253005543466e+000},
          {4.545732719574220e+001,-4.907774732842085e+000,6.785574411182894e-001,
          1.015016586928279e+000},{4.312818391659056e+001,-4.745245470887149e+000,
          6.676087519562042e-001,1.015778915101634e+000},{4.092758873926038e+001,
          -4.588812680293274e+000,6.568665100095136e-001,1.016539973621682e+000},
          {3.884793008615984e+001,-4.438223961945115e+000,6.463259175911253e-001,
          1.017299745943874e+000},{3.688212100151130e+001,-4.293238562403930e+000,
          6.359823041079774e-001,1.018058215417688e+000},{3.502348648740307e+001,
          -4.153626360185827e+000,6.258311216044381e-001,1.018815365283285e+000},
          {3.326577803136620e+001,-4.019167610116154e+000,6.158679415223102e-001,
          1.019571178668104e+000},{3.160313640436182e+001,-3.889652370808637e+000,
          6.060884509889981e-001,1.020325638583392e+000},{3.003005307713898e+001,
          -3.764879973889153e+000,5.964884493327785e-001,1.021078727920680e+000},
          {2.854137434411961e+001,-3.644658724667432e+000,5.870638449339153e-001,
          1.021830429448176e+000},{2.713224638151363e+001,-3.528805289640701e+000,
          5.778106517458664e-001,1.022580725807109e+000},{2.579812528568391e+001,
          -3.417144473611440e+000,5.687249864435943e-001,1.023329599507988e+000},
          {2.453473414913067e+001,-3.309508692174914e+000,5.598030651918186e-001,
          1.024077032926797e+000},{2.333805810227199e+001,-3.205737695631187e+000,
          5.510412008791300e-001,1.024823008301128e+000},{2.220432885559139e+001,
          -3.105678219024390e+000,5.424358002555373e-001,1.025567507726222e+000},
          {2.112999429523282e+001,-3.009183576146176e+000,5.339833611149614e-001,
          1.026310513150946e+000},{2.011172854430874e+001,-2.916113494140037e+000,
          5.256804698481571e-001,1.027052006373695e+000},{1.914639375477926e+001,
          -2.826333658116357e+000,5.175237986301524e-001,1.027791969038206e+000},
          {1.823104421288958e+001,-2.739715546993399e+000,5.095101031537107e-001,
          1.028530382629299e+000},{1.736290349293186e+001,-2.656136094630625e+000,
          5.016362201009934e-001,1.029267228468528e+000},{1.653936831205726e+001,
          -2.575477526738492e+000,4.938990649439516e-001,1.030002487709758e+000},
          {1.575797811613206e+001,-2.497626987231605e+000,4.862956294907959e-001,
          1.030736141334639e+000},{1.501642262596952e+001,-2.422476435238042e+000,
          4.788229799338944e-001,1.031468170148003e+000},{1.431252592991174e+001,
          -2.349922366480642e+000,4.714782545940999e-001,1.032198554773166e+000},
          {1.364423636027999e+001,-2.279865602649950e+000,4.642586618963331e-001,
          1.032927275647125e+000},{1.300962339585762e+001,-2.212211125883548e+000,
          4.571614784290629e-001,1.033654313015678e+000},{1.240686782027495e+001,
          -2.146867870831208e+000,4.501840469791165e-001,1.034379646928422e+000},
          {1.183425342332221e+001,-2.083748539062776e+000,4.433237746672978e-001,
          1.035103257233662e+000},{1.129016412610612e+001,-2.022769454725691e+000,
          4.365781311814800e-001,1.035825123573211e+000},{1.077307541038712e+001,
          -1.963850383159112e+000,4.299446469854610e-001,1.036545225377079e+000},
          {1.028154947275094e+001,-1.906914383701821e+000,4.234209116354142e-001,
          1.037263541858046e+000},{9.814230022131259e+000,-1.851887664597415e+000,
          4.170045721339577e-001,1.037980052006132e+000},{9.369839696925903e+000,
          -1.798699456143624e+000,4.106933313435917e-001,1.038694734582934e+000},
          {8.947167622091373e+000,-1.747281824615215e+000,4.044849463620441e-001,
          1.039407568115843e+000},{8.545077467190927e+000,-1.697569639716146e+000,
          3.983772271819996e-001,1.040118530892150e+000},{8.162491034786111e+000,
          -1.649500353387555e+000,3.923680350312642e-001,1.040827600952992e+000},
          {7.798393309046508e+000,-1.603013962393644e+000,3.864552811298065e-001,
          1.041534756087189e+000},{7.451825003941011e+000,-1.558052859669292e+000,
          3.806369252096470e-001,1.042239973824938e+000},{7.121879549937058e+000,
          -1.514561735162216e+000,3.749109742091094e-001,1.042943231431347e+000},
          {6.807699199895982e+000,-1.472487475162612e+000,3.692754809886303e-001,
          1.043644505899842e+000},{6.508476315599162e+000,-1.431779096689505e+000,
          3.637285431064071e-001,1.044343773945410e+000},{6.223444600223672e+000,
          -1.392387605977197e+000,3.582683015002018e-001,1.045041011997687e+000},
          {5.951881226565523e+000,-1.354265956495707e+000,3.528929394082206e-001,
          1.045736196193881e+000},{5.693101078416663e+000,-1.317368936654040e+000,
          3.476006811465485e-001,1.046429302371536e+000},{5.446458886227909e+000,
          -1.281653127167136e+000,3.423897910577511e-001,1.047120306061104e+000},
          {5.211340506752048e+000,-1.247076770164139e+000,3.372585723155903e-001,
          1.047809182478361e+000},{4.987168450830138e+000,-1.213599765364470e+000,
          3.322053660151640e-001,1.048495906516614e+000},{4.773393379500752e+000,
          -1.181183539793155e+000,3.272285500026099e-001,1.049180452738738e+000},
          {4.569496847863383e+000,-1.149791027460064e+000,3.223265379911744e-001,
          1.049862795368995e+000},{4.374988004990743e+000,-1.119386587540072e+000,
          3.174977785277567e-001,1.050542908284660e+000},{4.189400888067502e+000,
          -1.089935937326779e+000,3.127407540491669e-001,1.051220765007437e+000},
          {4.012295649424565e+000,-1.061406120570848e+000,3.080539800181962e-001,
          1.051896338694638e+000},{3.843254239286654e+000,-1.033765424196656e+000,
          3.034360039600572e-001,1.052569602130159e+000},{3.681881374402221e+000,
          -1.006983350527110e+000,2.988854046579620e-001,1.053240527715198e+000},
          {3.527802653665643e+000,-9.810305583932155e-001,2.944007912737826e-001,
          1.053909087458743e+000},{3.380662761329736e+000,-9.558788092568029e-001,
          2.899808025158087e-001,1.054575252967808e+000},{3.240123783209261e+000,
          -9.315009216150985e-001,2.856241058570798e-001,1.055238995437398e+000},
          {3.105868201920377e+000,-9.078707625912555e-001,2.813293968109665e-001,
          1.055900285640210e+000},{2.977591609870003e+000,-8.849631421045409e-001,
          2.770953980214663e-001,1.056559093916054e+000},{2.855007736411922e+000,
          -8.627538388958096e-001,2.729208587048513e-001,1.057215390160977e+000},
          {2.737843340741328e+000,-8.412195136795313e-001,2.688045537828591e-001,
          1.057869143816096e+000},{2.625839966333147e+000,-8.203377040825038e-001,
          2.647452832788387e-001,1.058520323856107e+000},{2.518752537811653e+000,
          -8.000867793714089e-001,2.607418715874039e-001,1.059168898777473e+000},
          {2.416347515483972e+000,-7.804458970053758e-001,2.567931667932268e-001,
          1.059814836586282e+000},{2.318403819543128e+000,-7.613949896269223e-001,
          2.528980400707821e-001,1.060458104785751e+000},{2.224711437052068e+000,
          -7.429147243016000e-001,2.490553850107021e-001,1.061098670363362e+000},
          {2.135070864890457e+000,-7.249864743581408e-001,2.452641170068208e-001,
          1.061736499777632e+000},{2.049292370784272e+000,-7.075922907052119e-001,
          2.415231726533505e-001,1.062371558944488e+000},{1.967195951634708e+000,
          -6.907148805172072e-001,2.378315091641534e-001,1.063003813223237e+000},
          {1.888610625422974e+000,-6.743375783849550e-001,2.341881037825931e-001,
          1.063633227402109e+000},{1.813373338023230e+000,-6.584443161814407e-001,
          2.305919532083683e-001,1.064259765683374e+000},{1.741329942532738e+000,
          -6.430196157987128e-001,2.270420730859128e-001,1.064883391667998e+000},
          {1.672332880740151e+000,-6.280485445058859e-001,2.235374974033225e-001,
          1.065504068339818e+000},{1.606242962644326e+000,-6.135167194115672e-001,
          2.200772780372606e-001,1.066121758049242e+000},{1.542926476725079e+000,
          -5.994102568101398e-001,2.166604841494812e-001,1.066736422496424e+000},
          {1.482257663729330e+000,-5.857157876199568e-001,2.132862017855761e-001,
          1.067348022713911e+000},{1.424115512595617e+000,-5.724204016631274e-001,
          2.099535332621227e-001,1.067956519048742e+000},{1.368385956028459e+000,
          -5.595116632457267e-001,2.066615967928144e-001,1.068561871143958e+000},
          {1.314959655325564e+000,-5.469775676628228e-001,2.034095259190647e-001,
          1.069164037919527e+000},{1.263733008673720e+000,-5.348065427110748e-001,
          2.001964691070868e-001,1.069762977552636e+000},{1.214607187882344e+000,
          -5.229874224736636e-001,1.970215892474923e-001,1.070358647457329e+000},
          {1.167487900381954e+000,-5.115094337620333e-001,1.938840632171667e-001,
          1.070951004263476e+000},{1.122285845216134e+000,-5.003621898130956e-001,
          1.907830814535250e-001,1.071540003795025e+000},{1.078915247650273e+000,
          -4.895356599254621e-001,1.877178474670392e-001,1.072125601047531e+000},
          {1.037295122562504e+000,-4.790201767587073e-001,1.846875774806051e-001,
          1.072707750164894e+000},{9.973476732340229e-001,-4.688064029957253e-001,
          1.816914999294402e-001,1.073286404415327e+000},{9.589990505709063e-001,
          -4.588853343284500e-001,1.787288551054327e-001,1.073861516166452e+000},
          {9.221789716891475e-001,-4.492482827697643e-001,1.757988947129753e-001,
          1.074433036859547e+000},{8.868200204717667e-001,-4.398868591505740e-001,
          1.729008814488281e-001,1.075000916982876e+000},{8.528583447359696e-001,
          -4.307929744054440e-001,1.700340886366837e-001,1.075565106044062e+000},
          {8.202326838157281e-001,-4.219588172117957e-001,1.671977997847816e-001,
          1.076125552541462e+000},{7.888848153812587e-001,-4.133768531089824e-001,
          1.643913082231699e-001,1.076682203934512e+000},{7.587591016827582e-001,
          -4.050398098899249e-001,1.616139166886254e-001,1.077235006612980e+000},
          {7.298024187385580e-001,-3.969406696719444e-001,1.588649369407936e-001,
          1.077783905865066e+000},{7.019641615586063e-001,-3.890726619994999e-001,
          1.561436893787574e-001,1.078328845844344e+000},{6.751958155391025e-001,
          -3.814292509316639e-001,1.534495026395216e-001,1.078869769535422e+000},
          {6.494512832440340e-001,-3.740041339282753e-001,1.507817132366013e-001,
          1.079406618718322e+000},{6.246863366052458e-001,-3.667912267567835e-001,
          1.481396651445827e-001,1.079939333931487e+000},{6.008588763477613e-001,
          -3.597846624325521e-001,1.455227094421928e-001,1.080467854433345e+000},
          {5.779285217568081e-001,-3.529787788792315e-001,1.429302039043457e-001,
          1.080992118162387e+000},{5.558567917843585e-001,-3.463681168961781e-001,
          1.403615126355752e-001,1.081512061695666e+000},{5.346068604525098e-001,
          -3.399474109122525e-001,1.378160056691672e-001,1.082027620205633e+000},
          {5.141434781643980e-001,-3.337115829553734e-001,1.352930585791013e-001,
          1.082538727415259e+000},{4.944329639780074e-001,-3.276557382434219e-001,
          1.327920520940830e-001,1.083045315551323e+000},{4.754430791164752e-001,
          -3.217751584695526e-001,1.303123716960193e-001,1.083547315295785e+000},
          {4.571429700194347e-001,-3.160652967851284e-001,1.278534072210391e-001,
          1.084044655735171e+000},{4.395030793576999e-001,-3.105217725167348e-001,
          1.254145524556692e-001,1.084537264307814e+000},{4.224951347995459e-001,
          -3.051403671189442e-001,1.229952047280423e-001,1.085025066748905e+000},
          {4.060920172580015e-001,-2.999170184671716e-001,1.205947644878575e-001,
          1.085507987033182e+000},{3.902677687631728e-001,-2.948478175978236e-001,
          1.182126348866422e-001,1.085985947315169e+000},{3.749974640139346e-001,
          -2.899290035159611e-001,1.158482213427176e-001,1.086458867866821e+000},
          {3.602572392362872e-001,-2.851569605786520e-001,1.135009311044318e-001,
          1.086926667012439e+000},{3.460241836412211e-001,-2.805282138082644e-001,
          1.111701727955525e-001,1.087389261060693e+000},{3.322762639573303e-001,
          -2.760394252131759e-001,1.088553559545610e-001,1.087846564233622e+000},
          {3.189924082087265e-001,-2.716873926785463e-001,1.065558905672928e-001,
          1.088298488592417e+000},{3.061522734419424e-001,-2.674690435082296e-001,
          1.042711865658687e-001,1.088744943959822e+000},{2.937363571423171e-001,
          -2.633814348735849e-001,1.020006533438568e-001,1.089185837838947e+000},
          {2.817258998316861e-001,-2.594217496446171e-001,9.974369922720212e-002,
          1.089621075328317e+000},{2.701028054319830e-001,-2.555872936090732e-001,
          9.749973094036724e-002,1.090050559032902e+000},{2.588496724626022e-001,
          -2.518754945945531e-001,9.526815305771809e-002,1.090474188970921e+000},
          {2.479497198536963e-001,-2.482838997491669e-001,9.304836742418512e-002,
          1.090891862476159e+000},{2.373867619937749e-001,-2.448101740087793e-001,
          9.083977255919505e-002,1.091303474095537e+000},{2.271451341955907e-001,
          -2.414520978672889e-001,8.864176303197963e-002,1.091708915481636e+000},
          {2.172097526882940e-001,-2.382075679770417e-001,8.645372882164712e-002,
          1.092108075279883e+000},{2.075659648124981e-001,-2.350745935908722e-001,
          8.427505462681409e-002,1.092500839010061e+000},{1.981996108168476e-001,
          -2.320512978432888e-001,8.210511916873743e-002,1.092887088941785e+000},
          {1.890969390096326e-001,-2.291359160192762e-001,7.994329444160937e-002,
          1.093266703963582e+000},{1.802446007941124e-001,-2.263267957100681e-001,
          7.778894493527934e-002,1.093639559445137e+000},{1.716296024717335e-001,
          -2.236223964383276e-001,7.564142681292767e-002,1.094005527092300e+000},
          {1.632392977069316e-001,-2.210212903349189e-001,7.350008705079136e-002,
          1.094364474794345e+000},{1.550613159026258e-001,-2.185221618314115e-001,
          7.136426252241583e-002,1.094716266463003e+000},{1.470836025508062e-001,
          -2.161238099240935e-001,6.923327904352281e-002,1.095060761862684e+000},
          {1.392943026502691e-001,-2.138251474258300e-001,6.710645034366781e-002,
          1.095397816431321e+000},{1.316817983518666e-001,-2.116252040084782e-001,
          6.498307699545154e-002,1.095727281091176e+000},{1.242346587117034e-001,
          -2.095231275596812e-001,6.286244526583852e-002,1.096049002048916e+000},
          {1.169415784462329e-001,-2.075181858211773e-001,6.074382589610382e-002,
          1.096362820584195e+000},{1.097913955238220e-001,-2.056097701035541e-001,
          5.862647281078301e-002,1.096668572825930e+000},{1.027730154333125e-001,
          -2.037973975454059e-001,5.650962173221349e-002,1.096966089515387e+000},
          {9.587540256029346e-002,-2.020807152969548e-001,5.439248870826525e-002,
          1.097255195755098e+000},{8.908754193525671e-002,-2.004595045004713e-001,
          5.227426853327376e-002,1.097535710742557e+000},{8.239836637349100e-002,
          -1.989336843919031e-001,5.015413305815167e-002,1.097807447487560e+000},
          {7.579678506229054e-002,-1.975033192009564e-001,4.803122938748919e-002,
          1.098070212511922e+000},{6.927156268654561e-002,-1.961686223190508e-001,
          4.590467792438880e-002,1.098323805530231e+000},{6.281133833354630e-002,
          -1.949299647595855e-001,4.377357029036171e-002,1.098568019110113e+000},
          {5.640453232697693e-002,-1.937878816798458e-001,4.163696706650428e-002,
          1.098802638310406e+000},{5.003932121783335e-002,-1.927430817480175e-001,
          3.949389537115199e-002,1.099027440295432e+000},{4.370356344501013e-002,
          -1.917964562372977e-001,3.734334623333660e-002,1.099242193923410e+000},
          {3.738474704089313e-002,-1.909490901638774e-001,3.518427175977259e-002,
          1.099446659306848e+000},{3.106990814761928e-002,-1.902022738733920e-001,
          3.301558205824082e-002,1.099640587342539e+000},{2.471924771693251e-002,
          -1.895570588253832e-001,3.083614013868847e-002,1.099823719208536e+000},
          {1.834223327637784e-002,-1.890154314600311e-001,2.864476241935234e-002,
          1.099995785825217e+000},{1.195094886503533e-002,-1.885798454355235e-001,
          2.644021168354557e-002,1.100156507277238e+000},{5.557050709009414e-003,
          -1.882515929288725e-001,2.418461128139228e-002,1.100307943910574e+000},
          {-8.014493909795158e-004,-1.880402684286048e-001,2.194575815737601e-002,
          1.100445109478535e+000},{-7.135417654424650e-003,-1.879436446578345e-001,
          1.972726442004061e-002,1.100567996583830e+000},{-1.345870138684300e-002,
          -1.879591637675092e-001,1.752795451986745e-002,1.100676931096945e+000},
          {-1.978471856691031e-002,-1.880845063496110e-001,1.534670037602332e-002,
          1.100772233147846e+000},{-2.612655707280306e-002,-1.883175768416115e-001,
          1.318241876916896e-002,1.100854217210090e+000},{-3.249697575622967e-002,
          -1.886564925021107e-001,1.103406890701701e-002,1.100923192183922e+000},
          {-3.890850468817631e-002,-1.890995704946074e-001,8.900650115975411e-003,
          1.100979461478381e+000},{-4.537347157514723e-002,-1.896453182395342e-001,
          6.781199688611053e-003,1.101023323092393e+000},{-5.190403204992995e-002,
          -1.902924240651144e-001,4.674790850459827e-003,1.101055069694875e+000},
          {-5.851225277558175e-002,-1.910397473018965e-001,2.580530837908182e-003,
          1.101074988703860e+000},{-6.521011476274589e-002,-1.918863113150857e-001,
          4.975591027557807e-004,1.101083362364609e+000},{-7.200957075288722e-002,
          -1.928312955496475e-001,-1.574954392253073e-003,1.101080467826757e+000},
          {-7.892258128041750e-002,-1.938740289010325e-001,-3.637810776014087e-003,
          1.101066577220491e+000},{-8.596114095058548e-002,-1.950139836709728e-001,
          -5.691783782005860e-003,1.101041957731749e+000},{-9.313731870582566e-002,
          -1.962507697828389e-001,-7.737621177713153e-003,1.101006871676471e+000},
          {-1.004633132706661e-001,-1.975841292444321e-001,-9.776046115403617e-003,
          1.100961576573900e+000},{-1.079514189138674e-001,-1.990139329502044e-001,
          -1.180775839988235e-002,1.100906325218945e+000},{-1.156141501458894e-001,
          -2.005401741857532e-001,-1.383343570756720e-002,1.100841365753626e+000},
          {-1.234641865756744e-001,-2.021629669142985e-001,-1.585373471362041e-002,
          1.100766941737587e+000},{-1.315144632458761e-001,-2.038825407987732e-001,
          -1.786929218092619e-002,1.100683292217720e+000},{-1.397781622796490e-001,
          -2.056992389395121e-001,-1.988072597730302e-002,1.100590651796894e+000},
          {-1.482687849379858e-001,-2.076135142055186e-001,-2.188863604735403e-002,
          1.100489250701797e+000},{-1.570001127509399e-001,-2.096259281418626e-001,
          -2.389360532338351e-002,1.100379314849913e+000},{-1.659863131041873e-001,
          -2.117371469439204e-001,-2.589620060511024e-002,1.100261065915656e+000},
          {-1.752419465890530e-001,-2.139479403721047e-001,-2.789697337688882e-002,
          1.100134721395630e+000},{-1.847819278769801e-001,-2.162591809460440e-001,
          -2.989646059049550e-002,1.100000494673090e+000},{-1.946216794315628e-001,
          -2.186718402076742e-001,-3.189518541573153e-002,1.099858595081566e+000},
          {-2.047770670769773e-001,-2.211869893365289e-001,-3.389365793731571e-002,
          1.099709227967682e+000},{-2.152644567239538e-001,-2.238057975178256e-001,
          -3.589237582835234e-002,1.099552594753185e+000},{-2.261007643374610e-001,
          -2.265295306054332e-001,-3.789182498937845e-002,1.099388892996184e+000},
          {-2.373034676588316e-001,-2.293595508675275e-001,-3.989248015126330e-002,
          1.099218316451631e+000},{-2.488906597672881e-001,-2.322973162338434e-001,
          -4.189480545039329e-002,1.099041055131017e+000},{-2.608810484226545e-001,
          -2.353443803241083e-001,-4.389925497691962e-002,1.098857295361356e+000},
          {-2.732940302195583e-001,-2.385023915702908e-001,-4.590627329721378e-002,
          1.098667219843396e+000},{-2.861497020009324e-001,-2.417730936839753e-001,
          -4.791629594706479e-002,1.098471007709130e+000},{-2.994689199938831e-001,
          -2.451583253792444e-001,-4.992974990525140e-002,1.098268834578575e+000},
          {-3.132732751354347e-001,-2.486600214001266e-001,-5.194705404153135e-002,
          1.098060872615857e+000},{-3.275852638322766e-001,-2.522802108711590e-001,
          -5.396861955037104e-002,1.097847290584594e+000},{-3.424281663994858e-001,
          -2.560210205428296e-001,-5.599485034861269e-002,1.097628253902595e+000},
          {-3.578293520435974e-001,-2.598846367187872e-001,-5.802614356800304e-002,
          1.097403924695883e+000},{-3.737991995924480e-001,-2.638735869985462e-001,
          -6.006288915407318e-002,1.097174461852052e+000},{-3.903902600560969e-001,
          -2.679898530112919e-001,-6.210547303843708e-002,1.096940021072966e+000},
          {-4.076012547942460e-001,-2.722364457397745e-001,-6.415427156013318e-002,
          1.096700754925520e+000},{-4.254343891046640e-001,-2.766161117295213e-001,
          -6.620965819623846e-002,1.096456812898149e+000},{-4.438339027573641e-001,
          -2.811320490392464e-001,-6.827199959147826e-002,1.096208341444035e+000},
          {-4.644750403946706e-001,-2.857679946652489e-001,-7.034170236902584e-002,
          1.095955484037268e+000},{-4.820890817525319e-001,-2.906000672424869e-001,
          -7.241891749894044e-002,1.095698381226341e+000},{-5.047134822541359e-001,
          -2.955056304565424e-001,-7.450444780138031e-002,1.095437170699271e+000},
          {-5.258914498568529e-001,-3.006012937060756e-001,-7.659813906378293e-002,
          1.095171987136068e+000},{-5.484047930470472e-001,-3.058375854914676e-001,
          -7.870062238535235e-002,1.094902962737344e+000},{-5.718129216158286e-001,
          -3.112278431359212e-001,-8.081217584455191e-002,1.094630226742015e+000},
          {-5.961547440676940e-001,-3.167755376343922e-001,-8.293313841275786e-002,
          1.094353905753897e+000},{-6.214708520460160e-001,-3.224842528277391e-001,
          -8.506384586954169e-002,1.094074123729523e+000},{-6.478032148383646e-001,
          -3.283576921832907e-001,-8.720463098789563e-002,1.093791002023522e+000},
          {-6.751957491746247e-001,-3.343996727291274e-001,-8.935582375150214e-002,
          1.093504659433427e+000},{-7.036936171960371e-001,-3.406141369349701e-001,
          -9.151775149673061e-002,1.093215212243908e+000},{-7.333438920356818e-001,
          -3.470051435467684e-001,-9.369073911646579e-002,1.092922774270491e+000},
          {-7.649284588825603e-001,-3.535701423882779e-001,-9.587512294577692e-002,
          1.092627456902683e+000},{-7.987573127935487e-001,-3.603086226499994e-001,
          -9.807123530043556e-002,1.092329369146623e+000},{-8.351881293636163e-001,
          -3.672179068043334e-001,-1.002794318903687e-001,1.092028617667189e+000},
          {-8.746337064830027e-001,-3.750216293989062e-001,-1.027084493542587e-001,
          1.091696779574096e+000},{-9.182631668618914e-001,-3.831991324672869e-001,
          -1.051985063743867e-001,1.091355729081559e+000},{-9.598866647526484e-001,
          -3.918556861719648e-001,-1.077524800454063e-001,1.091005198961375e+000},
          {-1.010790497453898e+000,-4.008622937465624e-001,-1.103741544582843e-001,
          1.090644908830807e+000},{-1.061585597914184e+000,-4.104074244317262e-001,
          -1.130664113126074e-001,1.090274564104240e+000},{-1.116923652713534e+000,
          -4.204470439736384e-001,-1.158334219482580e-001,1.089893855365184e+000},
          {-1.176390470616413e+000,-4.310341925159665e-001,-1.186791465288392e-001,
          1.089502456776096e+000},{-1.240398358090701e+000,-4.422099547341248e-001,
          -1.216079485825098e-001,1.089100025144463e+000},{-1.309411351967095e+000,
          -4.540194728668653e-001,-1.246245298507227e-001,1.088686198529077e+000},
          {-1.383952478324663e+000,-4.665124525546056e-001,-1.277339645466649e-001,
          1.088260594774788e+000},{-1.464613539394650e+000,-4.797437255410850e-001,
          -1.309417379885211e-001,1.087822809897360e+000},{-1.552065595474018e+000,
          -4.937739146636258e-001,-1.342537901400978e-001,1.087372416299330e+000},
          {-1.647071854814870e+000,-5.086701932065426e-001,-1.376765649336416e-001,
          1.086908960794945e+000},{-1.750503179964703e+000,-5.245071629179311e-001,
          -1.412170662450014e-001,1.086431962418652e+000},{-1.863356315547510e+000,
          -5.413678789587019e-001,-1.448829215901497e-001,1.085940909987632e+000},
          {-1.986775922871999e+000,-5.593450423418901e-001,-1.486824548572708e-001,
          1.085435259383995e+000},{-2.122081131299789e+000,-5.785423947412177e-001,
          -1.526247696085506e-001,1.084914430516412e+000},{-2.270797351520379e+000,
          -5.990763602365653e-001,-1.567198447858746e-001,1.084377803914027e+000},
          {-2.434695501360245e+000,-6.210779709042096e-001,-1.609786450924524e-001,
          1.083824716897111e+000},{-2.615838531681118e+000,-6.446951619454530e-001,
          -1.654132486612294e-001,1.083254459258780e+000},{-2.816639044616160e+000,
          -6.700954812249659e-001,-1.700369953943099e-001,1.082666268379815e+000},
          {-3.039928700415489e+000,-6.974693316356091e-001,-1.748646598439750e-001,
          1.082059323683556e+000},{-3.292219758098840e+000,-7.270000140981027e-001,
          -1.799127335700266e-001,1.081432740319499e+000},{-3.564782476198684e+000,
          -7.591050350223508e-001,-1.851990623476152e-001,1.080785561941540e+000},
          {-3.884190359823099e+000,-7.937345882311215e-001,-1.907452448062669e-001,
          1.080116752418797e+000},{-4.237141139726640e+000,-8.315523945506937e-001,
          -1.965727692029269e-001,1.079425186076460e+000},{-4.639142492737927e+000,
          -8.727752413556356e-001,-2.027083906666977e-001,1.078709637232685e+000},
          {-5.097189675608282e+000,-9.178820437390601e-001,-2.091811202970346e-001,
          1.077968766554805e+000},{-5.621762464449057e+000,-9.673950144480338e-001,
          -2.160241562151455e-001,1.077201106424277e+000},{-6.225833712033967e+000,
          -1.021929051176963e+000,-2.232753772451849e-001,1.076405043117602e+000},
          {-6.925601260591495e+000,-1.082212356404202e+000,-2.309782180242463e-001,
          1.075578795840945e+000},{-7.741476361496349e+000,-1.149112657464135e+000,
          -2.391827511126749e-001,1.074720391772839e+000},{-8.699439370277643e+000,
          -1.223670757770951e+000,-2.479470365689759e-001,1.073827636152860e+000},
          {-9.832921391371407e+000,-1.307143891200575e+000,-2.573388201788544e-001,
          1.072898076168983e+000},{-1.118545570250340e+001,-1.401062230883758e+000,
          -2.674376916575652e-001,1.071928957010234e+000},{-1.281446878655493e+001,
          -1.507303306245227e+000,-2.783378567732671e-001,1.070917167920417e+000},
          {-1.479678827882319e+001,-1.628191020093895e+000,-2.901517399548284e-001,
          1.069859175350126e+000},{-1.724144136142261e+001,-1.766576297530559e+000,
          -3.030148579310907e-001,1.068750939259828e+000},{-2.027826987203854e+001,
          -1.926337376059677e+000,-3.170912838064992e-001,1.067587807127434e+000},
          {-2.413687940816858e+001,-2.111734868657410e+000,-3.325851366637468e-001,
          1.066364378021886e+000},{-2.909401840847157e+001,-2.329151580543732e+000,
          -3.497470819764231e-001,1.065074325623783e+000},{-3.559985600470116e+001,
          -2.586219259879967e+000,-3.688972788252130e-001,1.063710165062041e+000},
          {-4.432903871576617e+001,-2.893237376748189e+000,-3.904455236187271e-001,
          1.062262938236866e+000},{-5.635486800356907e+001,-3.263787309390394e+000,
          -4.149289589297027e-001,1.060721782952100e+000},{-7.345422356224562e+001,
          -3.715852360320928e+000,-4.430674062157222e-001,1.059073327378870e+000},
          {-9.872541030429800e+001,-4.272847713002282e+000,-4.758525332055549e-001,
          1.057300816644650e+000},{-1.379029789580371e+002,-4.963698528158174e+000,
          -5.146977811000596e-001,1.055382812700357e+000},{-2.025227956751322e+002,
          -5.816502032157165e+000,-5.617124713275824e-001,1.053291185212563e+000},
          {-3.066576906266529e+002,-6.965314926095712e+000,-6.198853650303311e-001,
          1.050987862948901e+000},{-4.830543755124683e+002,-8.666062419141326e+000,
          -6.938823513423141e-001,1.048419277617361e+000},{-8.084833331246175e+002,
          -1.148692234324379e+001,-7.910281397083958e-001,1.045506157577100e+000},
          {-1.468144450984898e+003,-1.270342041479051e+001,-8.932720264828298e-001,
          1.043022458452853e+000},{-2.960185006157666e+003,-1.204645827816411e+001,
          -1.037687543523871e+000,1.040192609451484e+000},{-6.394379648177180e+003,
          -1.133095662667407e+001,-1.255214139021270e+000,1.036731981255395e+000},
          {-1.421291626844065e+004,-2.176830415540717e+001,-1.565859480023533e+000,
          1.032664478961364e+000},{-3.188506981409266e+004,-4.472235675466877e+001,
          -1.957122092195666e+000,1.028823550217078e+000},{-7.717088076510136e+004,
          -4.157109709425348e+001,-2.425675063473610e+000,1.025629204891293e+000},
          {-1.893604841837793e+005,1.988107110128464e+001,-3.037933999829498e+000,
          1.022682315051265e+000},{-4.362759910617617e+005,4.356252894797460e+000,
          -3.857056802145624e+000,1.019493900338764e+000},{-9.667858531739716e+005,
          -7.110743222205122e+002,-5.068028151693111e+000,1.015606411778339e+000},
          {-1.926807175753026e+006,-1.308643373681819e+003,-6.100046763833379e+000,
          1.013498423615123e+000},{-4.430874958584904e+006,-5.255191972894967e+002,
          -6.892511697752738e+000,1.012521645013935e+000},{-1.306500915854772e+007,
          1.740498999891739e+003,-8.577603939805345e+000,1.010846737556340e+000},
          {-4.389793234302502e+007,9.560482174458750e+003,-1.148948797863325e+001,
          1.009039661353492e+000},{-1.453953316964447e+008,8.587054210867187e+003,
          -1.476464101007846e+001,1.006692766581286e+000},{-3.516933123906404e+008,
          -1.085943267171107e+004,-1.840303816166151e+001,1.005101578506159e+000},
          {-2.510574163087101e+012,1.191163343802633e+008,-1.412900529450008e+003,
          1.004074865378772e+000}};
      constant Real[Ninterval, 4] slcoef={{1.177557139507648e+010,-1.993514199606193e+006,
          4.143546065409241e+002,2.641402961120132e-001},{1.048671143722957e+010,
          -1.884478673305442e+006,4.037631012049168e+002,2.652511930832029e-001},
          {9.168562051007404e+009,-1.788981183928967e+006,3.950602310696419e+002,
          2.661829932674829e-001},{7.846446101028213e+009,-1.614583713308304e+006,
          3.761535139366466e+002,2.682996669625260e-001},{6.715017635832893e+009,
          -1.457222530950107e+006,3.581621886022840e+002,2.704246269918255e-001},
          {5.747015349679062e+009,-1.315240915328985e+006,3.410420212198932e+002,
          2.725579055981067e-001},{4.918630356754790e+009,-1.187122828234776e+006,
          3.247498175022562e+002,2.746996665285123e-001},{4.209783796072495e+009,
          -1.071515458129660e+006,3.092453129575851e+002,2.768499837872521e-001},
          {3.603174902826428e+009,-9.671924631452678e+005,2.944898874475471e+002,
          2.790089741555691e-001},{3.084079936755044e+009,-8.730521764425569e+005,
          2.804471553915772e+002,2.811767093063310e-001},{2.639848105537634e+009,
          -7.880971686153368e+005,2.670822304519017e+002,2.833533034650044e-001},
          {2.259641698967966e+009,-7.114290219738688e+005,2.543622233288261e+002,
          2.855388260072460e-001},{1.934270134269886e+009,-6.422381187091104e+005,
          2.422554107091234e+002,2.877334319246923e-001},{1.655784123271669e+009,
          -5.797918189723861e+005,2.307318702957838e+002,2.899372311407367e-001},
          {1.417436324893234e+009,-5.234328119503804e+005,2.197634071875102e+002,
          2.921502891166354e-001},{1.213429199043588e+009,-4.725651621534369e+005,
          2.093227855305521e+002,2.943727562457704e-001},{1.038821174264480e+009,
          -4.266538020807887e+005,1.993845312208418e+002,2.966046954288835e-001},
          {8.900554569418168e+008,-3.852391963057016e+005,1.899242490751680e+002,
          2.988462540463003e-001},{7.648023186829292e+008,-3.479479314856909e+005,
          1.809193670502903e+002,3.010975350565891e-001},{6.592177452001010e+008,
          -3.143877634345993e+005,1.723482399369443e+002,3.033586400558302e-001},
          {5.700843185859680e+008,-2.846663102712536e+005,1.643477796985073e+002,
          3.055842723398675e-001},{4.943633825796188e+008,-2.589969957748900e+005,
          1.571225846083740e+002,3.076990337830958e-001},{4.291125156131715e+008,
          -2.357953619216334e+005,1.502638626066520e+002,3.098084456029034e-001},
          {3.728306499579160e+008,-2.148103610406289e+005,1.437508020718366e+002,
          3.119125568514417e-001},{3.242364285177285e+008,-1.958176234450135e+005,
          1.375638868362061e+002,3.140114157267036e-001},{2.822412748713871e+008,
          -1.786169231686780e+005,1.316848160932519e+002,3.161050695947951e-001},
          {2.459125658184237e+008,-1.630289616337319e+005,1.260964138486158e+002,
          3.181935650115526e-001},{2.144580625278116e+008,-1.488936415091122e+005,
          1.207825640937267e+002,3.202769477435048e-001},{1.871966290478286e+008,
          -1.360673141338019e+005,1.157281282277565e+002,3.223552627882310e-001},
          {1.635488056210168e+008,-1.244215705088064e+005,1.109188923271442e+002,
          3.244285543941092e-001},{1.430161329214414e+008,-1.138410894667223e+005,
          1.063414954697406e+002,3.264968660794893e-001},{1.251717914268840e+008,
          -1.042224881444728e+005,1.019833809887122e+002,3.285602406513014e-001},
          {1.096508061352110e+008,-9.547306166403441e+004,9.783274285471715e+001,
          3.306187202231238e-001},{9.613753724667005e+007,-8.750933370030554e+004,
          9.387847130169364e+001,3.326723462327222e-001},{8.436265639394236e+007,
          -8.025648609043579e+004,9.011011773741680e+001,3.347211594590819e-001},
          {7.409313187822527e+007,-7.364708312272583e+004,8.651784263733413e+001,
          3.367652000389455e-001},{6.512895658412796e+007,-6.762051692091678e+004,
          8.309238335216898e+001,3.388045074828699e-001},{5.729728405538097e+007,
          -6.212215934894936e+004,7.982501352086291e+001,3.408391206908288e-001},
          {5.044953216127181e+007,-5.710284583154797e+004,7.670751215248156e+001,
          3.428690779673607e-001},{4.445647437035704e+007,-5.251814570452608e+004,
          7.373212777286675e+001,3.448944170362825e-001},{3.920767247485867e+007,
          -4.832812939512341e+004,7.089155600321682e+001,3.469151750549936e-001},
          {3.460643566473103e+007,-4.449659421205359e+004,6.817890214139165e+001,
          3.489313886283582e-001},{3.056970641837368e+007,-4.099094122891565e+004,
          6.558766506547076e+001,3.509430938222040e-001},{2.702540190216035e+007,
          -3.778168333466380e+004,6.311170749756870e+001,3.529503261764371e-001},
          {2.391081714254122e+007,-3.484213008611726e+004,6.074523461994335e+001,
          3.549531207177877e-001},{2.117170192432593e+007,-3.214816129623113e+004,
          5.848277505538282e+001,3.569515119721937e-001},{1.876094064229434e+007,
          -2.967793653594457e+004,5.631915951588184e+001,3.589455339768409e-001},
          {1.663741340545124e+007,-2.741164725010574e+004,5.424950232335298e+001,
          3.609352202918695e-001},{1.476547731295308e+007,-2.533136468686681e+004,
          5.226918630626200e+001,3.629206040117464e-001},{1.311405368894354e+007,
          -2.342082009135800e+004,5.037384498385280e+001,3.649017177763315e-001},
          {1.165604536024709e+007,-2.166524918697802e+004,4.855934824972481e+001,
          3.668785937816321e-001},{1.036780283368990e+007,-2.005124607418004e+004,
          4.682178849186924e+001,3.688512637902600e-001},{9.228723479638483e+006,
          -1.856664063058170e+004,4.515746777050035e+001,3.708197591416083e-001},
          {8.220767144960379e+006,-1.720036292993756e+004,4.356288478792973e+001,
          3.727841107617398e-001},{7.328189892577781e+006,-1.594235240875964e+004,
          4.203472422676561e+001,3.747443491730145e-001},{6.537204250437003e+006,
          -1.478345202257369e+004,4.056984541826727e+001,3.767005045034494e-001},
          {5.835726559790004e+006,-1.371532397872642e+004,3.916527248752735e+001,
          3.786526064958268e-001},{5.213185995368226e+006,-1.273037834190048e+004,
          3.781818514258747e+001,3.806006845165569e-001},{4.660312354353476e+006,
          -1.182169731669702e+004,3.652590940436652e+001,3.825447675643013e-001},
          {4.168939088305709e+006,-1.098296699999315e+004,3.528590920102089e+001,
          3.844848842783646e-001},{3.731941349696544e+006,-1.020843939792505e+004,
          3.409577949657835e+001,3.864210629468634e-001},{3.343018842151671e+006,
          -9.492857477753520e+003,3.295323749642467e+001,3.883533315146766e-001},
          {2.996638160477085e+006,-8.831424276104683e+003,3.185611695501934e+001,
          3.902817175911858e-001},{2.687950210708543e+006,-8.219762157299303e+003,
          3.080236148343732e+001,3.922062484578109e-001},{2.412652443194333e+006,
          -7.653860521818649e+003,2.979001765514563e+001,3.941269510753455e-001},
          {2.166972405327071e+006,-7.130058286584131e+003,2.881723052100683e+001,
          3.960438520911025e-001},{1.947576947792416e+006,-6.645003522979915e+003,
          2.788223738207444e+001,3.979569778458746e-001},{1.751525675665824e+006,
          -6.195628233643848e+003,2.698336301772617e+001,3.998663543807083e-001},
          {1.576215494282452e+006,-5.779120941281210e+003,2.611901481818039e+001,
          4.017720074435056e-001},{1.419353182727988e+006,-5.392908148824695e+003,
          2.528767861012635e+001,4.036739624954574e-001},{1.278906533893276e+006,
          -5.034629032900475e+003,2.448791404432028e+001,4.055722447173105e-001},
          {1.153074815308473e+006,-4.702117917310478e+003,2.371835083258324e+001,
          4.074668790154691e-001},{1.040267269572240e+006,-4.393389187391892e+003,
          2.297768513031833e+001,4.093578900279491e-001},{9.390721944414651e+005,
          -4.106619140813017e+003,2.226467576001038e+001,4.112453021301762e-001},
          {8.482361512114307e+005,-3.840132438338376e+003,2.157814101065838e+001,
          4.131291394406401e-001},{7.666490444341356e+005,-3.592390669372514e+003,
          2.091695561139572e+001,4.150094258264032e-001},{6.933244377674338e+005,
          -3.361979229162954e+003,2.028004761843898e+001,4.168861849084756e-001},
          {6.273833850441934e+005,-3.147596365453398e+003,1.966639566026135e+001,
          4.187594400670539e-001},{5.680493701729885e+005,-2.948046437224073e+003,
          1.907502654460529e+001,4.206292144466324e-001},{5.146259094288983e+005,
          -2.762226337105739e+003,1.850501230753378e+001,4.224955309609856e-001},
          {4.664966079472982e+005,-2.589122141751236e+003,1.795546841607669e+001,
          4.243584122980267e-001},{4.231115651009208e+005,-2.427799181763609e+003,
          1.742555118911682e+001,4.262178809245570e-001},{3.839792678848923e+005,
          -2.277395453181725e+003,1.691445579070118e+001,4.280739590908861e-001},
          {3.486632470541687e+005,-2.137117115184443e+003,1.642141441733220e+001,
          4.299266688353537e-001},{3.167723452866394e+005,-2.006231019071146e+003,
          1.594569419580369e+001,4.317760319887326e-001},{2.879581579606791e+005,
          -1.884061136618374e+003,1.548659563100448e+001,4.336220701785344e-001},
          {2.619091112658384e+005,-1.769983168287696e+003,1.504345081784956e+001,
          4.354648048332044e-001},{2.383466576671081e+005,-1.663420519322795e+003,
          1.461562190867013e+001,4.373042571862285e-001},{2.170211247057410e+005,
          -1.563840223729814e+003,1.420249960746107e+001,4.391404482801311e-001},
          {1.977102806012762e+005,-1.470750305289779e+003,1.380350185368774e+001,
          4.409733989703888e-001},{1.802132568331950e+005,-1.383694745078228e+003,
          1.341807226290494e+001,4.428031299292535e-001},{1.643517256222710e+005,
          -1.302252783281351e+003,1.304567919411233e+001,4.446296616494750e-001},
          {1.499647429474115e+005,-1.226034288211031e+003,1.268581423597655e+001,
          4.464530144479596e-001},{1.369083619764228e+005,-1.154678401042467e+003,
          1.233799128533460e+001,4.482732084693222e-001},{1.250530635446248e+005,
          -1.087850707548286e+003,1.200174537304730e+001,4.500902636893757e-001},
          {1.142828813183554e+005,-1.025241603778916e+003,1.167663171816983e+001,
          4.519041999185328e-001},{1.044932010702937e+005,-9.665638335328233e+002,
          1.136222467710369e+001,4.537150368051356e-001},{9.559024735983493e+004,
          -9.115512664941300e+002,1.105811692791990e+001,4.555227938387087e-001},
          {8.748948014204207e+004,-8.599568992252292e+002,1.076391852809859e+001,
          4.573274903531447e-001},{8.011488050377187e+004,-8.115515935776252e+002,
          1.047925614072886e+001,4.591291455298160e-001},{7.339789345132106e+004,
          -7.661225797978357e+002,1.020377222883108e+001,4.609277784006200e-001},
          {6.727691002196107e+004,-7.234723932600134e+002,9.937124346632666e+000,
          4.627234078509644e-001},{6.169614021722738e+004,-6.834173972226075e+002,
          9.678984382191800e+000,4.645160526226781e-001},{5.660547400068403e+004,
          -6.457871273196512e+002,9.429037972024533e+000,4.663057313168709e-001},
          {5.195953611750653e+004,-6.104229732107484e+002,9.186983791759216e+000,
          4.680924623967295e-001},{4.771745208001675e+004,-5.771775202529138e+002,
          8.952533011439000e+000,4.698762641902499e-001},{4.384220812640152e+004,
          -5.459135464020653e+002,8.725408685310237e+000,4.716571548929249e-001},
          {4.030038590987054e+004,-5.165033923275631e+002,8.505345242117434e+000,
          4.734351525703650e-001},{3.706177619104521e+004,-4.888282167622580e+002,
          8.292087953582172e+000,4.752102751608759e-001},{3.409901222107622e+004,
          -4.627773087875500e+002,8.085392439164183e+000,4.769825404779763e-001},
          {3.138732351663624e+004,-4.382475368783908e+002,7.885024214209901e+000,
          4.787519662128720e-001},{2.890427534083820e+004,-4.151427919551941e+002,
          7.690758243308068e+000,4.805185699368778e-001},{2.662955418230496e+004,
          -3.933734889327271e+002,7.502378519257654e+000,4.822823691037926e-001},
          {2.454471428578327e+004,-3.728560514675434e+002,7.319677653248337e+000,
          4.840433810522326e-001},{2.263303970197622e+004,-3.535125325278318e+002,
          7.142456508875918e+000,4.858016230079136e-001},{2.087936933258245e+004,
          -3.352701961397641e+002,6.970523831131070e+000,4.875571120858966e-001},
          {1.926989719907531e+004,-3.180611010588355e+002,6.803695893605354e+000,
          4.893098652927868e-001},{1.779213064394456e+004,-3.018218612541485e+002,
          6.641796195081590e+000,4.910598995288961e-001},{1.643469380853188e+004,
          -2.864932315962904e+002,6.484655115123119e+000,4.928072315903642e-001},
          {1.518723269686234e+004,-2.720198428014330e+002,6.332109630922232e+000,
          4.945518781712424e-001},{1.404034267449176e+004,-2.583499599306953e+002,
          6.184003039444280e+000,4.962938558655389e-001},{1.298547086145065e+004,
          -2.454352119567302e+002,6.040184677120072e+000,4.980331811692316e-001},
          {1.201480477719220e+004,-2.332303254901078e+002,5.900509656039089e+000,
          4.997698704822443e-001},{1.112125559868982e+004,-2.216929799079140e+002,
          5.764838638887057e+000,5.015039401103889e-001},{1.029834063001183e+004,
          -2.107835348750359e+002,5.633037579396170e+000,5.032354062672774e-001},
          {9.540169613654271e+003,-2.004649068816667e+002,5.504977520065665e+000,
          5.049642850761986e-001},{8.841350078353322e+003,-1.907023386990655e+002,
          5.380534358885717e+000,5.066905925719676e-001},{8.196974604965422e+003,
          -1.814632922354595e+002,5.259588665038832e+000,5.084143447027471e-001},
          {7.602559262208660e+003,-1.727172694039041e+002,5.142025470829316e+000,
          5.101355573318360e-001},{7.054006287042218e+003,-1.644356797777449e+002,
          5.027734090331723e+000,5.118542462394324e-001},{6.547574282638359e+003,
          -1.565917209939956e+002,4.916607944897258e+000,5.135704271243708e-001},
          {6.079842281410332e+003,-1.491602529370824e+002,4.808544390805874e+000,
          5.152841156058329e-001},{5.647681402804354e+003,-1.421176889479255e+002,
          4.703444558999890e+000,5.169953272250335e-001},{5.248227929512284e+003,
          -1.354418928357044e+002,4.601213200953995e+000,5.187040774468807e-001},
          {4.878866346015187e+003,-1.291120924929621e+002,4.501758543631354e+000,
          5.204103816616156e-001},{4.537191205039604e+003,-1.231087657275091e+002,
          4.404992140311703e+000,5.221142551864300e-001},{4.221010702237321e+003,
          -1.174135968361089e+002,4.310828751515844e+000,5.238157132670570e-001},
          {3.928309050855646e+003,-1.120093625136355e+002,4.219186199256487e+000,
          5.255147710793474e-001},{3.657237561904996e+003,-1.068798773450843e+002,
          4.129985254777306e+000,5.272114437308226e-001},{3.406108390579024e+003,
          -1.020099385885924e+002,4.043149522766261e+000,5.289057462622082e-001},
          {3.173362528937843e+003,-9.738523071542197e+001,3.958605315724437e+000,
          5.305976936489506e-001},{2.957575972851209e+003,-9.299230413876768e+001,
          3.876281564344415e+000,5.322873008027116e-001},{2.757441473645700e+003,
          -8.881850292721700e+001,3.796109702595772e+000,5.339745825728525e-001},
          {2.571752175640579e+003,-8.485190527654152e+001,3.718023568465873e+000,
          5.356595537478953e-001},{2.399405315832375e+003,-8.108130218799091e+001,
          3.641959321507089e+000,5.373422290569717e-001},{2.239383750765094e+003,
          -7.749613093565345e+001,3.567855339770726e+000,5.390226231712563e-001},
          {2.090753731341121e+003,-7.408644637791140e+001,3.495652141216298e+000,
          5.407007507053830e-001},{1.952653808168716e+003,-7.084287425064484e+001,
          3.425292296888851e+000,5.423766262188504e-001},{1.824293969495761e+003,
          -6.775658698526449e+001,3.356720357330965e+000,5.440502642174112e-001},
          {1.704945388258175e+003,-6.481925944163990e+001,3.289882770290317e+000,
          5.457216791544545e-001},{1.593935912714465e+003,-6.202304097497358e+001,
          3.224727811476121e+000,5.473908854323666e-001},{1.490648848056936e+003,
          -5.936053328755472e+001,3.161205517518115e+000,5.490578974038881e-001},
          {1.394512592254002e+003,-5.682474952754494e+001,3.099267612151868e+000,
          5.507227293734606e-001},{1.305002583866976e+003,-5.440910349376155e+001,
          3.038867451236471e+000,5.523853955985542e-001},{1.221633497165447e+003,
          -5.210737493440172e+001,2.979959954204727e+000,5.540459102909946e-001},
          {1.143958328479689e+003,-4.991369373166751e+001,2.922501549923314e+000,
          5.557042876182787e-001},{1.071563973096530e+003,-4.782251531429407e+001,
          2.866450117837696e+000,5.573605417048770e-001},{1.004069097487647e+003,
          -4.582860310204230e+001,2.811764935547721e+000,5.590146866335348e-001},
          {9.411214959043084e+002,-4.392700984466779e+001,2.758406626564467e+000,
          5.606667364465596e-001},{8.823958497130813e+002,-4.211306059866846e+001,
          2.706337110626942e+000,5.623167051471074e-001},{8.275910331590102e+002,
          -4.038233540368031e+001,2.655519555526163e+000,5.639646067004543e-001},
          {7.764290444119635e+002,-3.873065665643446e+001,2.605918332887885e+000,
          5.656104550352749e-001},{7.286523598314500e+002,-3.715407256916351e+001,
          2.557498972533741e+000,5.672542640448997e-001},{6.840231188009741e+002,
          -3.564884626586955e+001,2.510228121970509e+000,5.688960475885800e-001},
          {6.423204961199782e+002,-3.421144032546041e+001,2.464073504009842e+000,
          5.705358194927445e-001},{6.033409092767411e+002,-3.283850964957904e+001,
          2.419003880919390e+000,5.721735935522480e-001},{5.668947663597646e+002,
          -3.152688470052121e+001,2.374989013056672e+000,5.738093835316227e-001},
          {5.328072442146844e+002,-3.027356738128294e+001,2.331999627743732e+000,
          5.754432031663234e-001},{5.009158770478630e+002,-2.907571683947941e+001,
          2.290007380866240e+000,5.770750661639714e-001},{4.710701060225499e+002,
          -2.793064247095762e+001,2.248984825962424e+000,5.787049862055952e-001},
          {4.431303458782849e+002,-2.683579521467626e+001,2.208905382049609e+000,
          5.803329769468701e-001},{4.169669853608175e+002,-2.578875908229225e+001,
          2.169743302771505e+000,5.819590520193594e-001},{3.924599612327291e+002,
          -2.478724467824711e+001,2.131473647762967e+000,5.835832250317513e-001},
          {3.694974326826228e+002,-2.382908020411502e+001,2.094072253087125e+000,
          5.852055095710999e-001},{3.479758690185427e+002,-2.291220742271244e+001,
          2.057515706247509e+000,5.868259192040625e-001},{3.277990349520803e+002,
          -2.203467367031391e+001,2.021781318214516e+000,5.884444674781422e-001},
          {3.088773751747854e+002,-2.119462597004226e+001,1.986847098785308e+000,
          5.900611679229281e-001},{2.911276710946399e+002,-2.039030622074293e+001,
          1.952691733147482e+000,5.916760340513410e-001},{2.744727583811454e+002,
          -1.962004641525278e+001,1.919294558620836e+000,5.932890793608796e-001},
          {2.588404421844505e+002,-1.888226154495557e+001,1.886635540737936e+000,
          5.949003173348717e-001},{2.441640574222745e+002,-1.817544854701309e+001,
          1.854695254828505e+000,5.965097614437249e-001},{2.303811979773995e+002,
          -1.749817830600921e+001,1.823454861736828e+000,5.981174251461863e-001},
          {2.174338229345144e+002,-1.684909368569987e+001,1.792896090563822e+000,
          5.997233218906050e-001},{2.052680630074077e+002,-1.622690586536061e+001,
          1.763001219089102e+000,6.013274651161965e-001},{1.938335084437520e+002,
          -1.563038905829366e+001,1.733753053902124e+000,6.029298682543182e-001},
          {1.830833151646721e+002,-1.505837875682940e+001,1.705134914485336e+000,
          6.045305447297478e-001},{1.729738794162456e+002,-1.450976794132127e+001,
          1.677130615134082e+000,6.061295079619681e-001},{1.634643534138694e+002,
          -1.398350312812421e+001,1.649724447957303e+000,6.077267713664593e-001},
          {1.545168100337110e+002,-1.347858315714356e+001,1.622901168714866e+000,
          6.093223483560010e-001},{1.460958410201101e+002,-1.299405538735645e+001,
          1.596645980019152e+000,6.109162523419806e-001},{1.381683087466291e+002,
          -1.252901301082886e+001,1.570944516844422e+000,6.125084967357085e-001},
          {1.307034321865140e+002,-1.208259371162506e+001,1.545782833329511e+000,
          6.140990949497484e-001},{1.236723317608070e+002,-1.165397599514970e+001,
          1.521147387543556e+000,6.156880603992511e-001},{1.170481387221509e+002,
          -1.124237826774210e+001,1.497025029811643e+000,6.172754065033039e-001},
          {1.108056868876664e+002,-1.084705592255838e+001,1.473402988869848e+000,
          6.188611466862878e-001},{1.049215003603412e+002,-1.046729998779377e+001,
          1.450268860366462e+000,6.204452943792466e-001},{9.937360667485126e+001,
          -1.010243494098661e+001,1.427610594553690e+000,6.220278630212706e-001},
          {9.414149562320388e+001,-9.751817308176173e+000,1.405416485272351e+000,
          6.236088660608912e-001},{8.920594267310152e+001,-9.414833664957618e+000,
          1.383675158529162e+000,6.251883169574887e-001},{8.454903027300053e+001,
          -9.090899637706979e+000,1.362375562499242e+000,6.267662291827165e-001},
          {8.015389759910782e+001,-8.779457645122895e+000,1.341506956391433e+000,
          6.283426162219348e-001},{7.600486056876090e+001,-8.479976561864010e+000,
          1.321058901855560e+000,6.299174915756673e-001},{7.208717369456534e+001,
          -8.191949484083496e+000,1.301021252132937e+000,6.314908687610693e-001},
          {6.838705121588522e+001,-7.914893045725918e+000,1.281384143757086e+000,
          6.330627613134094e-001},{6.489158353825010e+001,-7.648346098298011e+000,
          1.262137987358314e+000,6.346331827875775e-001},{6.158865359007402e+001,
          -7.391868500456181e+000,1.243273459030718e+000,6.362021467596020e-001},
          {5.846693732764923e+001,-7.145040366143715e+000,1.224781492411206e+000,
          6.377696668281924e-001},{5.551578714608965e+001,-6.907460700958014e+000,
          1.206653270182385e+000,6.393357566162956e-001},{5.272524836667247e+001,
          -6.678746838311933e+000,1.188880216903054e+000,6.409004297726797e-001},
          {5.008596334489375e+001,-6.458533233599964e+000,1.171453991082903e+000,
          6.424636999735307e-001},{4.758916027537743e+001,-6.246470825439416e+000,
          1.154366478347685e+000,6.440255809240784e-001},{4.522661777454572e+001,
          -6.042226222837200e+000,1.137609784387375e+000,6.455860863602415e-001},
          {4.299059529145632e+001,-5.845480767898403e+000,1.121176228050880e+000,
          6.471452300502958e-001},{4.087385651641105e+001,-5.655930154963713e+000,
          1.105058335319868e+000,6.487030257965678e-001},{3.886958211331500e+001,
          -5.473283382598018e+000,1.089248832461124e+000,6.502594874371552e-001},
          {3.697137968566206e+001,-5.297262376818222e+000,1.073740640458812e+000,
          6.518146288476706e-001},{3.517323133258112e+001,-5.127601210969972e+000,
          1.058526868867246e+000,6.533684639430138e-001},{3.346950230781325e+001,
          -4.964045728469465e+000,1.043600810436168e+000,6.549210066791725e-001},
          {3.185487406683293e+001,-4.806352703624465e+000,1.028955935203351e+000,
          6.564722710550539e-001},{3.032435829488426e+001,-4.654289580618860e+000,
          1.014585885688922e+000,6.580222711143396e-001},{2.887326431964138e+001,
          -4.507633864545065e+000,1.000484471508354e+000,6.595710209473816e-001},
          {2.749717316692134e+001,-4.366172615618259e+000,9.866456644267092e-001,
          6.611185346931201e-001},{2.619193414367822e+001,-4.229702099346732e+000,
          9.730635937337092e-001,6.626648265410450e-001},{2.495363835111331e+001,
          -4.098027281300438e+000,9.597325414590835e-001,6.642099107331829e-001},
          {2.377860550726019e+001,-3.970961446183043e+000,9.466469379706444e-001,
          6.657538015661222e-001},{2.266337233016693e+001,-3.848325831387194e+000,
          9.338013576655492e-001,6.672965133930829e-001},{2.160467672777616e+001,
          -3.729949242177387e+000,9.211905147420358e-001,6.688380606260099e-001},
          {2.059944597797794e+001,-3.615667710660913e+000,9.088092591623421e-001,
          6.703784577377188e-001},{1.964478435281932e+001,-3.505324163030878e+000,
          8.966525727283551e-001,6.719177192640737e-001},{1.873796922977412e+001,
          -3.398768146844634e+000,8.847155653316714e-001,6.734558598062153e-001},
          {1.787642149968706e+001,-3.295855398505439e+000,8.729934710857658e-001,
          6.749928940328205e-001},{1.705772475648577e+001,-3.196447779163808e+000,
          8.614816451578189e-001,6.765288366824221e-001},{1.627958838837261e+001,
          -3.100412774885759e+000,8.501755598619032e-001,6.780637025657604e-001},
          {1.553985861020304e+001,-3.007623409690961e+000,8.390708017061733e-001,
          6.795975065681920e-001},{1.483650268463432e+001,-2.917957920404044e+000,
          8.281630679467027e-001,6.811302636521479e-001},{1.416760134746515e+001,
          -2.831299527564026e+000,8.174481635066645e-001,6.826619888596361e-001},
          {1.353134120238906e+001,-2.747536216213803e+000,8.069219979743360e-001,
          6.841926973148044e-001},{1.292601643446513e+001,-2.666560582542707e+000,
          7.965805827418926e-001,6.857224042265560e-001},{1.235001093430196e+001,
          -2.588269530043726e+000,7.864200279596690e-001,6.872511248912188e-001},
          {1.180180110648852e+001,-2.512564159266709e+000,7.764365399883577e-001,
          6.887788746952784e-001},{1.127994572214277e+001,-2.439349541127092e+000,
          7.666264186212466e-001,6.903056691181669e-001},{1.078308769186625e+001,
          -2.368534595338057e+000,7.569860545909910e-001,6.918315237351190e-001},
          {1.030993774691330e+001,-2.300031826875883e+000,7.475119268835549e-001,
          6.933564542200881e-001},{9.859284768878347e+000,-2.233757299471081e+000,
          7.382006005926595e-001,6.948804763487342e-001},{9.429977302790977e+000,
          -2.169630350046961e+000,7.290487242579775e-001,6.964036060014773e-001},
          {9.020930833273008e+000,-2.107573555178198e+000,7.200530278593177e-001,
          6.979258591666266e-001},{8.631118936097311e+000,-2.047512534366139e+000,
          7.112103204288415e-001,6.994472519435792e-001},{8.259568678315045e+000,
          -1.989375816183700e+000,7.025174879430843e-001,7.009678005461024e-001},
          {7.905362523492994e+000,-1.933094759596863e+000,6.939714913370646e-001,
          7.024875213056877e-001},{7.567629408573509e+000,-1.878603376629717e+000,
          6.855693643504452e-001,7.040064306749948e-001},{7.245546619771394e+000,
          -1.825838268287014e+000,6.773082117040159e-001,7.055245452313755e-001},
          {6.938335727792247e+000,-1.774738495351617e+000,6.691852071288535e-001,
          7.070418816804905e-001},{6.645258809195010e+000,-1.725245462939452e+000,
          6.611975915196259e-001,7.085584568600147e-001},{6.365614540873520e+000,
          -1.677302816738685e+000,6.533426711767790e-001,7.100742877434374e-001},
          {6.098745266050226e+000,-1.630856430792350e+000,6.456178162181659e-001,
          7.115893914439659e-001},{5.844020409205720e+000,-1.585854168116521e+000,
          6.380204585489425e-001,7.131037852185249e-001},{5.600848065869145e+000,
          -1.542245944546190e+000,6.305480906509974e-001,7.146174864718647e-001},
          {5.368663822551122e+000,-1.499983538515395e+000,6.231982636835136e-001,
          7.161305127607802e-001},{5.146934075674603e+000,-1.459020574408473e+000,
          6.159685861501743e-001,7.176428817984416e-001},{4.935153779849062e+000,
          -1.419312432471077e+000,6.088567223360871e-001,7.191546114588450e-001},
          {4.732841752485663e+000,-1.380816146638106e+000,6.018603908156497e-001,
          7.206657197813855e-001},{4.539543342955549e+000,-1.343490383791056e+000,
          5.949773631865258e-001,7.221762249755580e-001},{4.354826796805688e+000,
          -1.307295347831567e+000,5.882054626053450e-001,7.236861454257876e-001},
          {4.178282674581729e+000,-1.272192725811762e+000,5.815425625070392e-001,
          7.251954996964002e-001},{4.009521634668678e+000,-1.238145618364219e+000,
          5.749865853101563e-001,7.267043065367352e-001},{3.848175025968628e+000,
          -1.205118501925514e+000,5.685355012244482e-001,7.282125848864084e-001},
          {3.693892899386763e+000,-1.173077159790875e+000,5.621873269947402e-001,
          7.297203538807227e-001},{3.546341740891187e+000,-1.141988619090690e+000,
          5.559401247257912e-001,7.312276328562487e-001},{3.405206929436500e+000,
          -1.111821138378985e+000,5.497920008403084e-001,7.327344413565636e-001},
          {3.270187120186245e+000,-1.082544103575234e+000,5.437411048209569e-001,
          7.342407991381688e-001},{3.140998924757143e+000,-1.054128048587643e+000,
          5.377856283364672e-001,7.357467261765852e-001},{3.017369744506951e+000,
          -1.026544533480591e+000,5.319238039757309e-001,7.372522426726416e-001},
          {2.899044153352361e+000,-9.997661913653924e-001,5.261539045099664e-001,
          7.387573690589510e-001},{2.785775964091354e+000,-9.737665947672607e-001,
          5.204742416212094e-001,7.402621260065991e-001},{2.677333888058895e+000,
          -9.485203014378125e-001,5.148831652356617e-001,7.417665344320410e-001},
          {2.573496060829918e+000,-9.240027508565234e-001,5.093790623710802e-001,
          7.432706155042201e-001},{2.474052809499689e+000,-9.001902757330506e-001,
          5.039603564117439e-001,7.447743906519216e-001},{2.378804120443931e+000,
          -8.770600388487887e-001,4.986255061308111e-001,7.462778815713633e-001},
          {2.287559402475405e+000,-8.545900081840703e-001,4.933730048957201e-001,
          7.477811102340413e-001},{2.200138517682294e+000,-8.327589429822758e-001,
          4.882013798861766e-001,7.492840988948364e-001},{2.116368371443866e+000,
          -8.115463254255343e-001,4.831091911879579e-001,7.507868701004001e-001},
          {2.036086012815135e+000,-7.909323809234898e-001,4.780950311870275e-001,
          7.522894466978191e-001},{1.959134838570954e+000,-7.708980017762587e-001,
          4.731575236501228e-001,7.537918518435930e-001},{1.885366456932190e+000,
          -7.514247566493858e-001,4.682953231458762e-001,7.552941090129114e-001},
          {1.814639954656823e+000,-7.324948551533699e-001,4.635071142767641e-001,
          7.567962420092698e-001},{1.746820019907857e+000,-7.140911050589521e-001,
          4.587916109601810e-001,7.582982749744263e-001},{1.681779029320273e+000,
          -6.961969236875881e-001,4.541475558846255e-001,7.598002323987182e-001},
          {1.619394453544771e+000,-6.787962807595844e-001,4.495737197402506e-001,
          7.613021391317515e-001},{1.559549975604258e+000,-6.618737004185191e-001,
          4.450689006991003e-001,7.628040203934934e-001},{1.502134836632424e+000,
          -6.454142328694089e-001,4.406319237709913e-001,7.643059017857750e-001},
          {1.447043171573348e+000,-6.294034296210121e-001,4.362616402141224e-001,
          7.658078093042219e-001},{1.394174498370593e+000,-6.138273354867607e-001,
          4.319569270116660e-001,7.673097693506550e-001},{1.343432420370009e+000,
          -5.986724547846682e-001,4.277166862748373e-001,7.688118087459539e-001},
          {1.294725732732976e+000,-5.839257544439922e-001,4.235398447916798e-001,
          7.703139547434321e-001},{1.247966881438976e+000,-5.695746253865943e-001,
          4.194253534307958e-001,7.718162350427407e-001},{1.203072849158344e+000,
          -5.556068845041990e-001,4.153721867289367e-001,7.733186778043174e-001},
          {1.159963947754655e+000,-5.420107427847227e-001,4.113793423526519e-001,
          7.748213116644277e-001},{1.118564587734494e+000,-5.287748063807098e-001,
          4.074458407063869e-001,7.763241657508161e-001},{1.078802507769043e+000,
          -5.158880509921915e-001,4.035707244384177e-001,7.778272696990009e-001},
          {1.040608654311761e+000,-5.033398098623492e-001,3.997530580345837e-001,
          7.793306536692566e-001},{1.003917267676832e+000,-4.911197646737863e-001,
          3.959919274268831e-001,7.808343483642983e-001},{9.686655604482745e-001,
          -4.792179290087323e-001,3.922864395821423e-001,7.823383850477332e-001},
          {9.347935275729121e-001,-4.676246357897185e-001,3.886357221304772e-001,
          7.838427955633055e-001},{9.022439775911922e-001,-4.563305281577600e-001,
          3.850389230167903e-001,7.853476123549728e-001},{8.709622750416257e-001,
          -4.453265454505745e-001,3.814952101441460e-001,7.868528684878805e-001},
          {8.408962141922037e-001,-4.346039124857111e-001,3.780037710512866e-001,
          7.883585976702583e-001},{8.119960630426542e-001,-4.241541312368614e-001,
          3.745638126070998e-001,7.898648342763168e-001},{7.842141445487288e-001,
          -4.139689655197202e-001,3.711745606968078e-001,7.913716133701791e-001},
          {7.575051094416114e-001,-4.040404377634261e-001,3.678352599695338e-001,
          7.928789707309243e-001},{7.318255766054801e-001,-3.943608140101956e-001,
          3.645451735466376e-001,7.943869428787894e-001},{7.071339973871145e-001,
          -3.849225950336849e-001,3.613035827844493e-001,7.958955671026191e-001},
          {6.833909241888801e-001,-3.757185132023703e-001,3.581097870611176e-001,
          7.974048814886176e-001},{6.605584479088350e-001,-3.667415147704448e-001,
          3.549631035218736e-001,7.989149249504874e-001},{6.386004414563145e-001,
          -3.579847585634845e-001,3.518628669202130e-001,8.004257372610424e-001},
          {6.174824768960409e-001,-3.494416066345683e-001,3.488084294219762e-001,
          8.019373590853794e-001},{5.971715000221117e-001,-3.411056120245748e-001,
          3.457991604274862e-001,8.034498320157049e-001},{5.776360443240841e-001,
          -3.329705170046958e-001,3.428344464558457e-001,8.049631986079188e-001},
          {5.588460502815952e-001,-3.250302427624316e-001,3.399136909984816e-001,
          8.064775024200631e-001},{5.407727810343643e-001,-3.172788818833830e-001,
          3.370363144128132e-001,8.079927880527609e-001},{5.233887544226954e-001,
          -3.097106915065160e-001,3.342017538376066e-001,8.095091011917578e-001},
          {5.066677875548836e-001,-3.023200884505798e-001,3.314094631326712e-001,
          8.110264886527152e-001},{4.905848756317561e-001,-2.951016406887826e-001,
          3.286589128198704e-001,8.125449984283928e-001},{4.751160769385945e-001,
          -2.880500600179367e-001,3.259495900597049e-001,8.140646797383735e-001},
          {4.602386051186608e-001,-2.811601986672496e-001,3.232809986635589e-001,
          8.155855830815082e-001},{4.459307014087881e-001,-2.744270408946369e-001,
          3.206526591012421e-001,8.171077602912539e-001},{4.321715938551395e-001,
          -2.678456971393555e-001,3.180641085520652e-001,8.186312645941041e-001},
          {4.189415011741373e-001,-2.614113988398635e-001,3.155149009832065e-001,
          8.201561506713140e-001},{4.062214913409450e-001,-2.551194905970136e-001,
          3.130046072430969e-001,8.216824747241585e-001},{3.939936339725952e-001,
          -2.489654281954533e-001,3.105328152103881e-001,8.232102945429569e-001},
          {3.822408013278497e-001,-2.429447687817379e-001,3.080991299323931e-001,
          8.247396695801337e-001},{3.709466702963435e-001,-2.370531663389923e-001,
          3.057031738328623e-001,8.262706610276031e-001},{3.600957583030854e-001,
          -2.312863674323255e-001,3.033445869493500e-001,8.278033318987772e-001},
          {3.496733671825422e-001,-2.256402043990980e-001,3.010230271918857e-001,
          8.293377471155482e-001},{3.396655214813151e-001,-2.201105889016499e-001,
          2.987381706501068e-001,8.308739736005932e-001},{3.300589897857049e-001,
          -2.146935073828444e-001,2.964897119537793e-001,8.324120803754020e-001},
          {3.208412578073947e-001,-2.093850149119442e-001,2.942773646665175e-001,
          8.339521386644649e-001},{3.120005459911270e-001,-2.041812297929947e-001,
          2.921008617347819e-001,8.354942220060717e-001},{3.035256503638822e-001,
          -1.990783246823497e-001,2.899599559785713e-001,8.370384063702406e-001},
          {2.954061908395492e-001,-1.940725263380565e-001,2.878544206816350e-001,
          8.385847702843330e-001},{2.876323002050054e-001,-1.891601020496199e-001,
          2.857840501721114e-001,8.401333949669464e-001},{2.801948834019232e-001,
          -1.843373598135978e-001,2.837486605559522e-001,8.416843644707666e-001},
          {2.730854228772116e-001,-1.796006366227388e-001,2.817480904497046e-001,
          8.432377658350839e-001},{2.662960891242228e-001,-1.749462945024303e-001,
          2.797822018500715e-001,8.447936892487767e-001},{2.598196879188098e-001,
          -1.703707115781422e-001,2.778508810576263e-001,8.463522282246335e-001},
          {2.536496867746277e-001,-1.658702750316326e-001,2.759540397160137e-001,
          8.479134797859673e-001},{2.477802128823877e-001,-1.614413725921469e-001,
          2.740916159487959e-001,8.494775446665763e-001},{2.421839309050305e-001,
          -1.570799986898184e-001,2.722635741293099e-001,8.510445275252113e-001},
          {2.368786468237419e-001,-1.527827697979022e-001,2.704699099458725e-001,
          8.526145371758300e-001},{2.318809810687322e-001,-1.485463921802132e-001,
          2.687106490539978e-001,8.541876868350633e-001},{2.272033004004703e-001,
          -1.443013471384416e-001,2.669578014924510e-001,8.557900348291792e-001},
          {2.228720273934477e-001,-1.401715084130047e-001,2.652653339510075e-001,
          8.573725333555661e-001},{2.188737474564099e-001,-1.361583230500321e-001,
          2.636349618021100e-001,8.589321368338225e-001},{2.151938108428024e-001,
          -1.322546419048931e-001,2.620646877232015e-001,8.604692374815954e-001},
          {2.118188268906598e-001,-1.284537034390536e-001,2.605526072877775e-001,
          8.619842196559904e-001},{2.087366333201549e-001,-1.247491073246053e-001,
          2.590969039651040e-001,8.634774600465008e-001},{2.059361625352860e-001,
          -1.211347872081701e-001,2.576958444119279e-001,8.649493278615940e-001},
          {2.034074149378808e-001,-1.176049878458108e-001,2.563477740702578e-001,
          8.664001850093022e-001},{2.011413298783185e-001,-1.141542415902366e-001,
          2.550511130233508e-001,8.678303862720165e-001},{1.991298125068586e-001,
          -1.107773498429863e-001,2.538043521210758e-001,8.692402794757654e-001},
          {1.973655647896050e-001,-1.074693611653381e-001,2.526060493134096e-001,
          8.706302056542128e-001},{1.958421213759138e-001,-1.042255560507937e-001,
          2.514548262377977e-001,8.720004992075637e-001},{1.945537958776381e-001,
          -1.010414298773090e-001,2.503493649859753e-001,8.733514880566440e-001},
          {1.934955970749939e-001,-9.791267666147004e-002,2.492884050660330e-001,
          8.746834937923431e-001},{1.926632043856072e-001,-9.483517540616522e-002,
          2.482707405530666e-001,8.759968318205693e-001},{1.920530013650005e-001,
          -9.180497812140505e-002,2.472952174051379e-001,8.772918115029676e-001},
          {1.916619394589189e-001,-8.881829486636758e-002,2.463607309170215e-001,
          8.785687362935541e-001},{1.914875823983919e-001,-8.587148427990259e-002,
          2.454662233501901e-001,8.798279038713941e-001},{1.915280993815957e-001,
          -8.296104268947961e-002,2.446106816792321e-001,8.810696062695512e-001},
          {1.917821599981230e-001,-8.008359226919655e-002,2.437931354640896e-001,
          8.822941300004101e-001},{1.922489958278585e-001,-7.723587356759790e-002,
          2.430126548622808e-001,8.835017561775065e-001},{1.929283914742223e-001,
          -7.441473634943605e-002,2.422683487355767e-001,8.846927606340636e-001},
          {1.938205682251700e-001,-7.161712923792232e-002,2.415593628605291e-001,
          8.858674140382891e-001},{1.949263025484482e-001,-6.884009487087414e-002,
          2.408848782619473e-001,8.870259820056076e-001},{1.962468368843349e-001,
          -6.608076049330205e-002,2.402441096090453e-001,8.881687252078944e-001},
          {1.977839043493731e-001,-6.333633184166496e-002,2.396363037192911e-001,
          8.892958994798933e-001},{1.995397017281764e-001,-6.060408601603758e-002,
          2.390607381333165e-001,8.904077559228296e-001},{2.015168884164766e-001,
          -5.788136574944486e-002,2.385167197765595e-001,8.915045410054051e-001},
          {2.037186493235506e-001,-5.516557435579349e-002,2.380035836869622e-001,
          8.925864966622013e-001},{2.061485578928091e-001,-5.245416769018642e-002,
          2.375206918021687e-001,8.936538603896150e-001},{2.088107303179244e-001,
          -4.974465205292488e-002,2.370674318361935e-001,8.947068653393980e-001},
          {2.117096846999846e-001,-4.703457622106781e-002,2.366432161836148e-001,
          8.957457404098935e-001},{2.148505149907584e-001,-4.432153007089228e-002,
          2.362474809142938e-001,8.967707103350046e-001},{2.182386749730879e-001,
          -4.160313569771003e-002,2.358796847823731e-001,8.977819957710477e-001},
          {2.218802015852066e-001,-3.887704757707568e-002,2.355393083306903e-001,
          8.987798133814337e-001},{2.257816115052553e-001,-3.614094572355721e-002,
          2.352258530014959e-001,8.997643759193978e-001},{2.299498407093479e-001,
          -3.339253121132149e-002,2.349388403129885e-001,9.007358923086878e-001},
          {2.343924725771772e-001,-3.062952596424444e-002,2.346778110852589e-001,
          9.016945677223748e-001},{2.391175338601718e-001,-2.784966495255222e-002,
          2.344423246756947e-001,9.026406036597976e-001},{2.441335689704040e-001,
          -2.505069440041885e-002,2.342319582824293e-001,9.035741980217020e-001},
          {2.494466737102023e-001,-2.223033411770663e-002,2.340463061820594e-001,
          9.044955451836203e-001},{2.550861106065699e-001,-1.938660447233538e-002,
          2.338849799791759e-001,9.054048360675704e-001},{2.610094533269595e-001,
          -1.651647391820168e-002,2.337476039501077e-001,9.063022582120580e-001},
          {2.672873914645409e-001,-1.361879651128243e-002,2.336338247023430e-001,
          9.071879958403298e-001},{2.738106591896983e-001,-1.068971575200308e-002,
          2.335432928777375e-001,9.080622299280794e-001},{2.804606750369759e-001,
          -7.726659110718780e-003,2.334756804033219e-001,9.089251382668985e-001},
          {2.904290562079965e-001,-4.764098488806071e-003,2.334307556704802e-001,
          9.097768955293063e-001},{2.933750710558286e-001,-1.656982949129257e-003,
          2.334078134409505e-001,9.106176733264468e-001},{3.050168191487940e-001,
          1.350589639466686e-003,2.334074430077944e-001,9.114476402584719e-001},{
          3.126013688318755e-001,4.484047200702626e-003,2.334283798227455e-001,
          9.122669621103098e-001},{3.215543582266510e-001,7.641858728022285e-003,
          2.334709180402272e-001,9.130758015729857e-001},{3.309493854379925e-001,
          1.084606285102256e-002,2.335346788693272e-001,9.138743186727137e-001},{
          3.408036404253549e-001,1.409903898921036e-002,2.336194205790645e-001,
          9.146626706292474e-001},{3.511350954219710e-001,1.740319488595970e-002,
          2.337249122941095e-001,9.154410119512660e-001},{3.619625548115306e-001,
          2.076096799975756e-002,2.338509336517329e-001,9.162094944895526e-001},{
          3.733053046371622e-001,2.417483133717817e-002,2.339972744575906e-001,
          9.169682674889458e-001},{3.851835101117528e-001,2.764728816995566e-002,
          2.341637343834541e-001,9.177174776391662e-001},{3.976175439013757e-001,
          3.118088055196995e-002,2.343501226196413e-001,9.184572691244551e-001},{
          4.109386287917567e-001,3.477533291071943e-002,2.345562634056419e-001,
          9.191877836721225e-001},{4.252825118499027e-001,3.843116371032156e-002,
          2.347819891940276e-001,9.199091605999706e-001},{4.408049129756115e-001,
          4.214792375866371e-002,2.350271518933623e-001,9.206215368626223e-001},{
          4.576846245311496e-001,4.630547834114645e-002,2.353172753172934e-001,
          9.213904696290003e-001},{4.784513590715939e-001,5.060507038628476e-002,
          2.356363599220260e-001,9.221630514821407e-001},{4.920827258189274e-001,
          5.519541297814200e-002,2.359854289691031e-001,9.229393998641423e-001},{
          5.178937679266293e-001,5.981545467360165e-002,2.363668043436880e-001,
          9.237196381740548e-001},{5.391049374883102e-001,6.475414966613934e-002,
          2.367809391058319e-001,9.245038963244220e-001},{5.634449341225508e-001,
          6.989029053033601e-002,2.372302039790004e-001,9.252923108029000e-001},{
          5.897153325658239e-001,7.526860985601419e-002,2.377162421944522e-001,
          9.260850256994325e-001},{6.181112209433559e-001,8.090819466323959e-002,
          2.382410055571628e-001,9.268821929717398e-001},{6.488525677875635e-001,
          8.683004454631531e-002,2.388066021212003e-001,9.276839731306028e-001},{
          6.821878414375597e-001,9.305731296729698e-002,2.394153123100448e-001,
          9.284905359221661e-001},{7.183985201026177e-001,9.961558066647835e-002,
          2.400696071150384e-001,9.293020610812173e-001},{7.578044037403948e-001,
          1.065331716202092e-001,2.407721686690386e-001,9.301187391645777e-001},{
          8.007698251219902e-001,1.138415194678852e-001,2.415259135709149e-001,
          9.309407724751908e-001},{8.477112195704598e-001,1.215755901968623e-001,
          2.423340194130125e-001,9.317683760891560e-001},{8.991059063712774e-001,
          1.297743778800449e-001,2.431999550154734e-001,9.326017789999588e-001},{
          9.555029755126038e-001,1.384814779165823e-001,2.441275150268687e-001,
          9.334412253964867e-001},{1.017535937344632e+000,1.477457654552941e-001,
          2.451208595937071e-001,9.342869760943128e-001},{1.085938205408345e+000,
          1.576221875223210e-001,2.461845600471582e-001,9.351393101430466e-001},{
          1.161561582275224e+000,1.681727002303767e-001,2.473236516456673e-001,
          9.359985266367291e-001},{1.245398446129048e+000,1.794673774990541e-001,
          2.485436946915644e-001,9.368649467591372e-001},{1.338608148309784e+000,
          1.915857290298620e-001,2.498508455805677e-001,9.377389161019090e-001},{
          1.442548258110234e+000,2.046182699257000e-001,2.512519396760876e-001,
          9.386208073007041e-001},{1.563550207326141e+000,2.186179243163746e-001,
          2.527547076453380e-001,9.395110230435863e-001},{1.684329410181329e+000,
          2.339579695432694e-001,2.543669871107666e-001,9.404099995167338e-001},{
          1.840290137060555e+000,2.502660355294551e-001,2.561000525033712e-001,
          9.413182103660764e-001},{2.005174237802519e+000,2.682089305034622e-001,
          2.579624203753087e-001,9.422361716947373e-001},{2.195430692141073e+000,
          2.877169741014608e-001,2.599675919987584e-001,9.431644460877734e-001},{
          2.412904324653398e+000,3.090556749171306e-001,2.621289837025392e-001,
          9.441036504515273e-001},{2.662767304254523e+000,3.324773127469931e-001,
          2.644622565363322e-001,9.450544623460853e-001},{2.951438780835094e+000,
          3.582796665096927e-001,2.669853329547631e-001,9.460176287724212e-001},{
          3.286954018925421e+000,3.868162802973410e-001,2.697188268971239e-001,
          9.469939763450140e-001},{3.679465741376691e+000,4.185095197683239e-001,
          2.726865770992523e-001,9.479844234324657e-001},{4.141931236862925e+000,
          4.538673480408977e-001,2.759163138940035e-001,9.489899947466461e-001},{
          4.691069298400168e+000,4.935050283817702e-001,2.794405007063843e-001,
          9.500118390046373e-001},{5.348707073258958e+000,5.381735273260513e-001,
          2.832974063174888e-001,9.510512504832676e-001},{6.143705486256990e+000,
          5.887970106525733e-001,2.875324861260081e-001,9.521096955549476e-001},{
          7.114743725479455e+000,6.465229722160121e-001,2.922001819000289e-001,
          9.531888456688770e-001},{8.321324877449055e+000,7.127119364606617e-001,
          2.973664920699020e-001,9.542906187727378e-001},{9.814008057546337e+000,
          7.895125341007474e-001,3.031108408227720e-001,9.554172319331690e-001},{
          1.173472061857719e+001,8.786331494420789e-001,3.095347921261885e-001,
          9.565712690270144e-001},{1.420449343150175e+001,9.836535262794647e-001,
          3.167598605019126e-001,9.577557700959503e-001},{1.746385659351800e+001,
          1.108209112465122e+000,3.249454080118249e-001,9.589743460224295e-001},{
          2.185981459948901e+001,1.257510034299458e+000,3.342947309034364e-001,
          9.602313398961775e-001},{2.794948473262666e+001,1.438394626077943e+000,
          3.450759860826211e-001,9.615320435137206e-001},{3.665958868667153e+001,
          1.659932031051734e+000,3.576504808355101e-001,9.628830054950714e-001},{
          4.961877309657803e+001,1.933871190036903e+000,3.725190487198159e-001,
          9.642924773126242e-001},{6.984375504183272e+001,2.274822138787811e+000,
          3.903995922147242e-001,9.657710805637312e-001},{1.034774217208668e+002,
          2.696074492740470e+000,4.123731761320471e-001,9.673328436111374e-001},{
          1.581230920983324e+002,3.266020040491545e+000,4.399786317612097e-001,
          9.689968887258295e-001},{2.515136935955693e+002,4.116442075807741e+000,
          4.756363207390761e-001,9.707903327720178e-001},{4.255666011618887e+002,
          5.543864685060169e+000,5.231660521339230e-001,9.727536601397832e-001},{
          7.825530244524709e+002,6.095169952013788e+000,5.741651534308233e-001,
          9.743751414991224e-001},{1.601387467228535e+003,5.526394469524922e+000,
          6.475446574462375e-001,9.761711567563309e-001},{3.517379521473430e+003,
          4.655838112548601e+000,7.599439282112659e-001,9.783035737380645e-001},{
          7.962846678376361e+003,9.518793744286704e+000,9.225514220968945e-001,
          9.807363487766135e-001},{1.824488327643979e+004,2.078256392728106e+001,
          1.131128321260709e+000,9.829773592443036e-001},{4.540306810221719e+004,
          1.488976251891372e+001,1.387654000750968e+000,9.848111708264992e-001},{
          1.145958554994318e+005,-3.053821008062807e+001,1.732038158743400e+000,
          9.864872284392217e-001},{2.714454865411694e+005,-3.766348045575876e+001,
          2.199850765561659e+000,9.882925910565035e-001},{6.114567935601252e+005,
          3.983023186009633e+002,2.891002115453413e+000,9.904976309221367e-001},{
          1.241850100485509e+006,7.637348298339904e+002,3.505557353710815e+000,
          9.917024335783234e-001},{2.901091663911621e+006,2.287151249154257e+002,
          3.996356201581334e+000,9.922645331286384e-001},{8.629777329944847e+006,
          -1.301634709362246e+003,5.052771746981934e+000,9.932357014649955e-001},
          {2.912091392721209e+007,-6.531467250818030e+003,6.921517889213511e+000,
          9.942966215510268e-001},{9.412813865309173e+007,-5.286393541194419e+003,
          8.979056034617720e+000,9.957010756859428e-001},{2.036070618782550e+008,
          1.028469165095266e+004,1.130107943827922e+001,9.966743300764792e-001},{
          1.674526211291653e+012,-7.945254783461587e+007,9.414997405411956e+002,
          9.973127499065179e-001}};
      constant Real[Ninterval, 4] svcoef={{-1.167161242280822e+010,
          1.878696788040639e+006,-3.414627808635271e+002,1.257192752866231e+000},
          {-1.035354888344887e+010,1.770211704883063e+006,-3.314921184815092e+002,
          1.256278981521677e+000},{-9.010871046855169e+009,1.675234821593873e+006,
          -3.233186928839511e+002,1.255515159251215e+000},{-7.670087323896805e+009,
          1.503104694936961e+006,-3.056454829469166e+002,1.253788981093666e+000},
          {-6.528525227742667e+009,1.348617412883818e+006,-2.889263517656612e+002,
          1.252068489141656e+000},{-5.556819130397623e+009,1.209977756821469e+006,
          -2.731107664395464e+002,1.250353786912934e+000},{-4.729570822211771e+009,
          1.085555117462545e+006,-2.581498340050509e+002,1.248644873308041e+000},
          {-4.025383319196040e+009,9.738978630494837e+005,-2.439979849174128e+002,
          1.246941821048949e+000},{-3.425938223747980e+009,8.736974103745150e+005,
          -2.306117633794419e+002,1.245244670239726e+000},{-2.915696321437560e+009,
          7.837826255347068e+005,-2.179503198145804e+002,1.243553497923841e+000},
          {-2.481383208327286e+009,7.030988445381357e+005,-2.059747132443750e+002,
          1.241868349123961e+000},{-2.111686390084153e+009,6.307004543248878e+005,
          -1.946483220668824e+002,1.240189304980033e+000},{-1.797034775339657e+009,
          5.657386555897944e+005,-1.839360670319048e+002,1.238516382333624e+000},
          {-1.529214800743476e+009,5.074499659892993e+005,-1.738049564593241e+002,
          1.236849634718179e+000},{-1.301273763706718e+009,4.551518279503796e+005,
          -1.642239738649408e+002,1.235189150544434e+000},{-1.107273660839951e+009,
          4.082289549017351e+005,-1.551633835517684e+002,1.233534955827648e+000},
          {-9.421731741085697e+008,3.661311815312429e+005,-1.465954002475946e+002,
          1.231887143503433e+000},{-8.023146343545597e+008,3.283866390101237e+005,
          -1.384935880133614e+002,1.230245745364984e+000},{-6.852307594168044e+008,
          2.946092675025202e+005,-1.308334802778386e+002,1.228610827813656e+000},
          {-5.870901801301618e+008,2.644005082934081e+005,-1.235917413237229e+002,
          1.226982459618363e+000},{-5.047068181055782e+008,2.378107583024218e+005,
          -1.168778656810235e+002,1.225392995014713e+000},{-4.351080450261749e+008,
          2.149782115590958e+005,-1.108542675702452e+002,1.223894955882774e+000},
          {-3.754631816409877e+008,1.944610872742684e+005,-1.051729507319718e+002,
          1.222412562340188e+000},{-3.243003876591392e+008,1.760126494519494e+005,
          -9.981271620297964e+001,1.220945658781368e+000},{-2.803704024187839e+008,
          1.594135405147079e+005,-9.475377996554323e+001,1.219494091303989e+000},
          {-2.426161580886689e+008,1.444689114102572e+005,-8.997767687518686e+001,
          1.218057707682420e+000},{-2.101376500670390e+008,1.310052300243061e+005,
          -8.546716076385087e+001,1.216636357341712e+000},{-1.821729409586426e+008,
          1.188682298364962e+005,-8.120612512230242e+001,1.215229891332141e+000},
          {-1.580713395011833e+008,1.079202781593172e+005,-7.717951465716868e+001,
          1.213838162304302e+000},{-1.372810899764895e+008,9.803887891483332e+004,
          -7.337325952167046e+001,1.212461024484717e+000},{-1.193305568497935e+008,
          8.911463290966404e+004,-6.977419934441511e+001,1.211098333651978e+000},
          {-1.038177842631264e+008,8.104994158345387e+004,-6.637002475122108e+001,
          1.209749947113391e+000},{-9.040040036718562e+007,7.375769881825958e+004,
          -6.314921765813308e+001,1.208415723682116e+000},{-7.878443856624676e+007,
          6.715992689454205e+004,-6.010099316854539e+001,1.207095523654803e+000},
          {-6.871974414947894e+007,6.118702847513706e+004,-5.721525561719147e+001,
          1.205789208789701e+000},{-5.999133752771001e+007,5.577663404305128e+004,
          -5.448254540510249e+001,1.204496642285233e+000},{-5.241543869142986e+007,
          5.087295055300280e+004,-5.189400007463385e+001,1.203217688759031e+000},
          {-4.583415581126005e+007,4.642596046130997e+004,-4.944131149429202e+001,
          1.201952214227427e+000},{-4.011228675603470e+007,4.239086070618492e+004,
          -4.711669043018321e+001,1.200700086085366e+000},{-3.513311357163611e+007,
          3.872739999770453e+004,-4.491282933447061e+001,1.199461173086765e+000},
          {-3.079702502223688e+007,3.539954399663577e+004,-4.282287446858340e+001,
          1.198235345325283e+000},{-2.701759418906320e+007,3.237483582224888e+004,
          -4.084039003202591e+001,1.197022474215511e+000},{-2.372076973145581e+007,
          2.962417023636633e+004,-3.895933616247480e+001,1.195822432474547e+000},
          {-2.084264185672811e+007,2.712136254406240e+004,-3.717403962809318e+001,
          1.194635094103993e+000},{-1.832795661554030e+007,2.484284118361123e+004,
          -3.547917043105402e+001,1.193460334372309e+000},{-1.612910315484070e+007,
          2.276740549221483e+004,-3.386972055424017e+001,1.192298029797559e+000},
          {-1.420493817465342e+007,2.087595838808486e+004,-3.234098209159364e+001,
          1.191148058130523e+000},{-1.251978525903208e+007,1.915127628793518e+004,
          -3.088852777905769e+001,1.190010298338169e+000},{-1.104283839085355e+007,
          1.757784331955985e+004,-2.950819407825404e+001,1.188884630587475e+000},
          {-9.747385274891593e+006,1.614165584070271e+004,-2.819606332104048e+001,
          1.187770936229595e+000},{-8.610258724756623e+006,1.483007183595590e+004,
          -2.694844841479200e+001,1.186669097784365e+000},{-7.611347860356514e+006,
          1.363167257285838e+004,-2.576187830531837e+001,1.185578998925132e+000},
          {-6.733210449194347e+006,1.253614352179986e+004,-2.463308451072768e+001,
          1.184500524463906e+000},{-5.960664814163764e+006,1.153415408137276e+004,
          -2.355898800825970e+001,1.183433560336828e+000},{-5.280521597699627e+006,
          1.061726682066825e+004,-2.253668783797127e+001,1.182377993589938e+000},
          {-4.681293638655025e+006,9.777843148067454e+003,-2.156344973986173e+001,
          1.181333712365246e+000},{-4.152968837995382e+006,9.008964808911329e+003,
          -2.063669596087836e+001,1.180300605887091e+000},{-3.686828565114908e+006,
          8.304365766483923e+003,-1.975399574397403e+001,1.179278564448786e+000},
          {-3.275266327776558e+006,7.658365108421354e+003,-1.891305611231615e+001,
          1.178267479399534e+000},{-2.911625574521497e+006,7.065807076565250e+003,
          -1.811171341970251e+001,1.177267243131628e+000},{-2.590114661892789e+006,
          6.522019111917333e+003,-1.734792596167091e+001,1.176277749067896e+000},
          {-2.305650275370526e+006,6.022753490926198e+003,-1.661976587626541e+001,
          1.175298891649416e+000},{-2.053788951097264e+006,5.564153643271859e+003,
          -1.592541287535999e+001,1.174330566323474e+000},{-1.830650417503742e+006,
          5.142717130166380e+003,-1.526314768679637e+001,1.173372669531767e+000},
          {-1.632819252290972e+006,4.755254885285894e+003,-1.463134563215786e+001,
          1.172425098698841e+000},{-1.457310558157280e+006,4.398869159670537e+003,
          -1.402847159348952e+001,1.171487752220765e+000},{-1.301502456237975e+006,
          4.070921570400577e+003,-1.345307431038991e+001,1.170560529454023e+000},
          {-1.163093581080859e+006,3.769009894238661e+003,-1.290378157209061e+001,
          1.169643330704624e+000},{-1.040059054359292e+006,3.490944949502028e+003,
          -1.237929552902521e+001,1.168736057217427e+000},{-9.306220845951777e+005,
          3.234732704043220e+003,-1.187838848926460e+001,1.167838611165672e+000},
          {-8.332175097131218e+005,2.998554122300491e+003,-1.139989865622131e+001,
          1.166950895640710e+000},{-7.464663784985374e+005,2.780749557180561e+003,
          -1.094272640598105e+001,1.166072814641923e+000},{-6.691556891366435e+005,
          2.579804982448421e+003,-1.050583075721938e+001,1.165204273066841e+000},
          {-6.002151747908264e+005,2.394337509561513e+003,-1.008822589061445e+001,
          1.164345176701438e+000},{-5.387000166680566e+005,2.223083665065604e+003,
          -9.688978048092071e+000,1.163495432210602e+000},{-4.837771715710186e+005,
          2.064889150637393e+003,-9.307202614248977e+000,1.162654947128783e+000},
          {-4.347104808441157e+005,1.918698359847450e+003,-8.942061260376542e+000,
          1.161823629850803e+000},{-3.908482209910512e+005,1.783545349089750e+003,
          -8.592759344255985e+000,1.161001389622835e+000},{-3.516161249361212e+005,
          1.658547033549894e+003,-8.258543553706538e+000,1.160188136533529e+000},
          {-3.165035478016587e+005,1.542893819027835e+003,-7.938699394039895e+000,
          1.159383781505299e+000},{-2.850598559817247e+005,1.435844989118608e+003,
          -7.632549251081720e+000,1.158588236285744e+000},{-2.568853836992341e+005,
          1.336721560377161e+003,-7.339450190895453e+000,1.157801413439231e+000},
          {-2.316252113167582e+005,1.244900875868593e+003,-7.058792075603022e+000,
          1.157023226338597e+000},{-2.089652497780896e+005,1.159812303640403e+003,
          -6.789995822552769e+000,1.156253589156990e+000},{-1.886260028704987e+005,
          1.080931941447458e+003,-6.532511605482741e+000,1.155492416859840e+000},
          {-1.703595756576603e+005,1.007779146610457e+003,-6.285817340840077e+000,
          1.154739625196958e+000},{-1.539455303444279e+005,9.399125006097200e+002,
          -6.049417130211369e+000,1.153995130694738e+000},{-1.391878353597992e+005,
          8.769265149992824e+002,-5.822839859171091e+000,1.153258850648495e+000},
          {-1.259118679027340e+005,8.184484746241886e+002,-5.605637854535695e+000,
          1.152530703114902e+000},{-1.139626359191102e+005,7.641359827753867e+002,
          -5.397385660782585e+000,1.151810606904539e+000},{-1.032013550357087e+005,
          7.136737153582978e+002,-5.197678765965424e+000,1.151098481574539e+000},
          {-9.350496389204710e+004,6.667719731724156e+002,-5.006132610481427e+000,
          1.150394247421343e+000},{-8.476330492175093e+004,6.231638226625424e+002,
          -4.822381409307250e+000,1.149697825473546e+000},{-7.687824464670279e+004,
          5.826035987524953e+002,-4.646077237885241e+000,1.149009137484835e+000},
          {-6.976204933005408e+004,5.448649346498113e+002,-4.476889054980945e+000,
          1.148328105927014e+000},{-6.333647369305392e+004,5.097393221858990e+002,
          -4.314501843141601e+000,1.147654653983123e+000},{-5.753143008675712e+004,
          4.770344420945451e+002,-4.158615740492024e+000,1.146988705540629e+000},
          {-5.228434076819440e+004,4.465730200783362e+002,-4.008945287331126e+000,
          1.146330185184698e+000},{-4.753914508465970e+004,4.181914609969991e+002,
          -3.865218653140307e+000,1.145679018191555e+000},{-4.324567909424259e+004,
          3.917388090779465e+002,-3.727176949977069e+000,1.145035130521896e+000},
          {-3.935897394044224e+004,3.670756753534608e+002,-3.594573558074095e+000,
          1.144398448814387e+000},{-3.583878264355163e+004,3.440733666158342e+002,
          -3.467173508311998e+000,1.143768900379221e+000},{-3.264892946834709e+004,
          3.226129150306674e+002,-3.344752869211387e+000,1.143146413191748e+000},
          {-2.975703079636661e+004,3.025844320516610e+002,-3.227098213411754e+000,
          1.142530915886152e+000},{-2.713396553903700e+004,2.838862715090525e+002,
          -3.114006060655961e+000,1.141922337749209e+000},{-2.475361222892791e+004,
          2.664244520011594e+002,-3.005282394893281e+000,1.141320608714076e+000},
          {-2.259246929329500e+004,2.501119931930805e+002,-2.900742176144558e+000,
          1.140725659354155e+000},{-2.062942089795645e+004,2.348684065079063e+002,
          -2.800208902194028e+000,1.140137420877001e+000},{-1.884547713413705e+004,
          2.206191719071575e+002,-2.703514177914426e+000,1.139555825118279e+000},
          {-1.722353739702725e+004,2.072952590638357e+002,-2.610497311259647e+000,
          1.138980804535772e+000},{-1.574820565669981e+004,1.948327142632579e+002,
          -2.521004936730899e+000,1.138412292203431e+000},{-1.440561272630618e+004,
          1.831722652704424e+002,-2.434890653346931e+000,1.137850221805471e+000},
          {-1.318326353872169e+004,1.722589632456998e+002,-2.352014682990452e+000,
          1.137294527630510e+000},{-1.206988185328727e+004,1.620418365675164e+002,
          -2.272243543846235e+000,1.136745144565746e+000},{-1.105529962362607e+004,
          1.524736029253813e+002,-2.195449748531088e+000,1.136202008091175e+000},
          {-1.013034181716861e+004,1.435103830129309e+002,-2.121511510792387e+000,
          1.135665054273839e+000},{-9.286710899115280e+003,1.351114286113316e+002,
          -2.050312467770768e+000,1.135134219762123e+000},{-8.516925185585011e+003,
          1.272389163739304e+002,-1.981741426500199e+000,1.134609441780069e+000},
          {-7.814215167392292e+003,1.198576991982375e+002,-1.915692106619513e+000,
          1.134090658121731e+000},{-7.172456309463685e+003,1.129351140608649e+002,
          -1.852062910163217e+000,1.133577807145568e+000},{-6.586111850428207e+003,
          1.064408049999422e+002,-1.790756700400648e+000,1.133070827768850e+000},
          {-6.050171835345558e+003,1.003465460629108e+002,-1.731680587420741e+000,
          1.132569659462107e+000},{-5.560092621539761e+003,9.462607475690936e+001,
          -1.674745725978995e+000,1.132074242243597e+000},{-5.111765690517253e+003,
          8.925496645655235e+001,-1.619867130786789e+000,1.131584516673807e+000},
          {-4.701461004393561e+003,8.421047987386929e+001,-1.566963488558861e+000,
          1.131100423849972e+000},{-4.325801937265625e+003,7.947145063101340e+001,
          -1.515956992240450e+000,1.130621905400621e+000},{-3.981719970706350e+003,
          7.501816080096197e+001,-1.466773172300048e+000,1.130148903480148e+000},
          {-3.666433998378832e+003,7.083224791831155e+001,-1.419340747082342e+000,
          1.129681360763410e+000},{-3.377417860032481e+003,6.689659881427446e+001,
          -1.373591471646139e+000,1.129219220440331e+000},{-3.112376370352019e+003,
          6.319526122840436e+001,-1.329459999019620e+000,1.128762426210546e+000},
          {-2.869224586596547e+003,5.971336256002279e+001,-1.286883747719661e+000,
          1.128310922278051e+000},{-2.646066878698053e+003,5.643703113312434e+001,
          -1.245802774455418e+000,1.127864653345879e+000},{-2.441179052490817e+003,
          5.335332525583549e+001,-1.206159654087104e+000,1.127423564610798e+000},
          {-2.252992087969359e+003,5.045016740473830e+001,-1.167899365297260e+000,
          1.126987601758015e+000},{-2.080079180685374e+003,4.771628543389871e+001,
          -1.130969182338600e+000,1.126556710955913e+000},{-1.921138426792311e+003,
          4.514114975040469e+001,-1.095318569370784e+000,1.126130838850798e+000},
          {-1.774986715083261e+003,4.271493085367734e+001,-1.060899085833134e+000,
          1.125709932561658e+000},{-1.640543981075735e+003,4.042844155788508e+001,
          -1.027664288390328e+000,1.125293939674950e+000},{-1.516825450176648e+003,
          3.827309661545938e+001,-9.955696444190738e-001,1.124882808239393e+000},
          {-1.402934644797308e+003,3.624087344333366e+001,-9.645724472776511e-001,
          1.124476486760781e+000},{-1.298051190829407e+003,3.432426598985062e+001,
          -9.346317324287821e-001,1.124074924196815e+000},{-1.201427843555840e+003,
          3.251625738258812e+001,-9.057082044918685e-001,1.123678069951939e+000},
          {-1.112382332639507e+003,3.081028253305661e+001,-8.777641610741774e-001,
          1.123285873872205e+000},{-1.030289990482704e+003,2.920019517275006e+001,
          -8.507634226388910e-001,1.122898286240140e+000},{-9.545814037954651e+002,
          2.768024521664869e+001,-8.246712685981502e-001,1.122515257769640e+000},
          {-8.847352179903480e+002,2.624504692644900e+001,-7.994543708220493e-001,
          1.122136739600862e+000},{-8.202750157624278e+002,2.488955712219283e+001,
          -7.750807349200021e-001,1.121762683295148e+000},{-7.607643646864409e+002,
          2.360905024813576e+001,-7.515196415313357e-001,1.121393040829949e+000},
          {-7.058044555340915e+002,2.239909971536202e+001,-7.287415925975793e-001,
          1.121027764593767e+000},{-6.550297990234562e+002,2.125555560066715e+001,
          -7.067182574172425e-001,1.120666807381118e+000},{-6.081054766904550e+002,
          2.017452705997341e+001,-6.854224233914087e-001,1.120310122387493e+000},
          {-5.647251310415043e+002,1.915236652516444e+001,-6.648279487465394e-001,
          1.119957663204345e+000},{-5.246073073245650e+002,1.818565101191613e+001,
          -6.449097155478253e-001,1.119609383814090e+000},{-4.874944380246073e+002,
          1.727117028068883e+001,-6.256435880489638e-001,1.119265238585110e+000},
          {-4.531499690131564e+002,1.640591080457108e+001,-6.070063697166392e-001,
          1.118925182266775e+000},{-4.213569929980251e+002,1.558704419185258e+001,
          -5.889757645456558e-001,1.118589169984485e+000},{-3.919163181558395e+002,
          1.481191450974968e+001,-5.715303387652269e-001,1.118257157234713e+000},
          {-3.646450553664385e+002,1.407802747939932e+001,-5.546494850349343e-001,
          1.117929099880068e+000},{-3.393752203043368e+002,1.338304002382417e+001,
          -5.383133878866853e-001,1.117604954144370e+000},{-3.159524776279070e+002,
          1.272475057653111e+001,-5.225029907903754e-001,1.117284676607735e+000},
          {-2.942348741380071e+002,1.210108978046953e+001,-5.071999645835167e-001,
          1.116968224201675e+000},{-2.740919863183586e+002,1.151011260918757e+001,
          -4.923866777802942e-001,1.116655554204213e+000},{-2.554037558983814e+002,
          1.094998990086499e+001,-4.780461674068305e-001,1.116346624234999e+000},
          {-2.380598009202213e+002,1.041900155948028e+001,-4.641621119578042e-001,
          1.116041392250460e+000},{-2.219584008845426e+002,9.915529102386795e+000,
          -4.507188047600041e-001,1.115739816538935e+000},{-2.070060510539739e+002,
          9.438050073207766e+000,-4.377011294382324e-001,1.115441855715845e+000},
          {-1.931164504418314e+002,8.985131047005984e+000,-4.250945352192337e-001,
          1.115147468718868e+000},{-1.802102310100627e+002,8.555423116398927e+000,
          -4.128850148149304e-001,1.114856614803115e+000},{-1.682141656369273e+002,
          8.147655878814247e+000,-4.010590817995265e-001,1.114569253536338e+000},
          {-1.570607576689517e+002,7.760632934266394e+000,-3.896037500077707e-001,
          1.114285344794130e+000},{-1.466877631682851e+002,7.393227269003488e+000,
          -3.785065133766781e-001,1.114004848755154e+000},{-1.370377407366794e+002,
          7.044376929114794e+000,-3.677553266988977e-001,1.113727725896368e+000},
          {-1.280577195832078e+002,6.713081210827975e+000,-3.573385873661134e-001,
          1.113453936988272e+000},{-1.196987359562168e+002,6.398396598589270e+000,
          -3.472451175418697e-001,1.113183443090161e+000},{-1.119156299903978e+002,
          6.099433714827095e+000,-3.374641476858871e-001,1.112916205545393e+000},
          {-1.046666771658784e+002,5.815353767791457e+000,-3.279853001222415e-001,
          1.112652185976661e+000},{-9.791330185485612e+001,5.545365486858695e+000,
          -3.187985736676302e-001,1.112391346281281e+000},{-9.161985391952307e+001,
          5.288722384756864e+000,-3.098943289750698e-001,1.112133648626488e+000},
          {-8.575340530044392e+001,5.044720137245840e+000,-3.012632743602935e-001,
          1.111879055444745e+000},{-8.028343773174927e+001,4.812693734417916e+000,
          -2.928964520012951e-001,1.111627529429055e+000},{-7.518179322684912e+001,
          4.592015664927063e+000,-2.847852254065942e-001,1.111379033528286e+000},
          {-7.042236090351322e+001,4.382093167137382e+000,-2.769212664359781e-001,
          1.111133530942511e+000},{-6.598097748846658e+001,4.182366469691380e+000,
          -2.692965437566774e-001,1.110890985118343e+000},{-6.183529536801900e+001,
          3.992306887951382e+000,-2.619033113605164e-001,1.110651359744292e+000},
          {-5.796458338458645e+001,3.811414767059530e+000,-2.547340973966659e-001,
          1.110414618746117e+000},{-5.434965024181786e+001,3.639218005629175e+000,
          -2.477816939273175e-001,1.110180726282199e+000},{-5.097272117872193e+001,
          3.475270394432624e+000,-2.410391467313756e-001,1.109949646738908e+000},
          {-4.781728753969381e+001,3.319149959947196e+000,-2.344997455526618e-001,
          1.109721344725985e+000},{-4.486806590326451e+001,3.170457809715834e+000,
          -2.281570150977289e-001,1.109495785071926e+000},{-4.211087764798335e+001,
          3.028816655189627e+000,-2.220047059445052e-001,1.109272932819375e+000},
          {-3.953255089399676e+001,2.893869530061677e+000,-2.160367860342251e-001,
          1.109052753220513e+000},{-3.712088444697060e+001,2.765278795726399e+000,
          -2.102474326561080e-001,1.108835211732461e+000},{-3.486452988379367e+001,
          2.642724832352832e+000,-2.046310243774980e-001,1.108620274012686e+000},
          {-3.275296521562360e+001,2.525905196629955e+000,-1.991821337422336e-001,
          1.108407905914401e+000},{-3.077640612607013e+001,2.414533510698032e+000,
          -1.938955198666938e-001,1.108198073481974e+000},{-2.892576875467384e+001,
          2.308338647291225e+000,-1.887661216370296e-001,1.107990742946342e+000},
          {-2.719260655221808e+001,2.207063812446913e+000,-1.837890509715300e-001,
          1.107785880720415e+000},{-2.556907195833716e+001,2.110465784504171e+000,
          -1.789595864863502e-001,1.107583453394488e+000},{-2.404786193436341e+001,
          2.018314105057650e+000,-1.742731673035715e-001,1.107383427731652e+000},
          {-2.262219267228373e+001,1.930390438141688e+000,-1.697253872422143e-001,
          1.107185770663204e+000},{-2.128574048713125e+001,1.846487791138621e+000,
          -1.653119890350547e-001,1.106990449284039e+000},{-2.003263310347830e+001,
          1.766410019480312e+000,-1.610288590676970e-001,1.106797430848068e+000},
          {-1.885739666271851e+001,1.689971111419810e+000,-1.568720219860535e-001,
          1.106606682763607e+000},{-1.775493736745766e+001,1.616994694704592e+000,
          -1.528376357874969e-001,1.106418172588765e+000},{-1.672051102762514e+001,
          1.547313487069378e+000,-1.489219869625882e-001,1.106231868026832e+000},
          {-1.574969663925623e+001,1.480768795888941e+000,-1.451214858670679e-001,
          1.106047736921662e+000},{-1.483837797396761e+001,1.417210073731107e+000,
          -1.414326622958197e-001,1.105865747253029e+000},{-1.398271440313103e+001,
          1.356494434837758e+000,-1.378521611505417e-001,1.105685867131996e+000},
          {-1.317913026999323e+001,1.298486293574206e+000,-1.343767384064626e-001,
          1.105508064796260e+000},{-1.242428692388935e+001,1.243056912289198e+000,
          -1.310032570641007e-001,1.105332308605480e+000},{-1.171507278035640e+001,
          1.190084079716421e+000,-1.277286834334243e-001,1.105158567036609e+000},
          {-1.104858517393140e+001,1.139451742725932e+000,-1.245500834352500e-001,
          1.104986808679193e+000},{-1.042211251594205e+001,1.091049661445034e+000,
          -1.214646190752247e-001,1.104817002230662e+000},{-9.833127930109274e+000,
          1.044773141735465e+000,-1.184695451190952e-001,1.104649116491605e+000},
          {-9.279269222529393e+000,1.000522693449853e+000,-1.155622057650780e-001,
          1.104483120361017e+000},{-8.758331594475001e+000,9.582037846231296e-001,
          -1.127400315718840e-001,1.104318982831536e+000},{-8.268254945039644e+000,
          9.177265681872020e-001,-1.100005364272110e-001,1.104156672984648e+000},
          {-7.807115847858402e+000,8.790056460390960e-001,-1.073413146627254e-001,
          1.103996159985876e+000},{-7.373115629180458e+000,8.419598198523868e-001,
          -1.047600382440301e-001,1.103837413079935e+000},{-6.964572964185544e+000,
          8.065118808283763e-001,-1.022544541103427e-001,1.103680401585863e+000},
          {-6.579917319551989e+000,7.725884103231008e-001,-9.982238159976631e-002,
          1.103525094892129e+000},{-6.217678026064315e+000,7.401195591188906e-001,
          -9.746170992509612e-002,1.103371462451692e+000},{-5.876481003699939e+000,
          7.090388893243341e-001,-9.517039583419153e-002,1.103219473777050e+000},
          {-5.555039937632146e+000,6.792831791393206e-001,-9.294646126452588e-002,
          1.103069098435232e+000},{-5.252151337727452e+000,6.507922663341224e-001,
          -9.078799114828991e-002,1.102920306042765e+000},{-4.966688624137329e+000,
          6.235088884904741e-001,-8.869313127201903e-002,1.102773066260599e+000},
          {-4.697597099082865e+000,5.973785350753152e-001,-8.666008621865683e-002,
          1.102627348788986e+000},{-4.443889321006219e+000,5.723493085615286e-001,
          -8.468711739120274e-002,1.102483123362320e+000},{-4.204639802405735e+000,
          5.483717858473124e-001,-8.277254109567965e-002,1.102340359743926e+000},
          {-3.978982672410267e+000,5.253989052231248e-001,-8.091472672412192e-002,
          1.102199027720805e+000},{-3.766104946723917e+000,5.033858263846861e-001,
          -7.911209494828850e-002,1.102059097098311e+000},{-3.565246496739293e+000,
          4.822898463553391e-001,-7.736311607075418e-002,1.101920537694806e+000},
          {-3.375693166702355e+000,4.620702628019282e-001,-7.566630831640270e-002,
          1.101783319336218e+000},{-3.196776175731432e+000,4.426882955432985e-001,
          -7.402023630082621e-002,1.101647411850568e+000},{-3.027868289265530e+000,
          4.241069821558813e-001,-7.242350948267441e-002,1.101512785062427e+000},
          {-2.868380956603266e+000,4.062910862438896e-001,-7.087478069160028e-002,
          1.101379408787292e+000},{-2.717761648825286e+000,3.892070113306511e-001,
          -6.937274471398268e-002,1.101247252825911e+000},{-2.575492776805616e+000,
          3.728227297727842e-001,-6.791613694488873e-002,1.101116286958535e+000},
          {-2.441087575492705e+000,3.571076890125111e-001,-6.650373203673411e-002,
          1.100986480939071e+000},{-2.314089601003278e+000,3.420327522372873e-001,
          -6.513434266096387e-002,1.100857804489185e+000},{-2.194069980955622e+000,
          3.275701217828866e-001,-6.380681826769433e-002,1.100730227292302e+000},
          {-2.080626276127093e+000,3.136932793741042e-001,-6.252004391971047e-002,
          1.100603718987523e+000},{-1.973379870081554e+000,3.003769146973490e-001,
          -6.127293913386867e-002,1.100478249163457e+000},{-1.871975877273442e+000,
          2.875968805007567e-001,-6.006445681803470e-002,1.100353787351948e+000},
          {-1.776079761978281e+000,2.753301177489863e-001,-5.889358216906679e-002,
          1.100230303021708e+000},{-1.685377974351372e+000,2.635546224548870e-001,
          -5.775933170287378e-002,1.100107765571849e+000},{-1.599575248513736e+000,
          2.522493798833729e-001,-5.666075222975589e-002,1.099986144325295e+000},
          {-1.518393998763328e+000,2.413943236898121e-001,-5.559691992948053e-002,
          1.099865408522100e+000},{-1.441573373151687e+000,2.309702912325227e-001,
          -5.456693943451667e-002,1.099745527312619e+000},{-1.368867734589837e+000,
          2.209589757712106e-001,-5.356994293865919e-002,1.099626469750589e+000},
          {-1.300046167587472e+000,2.113428906117814e-001,-5.260508936047872e-002,
          1.099508204786056e+000},{-1.234891346467230e+000,2.021053268185756e-001,
          -5.167156351033650e-002,1.099390701258173e+000},{-1.173198705444031e+000,
          1.932303174866275e-001,-5.076857530908452e-002,1.099273927887873e+000},
          {-1.114775448009057e+000,1.847026001930233e-001,-4.989535901624339e-002,
          1.099157853270368e+000},{-1.059440641210220e+000,1.765075920716501e-001,
          -4.905117251505244e-002,1.099042445867529e+000},{-1.007023132646987e+000,
          1.686313435356952e-001,-4.823529656692645e-002,1.098927674000076e+000},
          {-9.573623681232882e-001,1.610605238473588e-001,-4.744703416850136e-002,
          1.098813505839624e+000},{-9.103067285419199e-001,1.537823810200982e-001,
          -4.668570986231731e-002,1.098699909400549e+000},{-8.657134181084795e-001,
          1.467847197346915e-001,-4.595066911465587e-002,1.098586852531666e+000},
          {-8.234480247181129e-001,1.400558758840660e-001,-4.524127770154400e-002,
          1.098474302907740e+000},{-7.833836306847527e-001,1.335846880004829e-001,
          -4.455692110940590e-002,1.098362228020779e+000},{-7.454007724787563e-001,
          1.273604788213846e-001,-4.389700397971351e-002,1.098250595171141e+000},
          {-7.093867102613078e-001,1.213730291305892e-001,-4.326094954621643e-002,
          1.098139371458416e+000},{-6.752351859000392e-001,1.156125586897596e-001,
          -4.264819911326340e-002,1.098028523772093e+000},{-6.428458916404382e-001,
          1.100697043849075e-001,-4.205821154126008e-002,1.097918018781999e+000},
          {-6.121243204484043e-001,1.047355035145177e-001,-4.149046276247566e-002,
          1.097807822928491e+000},{-5.829812077024473e-001,9.960137266115672e-002,
          -4.094444529841480e-002,1.097697902412399e+000},{-5.553323463516771e-001,
          9.465909211282406e-002,-4.041966781121276e-002,1.097588223184712e+000},
          {-5.290983018769104e-001,8.990078930542095e-002,-3.991565466360545e-002,
          1.097478750935989e+000},{-5.042039900286437e-001,8.531892107954550e-002,
          -3.943194549015325e-002,1.097369451085481e+000},{-4.805786848276957e-001,
          8.090626225535701e-002,-3.896809480286970e-002,1.097260288769965e+000},
          {-4.581553822544535e-001,7.665588629356712e-002,-3.852367158513845e-002,
          1.097151228832265e+000},{-4.368710839101541e-001,7.256115807618124e-002,
          -3.809825893429213e-002,1.097042235809448e+000},{-4.166659728273346e-001,
          6.861571312219809e-002,-3.769145367706548e-002,1.096933273920688e+000},
          {-3.974838071080961e-001,6.481345301685161e-002,-3.730286604710058e-002,
          1.096824307054777e+000},{-3.792712543399244e-001,6.114852713700537e-002,
          -3.693211933043777e-002,1.096715298757269e+000},{-3.619780828618504e-001,
          5.761532647168631e-002,-3.657884956265647e-002,1.096606212217247e+000},
          {-3.455566815276582e-001,5.420846842432888e-002,-3.624270520729187e-002,
          1.096497010253680e+000},{-3.299621094861046e-001,5.092278977953486e-002,
          -3.592334687380059e-002,1.096387655301374e+000},{-3.151519038052869e-001,
          4.775333582428087e-002,-3.562044703062108e-002,1.096278109396484e+000},
          {-3.010858568925735e-001,4.469535018894293e-002,-3.533368973476431e-002,
          1.096168334161571e+000},{-2.877260222305396e-001,4.174426753748317e-002,
          -3.506277037838072e-002,1.096058290790178e+000},{-2.750364404645829e-001,
          3.889570313316693e-002,-3.480739543898168e-002,1.095947940030928e+000},
          {-2.629831468064490e-001,3.614544648287300e-002,-3.456728225020585e-002,
          1.095837242171080e+000},{-2.515340199362101e-001,3.348945271938262e-002,
          -3.434215877564163e-002,1.095726157019559e+000},{-2.406586002995336e-001,
          3.092383411927447e-002,-3.413176339382135e-002,1.095614643889409e+000},
          {-2.303281947793209e-001,2.844485621163648e-002,-3.393584471062294e-002,
          1.095502661579664e+000},{-2.205155458031833e-001,2.604892674078030e-002,
          -3.375416134971540e-002,1.095390168356583e+000},{-2.111948886947761e-001,
          2.373259209892301e-002,-3.358648178896612e-002,1.095277121934247e+000},
          {-2.023418904624849e-001,2.149253081769280e-002,-3.343258418644718e-002,
          1.095163479454475e+000},{-1.939334528829362e-001,1.932554604167274e-002,
          -3.329225621812505e-002,1.095049197466017e+000},{-1.859477537233797e-001,
          1.722856136015816e-002,-3.316529493473407e-002,1.094934231903014e+000},
          {-1.783641264153182e-001,1.519861470134868e-002,-3.305150662158253e-002,
          1.094818538062666e+000},{-1.711630023223341e-001,1.323285303316979e-002,
          -3.295070667069486e-002,1.094702070582085e+000},{-1.643259022708403e-001,
          1.132852818633101e-002,-3.286271946617035e-002,1.094584783414292e+000},
          {-1.578352716519453e-001,9.482990227879400e-003,-3.278737827038020e-002,
          1.094466629803301e+000},{-1.516745199919222e-001,7.693684441660621e-003,
          -3.272452513343139e-002,1.094347562258269e+000},{-1.458279673702965e-001,
          5.958146760596810e-003,-3.267401080554415e-002,1.094227532526641e+000},
          {-1.402807290110952e-001,4.273998186553273e-003,-3.263569465492298e-002,
          1.094106491566266e+000},{-1.350187580684957e-001,2.638942378886687e-003,
          -3.260944461005679e-002,1.093984389516410e+000},{-1.300287214613593e-001,
          1.050760098283643e-003,-3.259513709707835e-002,1.093861175667613e+000},
          {-1.252980510881369e-001,-4.926930328170846e-004,-3.259265700107719e-002,
          1.093736798430343e+000},{-1.208148059513224e-001,-1.993491944687124e-003,
          -3.260189762661594e-002,1.093611205302381e+000},{-1.165677227796157e-001,
          -3.453644121755644e-003,-3.262276068118421e-002,1.093484342834852e+000},
          {-1.125461563667504e-001,-4.875093794032855e-003,-3.265515625962785e-002,
          1.093356156596868e+000},{-1.087399966215703e-001,-6.259725904413122e-003,
          -3.269900284369064e-002,1.093226591138662e+000},{-1.051397545722765e-001,
          -7.609367460085121e-003,-3.275422732128897e-002,1.093095589953180e+000},
          {-1.017363957762588e-001,-8.925793255991769e-003,-3.282076499971125e-002,
          1.092963095436013e+000},{-9.852144216178711e-002,-1.021072638057550e-002,
          -3.289855965570027e-002,1.092829048843598e+000},{-9.548686792267386e-002,
          -1.146584294409076e-002,-3.298756357594890e-002,1.092693390249574e+000},
          {-9.262510156753394e-002,-1.269277437900251e-002,-3.308773762526614e-002,
          1.092556058499214e+000},{-8.992900988612509e-002,-1.389311018260152e-002,
          -3.319905132538444e-002,1.092416991161816e+000},{-8.739188464906093e-002,
          -1.506840068008259e-002,-3.332148294678389e-002,1.092276124480920e+000},
          {-8.500738921456238e-002,-1.622016040192641e-002,-3.345501961458242e-002,
          1.092133393322250e+000},{-8.276959948001254e-002,-1.734986965842096e-002,
          -3.359965743818405e-002,1.091988731119247e+000},{-8.067292166344241e-002,
          -1.845897846985461e-002,-3.375540164665517e-002,1.091842069816039e+000},
          {-7.871214577495787e-002,-1.954890787713057e-002,-3.392226675377865e-002,
          1.091693339807705e+000},{-7.688236749343953e-002,-2.062105393477184e-002,
          -3.410027672821032e-002,1.091542469877672e+000},{-7.517903122777866e-002,
          -2.167678909232968e-002,-3.428946519791137e-002,1.091389387132079e+000},
          {-7.359788435365057e-002,-2.271746557145173e-002,-3.448987566368195e-002,
          1.091234016930905e+000},{-7.213496529807099e-002,-2.374441795105308e-002,
          -3.470156173993946e-002,1.091076282815684e+000},{-7.078664709747612e-002,
          -2.475896478998424e-002,-3.492458742242282e-002,1.090916106433582e+000},
          {-6.954953734834717e-002,-2.576241320349298e-002,-3.515902736727997e-002,
          1.090753407457601e+000},{-6.842055334357715e-002,-2.675605967578415e-002,
          -3.540496721654386e-002,1.090588103502687e+000},{-6.739689298150288e-002,
          -2.774119353806004e-002,-3.566250393471657e-002,1.090420110037451e+000},
          {-6.647599481840270e-002,-2.871910028240180e-002,-3.593174618253033e-002,
          1.090249340291247e+000},{-6.565559167808195e-002,-2.969106335868627e-002,
          -3.621281472572473e-002,1.090075705156262e+000},{-6.493365627398073e-002,
          -3.065836816359168e-002,-3.650584287130890e-002,1.089899113084334e+000},
          {-6.430842408472148e-002,-3.162230451330045e-002,-3.681097694769039e-002,
          1.089719469978098e+000},{-6.377841573206161e-002,-3.258416951694268e-002,
          -3.712837682203768e-002,1.089536679076100e+000},{-6.334237459730568e-002,
          -3.354527207676258e-002,-3.745821645677120e-002,1.089350640831460e+000},
          {-6.299931960292200e-002,-3.450693519565747e-002,-3.780068452222145e-002,
          1.089161252783616e+000},{-6.274855690363090e-002,-3.547049958158794e-002,
          -3.815598505196914e-002,1.088968409422674e+000},{-6.258962932227907e-002,
          -3.643732858924495e-002,-3.852433814992687e-002,1.088772002045827e+000},
          {-6.252237552594815e-002,-3.740881109502971e-002,-3.890598076615168e-002,
          1.088571918605265e+000},{-6.254690896242934e-002,-3.838636646260465e-002,
          -3.930116752711852e-002,1.088368043546958e+000},{-6.266364244831302e-002,
          -3.937144869619517e-002,-3.971017164197188e-002,1.088160257639610e+000},
          {-6.287328319117271e-002,-4.036555176939004e-002,-4.013328587796861e-002,
          1.087948437793056e+000},{-6.317686471529196e-002,-4.137021437944927e-002,
          -4.057082362458787e-002,1.087732456865278e+000},{-6.357574767711911e-002,
          -4.238702597030984e-002,-4.102312004137679e-002,1.087512183457172e+000},
          {-6.407164470783205e-002,-4.341763253645162e-002,-4.149053330906206e-002,
          1.087287481694067e+000},{-6.466664636574100e-002,-4.446374318746806e-002,
          -4.197344598438829e-002,1.087058210992956e+000},{-6.536322059434012e-002,
          -4.552713774389385e-002,-4.247226647187895e-002,1.086824225814272e+000},
          {-6.616428759721223e-002,-4.660967333451058e-002,-4.298743063263810e-002,
          1.086585375396910e+000},{-6.707319059880698e-002,-4.771329437422422e-002,
          -4.351940351974055e-002,1.086341503475118e+000},{-6.809379051719827e-002,
          -4.884004012133992e-002,-4.406868129064020e-002,1.086092447975686e+000},
          {-6.923558511367642e-002,-4.999196690374660e-002,-4.463579361515062e-002,
          1.085838040693730e+000},{-7.049988138972356e-002,-5.117136544992598e-002,
          -4.522130521822819e-002,1.085578106945194e+000},{-7.188620542131699e-002,
          -5.238072225909109e-002,-4.582581885465249e-002,1.085312465193973e+000},
          {-7.339274099366680e-002,-5.364413985831130e-002,-4.646040027521749e-002,
          1.085036412823779e+000},{-7.500954773269826e-002,-5.492497782325354e-002,
          -4.710632451399192e-002,1.084758207947855e+000},{-7.673673432833014e-002,
          -5.622189579867198e-002,-4.776212196116022e-002,1.084478467134268e+000},
          {-7.857550333131255e-002,-5.753625488563768e-002,-4.842767881855225e-002,
          1.084197220574224e+000},{-8.052734288370235e-002,-5.886938522147935e-002,
          -4.910289264837146e-002,1.083914499613667e+000},{-8.259407010993335e-002,
          -6.022258916344622e-002,-4.978767167516485e-002,1.083630336649792e+000},
          {-8.477775911831006e-002,-6.159714721340068e-002,-5.048193412171477e-002,
          1.083344765033191e+000},{-8.708080113955191e-002,-6.299432003883736e-002,
          -5.118560761903612e-002,1.083057818975364e+000},{-8.950584765384662e-002,
          -6.441535367085308e-002,-5.189862863655786e-002,1.082769533461264e+000},
          {-9.205583518148568e-002,-6.586148203903283e-002,-5.262094197327757e-002,
          1.082479944166658e+000},{-9.473397681422530e-002,-6.733393026815319e-002,
          -5.335250028030908e-002,1.082189087380031e+000},{-9.754375455528717e-002,
          -6.883391781405844e-002,-5.409326361800470e-002,1.081896999928780e+000},
          {-1.004889430537072e-001,-7.036266070476557e-002,-5.484319904975906e-002,
          1.081603719109501e+000},{-1.035735781946822e-001,-7.192137498268748e-002,
          -5.560228025918928e-002,1.081309282622144e+000},{-1.068019749773503e-001,
          -7.351127863515777e-002,-5.637048720388151e-002,1.081013728507841e+000},
          {-1.101787499902488e-001,-7.513359354342586e-002,-5.714780579175685e-002,
          1.080717095090215e+000},{-1.137088060108335e-001,-7.678954829834185e-002,
          -5.793422757552009e-002,1.080419420919993e+000},{-1.173973070410327e-001,
          -7.848038080842838e-002,-5.872974947289480e-002,1.080120744722770e+000},
          {-1.212497678441141e-001,-8.020733845529093e-002,-5.953437351668309e-002,
          1.079821105349743e+000},{-1.252719700472134e-001,-8.197168217757889e-002,
          -6.034810660246008e-002,1.079520541731282e+000},{-1.294700211546631e-001,
          -8.377468696961547e-002,-6.117096027413883e-002,1.079219092833192e+000},
          {-1.338503700750963e-001,-8.561764374303535e-002,-6.200295051492537e-002,
          1.078916797615539e+000},{-1.384197709577187e-001,-8.750186189508519e-002,
          -6.284409755180367e-002,1.078613694993897e+000},{-1.431853353658080e-001,
          -8.942867014032002e-002,-6.369442568095514e-002,1.078309823802917e+000},
          {-1.481545174104211e-001,-9.139941856567219e-002,-6.455396310036206e-002,
          1.078005222762096e+000},{-1.533351702300495e-001,-9.341547956575609e-002,
          -6.542274175644600e-002,1.077699930443627e+000},{-1.587354634820050e-001,
          -9.547825103285042e-002,-6.630079719598207e-002,1.077393985242266e+000},
          {-1.643640090876028e-001,-9.758915575387375e-002,-6.718816844083814e-002,
          1.077087425347061e+000},{-1.702298127665787e-001,-9.974964419697471e-002,
          -6.808489785802697e-002,1.076780288714918e+000},{-1.763422817767454e-001,
          -1.019611961271160e-001,-6.899103104367133e-002,1.076472613045863e+000},
          {-1.827112750381146e-001,-1.042253212629891e-001,-6.990661672048851e-002,
          1.076164435759950e+000},{-1.893470894923299e-001,-1.065435614567023e-001,
          -7.083170663269980e-002,1.075855793975729e+000},{-1.962605127165320e-001,
          -1.089174914651409e-001,-7.176635545593288e-002,1.075546724490185e+000},
          {-2.034627974654094e-001,-1.113487211960143e-001,-7.271062070759818e-002,
          1.075237263760114e+000},{-2.109657066826481e-001,-1.138388965833026e-001,
          -7.366456266798066e-002,1.074927447884822e+000},{-2.187815400532935e-001,
          -1.163897009783962e-001,-7.462824430457526e-002,1.074617312590122e+000},
          {-2.269231322486189e-001,-1.190028571417117e-001,-7.560173119833084e-002,
          1.074306893213548e+000},{-2.354038806028248e-001,-1.216801282391285e-001,
          -7.658509148189741e-002,1.073996224690738e+000},{-2.442378202565233e-001,
          -1.244233187393023e-001,-7.757839577778078e-002,1.073685341542923e+000},
          {-2.534395283451278e-001,-1.272342778387637e-001,-7.858171713389295e-002,
          1.073374277865470e+000},{-2.630263592208533e-001,-1.301148743711012e-001,
          -7.959513104281542e-002,1.073063067317448e+000},{-2.730051134964604e-001,
          -1.330671775579355e-001,-8.061871489472258e-002,1.072751743112126e+000},
          {-2.834065958432523e-001,-1.360929306822043e-001,-8.165254963474328e-002,
          1.072440338008417e+000},{-2.942333101794055e-001,-1.391944214222225e-001,
          -8.269671635638208e-002,1.072128884302168e+000},{-3.054697678952821e-001,
          -1.423740192943417e-001,-8.375129913345693e-002,1.071817413823248e+000},
          {-3.170567570317931e-001,-1.456342483062608e-001,-8.481638378906832e-002,
          1.071505957923588e+000},{-3.306168617540374e-001,-1.489587293359699e-001,
          -8.589210145617054e-002,1.071194547476514e+000},{-3.409850517367228e-001,
          -1.524212808452965e-001,-8.697834037358347e-002,1.070883212875128e+000},
          {-3.560258309587398e-001,-1.559011033901600e-001,-8.807563275717535e-002,
          1.070571984040678e+000},{-3.693952037952778e-001,-1.595118380297836e-001,
          -8.918357985816929e-002,1.070260890269993e+000},{-3.838111583549971e-001,
          -1.632041776149361e-001,-9.030255764252720e-002,1.069949960599530e+000},
          {-3.988287520315456e-001,-1.669904093902224e-001,-9.143260204604514e-002,
          1.069639223399451e+000},{-4.144733321913969e-001,-1.708730877160433e-001,
          -9.257381383873017e-002,1.069328706585730e+000},{-4.307713785387899e-001,
          -1.748548319916569e-001,-9.372629570383198e-002,1.069018437574774e+000},
          {-4.477502767932388e-001,-1.789383318342014e-001,-9.489015220206132e-002,
          1.068708443282907e+000},{-4.654387110151121e-001,-1.831263430257065e-001,
          -9.606548976685919e-002,1.068398750126322e+000},{-4.838661501934946e-001,
          -1.874216961724761e-001,-9.725241665146278e-002,1.068089384021467e+000},
          {-5.030632737861358e-001,-1.918272907282402e-001,-9.845104292529755e-002,
          1.067780370385895e+000},{-5.235374589086956e-001,-1.963417315274094e-001,
          -9.966148935023214e-002,1.067471734139486e+000},{-5.454914032389386e-001,
          -2.009649239097508e-001,-1.008838772519371e-001,1.067163499706100e+000},
          {-5.691589559314858e-001,-2.056953492856035e-001,-1.021183461925116e-001,
          1.066855691015596e+000},{-5.948100549339186e-001,-2.110255040137948e-001,
          -1.034822753625355e-001,1.066519576356437e+000},{-6.235735359755632e-001,
          -2.165957325688549e-001,-1.048868425206513e-001,1.066177762224400e+000},
          {-6.499081473123812e-001,-2.224933799811154e-001,-1.063338865224673e-001,
          1.065830074548712e+000},{-6.837787055262851e-001,-2.285973841168222e-001,
          -1.078260017738615e-001,1.065476330621825e+000},{-7.167680580575481e-001,
          -2.350681790211194e-001,-1.093649281364889e-001,1.065116338398494e+000},
          {-7.529421660388130e-001,-2.418587175888764e-001,-1.109534924500986e-001,
          1.064749896111096e+000},{-7.918478434536762e-001,-2.490076352352779e-001,
          -1.125942698775614e-001,1.064376791182773e+000},{-8.337579503056568e-001,
          -2.565420848384871e-001,-1.142901236298031e-001,1.063996799632633e+000},
          {-8.789796651735242e-001,-2.644919033636966e-001,-1.160441401751793e-001,
          1.063609685150805e+000},{-9.278592389976171e-001,-2.728899480510872e-001,
          -1.178596518948347e-001,1.063215198130870e+000},{-9.807885348650018e-001,
          -2.817724684979601e-001,-1.197402626436758e-001,1.062813074603089e+000},
          {-1.038211963449425e+000,-2.911795476170365e-001,-1.216898765582236e-001,
          1.062403035055771e+000},{-1.100635026079546e+000,-3.011556050874361e-001,
          -1.237127306959247e-001,1.061984783130254e+000},{-1.168634591893341e+000,
          -3.117499794663595e-001,-1.258134320829727e-001,1.061558004172562e+000},
          {-1.242871047312425e+000,-3.230176068616857e-001,-1.279969998819422e-001,
          1.061122363622202e+000},{-1.324102816333368e+000,-3.350198128649087e-001,
          -1.302689135412735e-001,1.060677505215274e+000},{-1.413204046652451e+000,
          -3.478252360881645e-001,-1.326351679601656e-001,1.060223048975250e+000},
          {-1.511185630627330e+000,-3.615109178443726e-001,-1.351023368667481e-001,
          1.059758588960120e+000},{-1.619221197038109e+000,-3.761635786122374e-001,
          -1.376776459309125e-001,1.059283690729083e+000},{-1.738677889702752e+000,
          -3.918811400429350e-001,-1.403690573333936e-001,1.058797888485215e+000},
          {-1.871154359990751e+000,-4.087745223058986e-001,-1.431853680336985e-001,
          1.058300681842389e+000},{-2.018526589606020e+000,-4.269697926301481e-001,
          -1.461363243040554e-001,1.057791532154715e+000},{-2.185501792184186e+000,
          -4.465841288025065e-001,-1.492328186957302e-001,1.057269858334624e+000},
          {-2.364687153396257e+000,-4.679154024903533e-001,-1.524865743220330e-001,
          1.056735032070606e+000},{-2.576475123351074e+000,-4.908877748574237e-001,
          -1.559120016473587e-001,1.056186372337097e+000},{-2.809603261630487e+000,
          -5.159839044005667e-001,-1.595231052389059e-001,1.055623138920609e+000},
          {-3.075454975098822e+000,-5.433260214541975e-001,-1.633376814220988e-001,
          1.055044525513794e+000},{-3.378476048700296e+000,-5.732358362636583e-001,
          -1.673748772676717e-001,1.054449650639562e+000},{-3.725624075390214e+000,
          -6.060595365408650e-001,-1.716566425727572e-001,1.053837547969356e+000},
          {-4.125513088548122e+000,-6.422048242798819e-001,-1.762080296688844e-001,
          1.053207154504926e+000},{-4.588900079051337e+000,-6.821546123391310e-001,
          -1.810577742248455e-001,1.052557296675667e+000},{-5.129342151488261e+000,
          -7.264844420275155e-001,-1.862390135536310e-001,1.051886673785578e+000},
          {-5.764097830251668e+000,-7.758847747289787e-001,-1.917901826032635e-001,
          1.051193838170567e+000},{-6.515378231730130e+000,-8.311897985680916e-001,
          -1.977561416081993e-001,1.050477171237241e+000},{-7.412109909279641e+000,
          -8.934149834663464e-001,-2.041896093864123e-001,1.049734854297595e+000},
          {-8.492455381030945e+000,-9.638065423607585e-001,-2.111530046471992e-001,
          1.048964832761054e+000},{-9.807474389689094e+000,-1.043907256650206e+000,
          -2.187208392607184e-001,1.048164771754150e+000},{-1.142992555561826e+001,
          -1.135606773901190e+000,-2.269829647144973e-001,1.047332000543470e+000},
          {-1.344511926099734e+001,-1.241495308018550e+000,-2.360481455742939e-001,
          1.046463442140266e+000},{-1.600738269476274e+001,-1.364375395477736e+000,
          -2.460518881297009e-001,1.045555523007033e+000},{-1.929939535516280e+001,
          -1.508513275807175e+000,-2.571603987700460e-001,1.044604055466647e+000},
          {-2.362120150582920e+001,-1.678967132778218e+000,-2.695862540141585e-001,
          1.043604082766197e+000},{-2.942152881801653e+001,-1.882583607807427e+000,
          -2.836015162163547e-001,1.042549669910840e+000},{-3.741453654687421e+001,
          -2.128389007332268e+000,-2.995629186888021e-001,1.041433617232253e+000},
          {-4.878270682458398e+001,-2.428336462205647e+000,-3.179486577792697e-001,
          1.040247057754742e+000},{-6.558832836460495e+001,-2.797988793419757e+000,
          -3.394177234686278e-001,1.038978876337398e+000},{-9.164855359795394e+001,
          -3.256574496899152e+000,-3.649096511422550e-001,1.037614844862927e+000},
          {-1.346442592691005e+002,-3.822745465072996e+000,-3.958270232324012e-001,
          1.036136285584020e+000},{-2.039488892785857e+002,-4.585663115601926e+000,
          -4.341576010582943e-001,1.034517909421716e+000},{-3.213729265046176e+002,
          -5.715603682655638e+000,-4.830053729894114e-001,1.032724118072463e+000},
          {-5.380530697149483e+002,-7.590740438263201e+000,-5.472440337555892e-001,
          1.030702209952531e+000},{-9.773668143802523e+002,-8.397564013673986e+000,
          -6.149721615017588e-001,1.028987687176493e+000},{-1.971206182132680e+003,
          -7.954972432593549e+000,-7.107673680064054e-001,1.027043503002403e+000},
          {-4.259063749453282e+003,-7.470160381920227e+000,-8.552169229520203e-001,
          1.024677777723123e+000},{-9.468420868233850e+003,-1.441169226818975e+001,
          -1.061676619743433e+000,1.021911421684383e+000},{-2.124426475615268e+004,
          -2.969103328338514e+001,-1.321932106107769e+000,1.019310988957590e+000},
          {-5.142304350768700e+004,-2.757198727294517e+001,-1.633808439690381e+000,
          1.017155605087379e+000},{-1.261916077251016e+005,1.340795831729274e+001,
          -2.041513938530926e+000,1.015172127346691e+000},{-2.907555625955585e+005,
          3.100216772602235e+000,-2.587089312710111e+000,1.013030579652139e+000},
          {-6.443400705406987e+005,-4.736727283746432e+002,-3.393782437455662e+000,
          1.010424690909639e+000},{-1.284212584824039e+006,-8.719164629810688e+002,
          -4.081415290704422e+000,1.009013628657760e+000},{-2.953254945900618e+006,
          -3.499079388487411e+002,-4.609510455745138e+000,1.008360191314845e+000},
          {-8.708278203444760e+006,1.160570409967432e+003,-5.732506388098228e+000,
          1.007240267626251e+000},{-2.925999835917269e+007,6.373124182370374e+003,
          -7.673217433665648e+000,1.006032670356375e+000},{-9.691364693490808e+007,
          5.724533606825865e+003,-9.856016988972671e+000,1.004465302443802e+000},
          {-2.344230326747042e+008,-7.237460849943119e+003,-1.228103670994250e+001,
          1.003403193772207e+000},{-1.674594981779917e+012,7.945262725742146e+007,
          -9.424323791757101e+002,1.002718092569686e+000}};

      record crit
        extends Modelica.Icons.Record;
        constant SIunits.Temperature TCRIT=374.18;
        constant SIunits.Pressure PCRIT=4056290.0;
        constant SIunits.Density DCRIT=508.0;

      end crit;

      record data
        constant SIunits.SpecificHeatCapacity R=81.4888564372;
        // 8.314471/0.102032
        constant SIunits.MolarMass MM=0.102032;
        extends crit;
        constant SIunits.SpecificEnthalpy HCRIT=389653;
        constant SIunits.SpecificEntropy SCRIT=1562.135;
        extends fcrit;
        extends triple;

      end data;

      record fcrit
        extends Modelica.Icons.Record;
        constant SIunits.Temperature FTCRIT=374.209;
        constant SIunits.Pressure FPCRIT=4059280.0;
        constant SIunits.Density FDCRIT=511.9;

      end fcrit;

      record Ideal
        extends Common.EOSIdealCoeff(nc=5, a={-1.019535e+0,9.047135e+0,-1.629789e+0,
              -9.723916e+0,-3.927170e+0});

      end Ideal;

      record ReferenceStates
        extends Modelica.Icons.Record;
        constant SIunits.SpecificEnthalpy h0=1.0;
        constant SIunits.SpecificEntropy s0=1.0;

      end ReferenceStates;

      record Residual
        extends Common.EOSResidualCoeff(
          nc=21,
          ns1=8,
          c={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,
              3.0,3.0,3.0,4.0},
          d={2.0,1.0,3.0,6.0,6.0,1.0,1.0,2.0,5.0,2.0,2.0,4.0,1.0,4.0,1.0,2.0,4.0,
              1.0,5.0,3.0,10.0},
          t={-0.5,0.0,0.0,0.0,1.5,1.5,2.0,2.0,1.0,3.0,5.0,1.0,5.0,5.0,6.0,10.0,
              10.0,10.0,18.0,22.0,50.0},
          n={0.5586817000e-01,0.4982230000e+00,0.2458698000e-01,0.8570145000e-03,
              0.4788584000e-03,-0.1800808000e+01,0.2671641000e+00,-0.4781652000e-01,
              0.1423987000e-01,0.3324062000e+00,-0.7485907000e-02,
              0.1017263000e-03,-0.5184567000e+00,-0.8692288000e-01,
              0.2057144000e+00,-0.5000457000e-02,0.4603262000e-03,-0.3497836000e-02,
              0.6995038000e-02,-0.1452184000e-01,-0.1285458000e-03});

      end Residual;

      record triple
        extends Modelica.Icons.Record;
        constant SIunits.Temperature TTRIPLE=169.85;
        constant SIunits.Pressure PTRIPLE=389.563789;
        constant SIunits.Density DLTRIPLE=1591.107453;
        constant SIunits.Density DVTRIPLE=0.028172;

      end triple;

      record CoeffsThermalConductivity
        extends Modelica.Icons.Record;
        constant Real a_0=-1.05248e-2 "Empirical parameter, [W/(m K)]";
        constant Real a_1=8.00982e-5 "Empirical parameter, [W/(m K^2)]";
        constant Real b[4]={1.836526,5.126143,-1.436883,0.626144}
          "Empirical parameter, [-]";
        constant Real lambda_reducing=2.055e-3 "Reducing factor, [W/(m K)]";
        constant Real q_d=1.89202e9
          "Modified effective cutoff wave number, [1/m]";
        constant Real xi_0=1.94e-10 "Critical Amplitude, [m]";
        constant Real GAMMA=0.0496 "Amplitude, [-]";
        constant Real T_ref=561.411 "Arbitrary reference temperature, [K]";
        constant Real p_crit=4059.28 "Critical pressure, [kPa]";
        constant Real rho_crit=5.049886 "Critical density, [mol/L]";
        constant Real nu=0.63 "Universal exponent, [-]";
        constant Real gamma=1.239 "Universal exponent, [-]";
        constant Real R_0=1.03 "Universal amplitude, [-]";

      end CoeffsThermalConductivity;

      record CoeffsSurfaceTension
        extends Modelica.Icons.Record;
        constant Integer nterm=1;
        constant Real sigmak[nterm]={0.06016} "Empirical parameter";
        constant Real sigexp[nterm]={1.26} "Empirical parameter";

      end CoeffsSurfaceTension;
    end R134aData;
    annotation (Documentation(info="<html>
<p>
Calculation of fluid properties for Tetrafluoroethane (R134a) in the fluid region of 0.0039 bar (Triple pressure) to 700 bar and 169.85 Kelvin (Triple temperature) to 455 Kelvin.
</p>
<h4>Restriction</h4>
<p>
The functions provided by this package shall be used inside of the restricted limits according to the referenced literature.
</p>
<ul>
 <li>
      <strong> 0.0039 bar &le; p &le; 700 bar </strong>
 </li>
 <li>
      <strong> 169.85 Kelvin &le; T &le; 455 Kelvin  </strong>
 </li>
 <li>
      <strong> explicit for pressure and specific enthalpy </strong>
 </li>
</ul>

<p><strong>References</strong></p>
<dl><dt>Baehr, H.D. and Tillner-Roth, R.: </dt>
<dd><strong>Thermodynamic Properties of Environmentally Acceptable Refrigerants -
Equations of State and Tables for Ammonia, R22, R134a, R152a, and R123</strong>. Springer-Verlag, Berlin (Germany), 1994.</dd>
</dl>
<dl><dt>Klein, McLinden and Laesecke: </dt>
<dd><strong>An improved extended corresponding states method for estimation of viscosity of pure refrigerants and mixtures</strong>.
Int. J. Refrig., Vol. 20, No.3, pp. 208-217, 1997.</dd>
</dl>
<dl><dt>McLinden, Klein. and Perkins: </dt>
<dd><strong>An extended corresponding states model for the thermal conductivity
of refrigerants and refrigerant mixtures</strong>.
Int. J. Refrig., 23 (2000) 43-63.</dd>
</dl>
<dl><dt>Okada and Higashi: </dt>
<dd><strong>Surface tension correlation of HFC-134a and HCFC-123</strong>.
Proceedings of the Joint Meeting of IIR Commissions B1, B2, E1, and E2, Padua, Italy, pp. 541-548, 1994.</dd>
</dl>

<h4>Verification</h4>
<p>
The verification report for the development of this library is provided
<a href=\"modelica://Modelica/Resources/Documentation/Media/MoMoLib_VerificationResults_XRG.pdf\">here</a>.
</p>

<h4>Acknowledgment</h4>
<p>
This library was developed by XRG Simulation GmbH as part of the <a href=\"http://www.cleansky.eu/\">Clean Sky</a> JTI project (Project title: MoMoLib-Modelica Model Library Development for Media, Magnetic Systems and Wavelets; Project number: 296369; Theme: JTI-CS-2011-1-SGO-02-026: Modelica Model Library Development Part I). The partial financial support for the development of this library by the European Union is highly appreciated.
</p>

<p>
Some parts of this library refer to the ThermoFluid library developed at Lund University (<a href=\"http://thermofluid.sourceforge.net/\">http://thermofluid.sourceforge.net</a>).
</p>

<p>
Copyright &copy; 2013-2019, Modelica Association and contributors
</p>
</html>"));
  end R134a;

  package Water "Medium models for water"

  extends Modelica.Icons.VariantsPackage;

  import ThermofluidStream.Media.myMedia.Water.ConstantPropertyLiquidWater.simpleWaterConstants;

  constant myMedia.Interfaces.Types.TwoPhase.FluidConstants[1] waterConstants(
      each chemicalFormula="H2O",
      each structureFormula="H2O",
      each casRegistryNumber="7732-18-5",
      each iupacName="oxidane",
      each molarMass=0.018015268,
      each criticalTemperature=647.096,
      each criticalPressure=22064.0e3,
      each criticalMolarVolume=1/322.0*0.018015268,
      each normalBoilingPoint=373.124,
      each meltingPoint=273.15,
      each triplePointTemperature=273.16,
      each triplePointPressure=611.657,
      each acentricFactor=0.344,
      each dipoleMoment=1.8,
      each hasCriticalData=true);

    package IdealSteam "Water: Steam as ideal gas from NASA source"

      extends IdealGases.SingleGases.H2O;
      annotation (Documentation(info="<html>

</html>"));
    end IdealSteam;

    package ConstantPropertyLiquidWater
      "Water: Simple liquid water medium (incompressible, constant data)"

      //   redeclare record extends FluidConstants
      //   end FluidConstants;

      constant myMedia.Interfaces.Types.Basic.FluidConstants[1] simpleWaterConstants(
        each chemicalFormula="H2O",
        each structureFormula="H2O",
        each casRegistryNumber="7732-18-5",
        each iupacName="oxidane",
        each molarMass=0.018015268);

      extends Interfaces.PartialSimpleMedium(
        mediumName="SimpleLiquidWater",
        cp_const=4184,
        cv_const=4184,
        d_const=995.586,
        eta_const=1.e-3,
        lambda_const=0.598,
        a_const=1484,
        T_min=Cv.from_degC(-1),
        T_max=Cv.from_degC(130),
        T0=273.15,
        MM_const=0.018015268,
        fluidConstants=simpleWaterConstants);

      annotation (Documentation(info="<html>

</html>"));
    end ConstantPropertyLiquidWater;

    package StandardWater = WaterIF97_ph
      "Water using the IF97 standard, explicit in p and h. Recommended for most applications";
    package StandardWaterOnePhase = WaterIF97_pT
      "Water using the IF97 standard, explicit in p and T. Recommended for one-phase applications";
    package WaterIF97OnePhase_ph
      "Water using the IF97 standard, explicit in p and h, and only valid outside the two-phase dome"
      extends WaterIF97_base(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        final ph_explicit=true,
        final dT_explicit=false,
        final pT_explicit=false,
        final smoothModel=true,
        final onePhase=true);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97OnePhase_ph;

    package WaterIF97_pT "Water using the IF97 standard, explicit in p and T"
      extends WaterIF97_base(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pT,
        final ph_explicit=false,
        final dT_explicit=false,
        final pT_explicit=true,
        final smoothModel=true,
        final onePhase=true);
    end WaterIF97_pT;

    package WaterIF97_ph "Water using the IF97 standard, explicit in p and h"
      extends WaterIF97_base(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        final ph_explicit=true,
        final dT_explicit=false,
        final pT_explicit=false,
        smoothModel=false,
        onePhase=false);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_ph;

    partial package WaterIF97_base
      "Water: Steam properties as defined by IAPWS/IF97 standard"

      extends Interfaces.PartialTwoPhaseMedium(
        mediumName="WaterIF97",
        substanceNames={"water"},
        singleState=false,
        SpecificEnthalpy(start=1.0e5, nominal=5.0e5),
        Density(start=150, nominal=500),
        AbsolutePressure(
          start=50e5,
          nominal=10e5,
          min=611.657,
          max=100e6),
        Temperature(
          start=500,
          nominal=500,
          min=273.15,
          max=2273.15),
        smoothModel=false,
        onePhase=false,
        fluidConstants=waterConstants);

      redeclare record extends ThermodynamicState "Thermodynamic state"
        SpecificEnthalpy h "Specific enthalpy";
        Density d "Density";
        Temperature T "Temperature";
        AbsolutePressure p "Pressure";
      end ThermodynamicState;
      constant Integer Region = 0 "Region of IF97, if known, zero otherwise";
      constant Boolean ph_explicit
        "True if explicit in pressure and specific enthalpy";
      constant Boolean dT_explicit "True if explicit in density and temperature";
      constant Boolean pT_explicit "True if explicit in pressure and temperature";

      redeclare replaceable model extends BaseProperties(
        h(stateSelect=if ph_explicit and preferredMediumStates then StateSelect.prefer
               else StateSelect.default),
        d(stateSelect=if dT_explicit and preferredMediumStates then StateSelect.prefer
               else StateSelect.default),
        T(stateSelect=if (pT_explicit or dT_explicit) and preferredMediumStates
               then StateSelect.prefer else StateSelect.default),
        p(stateSelect=if (pT_explicit or ph_explicit) and preferredMediumStates
               then StateSelect.prefer else StateSelect.default))
        "Base properties of water"
        Integer phase(
          min=0,
          max=2,
          start=1,
          fixed=false) "2 for two-phase, 1 for one-phase, 0 if not known";
      equation
        MM = fluidConstants[1].molarMass;
        if Region > 0 then // Fixed region
          phase = (if Region == 4 then 2 else 1);
        elseif smoothModel then
          if onePhase then
            phase = 1;
            if ph_explicit then
              assert(((h < bubbleEnthalpy(sat) or h > dewEnthalpy(sat)) or p >
                fluidConstants[1].criticalPressure),
                "With onePhase=true this model may only be called with one-phase states h < hl or h > hv!"
                 + "(p = " + String(p) + ", h = " + String(h) + ")");
            else
              if dT_explicit then
                assert(not ((d < bubbleDensity(sat) and d > dewDensity(sat)) and T
                   < fluidConstants[1].criticalTemperature),
                  "With onePhase=true this model may only be called with one-phase states d > dl or d < dv!"
                   + "(d = " + String(d) + ", T = " + String(T) + ")");
              end if;
            end if;
          else
            phase = 0;
          end if;
        else
          if ph_explicit then
            phase = if ((h < bubbleEnthalpy(sat) or h > dewEnthalpy(sat)) or p >
              fluidConstants[1].criticalPressure) then 1 else 2;
          elseif dT_explicit then
            phase = if not ((d < bubbleDensity(sat) and d > dewDensity(sat)) and T
               < fluidConstants[1].criticalTemperature) then 1 else 2;
          else
            phase = 1;
            //this is for the one-phase only case pT
          end if;
        end if;
        if dT_explicit then
          p = pressure_dT(
                d,
                T,
                phase,
                Region);
          h = specificEnthalpy_dT(
                d,
                T,
                phase,
                Region);
          sat.Tsat = T;
          sat.psat = saturationPressure(T);
        elseif ph_explicit then
          d = density_ph(
                p,
                h,
                phase,
                Region);
          T = temperature_ph(
                p,
                h,
                phase,
                Region);
          sat.Tsat = saturationTemperature(p);
          sat.psat = p;
        else
          h = specificEnthalpy_pT(
                p,
                T,
                Region);
          d = density_pT(
                p,
                T,
                Region);
          sat.psat = p;
          sat.Tsat = saturationTemperature(p);
        end if;
        u = h - p/d;
        R = Modelica.Constants.R/fluidConstants[1].molarMass;
        h = state.h;
        p = state.p;
        T = state.T;
        d = state.d;
        phase = state.phase;
      end BaseProperties;

      redeclare function density_ph
        "Computes density as a function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output Density d "Density";
      algorithm
        d := IF97_Utilities.rho_ph(
              p,
              h,
              phase,
              region);
        annotation (Inline=true);
      end density_ph;

      redeclare function temperature_ph
        "Computes temperature as a function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEnthalpy h "Specific enthalpy";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output Temperature T "Temperature";
      algorithm
        T := IF97_Utilities.T_ph(
              p,
              h,
              phase,
              region);
        annotation (Inline=true);
      end temperature_ph;

      redeclare function temperature_ps
        "Compute temperature from pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output Temperature T "Temperature";
      algorithm
        T := IF97_Utilities.T_ps(
              p,
              s,
              phase,
              region);
        annotation (Inline=true);
      end temperature_ps;

      redeclare function density_ps
        "Computes density as a function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output Density d "Density";
      algorithm
        d := IF97_Utilities.rho_ps(
              p,
              s,
              phase,
              region);
        annotation (Inline=true);
      end density_ps;

      redeclare function pressure_dT
        "Computes pressure as a function of density and temperature"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output AbsolutePressure p "Pressure";
      algorithm
        p := IF97_Utilities.p_dT(
              d,
              T,
              phase,
              region);
        annotation (Inline=true);
      end pressure_dT;

      redeclare function specificEnthalpy_dT
        "Computes specific enthalpy as a function of density and temperature"
        extends Modelica.Icons.Function;
        input Density d "Density";
        input Temperature T "Temperature";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := IF97_Utilities.h_dT(
              d,
              T,
              phase,
              region);
        annotation (Inline=true);
      end specificEnthalpy_dT;

      redeclare function specificEnthalpy_pT
        "Computes specific enthalpy as a function of pressure and temperature"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := IF97_Utilities.h_pT(
              p,
              T,
              region);
        annotation (Inline=true);
      end specificEnthalpy_pT;

      redeclare function specificEnthalpy_ps
        "Computes specific enthalpy as a function of pressure and temperature"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input SpecificEntropy s "Specific entropy";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := IF97_Utilities.h_ps(
              p,
              s,
              phase,
              region);
        annotation (Inline=true);
      end specificEnthalpy_ps;

      redeclare function density_pT
        "Computes density as a function of pressure and temperature"
        extends Modelica.Icons.Function;
        input AbsolutePressure p "Pressure";
        input Temperature T "Temperature";
        input FixedPhase phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
        output Density d "Density";
      algorithm
        d := IF97_Utilities.rho_pT(
              p,
              T,
              region);
        annotation (Inline=true);
      end density_pT;

      redeclare function extends setDewState
        "Set the thermodynamic state on the dew line"
      algorithm
        state := ThermodynamicState(
              phase=phase,
              p=sat.psat,
              T=sat.Tsat,
              h=dewEnthalpy(sat),
              d=dewDensity(sat));
        annotation (Inline=true);
      end setDewState;

      redeclare function extends setBubbleState
        "Set the thermodynamic state on the bubble line"
      algorithm
        state := ThermodynamicState(
              phase=phase,
              p=sat.psat,
              T=sat.Tsat,
              h=bubbleEnthalpy(sat),
              d=bubbleDensity(sat));
        annotation (Inline=true);
      end setBubbleState;

      redeclare function extends dynamicViscosity "Dynamic viscosity of water"
      algorithm
        eta := IF97_Utilities.dynamicViscosity(
              state.d,
              state.T,
              state.p,
              state.phase);
        annotation (Inline=true);
      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Thermal conductivity of water"
      algorithm
        lambda := IF97_Utilities.thermalConductivity(
              state.d,
              state.T,
              state.p,
              state.phase);
        annotation (Inline=true);
      end thermalConductivity;

      redeclare function extends surfaceTension
        "Surface tension in two phase region of water"
      algorithm
        sigma := IF97_Utilities.surfaceTension(sat.Tsat);
        annotation (Inline=true);
      end surfaceTension;

      redeclare function extends pressure "Return pressure of ideal gas"
      algorithm
        p := state.p;
        annotation (Inline=true);
      end pressure;

      redeclare function extends temperature "Return temperature of ideal gas"
      algorithm
        T := state.T;
        annotation (Inline=true);
      end temperature;

      redeclare function extends density "Return density of ideal gas"
      algorithm
        d := state.d;
        annotation (Inline=true);
      end density;

      redeclare function extends specificEnthalpy "Return specific enthalpy"
        extends Modelica.Icons.Function;
      algorithm
        h := state.h;
        annotation (Inline=true);
      end specificEnthalpy;

      redeclare function extends specificInternalEnergy
        "Return specific internal energy"
        extends Modelica.Icons.Function;
      algorithm
        u := state.h - state.p/state.d;
        annotation (Inline=true);
      end specificInternalEnergy;

      redeclare function extends specificGibbsEnergy "Return specific Gibbs energy"
        extends Modelica.Icons.Function;
      algorithm
        g := state.h - state.T*specificEntropy(state);
        annotation (Inline=true);
      end specificGibbsEnergy;

      redeclare function extends specificHelmholtzEnergy
        "Return specific Helmholtz energy"
        extends Modelica.Icons.Function;
      algorithm
        f := state.h - state.p/state.d - state.T*specificEntropy(state);
        annotation (Inline=true);
      end specificHelmholtzEnergy;

      redeclare function extends specificEntropy "Specific entropy of water"
      algorithm
        s := if dT_explicit then IF97_Utilities.s_dT(
              state.d,
              state.T,
              state.phase,
              Region) else if pT_explicit then IF97_Utilities.s_pT(
              state.p,
              state.T,
              Region) else IF97_Utilities.s_ph(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end specificEntropy;

      redeclare function extends specificHeatCapacityCp
        "Specific heat capacity at constant pressure of water"
      algorithm
        cp := if dT_explicit then IF97_Utilities.cp_dT(
              state.d,
              state.T,
              Region) else if pT_explicit then IF97_Utilities.cp_pT(
              state.p,
              state.T,
              Region) else IF97_Utilities.cp_ph(
              state.p,
              state.h,
              Region);
        annotation (Inline=true);
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
        "Specific heat capacity at constant volume of water"
      algorithm
        cv := if dT_explicit then IF97_Utilities.cv_dT(
              state.d,
              state.T,
              state.phase,
              Region) else if pT_explicit then IF97_Utilities.cv_pT(
              state.p,
              state.T,
              Region) else IF97_Utilities.cv_ph(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end specificHeatCapacityCv;

      redeclare function extends isentropicExponent "Return isentropic exponent"
      algorithm
        gamma := if dT_explicit then IF97_Utilities.isentropicExponent_dT(
              state.d,
              state.T,
              state.phase,
              Region) else if pT_explicit then IF97_Utilities.isentropicExponent_pT(
              state.p,
              state.T,
              Region) else IF97_Utilities.isentropicExponent_ph(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end isentropicExponent;

      redeclare function extends isothermalCompressibility
        "Isothermal compressibility of water"
      algorithm
        //    assert(state.phase <> 2, "Isothermal compressibility can not be computed with 2-phase inputs!");
        kappa := if dT_explicit then IF97_Utilities.kappa_dT(
              state.d,
              state.T,
              state.phase,
              Region) else if pT_explicit then IF97_Utilities.kappa_pT(
              state.p,
              state.T,
              Region) else IF97_Utilities.kappa_ph(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end isothermalCompressibility;

      redeclare function extends isobaricExpansionCoefficient
        "Isobaric expansion coefficient of water"
      algorithm
        //    assert(state.phase <> 2, "The isobaric expansion coefficient can not be computed with 2-phase inputs!");
        beta := if dT_explicit then IF97_Utilities.beta_dT(
              state.d,
              state.T,
              state.phase,
              Region) else if pT_explicit then IF97_Utilities.beta_pT(
              state.p,
              state.T,
              Region) else IF97_Utilities.beta_ph(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end isobaricExpansionCoefficient;

      redeclare function extends velocityOfSound
        "Return velocity of sound as a function of the thermodynamic state record"
      algorithm
        a := if dT_explicit then IF97_Utilities.velocityOfSound_dT(
              state.d,
              state.T,
              state.phase,
              Region) else if pT_explicit then IF97_Utilities.velocityOfSound_pT(
              state.p,
              state.T,
              Region) else IF97_Utilities.velocityOfSound_ph(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end velocityOfSound;

      redeclare function extends isentropicEnthalpy "Compute h(s,p)"
      algorithm
        h_is := IF97_Utilities.isentropicEnthalpy(
              p_downstream,
              specificEntropy(refState),
              0);
        annotation (Inline=true);
      end isentropicEnthalpy;

      redeclare function extends density_derh_p
        "Density derivative by specific enthalpy"
      algorithm
        ddhp := IF97_Utilities.ddhp(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end density_derh_p;

      redeclare function extends density_derp_h "Density derivative by pressure"
      algorithm
        ddph := IF97_Utilities.ddph(
              state.p,
              state.h,
              state.phase,
              Region);
        annotation (Inline=true);
      end density_derp_h;
      //   redeclare function extends density_derT_p
      //     "Density derivative by temperature"
      //   algorithm
      //     ddTp := IF97_Utilities.ddTp(state.p, state.h, state.phase);
      //   end density_derT_p;
      //
      //   redeclare function extends density_derp_T
      //     "Density derivative by pressure"
      //   algorithm
      //     ddpT := IF97_Utilities.ddpT(state.p, state.h, state.phase);
      //   end density_derp_T;

      redeclare function extends bubbleEnthalpy
        "Boiling curve specific enthalpy of water"
      algorithm
        hl := IF97_Utilities.BaseIF97.Regions.hl_p(sat.psat);
        annotation (Inline=true);
      end bubbleEnthalpy;

      redeclare function extends dewEnthalpy "Dew curve specific enthalpy of water"
      algorithm
        hv := IF97_Utilities.BaseIF97.Regions.hv_p(sat.psat);
        annotation (Inline=true);
      end dewEnthalpy;

      redeclare function extends bubbleEntropy
        "Boiling curve specific entropy of water"
      algorithm
        sl := IF97_Utilities.BaseIF97.Regions.sl_p(sat.psat);
        annotation (Inline=true);
      end bubbleEntropy;

      redeclare function extends dewEntropy "Dew curve specific entropy of water"
      algorithm
        sv := IF97_Utilities.BaseIF97.Regions.sv_p(sat.psat);
        annotation (Inline=true);
      end dewEntropy;

      redeclare function extends bubbleDensity
        "Boiling curve specific density of water"
      algorithm
        dl := if ph_explicit or pT_explicit then
          IF97_Utilities.BaseIF97.Regions.rhol_p(sat.psat) else
          IF97_Utilities.BaseIF97.Regions.rhol_T(sat.Tsat);
        annotation (Inline=true);
      end bubbleDensity;

      redeclare function extends dewDensity "Dew curve specific density of water"
      algorithm
        dv := if ph_explicit or pT_explicit then
          IF97_Utilities.BaseIF97.Regions.rhov_p(sat.psat) else
          IF97_Utilities.BaseIF97.Regions.rhov_T(sat.Tsat);
        annotation (Inline=true);
      end dewDensity;

      redeclare function extends saturationTemperature
        "Saturation temperature of water"
      algorithm
        T := IF97_Utilities.BaseIF97.Basic.tsat(p);
        annotation (Inline=true);
      end saturationTemperature;

      redeclare function extends saturationTemperature_derp
        "Derivative of saturation temperature w.r.t. pressure"
      algorithm
        dTp := IF97_Utilities.BaseIF97.Basic.dtsatofp(p);
        annotation (Inline=true);
      end saturationTemperature_derp;

      redeclare function extends saturationPressure "Saturation pressure of water"
      algorithm
        p := IF97_Utilities.BaseIF97.Basic.psat(T);
        annotation (Inline=true);
      end saturationPressure;

      redeclare function extends dBubbleDensity_dPressure
        "Bubble point density derivative"
      algorithm
        ddldp := IF97_Utilities.BaseIF97.Regions.drhol_dp(sat.psat);
        annotation (Inline=true);
      end dBubbleDensity_dPressure;

      redeclare function extends dDewDensity_dPressure
        "Dew point density derivative"
      algorithm
        ddvdp := IF97_Utilities.BaseIF97.Regions.drhov_dp(sat.psat);
        annotation (Inline=true);
      end dDewDensity_dPressure;

      redeclare function extends dBubbleEnthalpy_dPressure
        "Bubble point specific enthalpy derivative"
      algorithm
        dhldp := IF97_Utilities.BaseIF97.Regions.dhl_dp(sat.psat);
        annotation (Inline=true);
      end dBubbleEnthalpy_dPressure;

      redeclare function extends dDewEnthalpy_dPressure
        "Dew point specific enthalpy derivative"
      algorithm
        dhvdp := IF97_Utilities.BaseIF97.Regions.dhv_dp(sat.psat);
        annotation (Inline=true);
      end dDewEnthalpy_dPressure;

      redeclare function extends setState_dTX
        "Return thermodynamic state of water as function of d, T, and optional region"
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
      algorithm
        state := ThermodynamicState(
              d=d,
              T=T,
              phase=if region == 0 then 0 else if
            region == 4 then 2 else 1,
              h=specificEnthalpy_dT(
                d,
                T,
                region=region),
              p=pressure_dT(
                d,
                T,
                region=region));
        annotation (Inline=true);
      end setState_dTX;

      redeclare function extends setState_phX
        "Return thermodynamic state of water as function of p, h, and optional region"
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
      algorithm
        state := ThermodynamicState(
              d=density_ph(
                p,
                h,
                region=region),
              T=temperature_ph(
                p,
                h,
                region=region),
              phase=if region == 0 then 0 else if region==4 then 2 else 1,
              h=h,
              p=p);
        annotation (Inline=true);
      end setState_phX;

      redeclare function extends setState_psX
        "Return thermodynamic state of water as function of p, s, and optional region"
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
      algorithm
        state := ThermodynamicState(
              d=density_ps(
                p,
                s,
                region=region),
              T=temperature_ps(
                p,
                s,
                region=region),
              phase=if region == 0 then 0 else if region==4 then 2 else 1,
              h=specificEnthalpy_ps(
                p,
                s,
                region=region),
              p=p);
        annotation (Inline=true);
      end setState_psX;

      redeclare function extends setState_pTX
        "Return thermodynamic state of water as function of p, T, and optional region"
        input Integer region=Region
          "If 0, region is unknown, otherwise known and this input";
      algorithm
        state := ThermodynamicState(
              d=density_pT(
                p,
                T,
                region=region),
              T=T,
              phase=1,
              h=specificEnthalpy_pT(
                p,
                T,
                region=region),
              p=p);
        annotation (Inline=true);
      end setState_pTX;

      redeclare function extends setSmoothState
        "Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b"
        import ThermofluidStream.Media.myMedia.Common.smoothStep;
      algorithm
        state := ThermodynamicState(
              p=smoothStep(
                x,
                state_a.p,
                state_b.p,
                x_small),
              h=smoothStep(
                x,
                state_a.h,
                state_b.h,
                x_small),
              d=density_ph(smoothStep(
                x,
                state_a.p,
                state_b.p,
                x_small), smoothStep(
                x,
                state_a.h,
                state_b.h,
                x_small)),
              T=temperature_ph(smoothStep(
                x,
                state_a.p,
                state_b.p,
                x_small), smoothStep(
                x,
                state_a.h,
                state_b.h,
                x_small)),
              phase=0);
        annotation (Inline=true);
      end setSmoothState;
      annotation (Documentation(info="<html>
<p>
This model calculates medium properties
for water in the <strong>liquid</strong>, <strong>gas</strong> and <strong>two phase</strong> regions
according to the IAPWS/IF97 standard, i.e., the accepted industrial standard
and best compromise between accuracy and computation time.
For more details see <a href=\"modelica://Modelica.Media.Water.IF97_Utilities\">
Modelica.Media.Water.IF97_Utilities</a>. Three variable pairs can be the
independent variables of the model:
</p>
<ol>
<li>Pressure <strong>p</strong> and specific enthalpy <strong>h</strong> are the most natural choice for general applications. This is the recommended choice for most general purpose applications, in particular for power plants.</li>
<li>Pressure <strong>p</strong> and temperature <strong>T</strong> are the most natural choice for applications where water is always in the same phase, both for liquid water and steam.</li>
<li>Density <strong>d</strong> and temperature <strong>T</strong> are explicit variables of the Helmholtz function in the near-critical region and can be the best choice for applications with super-critical or near-critical states.</li>
</ol>
<p>
The following quantities are always computed:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Variable</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>T</td>
      <td>K</td>
      <td>temperature</td></tr>
  <tr><td>u</td>
      <td>J/kg</td>
      <td>specific internal energy</td></tr>
  <tr><td>d</td>
      <td>kg/m^3</td>
      <td>density</td></tr>
  <tr><td>p</td>
      <td>Pa</td>
      <td>pressure</td></tr>
  <tr><td>h</td>
      <td>J/kg</td>
      <td>specific enthalpy</td></tr>
</table>
<p>
In some cases additional medium properties are needed.
A component that needs these optional properties has to call
one of the functions listed in
<a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.OptionalProperties\">
Modelica.Media.UsersGuide.MediumUsage.OptionalProperties</a> and in
<a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.TwoPhase\">
Modelica.Media.UsersGuide.MediumUsage.TwoPhase</a>.
</p>
<p>Many further properties can be computed. Using the well-known Bridgman's Tables, all first partial derivatives of the standard thermodynamic variables can be computed easily.
</p>
</html>"));
    end WaterIF97_base;

    partial package WaterIF97_fixedregion
      "Water: Steam properties as defined by IAPWS/IF97 standard, fixed region"
      extends WaterIF97_base(Region(min=1)=1);
    end WaterIF97_fixedregion;

    package WaterIF97_R4ph "Region 4 water according to IF97 standard"
      extends WaterIF97_fixedregion(
        final Region=4,
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        final ph_explicit=true,
        final dT_explicit=false,
        final pT_explicit=false,
        smoothModel=true,
        onePhase=false);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_R4ph;

    package WaterIF97_R5ph "Region 5 water according to IF97 standard"
      extends WaterIF97_fixedregion(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        final Region=5,
        final ph_explicit=true,
        final dT_explicit=false,
        final pT_explicit=false,
        smoothModel=true,
        onePhase=true);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_R5ph;

    package WaterIF97_R1pT "Region 1 (liquid) water according to IF97 standard"
      extends WaterIF97_fixedregion(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pT,
        final Region=1,
        final ph_explicit=false,
        final dT_explicit=false,
        final pT_explicit=true,
        smoothModel=true,
        onePhase=true);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_R1pT;

    package WaterIF97_R2pT "Region 2 (steam) water according to IF97 standard"
      extends WaterIF97_fixedregion(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.pT,
        final Region=2,
        final ph_explicit=false,
        final dT_explicit=false,
        final pT_explicit=true,
        smoothModel=true,
        onePhase=true);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_R2pT;

    package WaterIF97_R1ph "Region 1 (liquid) water according to IF97 standard"
      extends WaterIF97_fixedregion(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        final Region=1,
        final ph_explicit=true,
        final dT_explicit=false,
        final pT_explicit=false,
        smoothModel=true,
        onePhase=true);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_R1ph;

    package WaterIF97_R2ph "Region 2 (steam) water according to IF97 standard"
      extends WaterIF97_fixedregion(
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        final Region=2,
        final ph_explicit=true,
        final dT_explicit=false,
        final pT_explicit=false,
        smoothModel=true,
        onePhase=true);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_R2ph;

    package WaterIF97_R3ph "Region 3 water according to IF97 standard"
      extends WaterIF97_fixedregion(
        final Region=3,
        ThermoStates=myMedia.Interfaces.Choices.IndependentVariables.ph,
        final ph_explicit=true,
        final dT_explicit=false,
        final pT_explicit=false,
        smoothModel=true,
        onePhase=true);
      annotation (Documentation(info="<html>

</html>"));
    end WaterIF97_R3ph;

    package IF97_Utilities
      "Low level and utility computation for high accuracy water properties according to the IAPWS/IF97 standard"

      extends Modelica.Icons.UtilitiesPackage;

      package BaseIF97
        "Modelica Physical Property Model: the new industrial formulation IAPWS-IF97"
        extends Modelica.Icons.Package;
        record IterationData "Constants for iterations internal to some functions"

          extends Modelica.Icons.Record;
          constant Integer IMAX=50
            "Maximum number of iterations for inverse functions";
          constant Real DELP=1.0e-6 "Maximum iteration error in pressure, Pa";
          constant Real DELS=1.0e-8
            "Maximum iteration error in specific entropy, J/{kg.K}";
          constant Real DELH=1.0e-8
            "Maximum iteration error in specific enthalpy, J/kg";
          constant Real DELD=1.0e-8 "Maximum iteration error in density, kg/m^3";
        end IterationData;

        //===================================================================
        //                      Constant declarations

        //===================================================================
        record data "Constant IF97 data and region limits"
          extends Modelica.Icons.Record;
          constant SI.SpecificHeatCapacity RH2O=461.526
            "Specific gas constant of water vapour";
          constant SI.MolarMass MH2O=0.01801528 "Molar weight of water";
          constant SI.Temperature TSTAR1=1386.0
            "Normalization temperature for region 1 IF97";
          constant SI.Pressure PSTAR1=16.53e6
            "Normalization pressure for region 1 IF97";
          constant SI.Temperature TSTAR2=540.0
            "Normalization temperature for region 2 IF97";
          constant SI.Pressure PSTAR2=1.0e6
            "Normalization pressure for region 2 IF97";
          constant SI.Temperature TSTAR5=1000.0
            "Normalization temperature for region 5 IF97";
          constant SI.Pressure PSTAR5=1.0e6
            "Normalization pressure for region 5 IF97";
          constant SI.SpecificEnthalpy HSTAR1=2.5e6
            "Normalization specific enthalpy for region 1 IF97";
          constant Real IPSTAR=1.0e-6
            "Normalization pressure for inverse function in region 2 IF97";
          constant Real IHSTAR=5.0e-7
            "Normalization specific enthalpy for inverse function in region 2 IF97";
          constant SI.Temperature TLIMIT1=623.15
            "Temperature limit between regions 1 and 3";
          constant SI.Temperature TLIMIT2=1073.15
            "Temperature limit between regions 2 and 5";
          constant SI.Temperature TLIMIT5=2273.15 "Upper temperature limit of 5";
          constant SI.Pressure PLIMIT1=100.0e6
            "Upper pressure limit for regions 1, 2 and 3";
          constant SI.Pressure PLIMIT4A=16.5292e6
            "Pressure limit between regions 1 and 2, important for two-phase (region 4)";
          constant SI.Pressure PLIMIT5=10.0e6
            "Upper limit of valid pressure in region 5";
          constant SI.Pressure PCRIT=22064000.0 "The critical pressure";
          constant SI.Temperature TCRIT=647.096 "The critical temperature";
          constant SI.Density DCRIT=322.0 "The critical density";
          constant SI.SpecificEntropy SCRIT=4412.02148223476
            "The calculated specific entropy at the critical point";
          constant SI.SpecificEnthalpy HCRIT=2087546.84511715
            "The calculated specific enthalpy at the critical point";
          constant Real[5] n=array(
                  0.34805185628969e3,
                  -0.11671859879975e1,
                  0.10192970039326e-2,
                  0.57254459862746e3,
                  0.13918839778870e2)
            "Polynomial coefficients for boundary between regions 2 and 3";
          annotation (Documentation(info="<html>
 <h4>Record description</h4>
                           <p>Constants needed in the international steam properties IF97.
                           SCRIT and HCRIT are calculated from Helmholtz function for region 3.</p>
<h4>Version Info and Revision history
</h4>
<ul>
<li>First implemented: <em>July, 2000</em>
       by Hubertus Tummescheit
       </li>
</ul>
 <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
 </address>
<ul>
 <li>Initial version: July 2000</li>
 <li>Documentation added: December 2002</li>
</ul>
</html>"));
        end data;

        function getTstar "Get normalization temperature for region 1, 2 or 5"
          extends Modelica.Icons.Function;
          input Integer region "IF 97 region";
          output SI.Temperature Tstar "Normalization temperature";
        algorithm
          if region == 1 then
            Tstar := data.TSTAR1;
          elseif region == 2 then
            Tstar := data.TSTAR2;
          else
            Tstar := data.TSTAR5;
          end if;
        end getTstar;

        function getpstar "Get normalization pressure for region 1, 2 or 5"
          extends Modelica.Icons.Function;
          input Integer region "IF 97 region";
          output SI.Pressure pstar "Normalization pressure";
        algorithm
          if region == 1 then
            pstar := data.PSTAR1;
          elseif region == 2 then
            pstar := data.PSTAR2;
          else
            pstar := data.PSTAR5;
          end if;
        end getpstar;

        record critical "Critical point data"
          extends Modelica.Icons.Record;
          constant SI.Pressure PCRIT=22064000.0 "The critical pressure";
          constant SI.Temperature TCRIT=647.096 "The critical temperature";
          constant SI.Density DCRIT=322.0 "The critical density";
          constant SI.SpecificEnthalpy HCRIT=2087546.84511715
            "The calculated specific enthalpy at the critical point";
          constant SI.SpecificEntropy SCRIT=4412.02148223476
            "The calculated specific entropy at the critical point";
          annotation (Documentation(info="<html>
 <h4>Record description</h4>
 <p>Critical point data for IF97 steam properties. SCRIT and HCRIT are calculated from Helmholtz function for region 3</p>
<h4>Version Info and Revision history
</h4>
<ul>
<li>First implemented: <em>July, 2000</em>
       by Hubertus Tummescheit
       </li>
</ul>
 <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
 </address>
<ul>
 <li>Initial version: July 2000</li>
 <li>Documentation added: December 2002</li>
</ul>
</html>"));
        end critical;

        record triple "Triple point data"
          extends Modelica.Icons.Record;
          constant SI.Temperature Ttriple=273.16 "The triple point temperature";
          constant SI.Pressure ptriple=611.657 "The triple point pressure";
          constant SI.Density dltriple=999.792520031617642
            "The triple point liquid density";
          constant SI.Density dvtriple=0.485457572477861372e-2
            "The triple point vapour density";
          annotation (Documentation(info="<html>
 <h4>Record description</h4>
 <p>Vapour/liquid/ice triple point data for IF97 steam properties.</p>
<h4>Version Info and Revision history
</h4>
<ul>
<li>First implemented: <em>July, 2000</em>
       by Hubertus Tummescheit
       </li>
</ul>
 <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
 </address>
<ul>
 <li>Initial version: July 2000</li>
 <li>Documentation added: December 2002</li>
</ul>
</html>"));
        end triple;

        package Regions
          "Functions to find the current region for given pairs of input variables"

          extends Modelica.Icons.FunctionsPackage;

          //===================================================================
          //                      "Public" functions

          //===================================================================

          function boundary23ofT
            "Boundary function for region boundary between regions 2 and 3 (input temperature)"

            extends Modelica.Icons.Function;
            input SI.Temperature t "Temperature (K)";
            output SI.Pressure p "Pressure";
          protected
            constant Real[5] n=data.n;
          algorithm
            p := 1.0e6*(n[1] + t*(n[2] + t*n[3]));
          end boundary23ofT;

          function boundary23ofp
            "Boundary function for region boundary between regions 2 and 3 (input pressure)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.Temperature t "Temperature (K)";
          protected
            constant Real[5] n=data.n;
            Real pi "Dimensionless pressure";
          algorithm
            pi := p/1.0e6;
            assert(p > triple.ptriple,
              "IF97 medium function boundary23ofp called with too low pressure\n"
               + "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            t := n[4] + ((pi - n[5])/n[3])^0.5;
          end boundary23ofp;

          function hlowerofp5
            "Explicit lower specific enthalpy limit of region 5 as function of pressure"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real pi "Dimensionless pressure";
          algorithm
            pi := p/data.PSTAR5;
            assert(p > triple.ptriple,
              "IF97 medium function hlowerofp5 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            h := 461526.*(9.01505286876203 + pi*(-0.00979043490246092 + (-0.0000203245575263501
               + 3.36540214679088e-7*pi)*pi));
          end hlowerofp5;

          function hupperofp5
            "Explicit upper specific enthalpy limit of region 5 as function of pressure"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real pi "Dimensionless pressure";
          algorithm
            pi := p/data.PSTAR5;
            assert(p > triple.ptriple,
              "IF97 medium function hupperofp5 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            h := 461526.*(15.9838891400332 + pi*(-0.000489898813722568 + (-5.01510211858761e-8
               + 7.5006972718273e-8*pi)*pi));
          end hupperofp5;

          function slowerofp5
            "Explicit lower specific entropy limit of region 5 as function of pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real pi "Dimensionless pressure";
          algorithm
            pi := p/data.PSTAR5;
            assert(p > triple.ptriple,
              "IF97 medium function slowerofp5 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            s := 461.526*(18.4296209980112 + pi*(-0.00730911805860036 + (-0.0000168348072093888
               + 2.09066899426354e-7*pi)*pi) - Modelica.Math.log(pi));
          end slowerofp5;

          function supperofp5
            "Explicit upper specific entropy limit of region 5 as function of pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real pi "Dimensionless pressure";
          algorithm
            pi := p/data.PSTAR5;
            assert(p > triple.ptriple,
              "IF97 medium function supperofp5 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            s := 461.526*(22.7281531474243 + pi*(-0.000656650220627603 + (-1.96109739782049e-8
               + 2.19979537113031e-8*pi)*pi) - Modelica.Math.log(pi));
          end supperofp5;

          function hlowerofp1
            "Explicit lower specific enthalpy limit of region 1 as function of pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real pi1 "Dimensionless pressure";
            Real[3] o "Vector of auxiliary variables";
          algorithm
            pi1 := 7.1 - p/data.PSTAR1;
            assert(p > triple.ptriple,
              "IF97 medium function hlowerofp1 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            o[1] := pi1*pi1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];

            h := 639675.036*(0.173379420894777 + pi1*(-0.022914084306349 + pi1*(-0.00017146768241932
               + pi1*(-4.18695814670391e-6 + pi1*(-2.41630417490008e-7 + pi1*(
              1.73545618580828e-11 + o[1]*pi1*(8.43755552264362e-14 + o[2]*o[3]*pi1
              *(5.35429206228374e-35 + o[1]*(-8.12140581014818e-38 + o[1]*o[2]*(-1.43870236842915e-44
               + pi1*(1.73894459122923e-45 + (-7.06381628462585e-47 +
              9.64504638626269e-49*pi1)*pi1)))))))))));
          end hlowerofp1;

          function hupperofp1
            "Explicit upper specific enthalpy limit of region 1 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real pi1 "Dimensionless pressure";
            Real[3] o "Vector of auxiliary variables";
          algorithm
            pi1 := 7.1 - p/data.PSTAR1;
            assert(p > triple.ptriple,
              "IF97 medium function hupperofp1 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            o[1] := pi1*pi1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            h := 639675.036*(2.42896927729349 + pi1*(-0.00141131225285294 + pi1*(
              0.00143759406818289 + pi1*(0.000125338925082983 + pi1*(
              0.0000123617764767172 + pi1*(3.17834967400818e-6 + o[1]*pi1*(
              1.46754947271665e-8 + o[2]*o[3]*pi1*(1.86779322717506e-17 + o[1]*(-4.18568363667416e-19
               + o[1]*o[2]*(-9.19148577641497e-22 + pi1*(4.27026404402408e-22 + (-6.66749357417962e-23
               + 3.49930466305574e-24*pi1)*pi1)))))))))));
          end hupperofp1;

          function slowerofp1
            "Explicit lower specific entropy limit of region 1 as function of pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real pi1 "Dimensionless pressure";
            Real[3] o "Vector of auxiliary variables";
          algorithm
            pi1 := 7.1 - p/data.PSTAR1;
            assert(p > triple.ptriple,
              "IF97 medium function slowerofp1 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            o[1] := pi1*pi1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            s := 461.526*(-0.0268080988194267 + pi1*(0.00834795890110168 + pi1*(-0.000486470924668433
               + pi1*(-0.0000154902045012264 + pi1*(-1.07631751351358e-6 + pi1*(
              9.64159058957115e-11 + o[1]*pi1*(4.81921078863103e-13 + o[2]*o[3]*pi1
              *(2.7879623870968e-34 + o[1]*(-4.22182957646226e-37 + o[1]*o[2]*(-7.44601427465175e-44
               + pi1*(8.99540001407168e-45 + (-3.65230274480299e-46 +
              4.98464639687285e-48*pi1)*pi1)))))))))));
          end slowerofp1;

          function supperofp1
            "Explicit upper specific entropy limit of region 1 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real pi1 "Dimensionless pressure";
            Real[3] o "Vector of auxiliary variables";
          algorithm
            pi1 := 7.1 - p/data.PSTAR1;
            assert(p > triple.ptriple,
              "IF97 medium function supperofp1 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            o[1] := pi1*pi1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            s := 461.526*(7.28316418503422 + pi1*(0.070602197808399 + pi1*(
              0.0039229343647356 + pi1*(0.000313009170788845 + pi1*(
              0.0000303619398631619 + pi1*(7.46739440045781e-6 + o[1]*pi1*(
              3.40562176858676e-8 + o[2]*o[3]*pi1*(4.21886233340801e-17 + o[1]*(-9.44504571473549e-19
               + o[1]*o[2]*(-2.06859611434475e-21 + pi1*(9.60758422254987e-22 + (-1.49967810652241e-22
               + 7.86863124555783e-24*pi1)*pi1)))))))))));
          end supperofp1;

          function hlowerofp2
            "Explicit lower specific enthalpy limit of region 2 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real pi "Dimensionless pressure";
            Real q1 "Auxiliary variable";
            Real q2 "Auxiliary variable";
            Real[18] o "Vector of auxiliary variables";
          algorithm
            pi := p/data.PSTAR2;
            assert(p > triple.ptriple,
              "IF97 medium function hlowerofp2 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            q1 := 572.54459862746 + 31.3220101646784*(-13.91883977887 + pi)^0.5;
            q2 := -0.5 + 540./q1;
            o[1] := q1*q1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := pi*pi;
            o[5] := o[4]*o[4];
            o[6] := q2*q2;
            o[7] := o[6]*o[6];
            o[8] := o[6]*o[7];
            o[9] := o[5]*o[5];
            o[10] := o[7]*o[7];
            o[11] := o[9]*o[9];
            o[12] := o[10]*o[10];
            o[13] := o[12]*o[12];
            o[14] := o[7]*q2;
            o[15] := o[6]*q2;
            o[16] := o[10]*o[6];
            o[17] := o[13]*o[6];
            o[18] := o[13]*o[6]*q2;
            h := (4.63697573303507e9 + 3.74686560065793*o[2] + 3.57966647812489e-6*
              o[1]*o[2] + 2.81881548488163e-13*o[3] - 7.64652332452145e7*q1 -
              0.00450789338787835*o[2]*q1 - 1.55131504410292e-9*o[1]*o[2]*q1 + o[1]
              *(2.51383707870341e6 - 4.78198198764471e6*o[10]*o[11]*o[12]*o[13]*o[4]
               + 49.9651389369988*o[11]*o[12]*o[13]*o[4]*o[5]*o[7] + o[15]*o[4]*(
              1.03746636552761e-13 - 0.00349547959376899*o[16] -
              2.55074501962569e-7*o[8])*o[9] + (-242662.235426958*o[10]*o[12] -
              3.46022402653609*o[16])*o[4]*o[5]*pi + o[4]*(0.109336249381227 -
              2248.08924686956*o[14] - 354742.725841972*o[17] - 24.1331193696374*o[
              6])*pi - 3.09081828396912e-19*o[11]*o[12]*o[5]*o[7]*pi -
              1.24107527851371e-8*o[11]*o[13]*o[4]*o[5]*o[6]*o[7]*pi +
              3.99891272904219*o[5]*o[8]*pi + 0.0641817365250892*o[10]*o[7]*o[9]*pi
               + pi*(-4444.87643334512 - 75253.6156722047*o[14] - 43051.9020511789*
              o[6] - 22926.6247146068*q2) + o[4]*(-8.23252840892034 -
              3927.0508365636*o[15] - 239.325789467604*o[18] - 76407.3727417716*o[8]
               - 94.4508644545118*q2) + 0.360567666582363*o[5]*(-0.0161221195808321
               + q2)*(0.0338039844460968 + q2) + o[11]*(-0.000584580992538624*o[10]
              *o[12]*o[7] + 1.33248030241755e6*o[12]*o[13]*q2) + o[9]*(-7.38502736990986e7
              *o[18] + 0.0000224425477627799*o[6]*o[7]*q2) + o[4]*o[5]*(-2.08438767026518e8
              *o[17] - 0.0000124971648677697*o[6] - 8442.30378348203*o[10]*o[6]*o[7]
              *q2) + o[11]*o[9]*(4.73594929247646e-22*o[10]*o[12]*q2 -
              13.6411358215175*o[10]*o[12]*o[13]*q2 + 5.52427169406836e-10*o[13]*o[
              6]*o[7]*q2) + o[11]*o[5]*(2.67174673301715e-6*o[17] +
              4.44545133805865e-18*o[12]*o[6]*q2 - 50.2465185106411*o[10]*o[13]*o[6]
              *o[7]*q2)))/o[1];
          end hlowerofp2;

          function hupperofp2
            "Explicit upper specific enthalpy limit of region 2 as function of pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real pi "Dimensionless pressure";
            Real[2] o "Vector of auxiliary variables";
          algorithm
            pi := p/data.PSTAR2;
            assert(p > triple.ptriple,
              "IF97 medium function hupperofp2 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            o[1] := pi*pi;
            o[2] := o[1]*o[1]*o[1];
            h := 4.16066337647071e6 + pi*(-4518.48617188327 + pi*(-8.53409968320258
               + pi*(0.109090430596056 + pi*(-0.000172486052272327 + pi*(
              4.2261295097284e-15 + pi*(-1.27295130636232e-10 + pi*(-3.79407294691742e-25
               + pi*(7.56960433802525e-23 + pi*(7.16825117265975e-32 + pi*(
              3.37267475986401e-21 + (-7.5656940729795e-74 + o[1]*(-8.00969737237617e-134
               + (1.6746290980312e-65 + pi*(-3.71600586812966e-69 + pi*(
              8.06630589170884e-129 + (-1.76117969553159e-103 +
              1.88543121025106e-84*pi)*pi)))*o[1]))*o[2]))))))))));
          end hupperofp2;

          function slowerofp2
            "Explicit lower specific entropy limit of region 2 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real pi "Dimensionless pressure";
            Real q1 "Auxiliary variable";
            Real q2 "Auxiliary variable";
            Real[40] o "Vector of auxiliary variables";
          algorithm
            pi := p/data.PSTAR2;
            assert(p > triple.ptriple,
              "IF97 medium function slowerofp2 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            q1 := 572.54459862746 + 31.3220101646784*(-13.91883977887 + pi)^0.5;
            q2 := -0.5 + 540.0/q1;
            o[1] := pi*pi;
            o[2] := o[1]*pi;
            o[3] := o[1]*o[1];
            o[4] := o[1]*o[3]*pi;
            o[5] := q1*q1;
            o[6] := o[5]*q1;
            o[7] := 1/o[5];
            o[8] := 1/q1;
            o[9] := o[5]*o[5];
            o[10] := o[9]*q1;
            o[11] := q2*q2;
            o[12] := o[11]*q2;
            o[13] := o[1]*o[3];
            o[14] := o[11]*o[11];
            o[15] := o[3]*o[3];
            o[16] := o[1]*o[15];
            o[17] := o[11]*o[14];
            o[18] := o[11]*o[14]*q2;
            o[19] := o[3]*pi;
            o[20] := o[14]*o[14];
            o[21] := o[11]*o[20];
            o[22] := o[15]*pi;
            o[23] := o[14]*o[20]*q2;
            o[24] := o[20]*o[20];
            o[25] := o[15]*o[15];
            o[26] := o[25]*o[3];
            o[27] := o[14]*o[24];
            o[28] := o[25]*o[3]*pi;
            o[29] := o[20]*o[24]*q2;
            o[30] := o[15]*o[25];
            o[31] := o[24]*o[24];
            o[32] := o[11]*o[31]*q2;
            o[33] := o[14]*o[31];
            o[34] := o[1]*o[25]*o[3]*pi;
            o[35] := o[11]*o[14]*o[31]*q2;
            o[36] := o[1]*o[25]*o[3];
            o[37] := o[1]*o[25];
            o[38] := o[20]*o[24]*o[31]*q2;
            o[39] := o[14]*q2;
            o[40] := o[11]*o[31];

            s := 461.526*(9.692768600217 + 1.22151969114703e-16*o[10] +
              0.00018948987516315*o[1]*o[11] + 1.6714766451061e-11*o[12]*o[13] +
              0.0039392777243355*o[1]*o[14] - 1.0406965210174e-19*o[14]*o[16] +
              0.043797295650573*o[1]*o[18] - 2.2922076337661e-6*o[18]*o[19] -
              2.0481737692309e-8*o[2] + 0.00003227767723857*o[12]*o[2] +
              0.0015033924542148*o[17]*o[2] - 1.1256211360459e-11*o[15]*o[20] +
              1.0018179379511e-9*o[11]*o[14]*o[16]*o[20] + 1.0234747095929e-13*o[16]
              *o[21] - 1.9809712802088e-8*o[22]*o[23] + 0.0021171472321355*o[13]*o[
              24] - 8.9185845355421e-25*o[26]*o[27] - 1.2790717852285e-8*o[11]*o[3]
               - 4.8225372718507e-7*o[12]*o[3] - 7.3087610595061e-29*o[11]*o[20]*o[
              24]*o[30] - 0.10693031879409*o[11]*o[24]*o[25]*o[31] +
              4.2002467698208e-6*o[24]*o[26]*o[31] - 5.5414715350778e-17*o[20]*o[30]
              *o[31] + 9.436970724121e-7*o[11]*o[20]*o[24]*o[30]*o[31] +
              23.895741934104*o[13]*o[32] + 0.040668253562649*o[2]*o[32] -
              3.0629316876232e-13*o[26]*o[32] + 0.000026674547914087*o[1]*o[33] +
              8.2311340897998*o[15]*o[33] + 1.2768608934681e-15*o[34]*o[35] +
              0.33662250574171*o[37]*o[38] + 5.905956432427e-18*o[4] +
              0.038946842435739*o[29]*o[4] - 4.88368302964335e-6*o[5] -
              3.34901734177133e6/o[6] + 2.58538448402683e-9*o[6] + 82839.5726841115
              *o[7] - 5446.7940672972*o[8] - 8.40318337484194e-13*o[9] +
              0.0017731742473213*pi + 0.045996013696365*o[11]*pi +
              0.057581259083432*o[12]*pi + 0.05032527872793*o[17]*pi + o[8]*pi*(
              9.63082563787332 - 0.008917431146179*q1) + 0.00811842799898148*q1 +
              0.000033032641670203*o[1]*q2 - 4.3870667284435e-7*o[2]*q2 +
              8.0882908646985e-11*o[14]*o[20]*o[24]*o[25]*q2 + 5.9056029685639e-26*
              o[14]*o[24]*o[28]*q2 + 7.8847309559367e-10*o[3]*q2 -
              3.7826947613457e-6*o[14]*o[24]*o[31]*o[36]*q2 + 1.2621808899101e-6*o[
              11]*o[20]*o[4]*q2 + 540.*o[8]*(10.08665568018 - 0.000033032641670203*
              o[1] - 6.2245802776607e-15*o[10] - 0.015757110897342*o[1]*o[12] -
              5.0144299353183e-11*o[11]*o[13] + 4.1627860840696e-19*o[12]*o[16] -
              0.306581069554011*o[1]*o[17] + 9.0049690883672e-11*o[15]*o[18] +
              0.0000160454534363627*o[17]*o[19] + 4.3870667284435e-7*o[2] -
              0.00009683303171571*o[11]*o[2] + 2.57526266427144e-7*o[14]*o[20]*o[22]
               - 1.40254511313154e-8*o[16]*o[23] - 2.34560435076256e-9*o[14]*o[20]*
              o[24]*o[25] - 1.24017662339842e-24*o[27]*o[28] - 7.8847309559367e-10*
              o[3] + 1.44676118155521e-6*o[11]*o[3] + 1.90027787547159e-27*o[29]*o[
              30] - 0.000960283724907132*o[1]*o[32] - 296.320827232793*o[15]*o[32]
               - 4.97975748452559e-14*o[11]*o[14]*o[31]*o[34] +
              2.21658861403112e-15*o[30]*o[35] + 0.000200482822351322*o[14]*o[24]*o[
              31]*o[36] - 19.1874828272775*o[20]*o[24]*o[31]*o[37] -
              0.0000547344301999018*o[30]*o[38] - 0.0090203547252888*o[2]*o[39] -
              0.0000138839897890111*o[21]*o[4] - 0.973671060893475*o[20]*o[24]*o[4]
               - 836.35096769364*o[13]*o[40] - 1.42338887469272*o[2]*o[40] +
              1.07202609066812e-11*o[26]*o[40] + 0.0000150341259240398*o[5] -
              1.8087714924605e-8*o[6] + 18605.6518987296*o[7] - 306.813232163376*o[
              8] + 1.43632471334824e-11*o[9] + 1.13103675106207e-18*o[5]*o[9] -
              0.017834862292358*pi - 0.172743777250296*o[11]*pi - 0.30195167236758*
              o[39]*pi + o[8]*pi*(-49.6756947920742 + 0.045996013696365*q1) -
              0.0003789797503263*o[1]*q2 - 0.033874355714168*o[11]*o[13]*o[14]*o[20]
              *q2 - 1.0234747095929e-12*o[16]*o[20]*q2 + 1.78371690710842e-23*o[11]
              *o[24]*o[26]*q2 + 2.558143570457e-8*o[3]*q2 + 5.3465159397045*o[24]*o[
              25]*o[31]*q2 - 0.000201611844951398*o[11]*o[14]*o[20]*o[26]*o[31]*q2)
               - Modelica.Math.log(pi));
          end slowerofp2;

          function supperofp2
            "Explicit upper specific entropy limit of region 2 as function of pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real pi "Dimensionless pressure";
            Real[2] o "Vector of auxiliary variables";
          algorithm
            pi := p/data.PSTAR2;
            assert(p > triple.ptriple,
              "IF97 medium function supperofp2 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            o[1] := pi*pi;
            o[2] := o[1]*o[1]*o[1];
            s := 8505.73409708683 - 461.526*Modelica.Math.log(pi) + pi*(-3.36563543302584
               + pi*(-0.00790283552165338 + pi*(0.0000915558349202221 + pi*(-1.59634706513e-7
               + pi*(3.93449217595397e-18 + pi*(-1.18367426347994e-13 + pi*(
              2.72575244843195e-15 + pi*(7.04803892603536e-26 + pi*(
              6.67637687381772e-35 + pi*(3.1377970315132e-24 + (-7.04844558482265e-77
               + o[1]*(-7.46289531275314e-137 + (1.55998511254305e-68 + pi*(-3.46166288915497e-72
               + pi*(7.51557618628583e-132 + (-1.64086406733212e-106 +
              1.75648443097063e-87*pi)*pi)))*o[1]))*o[2]*o[2]))))))))));
          end supperofp2;

          function d1n "Density in region 1 as function of p and T"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output SI.Density d "Density";
          protected
            Real pi "Dimensionless pressure";
            Real pi1 "Dimensionless pressure";
            Real tau "Dimensionless temperature";
            Real tau1 "Dimensionless temperature";
            Real gpi "Dimensionless Gibbs-derivative w.r.t. pi";
            Real[11] o "Auxiliary variables";
          algorithm
            pi := p/data.PSTAR1;
            tau := data.TSTAR1/T;
            pi1 := 7.1 - pi;
            tau1 := tau - 1.222;
            o[1] := tau1*tau1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[1]*o[2];
            o[5] := o[1]*tau1;
            o[6] := o[2]*tau1;
            o[7] := pi1*pi1;
            o[8] := o[7]*o[7];
            o[9] := o[8]*o[8];
            o[10] := o[3]*o[3];
            o[11] := o[10]*o[10];
            gpi := pi1*(pi1*((0.000095038934535162 + o[2]*(8.4812393955936e-6 +
              2.55615384360309e-9*o[4]))/o[2] + pi1*((8.9701127632e-6 + (
              2.60684891582404e-6 + 5.7366919751696e-13*o[2]*o[3])*o[5])/o[6] + pi1
              *(2.02584984300585e-6/o[3] + o[7]*pi1*(o[8]*o[9]*pi1*(o[7]*(o[7]*o[8]
              *(-7.63737668221055e-22/(o[1]*o[11]*o[2]) + pi1*(pi1*(-5.65070932023524e-23
              /(o[11]*o[3]) + (2.99318679335866e-24*pi1)/(o[11]*o[3]*tau1)) +
              3.5842867920213e-22/(o[1]*o[11]*o[2]*tau1))) - 3.33001080055983e-19/(
              o[1]*o[10]*o[2]*o[3]*tau1)) + 1.44400475720615e-17/(o[10]*o[2]*o[3]*
              tau1)) + (1.01874413933128e-8 + 1.39398969845072e-9*o[6])/(o[1]*o[3]*
              tau1))))) + (0.00094368642146534 + o[5]*(0.00060003561586052 + (-0.000095322787813974
               + o[1]*(8.8283690661692e-6 + 1.45389992595188e-15*o[1]*o[2]*o[3]))*
              tau1))/o[5]) + (-0.00028319080123804 + o[1]*(0.00060706301565874 + o[
              4]*(0.018990068218419 + tau1*(0.032529748770505 + (0.021841717175414
               + 0.00005283835796993*o[1])*tau1))))/(o[3]*tau1);
            d := p/(data.RH2O*T*pi*gpi);
          end d1n;

          function d2n "Density in region 2 as function of p and T"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output SI.Density d "Density";
          protected
            Real pi "Dimensionless pressure";
            Real tau "Dimensionless temperature";
            Real tau2 "Dimensionless temperature";
            Real gpi "Dimensionless Gibbs-derivative w.r.t. pi";
            Real[12] o "Auxiliary variables";
          algorithm
            pi := p/data.PSTAR2;
            tau := data.TSTAR2/T;
            tau2 := tau - 0.5;
            o[1] := tau2*tau2;
            o[2] := o[1]*tau2;
            o[3] := o[1]*o[1];
            o[4] := o[3]*o[3];
            o[5] := o[4]*o[4];
            o[6] := o[3]*o[4]*o[5]*tau2;
            o[7] := o[3]*o[4]*tau2;
            o[8] := o[1]*o[3]*o[4];
            o[9] := pi*pi;
            o[10] := o[9]*o[9];
            o[11] := o[3]*o[5]*tau2;
            o[12] := o[5]*o[5];
            gpi := (1. + pi*(-0.0017731742473213 + tau2*(-0.017834862292358 + tau2*
              (-0.045996013696365 + (-0.057581259083432 - 0.05032527872793*o[2])*
              tau2)) + pi*(tau2*(-0.000066065283340406 + (-0.0003789797503263 + o[1]
              *(-0.007878555448671 + o[2]*(-0.087594591301146 -
              0.000053349095828174*o[6])))*tau2) + pi*(6.1445213076927e-8 + (
              1.31612001853305e-6 + o[1]*(-0.00009683303171571 + o[2]*(-0.0045101773626444
               - 0.122004760687947*o[6])))*tau2 + pi*(tau2*(-3.15389238237468e-9 +
              (5.116287140914e-8 + 1.92901490874028e-6*tau2)*tau2) + pi*(
              0.0000114610381688305*o[1]*o[3]*tau2 + pi*(o[2]*(-1.00288598706366e-10
               + o[7]*(-0.012702883392813 - 143.374451604624*o[1]*o[5]*tau2)) + pi*
              (-4.1341695026989e-17 + o[1]*o[4]*(-8.8352662293707e-6 -
              0.272627897050173*o[8])*tau2 + pi*(o[4]*(9.0049690883672e-11 -
              65.8490727183984*o[3]*o[4]*o[5]) + pi*(1.78287415218792e-7*o[7] + pi*
              (o[3]*(1.0406965210174e-18 + o[1]*(-1.0234747095929e-12 -
              1.0018179379511e-8*o[3])*o[3]) + o[10]*o[9]*((-1.29412653835176e-9 +
              1.71088510070544*o[11])*o[6] + o[9]*(-6.05920510335078*o[12]*o[4]*o[5]
              *tau2 + o[9]*(o[3]*o[5]*(1.78371690710842e-23 + o[1]*o[3]*o[4]*(
              6.1258633752464e-12 - 0.000084004935396416*o[7])*tau2) + pi*(-1.24017662339842e-24
              *o[11] + pi*(0.0000832192847496054*o[12]*o[3]*o[5]*tau2 + pi*(o[1]*o[
              4]*o[5]*(1.75410265428146e-27 + (1.32995316841867e-15 -
              0.0000226487297378904*o[1]*o[5])*o[8])*pi - 2.93678005497663e-14*o[1]
              *o[12]*o[3]*tau2)))))))))))))))))/pi;
            d := p/(data.RH2O*T*pi*gpi);
          end d2n;

          function dhot1ofp "Density at upper temperature limit of region 1"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.Density d "Density";
          protected
            Real pi "Dimensionless pressure";
            Real pi1 "Dimensionless pressure";
            Real[4] o "Auxiliary variables";
          algorithm
            pi := p/data.PSTAR1;
            pi1 := 7.1 - pi;
            o[1] := pi1*pi1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[3]*o[3];
            d := 57.4756752485113/(0.0737412153522555 + 0.000102697173772229*o[1]
               + 1.99080616601101e-6*o[2] + 1.35549330686006e-17*o[2]*o[4] -
              3.11228834832975e-19*o[1]*o[2]*o[4] - 7.02987180039442e-22*o[2]*o[3]*
              o[4] - 5.17859076694812e-23*o[1]*o[2]*o[3]*o[4] + 0.00145092247736023
              *pi1 + 0.0000114683182476084*o[1]*pi1 + 1.13217858826367e-8*o[1]*o[2]
              *pi1 + 3.29199117056433e-22*o[2]*o[3]*o[4]*pi1 + 2.73712834080283e-24
              *o[1]*o[2]*o[3]*o[4]*pi1);
          end dhot1ofp;

          function dupper1ofT "Density at upper pressure limit of region 1"
            extends Modelica.Icons.Function;
            input SI.Temperature T "Temperature (K)";
            output SI.Density d "Density";
          protected
            Real tau "Dimensionless temperature";
            Real[4] o "Auxiliary variables";
          algorithm
            tau := 1386.0/T;
            o[1] := tau*tau;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[3]*o[3];
            d := 57.4756752485113/(2.24144616859917 + 40.9288231166229*o[1] +
              106.47246463213*o[2] + 88.4481480270751*o[1]*o[2] + 31.3207272417546*
              o[3] + 5.47811738891798*o[1]*o[3] + 0.515626225030717*o[2]*o[3] +
              0.0274905057899089*o[1]*o[2]*o[3] + 0.000853742979250503*o[4] +
              0.0000155932210492199*o[1]*o[4] + 1.6621051480279e-7*o[2]*o[4] +
              1.00606771839976e-9*o[1]*o[2]*o[4] + 3.27598951831994e-12*o[3]*o[4]
               + 5.20162317530099e-15*o[1]*o[3]*o[4] + 3.33501889800275e-18*o[2]*o[
              3]*o[4] + 5.50656040141221e-22*o[1]*o[2]*o[3]*o[4] - 13.5354267762204
              *tau - 78.3629702507642*o[1]*tau - 109.374479648652*o[2]*tau -
              57.9035658513312*o[1]*o[2]*tau - 14.215347150565*o[3]*tau -
              1.80906759985501*o[1]*o[3]*tau - 0.127542214693871*o[2]*o[3]*tau -
              0.0051779458313163*o[1]*o[2]*o[3]*tau - 0.000123304142684848*o[4]*tau
               - 1.72405791469972e-6*o[1]*o[4]*tau - 1.39155695911655e-8*o[2]*o[4]*
              tau - 6.23333356847138e-11*o[1]*o[2]*o[4]*tau - 1.44056015732082e-13*
              o[3]*o[4]*tau - 1.50201626932938e-16*o[1]*o[3]*o[4]*tau -
              5.34588682252967e-20*o[2]*o[3]*o[4]*tau - 2.73712834080283e-24*o[1]*o[
              2]*o[3]*o[4]*tau);
          end dupper1ofT;

          function hl_p_R4b
            "Explicit approximation of liquid specific enthalpy on the boundary between regions 4 and 3"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real x "Auxiliary variable";
          algorithm
            // documentation of accuracy in notebook ~hubertus/props/IAPWS/R3Approx.nb
            // boundary between region IVa and III
            x := Modelica.Math.acos(p/data.PCRIT);
            h := (1 + x*(-0.4945586958175176 + x*(1.346800016564904 + x*(-3.889388153209752
               + x*(6.679385472887931 + x*(-6.75820241066552 + x*(3.558919744656498
               + (-0.7179818554978939 - 0.0001152032945617821*x)*x)))))))*data.HCRIT;
          end hl_p_R4b;

          function hv_p_R4b
            "Explicit approximation of vapour specific enthalpy on the boundary between regions 4 and 3"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real x "Auxiliary variable";
          algorithm
            // boundary between region IVa and III
            x := Modelica.Math.acos(p/data.PCRIT);
            h := (1 + x*(0.4880153718655694 + x*(0.2079670746250689 + x*(-6.084122698421623
               + x*(25.08887602293532 + x*(-48.38215180269516 + x*(
              45.66489164833212 + (-16.98555442961553 + 0.0006616936460057691*x)*x)))))))
              *data.HCRIT;
          end hv_p_R4b;

          function sl_p_R4b
            "Explicit approximation of liquid specific entropy on the boundary between regions 4 and 3"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real x "Auxiliary variable";
          algorithm
            // boundary between region IVa and III
            x := Modelica.Math.acos(p/data.PCRIT);
            s := (1 + x*(-0.36160692245648063 + x*(0.9962778630486647 + x*(-2.8595548144171103
               + x*(4.906301159555333 + x*(-4.974092309614206 + x*(
              2.6249651699204457 + (-0.5319954375299023 - 0.00008064497431880644*x)
              *x)))))))*data.SCRIT;
          end sl_p_R4b;

          function sv_p_R4b
            "Explicit approximation of vapour specific entropy on the boundary between regions 4 and 3"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s;
          protected
            Real x "Auxiliary variable";
          algorithm

            // documentation of accuracy in notebook ~hubertus/props/IAPWS/R3Approx.nb
            // boundary between region IVa and III
            x := Modelica.Math.acos(p/data.PCRIT);
            s := (1 + x*(0.35682641826674344 + x*(0.1642457027815487 + x*(-4.425350377422446
               + x*(18.324477859983133 + x*(-35.338631625948665 + x*(
              33.36181025816282 + (-12.408711490585757 + 0.0004810049834109226*x)*x)))))))
              *data.SCRIT;
          end sv_p_R4b;

          function rhol_p_R4b
            "Explicit approximation of liquid density on the boundary between regions 4 and 3"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.Density dl "Liquid density";
          protected
            Real x "Auxiliary variable";
          algorithm
            if (p < data.PCRIT) then
              x := Modelica.Math.acos(p/data.PCRIT);
              dl := (1 + x*(1.903224079094824 + x*(-2.5314861802401123 + x*(-8.191449323843552
                 + x*(94.34196116778385 + x*(-369.3676833623383 + x*(
                796.6627910598293 + x*(-994.5385383600702 + x*(673.2581177021598 +
                (-191.43077336405156 + 0.00052536560808895*x)*x)))))))))*data.DCRIT;
            else
              dl := data.DCRIT;
            end if;
          end rhol_p_R4b;

          function rhov_p_R4b
            "Explicit approximation of vapour density on the boundary between regions 4 and 2"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.Density dv "Vapour density";
          protected
            Real x "Auxiliary variable";
          algorithm
            if (p < data.PCRIT) then
              x := Modelica.Math.acos(p/data.PCRIT);
              dv := (1 + x*(-1.8463850803362596 + x*(-1.1447872718878493 + x*(
                59.18702203076563 + x*(-403.5391431811611 + x*(1437.2007245332388
                 + x*(-3015.853540307519 + x*(3740.5790348670057 + x*(-2537.375817253895
                 + (725.8761975803782 - 0.0011151111658332337*x)*x)))))))))*data.DCRIT;
            else
              dv := data.DCRIT;
            end if;
          end rhov_p_R4b;

          function boilingcurve_p "Properties on the boiling curve"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output Common.IF97PhaseBoundaryProperties bpro "Property record";
          protected
            Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives";
            Common.HelmholtzDerivs f
              "Dimensionless Helmholtz function and derivatives";
            SI.Pressure plim=min(p, data.PCRIT - 1e-7)
              "Pressure limited to critical pressure - epsilon";
          algorithm
            bpro.R := data.RH2O;
            bpro.T := Basic.tsat(plim);
            bpro.dpT := Basic.dptofT(bpro.T);
            bpro.region3boundary := bpro.T > data.TLIMIT1;
            if not bpro.region3boundary then
              g := Basic.g1(p, bpro.T);
              bpro.d := p/(bpro.R*bpro.T*g.pi*g.gpi);
              bpro.h := if p > plim then data.HCRIT else bpro.R*bpro.T*g.tau*g.gtau;
              bpro.s := g.R*(g.tau*g.gtau - g.g);
              bpro.cp := -bpro.R*g.tau*g.tau*g.gtautau;
              bpro.vt := bpro.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
              bpro.vp := bpro.R*bpro.T/(p*p)*g.pi*g.pi*g.gpipi;
              bpro.pt := -p/bpro.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
              bpro.pd := -bpro.R*bpro.T*g.gpi*g.gpi/(g.gpipi);
            else
              bpro.d := rhol_p_R4b(plim);
              f := Basic.f3(bpro.d, bpro.T);
              bpro.h := hl_p_R4b(plim);
              // bpro.R*bpro.T*(f.tau*f.ftau + f.delta*f.fdelta);
              bpro.s := f.R*(f.tau*f.ftau - f.f);
              bpro.cv := bpro.R*(-f.tau*f.tau*f.ftautau);
              bpro.pt := bpro.R*bpro.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
              bpro.pd := bpro.R*bpro.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
            end if;
          end boilingcurve_p;

          function dewcurve_p "Properties on the dew curve"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output Common.IF97PhaseBoundaryProperties bpro "Property record";
          protected
            Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives";
            Common.HelmholtzDerivs f
              "Dimensionless Helmholtz function and derivatives";
            SI.Pressure plim=min(p, data.PCRIT - 1e-7)
              "Pressure limited to critical pressure - epsilon";
          algorithm
            bpro.R := data.RH2O;
            bpro.T := Basic.tsat(plim);
            bpro.dpT := Basic.dptofT(bpro.T);
            bpro.region3boundary := bpro.T > data.TLIMIT1;
            if not bpro.region3boundary then
              g := Basic.g2(p, bpro.T);
              bpro.d := p/(bpro.R*bpro.T*g.pi*g.gpi);
              bpro.h := if p > plim then data.HCRIT else bpro.R*bpro.T*g.tau*g.gtau;
              bpro.s := g.R*(g.tau*g.gtau - g.g);
              bpro.cp := -bpro.R*g.tau*g.tau*g.gtautau;
              bpro.vt := bpro.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
              bpro.vp := bpro.R*bpro.T/(p*p)*g.pi*g.pi*g.gpipi;
              bpro.pt := -p/bpro.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
              bpro.pd := -bpro.R*bpro.T*g.gpi*g.gpi/(g.gpipi);
            else
              bpro.d := rhov_p_R4b(plim);
              f := Basic.f3(bpro.d, bpro.T);
              bpro.h := hv_p_R4b(plim);
              // bpro.R*bpro.T*(f.tau*f.ftau + f.delta*f.fdelta);
              bpro.s := f.R*(f.tau*f.ftau - f.f);
              bpro.cv := bpro.R*(-f.tau*f.tau*f.ftautau);
              bpro.pt := bpro.R*bpro.d*f.delta*(f.fdelta - f.tau*f.fdeltatau);
              bpro.pd := bpro.R*bpro.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
            end if;
          end dewcurve_p;

          function hvl_p
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input Common.IF97PhaseBoundaryProperties bpro "Property record";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          algorithm
            h := bpro.h;
            annotation (
              derivative(noDerivative=bpro) = hvl_p_der,
              Inline=false,
              LateInline=true);
          end hvl_p;

          function hl_p
            "Liquid specific enthalpy on the boundary between regions 4 and 3 or 1"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          algorithm
            h := hvl_p(p, boilingcurve_p(p));
            annotation (Inline=true);
          end hl_p;

          function hv_p
            "Vapour specific enthalpy on the boundary between regions 4 and 3 or 2"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          algorithm
            h := hvl_p(p, dewcurve_p(p));
            annotation (Inline=true);
          end hv_p;

          function hvl_p_der
            "Derivative function for the specific enthalpy along the phase boundary"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input Common.IF97PhaseBoundaryProperties bpro "Property record";
            input Real p_der "Derivative of pressure";
            output Real h_der
              "Time derivative of specific enthalpy along the phase boundary";
          algorithm
            if bpro.region3boundary then
              h_der := ((bpro.d*bpro.pd - bpro.T*bpro.pt)*p_der + (bpro.T*bpro.pt*
                bpro.pt + bpro.d*bpro.d*bpro.pd*bpro.cv)/bpro.dpT*p_der)/(bpro.pd*
                bpro.d*bpro.d);
            else
              h_der := (1/bpro.d - bpro.T*bpro.vt)*p_der + bpro.cp/bpro.dpT*p_der;
            end if;
            annotation (Inline=true);
          end hvl_p_der;

          function rhovl_p
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input Common.IF97PhaseBoundaryProperties bpro "Property record";
            output SI.Density rho "Density";
          algorithm
            rho := bpro.d;
            annotation (
              derivative(noDerivative=bpro) = rhovl_p_der,
              Inline=false,
              LateInline=true);
          end rhovl_p;

          function rhol_p "Density of saturated water"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Saturation pressure";
            output SI.Density rho "Density of steam at the condensation point";
          algorithm
            rho := rhovl_p(p, boilingcurve_p(p));
            annotation (Inline=true);
          end rhol_p;

          function rhov_p "Density of saturated vapour"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Saturation pressure";
            output SI.Density rho "Density of steam at the condensation point";
          algorithm
            rho := rhovl_p(p, dewcurve_p(p));
            annotation (Inline=true);
          end rhov_p;

          function rhovl_p_der
            extends Modelica.Icons.Function;
            input SI.Pressure p "Saturation pressure";
            input Common.IF97PhaseBoundaryProperties bpro "Property record";
            input Real p_der "Derivative of pressure";
            output Real d_der "Time derivative of density along the phase boundary";
          algorithm
            d_der := if bpro.region3boundary then (p_der - bpro.pt*p_der/bpro.dpT)/
              bpro.pd else -bpro.d*bpro.d*(bpro.vp + bpro.vt/bpro.dpT)*p_der;
            annotation (Inline=true);
          end rhovl_p_der;

          function sl_p
            "Liquid specific entropy on the boundary between regions 4 and 3 or 1"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            SI.Temperature Tsat "Saturation temperature";
            SI.SpecificEnthalpy h "Specific enthalpy";
          algorithm
            if (p < data.PLIMIT4A) then
              Tsat := Basic.tsat(p);
              (h,s) := Isentropic.handsofpT1(p, Tsat);
            elseif (p < data.PCRIT) then
              s := sl_p_R4b(p);
            else
              s := data.SCRIT;
            end if;
          end sl_p;

          function sv_p
            "Vapour specific entropy on the boundary between regions 4 and 3 or 2"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            SI.Temperature Tsat "Saturation temperature";
            SI.SpecificEnthalpy h "Specific enthalpy";
          algorithm
            if (p < data.PLIMIT4A) then
              Tsat := Basic.tsat(p);
              (h,s) := Isentropic.handsofpT2(p, Tsat);
            elseif (p < data.PCRIT) then
              s := sv_p_R4b(p);
            else
              s := data.SCRIT;
            end if;
          end sv_p;

          function rhol_T "Density of saturated water"
            extends Modelica.Icons.Function;
            input SI.Temperature T "Temperature";
            output SI.Density d "Density of water at the boiling point";
          protected
            SI.Pressure p "Saturation pressure";
          algorithm
            p := Basic.psat(T);
            if T < data.TLIMIT1 then
              d := d1n(p, T);
            elseif T < data.TCRIT then
              d := rhol_p_R4b(p);
            else
              d := data.DCRIT;
            end if;
          end rhol_T;

          function rhov_T "Density of saturated vapour"
            extends Modelica.Icons.Function;
            input SI.Temperature T "Temperature";
            output SI.Density d "Density of steam at the condensation point";
          protected
            SI.Pressure p "Saturation pressure";
          algorithm

            // assert(T <= data.TCRIT,"input temperature has to be below the critical temperature");
            p := Basic.psat(T);
            if T < data.TLIMIT1 then
              d := d2n(p, T);
            elseif T < data.TCRIT then
              d := rhov_p_R4b(p);
            else
              d := data.DCRIT;
            end if;
          end rhov_T;

          function region_ph
            "Return the current region (valid values: 1,2,3,4,5) in IF97 for given pressure and specific enthalpy"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input Integer phase=0
              "Phase: 2 for two-phase, 1 for one phase, 0 if not known";
            input Integer mode=0
              "Mode: 0 means check, otherwise assume region=mode";
            output Integer region "Region (valid values: 1,2,3,4,5) in IF97";
            // If mode is different from 0, no checking for the region is done and
            // the mode is assumed to be the correct region. This can be used to
            // implement e.g., water-only steam tables when mode == 1
          protected
            Boolean hsubcrit;
            SI.Temperature Ttest;
            constant Real[5] n=data.n;
            SI.SpecificEnthalpy hl "Bubble enthalpy";
            SI.SpecificEnthalpy hv "Dew enthalpy";
          algorithm
            if (mode <> 0) then
              region := mode;
            else
              // check for regions 1, 2, 3 and 4
              hl := hl_p(p);
              hv := hv_p(p);
              if (phase == 2) then
                region := 4;
              else
                // phase == 1 or 0, now check if we are in the legal area
                if (p < triple.ptriple) or (p > data.PLIMIT1) or (h < hlowerofp1(p))
                     or ((p < 10.0e6) and (h > hupperofp5(p))) or ((p >= 10.0e6)
                     and (h > hupperofp2(p))) then
                  // outside of valid range
                  region := -1;
                else
                  //region 5 and -1 check complete
                  hsubcrit := (h < data.HCRIT);
                  // simple precheck: very simple if pressure < PLIMIT4A
                  if (p < data.PLIMIT4A) then
                    // we can never be in region 3, so test for others
                    if hsubcrit then
                      if (phase == 1) then
                        region := 1;
                      else
                        if (h < Isentropic.hofpT1(p, Basic.tsat(p))) then
                          region := 1;
                        else
                          region := 4;
                        end if;
                      end if;
                      // external or internal phase check
                    else
                      if (h > hlowerofp5(p)) then
                        // check for region 5
                        if ((p < data.PLIMIT5) and (h < hupperofp5(p))) then
                          region := 5;
                        else
                          region := -2;
                          // pressure and specific enthalpy too high, but this should
                        end if;
                        // never happen
                      else
                        if (phase == 1) then
                          region := 2;
                        else
                          if (h > Isentropic.hofpT2(p, Basic.tsat(p))) then
                            region := 2;
                          else
                            region := 4;
                          end if;
                        end if;
                        // external or internal phase check
                      end if;
                      // tests for region 2 or 5
                    end if;
                    // tests for sub or supercritical
                  else
                    // the pressure is over data.PLIMIT4A
                    if hsubcrit then
                      // region 1 or 3 or 4
                      if h < hupperofp1(p) then
                        region := 1;
                      else
                        if h < hl or p > data.PCRIT then
                          region := 3;
                        else
                          region := 4;
                        end if;
                      end if;
                      // end of test for region 1, 3 or 4
                    else
                      // region 2, 3 or 4
                      if (h > hlowerofp2(p)) then
                        region := 2;
                      else
                        if h > hv or p > data.PCRIT then
                          region := 3;
                        else
                          region := 4;
                        end if;
                      end if;
                      // test for 2 and 3
                    end if;
                    // tests above PLIMIT4A
                  end if;
                  // above or below PLIMIT4A
                end if;
                // check for grand limits of p and h
              end if;
              // all tests with phase == 1
            end if;
            // mode was == 0
            // assert(region > 0,"IF97 function called outside the valid range!");
          end region_ph;

          function region_ps
            "Return the current region (valid values: 1,2,3,4,5) in IF97 for given pressure and specific entropy"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input Integer phase=0
              "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
            input Integer mode=0
              "Mode: 0 means check, otherwise assume region=mode";
            output Integer region "Region (valid values: 1,2,3,4,5) in IF97";
            //  If mode is different from 0, no checking for the region is done and
            //    the mode is assumed to be the correct region. This can be used to
            //    implement e.g., water-only steam tables when mode == 1
          protected
            Boolean ssubcrit;
            SI.Temperature Ttest;
            constant Real[5] n=data.n;
            SI.SpecificEntropy sl "Bubble entropy";
            SI.SpecificEntropy sv "Dew entropy";
          algorithm
            if (mode <> 0) then
              region := mode;
            else
              // check for regions 1, 2, 3, and 4
              sl := sl_p(p);
              sv := sv_p(p);
              // check all cases two-phase
              if (phase == 2) or (phase == 0 and s > sl and s < sv and p < data.PCRIT) then
                region := 4;
              else
                // phase == 1
                region := 0;
                if (p < triple.ptriple) then
                  region := -2;
                end if;
                if (p > data.PLIMIT1) then
                  region := -3;
                end if;
                if ((p < 10.0e6) and (s > supperofp5(p))) then
                  region := -5;
                end if;
                if ((p >= 10.0e6) and (s > supperofp2(p))) then
                  region := -6;
                end if;
                if region < 0 then
                  assert(false,
                    "Region computation from p and s failed: function called outside the legal region");
                else
                  ssubcrit := (s < data.SCRIT);
                  // simple precheck: very simple if pressure < PLIMIT4A
                  if (p < data.PLIMIT4A) then
                    // we can never be in region 3, so test for 1 and 2
                    if ssubcrit then
                      region := 1;
                    else
                      if (s > slowerofp5(p)) then
                        // check for region 5
                        if ((p < data.PLIMIT5) and (s < supperofp5(p))) then
                          region := 5;
                        else
                          region := -1;
                          // pressure and specific entropy too high, should never happen!
                        end if;
                      else
                        region := 2;
                      end if;
                      // tests for region 2 or 5
                    end if;
                    // tests for sub or supercritical
                  else
                    // the pressure is over data.PLIMIT4A
                    if ssubcrit then
                      // region 1 or 3
                      if s < supperofp1(p) then
                        region := 1;
                      else
                        if s < sl or p > data.PCRIT then
                          region := 3;
                        else
                          region := 4;
                        end if;
                      end if;
                      // test for region 1, 3 or 4
                    else
                      // region 2, 3 or 4
                      if (s > slowerofp2(p)) then
                        region := 2;
                      else
                        if s > sv or p > data.PCRIT then
                          region := 3;
                        else
                          region := 4;
                        end if;
                      end if;
                      // test for 2,3 and 4
                    end if;
                    // tests above PLIMIT4A
                  end if;
                  // above or below PLIMIT4A
                end if;
                // grand test for limits of p and s
              end if;
              // all tests with phase == 1
            end if;
            // mode was == 0
          end region_ps;

          function region_pT
            "Return the current region (valid values: 1,2,3,5) in IF97, given pressure and temperature"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            input Integer mode=0
              "Mode: 0 means check, otherwise assume region=mode";
            output Integer region
              "Region (valid values: 1,2,3,5) in IF97, region 4 is impossible!";
          algorithm
            if (mode <> 0) then
              region := mode;
            else
              if p < data.PLIMIT4A then
                //test for regions 1,2,5
                if T > data.TLIMIT2 then
                  region := 5;
                elseif T > Basic.tsat(p) then
                  region := 2;
                else
                  region := 1;
                end if;
              else
                //test for regions 1,2,3
                if T < data.TLIMIT1 then
                  region := 1;
                elseif T < boundary23ofp(p) then
                  region := 3;
                else
                  region := 2;
                end if;
              end if;
            end if;
            // mode was == 0
          end region_pT;

          function region_dT
            "Return the current region (valid values: 1,2,3,4,5) in IF97, given density and temperature"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            input Integer phase=0
              "Phase: 2 for two-phase, 1 for one phase, 0 if not known";
            input Integer mode=0
              "Mode: 0 means check, otherwise assume region=mode";
            output Integer region "(valid values: 1,2,3,4,5) in IF97";
          protected
            Boolean Tovercrit "Flag if overcritical temperature";
            SI.Pressure p23 "Pressure needed to know if region 2 or 3";
          algorithm
            Tovercrit := T > data.TCRIT;
            if (mode <> 0) then
              region := mode;
            else
              p23 := boundary23ofT(T);
              if T > data.TLIMIT2 then
                if d < 20.5655874106483 then
                  // check for the density in the upper corner of validity!
                  region := 5;
                else
                  assert(false,
                    "Out of valid region for IF97, pressure above region 5!");
                end if;
              elseif Tovercrit then
                //check for regions 1, 2 or 3
                if d > d2n(p23, T) and T > data.TLIMIT1 then
                  region := 3;
                elseif T < data.TLIMIT1 then
                  region := 1;
                else
                  // d  < d2n(p23, T) and T > data.TLIMIT1
                  region := 2;
                end if;
                // below critical, check for regions 1, 2, 3 or 4
              elseif (d > rhol_T(T)) then
                // either 1 or 3
                if T < data.TLIMIT1 then
                  region := 1;
                else
                  region := 3;
                end if;
              elseif (d < rhov_T(T)) then
                // not liquid, not 2-phase, and not region 5, so either 2 or 3 or illegal
                if (d > d2n(p23, T) and T > data.TLIMIT1) then
                  region := 3;
                else
                  region := 2;
                end if;
              else
                region := 4;
              end if;
            end if;
          end region_dT;

          function hvl_dp
            "Derivative function for the specific enthalpy along the phase boundary"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input Common.IF97PhaseBoundaryProperties bpro "Property record";
            output Real dh_dp
              "Derivative of specific enthalpy along the phase boundary";
          algorithm
            if bpro.region3boundary then
              dh_dp := ((bpro.d*bpro.pd - bpro.T*bpro.pt) + (bpro.T*bpro.pt*bpro.pt
                 + bpro.d*bpro.d*bpro.pd*bpro.cv)/bpro.dpT)/(bpro.pd*bpro.d*bpro.d);
            else
              dh_dp := (1/bpro.d - bpro.T*bpro.vt) + bpro.cp/bpro.dpT;
            end if;
          end hvl_dp;

          function dhl_dp
            "Derivative of liquid specific enthalpy on the boundary between regions 4 and 3 or 1 w.r.t. pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.DerEnthalpyByPressure dh_dp
              "Specific enthalpy derivative w.r.t. pressure";
          algorithm
            dh_dp := hvl_dp(p, boilingcurve_p(p));
            annotation (Inline=true);
          end dhl_dp;

          function dhv_dp
            "Derivative of vapour specific enthalpy on the boundary between regions 4 and 3 or 1 w.r.t. pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.DerEnthalpyByPressure dh_dp
              "Specific enthalpy derivative w.r.t. pressure";
          algorithm
            dh_dp := hvl_dp(p, dewcurve_p(p));
            annotation (Inline=true);
          end dhv_dp;

          function drhovl_dp
            extends Modelica.Icons.Function;
            input SI.Pressure p "Saturation pressure";
            input Common.IF97PhaseBoundaryProperties bpro "Property record";
            output Real dd_dp(unit="kg/(m3.Pa)")
              "Derivative of density along the phase boundary";
          algorithm
            dd_dp := if bpro.region3boundary then (1.0 - bpro.pt/bpro.dpT)/bpro.pd
               else -bpro.d*bpro.d*(bpro.vp + bpro.vt/bpro.dpT);
            annotation (Inline=true);
          end drhovl_dp;

          function drhol_dp
            "Derivative of density of saturated water w.r.t. pressure"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Saturation pressure";
            output SI.DerDensityByPressure dd_dp
              "Derivative of density of water at the boiling point";
          algorithm
            dd_dp := drhovl_dp(p, boilingcurve_p(p));
            annotation (Inline=true);
          end drhol_dp;

          function drhov_dp
            "Derivative of density of saturated steam w.r.t. pressure"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Saturation pressure";
            output SI.DerDensityByPressure dd_dp
              "Derivative of density of water at the boiling point";
          algorithm
            dd_dp := drhovl_dp(p, dewcurve_p(p));
            annotation (Inline=true);
          end drhov_dp;
          annotation (Documentation(info="<html><h4>Package description</h4>
 <p>Package <strong>Regions</strong> contains a large number of auxiliary functions which are needed to compute the current region
 of the IAPWS/IF97 for a given pair of input variables as quickly as possible. The focus of this implementation was on
 computational efficiency, not on compact code. Many of the function values calculated in these functions could be obtained
 using the fundamental functions of IAPWS/IF97, but with considerable overhead. If the region of IAPWS/IF97 is known in advance,
 the input variable mode can be set to the region, then the somewhat costly region checks are omitted.
 The checking for the phase has to be done outside the region functions because many properties are not
 differentiable at the region boundary. If the input phase is 2, the output region will be set to 4 immediately.</p>
 <h4>Package contents</h4>
 <p> The main 4 functions in this package are the functions returning the appropriate region for two input variables.</p>
 <ul>
 <li>Function <strong>region_ph</strong> compute the region of IAPWS/IF97 for input pair pressure and specific enthalpy.</li>
 <li>Function <strong>region_ps</strong> compute the region of IAPWS/IF97 for input pair pressure and specific entropy</li>
 <li>Function <strong>region_dT</strong> compute the region of IAPWS/IF97 for input pair density and temperature.</li>
 <li>Function <strong>region_pT</strong> compute the region of IAPWS/IF97 for input pair pressure and temperature (only in phase region).</li>
 </ul>
 <p>In addition, functions of the boiling and condensation curves compute the specific enthalpy, specific entropy, or density on these
 curves. The functions for the saturation pressure and temperature are included in the package <strong>Basic</strong> because they are part of
 the original <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IAPWS/IF97 standards document</a>. These functions are also aliased to
 be used directly from package <strong>Water</strong>.
</p>
 <ul>
 <li>Function <strong>hl_p</strong> computes the liquid specific enthalpy as a function of pressure. For overcritical pressures,
 the critical specific enthalpy is returned. An approximation is used for temperatures > 623.15 K.</li>
 <li>Function <strong>hv_p</strong> computes the vapour specific enthalpy as a function of pressure. For overcritical pressures,
 the critical specific enthalpy is returned. An approximation is used for temperatures > 623.15 K.</li>
 <li>Function <strong>sl_p</strong> computes the liquid specific entropy as a function of pressure. For overcritical pressures,
 the critical  specific entropy is returned. An approximation is used for temperatures > 623.15 K.</li>
 <li>Function <strong>sv_p</strong> computes the vapour  specific entropy as a function of pressure. For overcritical pressures,
 the critical  specific entropy is returned. An approximation is used for temperatures > 623.15 K.</li>
 <li>Function <strong>rhol_T</strong> computes the liquid density as a function of temperature. For overcritical temperatures,
 the critical density is returned. An approximation is used for temperatures > 623.15 K.</li>
 <li>Function <strong>rhol_T</strong> computes the vapour density as a function of temperature. For overcritical temperatures,
 the critical density is returned. An approximation is used for temperatures > 623.15 K.</li>
 </ul>
 <p>All other functions are auxiliary functions called from the region functions to check a specific boundary.</p>
 <ul>
 <li>Function <strong>boundary23ofT</strong> computes the boundary pressure between regions 2 and 3 (input temperature)</li>
 <li>Function <strong>boundary23ofp</strong> computes the boundary temperature between regions 2 and 3 (input pressure)</li>
 <li>Function <strong>hlowerofp5</strong> computes the lower specific enthalpy limit of region 5 (input p, T=1073.15 K)</li>
 <li>Function <strong>hupperofp5</strong> computes the upper specific enthalpy limit of region 5 (input p, T=2273.15 K)</li>
 <li>Function <strong>slowerofp5</strong> computes the lower specific entropy limit of region 5 (input p, T=1073.15 K)</li>
 <li>Function <strong>supperofp5</strong> computes the upper specific entropy limit of region 5 (input p, T=2273.15 K)</li>
 <li>Function <strong>hlowerofp1</strong> computes the lower specific enthalpy limit of region 1 (input p, T=273.15 K)</li>
 <li>Function <strong>hupperofp1</strong> computes the upper specific enthalpy limit of region 1 (input p, T=623.15 K)</li>
 <li>Function <strong>slowerofp1</strong> computes the lower specific entropy limit of region 1 (input p, T=273.15 K)</li>
 <li>Function <strong>supperofp1</strong> computes the upper specific entropy limit of region 1 (input p, T=623.15 K)</li>
 <li>Function <strong>hlowerofp2</strong> computes the lower specific enthalpy limit of region 2 (input p, T=623.15 K)</li>
 <li>Function <strong>hupperofp2</strong> computes the upper specific enthalpy limit of region 2 (input p, T=1073.15 K)</li>
 <li>Function <strong>slowerofp2</strong> computes the lower specific entropy limit of region 2 (input p, T=623.15 K)</li>
 <li>Function <strong>supperofp2</strong> computes the upper specific entropy limit of region 2 (input p, T=1073.15 K)</li>
 <li>Function <strong>d1n</strong> computes the density in region 1 as function of pressure and temperature</li>
 <li>Function <strong>d2n</strong> computes the density in region 2 as function of pressure and temperature</li>
 <li>Function <strong>dhot1ofp</strong> computes the hot density limit of region 1 (input p, T=623.15 K)</li>
 <li>Function <strong>dupper1ofT</strong>computes the high pressure density limit of region 1 (input T, p=100MPa)</li>
 <li>Function <strong>hl_p_R4b</strong> computes a high accuracy approximation to the liquid enthalpy for temperatures > 623.15 K (input p)</li>
 <li>Function <strong>hv_p_R4b</strong> computes a high accuracy approximation to the vapour enthalpy for temperatures > 623.15 K (input p)</li>
 <li>Function <strong>sl_p_R4b</strong> computes a high accuracy approximation to the liquid entropy for temperatures > 623.15 K (input p)</li>
 <li>Function <strong>sv_p_R4b</strong> computes a high accuracy approximation to the vapour entropy for temperatures > 623.15 K (input p)</li>
 <li>Function <strong>rhol_p_R4b</strong> computes a high accuracy approximation to the liquid density for temperatures > 623.15 K (input p)</li>
 <li>Function <strong>rhov_p_R4b</strong> computes a high accuracy approximation to the vapour density for temperatures > 623.15 K (input p)</li>
 </ul>

<h4>Version Info and Revision history</h4>
<ul>
<li>First implemented: <em>July, 2000</em>
       by Hubertus Tummescheit
       </li>
</ul>
<address>Authors: Hubertus Tummescheit, Jonas Eborn and Falko Jens Wagner<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
 </address>
 <ul>
 <li>Initial version: July 2000</li>
 <li>Revised and extended for inclusion in Modelica.Thermal: December 2002</li>
</ul>
</html>"));
        end Regions;

        //===================================================================
        //                      Base functions

        //===================================================================

        package Basic "Base functions as described in IAWPS/IF97"

          extends Modelica.Icons.FunctionsPackage;

          function g1 "Gibbs function for region 1: g(p,T)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          protected
            Real pi1 "Dimensionless pressure";
            Real tau1 "Dimensionless temperature";
            Real[45] o "Vector of auxiliary variables";
            Real pl "Auxiliary variable";
          algorithm
            pl := min(p, data.PCRIT - 1);
            assert(p > triple.ptriple,
              "IF97 medium function g1 called with too low pressure\n" + "p = " +
              String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            assert(p <= 100.0e6, "IF97 medium function g1: the input pressure (= "
               + String(p) + " Pa) is higher than 100 Mpa");
            assert(T >= 273.15, "IF97 medium function g1: the temperature (= " +
              String(T) + " K) is lower than 273.15 K!");
            g.p := p;
            g.T := T;
            g.R := data.RH2O;
            g.pi := p/data.PSTAR1;
            g.tau := data.TSTAR1/T;
            pi1 := 7.1000000000000 - g.pi;
            tau1 := -1.22200000000000 + g.tau;
            o[1] := tau1*tau1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[3]*tau1;
            o[5] := 1/o[4];
            o[6] := o[1]*o[2];
            o[7] := o[1]*tau1;
            o[8] := 1/o[7];
            o[9] := o[1]*o[2]*o[3];
            o[10] := 1/o[2];
            o[11] := o[2]*tau1;
            o[12] := 1/o[11];
            o[13] := o[2]*o[3];
            o[14] := 1/o[3];
            o[15] := pi1*pi1;
            o[16] := o[15]*pi1;
            o[17] := o[15]*o[15];
            o[18] := o[17]*o[17];
            o[19] := o[17]*o[18]*pi1;
            o[20] := o[15]*o[17];
            o[21] := o[3]*o[3];
            o[22] := o[21]*o[21];
            o[23] := o[22]*o[3]*tau1;
            o[24] := 1/o[23];
            o[25] := o[22]*o[3];
            o[26] := 1/o[25];
            o[27] := o[1]*o[2]*o[22]*tau1;
            o[28] := 1/o[27];
            o[29] := o[1]*o[2]*o[22];
            o[30] := 1/o[29];
            o[31] := o[1]*o[2]*o[21]*o[3]*tau1;
            o[32] := 1/o[31];
            o[33] := o[2]*o[21]*o[3]*tau1;
            o[34] := 1/o[33];
            o[35] := o[1]*o[3]*tau1;
            o[36] := 1/o[35];
            o[37] := o[1]*o[3];
            o[38] := 1/o[37];
            o[39] := 1/o[6];
            o[40] := o[1]*o[22]*o[3];
            o[41] := 1/o[40];
            o[42] := 1/o[22];
            o[43] := o[1]*o[2]*o[21]*o[3];
            o[44] := 1/o[43];
            o[45] := 1/o[13];
            g.g := pi1*(pi1*(pi1*(o[10]*(-0.000031679644845054 + o[2]*(-2.82707979853120e-6
               - 8.5205128120103e-10*o[6])) + pi1*(o[12]*(-2.24252819080000e-6 + (-6.5171222895601e-7
               - 1.43417299379240e-13*o[13])*o[7]) + pi1*(-4.0516996860117e-7*o[14]
               + o[16]*((-1.27343017416410e-9 - 1.74248712306340e-10*o[11])*o[36]
               + o[19]*(-6.8762131295531e-19*o[34] + o[15]*(1.44783078285210e-20*o[
              32] + o[20]*(2.63357816627950e-23*o[30] + pi1*(-1.19476226400710e-23*
              o[28] + pi1*(1.82280945814040e-24*o[26] - 9.3537087292458e-26*o[24]*
              pi1))))))))) + o[8]*(-0.00047184321073267 + o[7]*(-0.000300017807930260
               + (0.000047661393906987 + o[1]*(-4.4141845330846e-6 -
              7.2694996297594e-16*o[9]))*tau1))) + o[5]*(0.000283190801238040 + o[1]
              *(-0.00060706301565874 + o[6]*(-0.0189900682184190 + tau1*(-0.032529748770505
               + (-0.0218417171754140 - 0.000052838357969930*o[1])*tau1))))) + (
              0.146329712131670 + tau1*(-0.84548187169114 + tau1*(-3.7563603672040
               + tau1*(3.3855169168385 + tau1*(-0.95791963387872 + tau1*(
              0.157720385132280 + (-0.0166164171995010 + 0.00081214629983568*tau1)*
              tau1))))))/o[1];

            g.gpi := pi1*(pi1*(o[10]*(0.000095038934535162 + o[2]*(
              8.4812393955936e-6 + 2.55615384360309e-9*o[6])) + pi1*(o[12]*(
              8.9701127632000e-6 + (2.60684891582404e-6 + 5.7366919751696e-13*o[13])
              *o[7]) + pi1*(2.02584984300585e-6*o[14] + o[16]*((1.01874413933128e-8
               + 1.39398969845072e-9*o[11])*o[36] + o[19]*(1.44400475720615e-17*o[
              34] + o[15]*(-3.3300108005598e-19*o[32] + o[20]*(-7.6373766822106e-22
              *o[30] + pi1*(3.5842867920213e-22*o[28] + pi1*(-5.6507093202352e-23*o[
              26] + 2.99318679335866e-24*o[24]*pi1))))))))) + o[8]*(
              0.00094368642146534 + o[7]*(0.00060003561586052 + (-0.000095322787813974
               + o[1]*(8.8283690661692e-6 + 1.45389992595188e-15*o[9]))*tau1))) + o[
              5]*(-0.000283190801238040 + o[1]*(0.00060706301565874 + o[6]*(
              0.0189900682184190 + tau1*(0.032529748770505 + (0.0218417171754140 +
              0.000052838357969930*o[1])*tau1))));

            g.gpipi := pi1*(o[10]*(-0.000190077869070324 + o[2]*(-0.0000169624787911872
               - 5.1123076872062e-9*o[6])) + pi1*(o[12]*(-0.0000269103382896000 + (
              -7.8205467474721e-6 - 1.72100759255088e-12*o[13])*o[7]) + pi1*(-8.1033993720234e-6
              *o[14] + o[16]*((-7.1312089753190e-8 - 9.7579278891550e-9*o[11])*o[36]
               + o[19]*(-2.88800951441230e-16*o[34] + o[15]*(7.3260237612316e-18*o[
              32] + o[20]*(2.13846547101895e-20*o[30] + pi1*(-1.03944316968618e-20*
              o[28] + pi1*(1.69521279607057e-21*o[26] - 9.2788790594118e-23*o[24]*
              pi1))))))))) + o[8]*(-0.00094368642146534 + o[7]*(-0.00060003561586052
               + (0.000095322787813974 + o[1]*(-8.8283690661692e-6 -
              1.45389992595188e-15*o[9]))*tau1));

            g.gtau := pi1*(o[38]*(-0.00254871721114236 + o[1]*(0.0042494411096112
               + (0.0189900682184190 + (-0.0218417171754140 - 0.000158515073909790*
              o[1])*o[1])*o[6])) + pi1*(o[10]*(0.00141552963219801 + o[2]*(
              0.000047661393906987 + o[1]*(-0.0000132425535992538 -
              1.23581493705910e-14*o[9]))) + pi1*(o[12]*(0.000126718579380216 -
              5.1123076872062e-9*o[37]) + pi1*(o[39]*(0.0000112126409540000 + (
              1.30342445791202e-6 - 1.43417299379240e-12*o[13])*o[7]) + pi1*(
              3.2413597488094e-6*o[5] + o[16]*((1.40077319158051e-8 +
              1.04549227383804e-9*o[11])*o[45] + o[19]*(1.99410180757040e-17*o[44]
               + o[15]*(-4.4882754268415e-19*o[42] + o[20]*(-1.00075970318621e-21*o[
              28] + pi1*(4.6595728296277e-22*o[26] + pi1*(-7.2912378325616e-23*o[24]
               + 3.8350205789908e-24*o[41]*pi1))))))))))) + o[8]*(-0.292659424263340
               + tau1*(0.84548187169114 + o[1]*(3.3855169168385 + tau1*(-1.91583926775744
               + tau1*(0.47316115539684 + (-0.066465668798004 + 0.0040607314991784*
              tau1)*tau1)))));

            g.gtautau := pi1*(o[36]*(0.0254871721114236 + o[1]*(-0.033995528876889
               + (-0.037980136436838 - 0.00031703014781958*o[2])*o[6])) + pi1*(o[12]
              *(-0.0056621185287920 + o[6]*(-0.0000264851071985076 -
              1.97730389929456e-13*o[9])) + pi1*((-0.00063359289690108 -
              2.55615384360309e-8*o[37])*o[39] + pi1*(pi1*(-0.0000291722377392842*o[
              38] + o[16]*(o[19]*(-5.9823054227112e-16*o[32] + o[15]*(o[20]*(
              3.9029628424262e-20*o[26] + pi1*(-1.86382913185108e-20*o[24] + pi1*(
              2.98940751135026e-21*o[41] - (1.61070864317613e-22*pi1)/(o[1]*o[22]*o[
              3]*tau1)))) + 1.43624813658928e-17/(o[22]*tau1))) + (-1.68092782989661e-7
               - 7.3184459168663e-9*o[11])/(o[2]*o[3]*tau1))) + (-0.000067275845724000
               + (-3.9102733737361e-6 - 1.29075569441316e-11*o[13])*o[7])/(o[1]*o[2]
              *tau1))))) + o[10]*(0.87797827279002 + tau1*(-1.69096374338228 + o[7]
              *(-1.91583926775744 + tau1*(0.94632231079368 + (-0.199397006394012 +
              0.0162429259967136*tau1)*tau1))));

            g.gtaupi := o[38]*(0.00254871721114236 + o[1]*(-0.0042494411096112 + (-0.0189900682184190
               + (0.0218417171754140 + 0.000158515073909790*o[1])*o[1])*o[6])) +
              pi1*(o[10]*(-0.00283105926439602 + o[2]*(-0.000095322787813974 + o[1]
              *(0.0000264851071985076 + 2.47162987411820e-14*o[9]))) + pi1*(o[12]*(
              -0.00038015573814065 + 1.53369230616185e-8*o[37]) + pi1*(o[39]*(-0.000044850563816000
               + (-5.2136978316481e-6 + 5.7366919751696e-12*o[13])*o[7]) + pi1*(-0.0000162067987440468
              *o[5] + o[16]*((-1.12061855326441e-7 - 8.3639381907043e-9*o[11])*o[45]
               + o[19]*(-4.1876137958978e-16*o[44] + o[15]*(1.03230334817355e-17*o[
              42] + o[20]*(2.90220313924001e-20*o[28] + pi1*(-1.39787184888831e-20*
              o[26] + pi1*(2.26028372809410e-21*o[24] - 1.22720658527705e-22*o[41]*
              pi1))))))))));
          end g1;

          function g2 "Gibbs function for region 2: g(p,T)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          protected
            Real tau2 "Dimensionless temperature";
            Real[55] o "Vector of auxiliary variables";
          algorithm
            g.p := p;
            g.T := T;
            g.R := data.RH2O;
            assert(p > 0.0,
              "IF97 medium function g2 called with too low pressure\n" + "p = " +
              String(p) + " Pa <=  0.0 Pa");
            assert(p <= 100.0e6, "IF97 medium function g2: the input pressure (= "
               + String(p) + " Pa) is higher than 100 Mpa");
            assert(T >= 273.15, "IF97 medium function g2: the temperature (= " +
              String(T) + " K) is lower than 273.15 K!");
            assert(T <= 1073.15,
              "IF97 medium function g2: the input temperature (= " + String(T) +
              " K) is higher than the limit of 1073.15 K");
            g.pi := p/data.PSTAR2;
            g.tau := data.TSTAR2/T;
            tau2 := -0.5 + g.tau;
            o[1] := tau2*tau2;
            o[2] := o[1]*tau2;
            o[3] := -0.050325278727930*o[2];
            o[4] := -0.057581259083432 + o[3];
            o[5] := o[4]*tau2;
            o[6] := -0.045996013696365 + o[5];
            o[7] := o[6]*tau2;
            o[8] := -0.0178348622923580 + o[7];
            o[9] := o[8]*tau2;
            o[10] := o[1]*o[1];
            o[11] := o[10]*o[10];
            o[12] := o[11]*o[11];
            o[13] := o[10]*o[11]*o[12]*tau2;
            o[14] := o[1]*o[10]*tau2;
            o[15] := o[10]*o[11]*tau2;
            o[16] := o[1]*o[12]*tau2;
            o[17] := o[1]*o[11]*tau2;
            o[18] := o[1]*o[10]*o[11];
            o[19] := o[10]*o[11]*o[12];
            o[20] := o[1]*o[10];
            o[21] := g.pi*g.pi;
            o[22] := o[21]*o[21];
            o[23] := o[21]*o[22];
            o[24] := o[10]*o[12]*tau2;
            o[25] := o[12]*o[12];
            o[26] := o[11]*o[12]*o[25]*tau2;
            o[27] := o[10]*o[12];
            o[28] := o[1]*o[10]*o[11]*tau2;
            o[29] := o[10]*o[12]*o[25]*tau2;
            o[30] := o[1]*o[10]*o[25]*tau2;
            o[31] := o[1]*o[11]*o[12];
            o[32] := o[1]*o[12];
            o[33] := g.tau*g.tau;
            o[34] := o[33]*o[33];
            o[35] := -0.000053349095828174*o[13];
            o[36] := -0.087594591301146 + o[35];
            o[37] := o[2]*o[36];
            o[38] := -0.0078785554486710 + o[37];
            o[39] := o[1]*o[38];
            o[40] := -0.00037897975032630 + o[39];
            o[41] := o[40]*tau2;
            o[42] := -0.000066065283340406 + o[41];
            o[43] := o[42]*tau2;
            o[44] := 5.7870447262208e-6*tau2;
            o[45] := -0.301951672367580*o[2];
            o[46] := -0.172743777250296 + o[45];
            o[47] := o[46]*tau2;
            o[48] := -0.091992027392730 + o[47];
            o[49] := o[48]*tau2;
            o[50] := o[1]*o[11];
            o[51] := o[10]*o[11];
            o[52] := o[11]*o[12]*o[25];
            o[53] := o[10]*o[12]*o[25];
            o[54] := o[1]*o[10]*o[25];
            o[55] := o[11]*o[12]*tau2;

            g.g := g.pi*(-0.00177317424732130 + o[9] + g.pi*(tau2*(-0.000033032641670203
               + (-0.000189489875163150 + o[1]*(-0.0039392777243355 + (-0.043797295650573
               - 0.0000266745479140870*o[13])*o[2]))*tau2) + g.pi*(
              2.04817376923090e-8 + (4.3870667284435e-7 + o[1]*(-0.000032277677238570
               + (-0.00150339245421480 - 0.040668253562649*o[13])*o[2]))*tau2 + g.pi
              *(g.pi*(2.29220763376610e-6*o[14] + g.pi*((-1.67147664510610e-11 + o[
              15]*(-0.00211714723213550 - 23.8957419341040*o[16]))*o[2] + g.pi*(-5.9059564324270e-18
               + o[17]*(-1.26218088991010e-6 - 0.038946842435739*o[18]) + g.pi*(o[
              11]*(1.12562113604590e-11 - 8.2311340897998*o[19]) + g.pi*(
              1.98097128020880e-8*o[15] + g.pi*(o[10]*(1.04069652101740e-19 + (-1.02347470959290e-13
               - 1.00181793795110e-9*o[10])*o[20]) + o[23]*(o[13]*(-8.0882908646985e-11
               + 0.106930318794090*o[24]) + o[21]*(-0.33662250574171*o[26] + o[21]*
              (o[27]*(8.9185845355421e-25 + (3.06293168762320e-13 -
              4.2002467698208e-6*o[15])*o[28]) + g.pi*(-5.9056029685639e-26*o[24]
               + g.pi*(3.7826947613457e-6*o[29] + g.pi*(-1.27686089346810e-15*o[30]
               + o[31]*(7.3087610595061e-29 + o[18]*(5.5414715350778e-17 -
              9.4369707241210e-7*o[32]))*g.pi)))))))))))) + tau2*(-7.8847309559367e-10
               + (1.27907178522850e-8 + 4.8225372718507e-7*tau2)*tau2))))) + (-0.0056087911830200
               + g.tau*(0.071452738814550 + g.tau*(-0.40710498239280 + g.tau*(
              1.42408197144400 + g.tau*(-4.3839511194500 + g.tau*(-9.6927686002170
               + g.tau*(10.0866556801800 + (-0.284086326077200 + 0.0212684635330700
              *g.tau)*g.tau) + Modelica.Math.log(g.pi)))))))/(o[34]*g.tau);

            g.gpi := (1.00000000000000 + g.pi*(-0.00177317424732130 + o[9] + g.pi*(
              o[43] + g.pi*(6.1445213076927e-8 + (1.31612001853305e-6 + o[1]*(-0.000096833031715710
               + (-0.0045101773626444 - 0.122004760687947*o[13])*o[2]))*tau2 + g.pi
              *(g.pi*(0.0000114610381688305*o[14] + g.pi*((-1.00288598706366e-10 +
              o[15]*(-0.0127028833928130 - 143.374451604624*o[16]))*o[2] + g.pi*(-4.1341695026989e-17
               + o[17]*(-8.8352662293707e-6 - 0.272627897050173*o[18]) + g.pi*(o[11]
              *(9.0049690883672e-11 - 65.849072718398*o[19]) + g.pi*(
              1.78287415218792e-7*o[15] + g.pi*(o[10]*(1.04069652101740e-18 + (-1.02347470959290e-12
               - 1.00181793795110e-8*o[10])*o[20]) + o[23]*(o[13]*(-1.29412653835176e-9
               + 1.71088510070544*o[24]) + o[21]*(-6.0592051033508*o[26] + o[21]*(o[
              27]*(1.78371690710842e-23 + (6.1258633752464e-12 -
              0.000084004935396416*o[15])*o[28]) + g.pi*(-1.24017662339842e-24*o[24]
               + g.pi*(0.000083219284749605*o[29] + g.pi*(-2.93678005497663e-14*o[
              30] + o[31]*(1.75410265428146e-27 + o[18]*(1.32995316841867e-15 -
              0.0000226487297378904*o[32]))*g.pi)))))))))))) + tau2*(-3.15389238237468e-9
               + (5.1162871409140e-8 + 1.92901490874028e-6*tau2)*tau2))))))/g.pi;

            g.gpipi := (-1.00000000000000 + o[21]*(o[43] + g.pi*(
              1.22890426153854e-7 + (2.63224003706610e-6 + o[1]*(-0.000193666063431420
               + (-0.0090203547252888 - 0.244009521375894*o[13])*o[2]))*tau2 + g.pi
              *(g.pi*(0.000045844152675322*o[14] + g.pi*((-5.0144299353183e-10 + o[
              15]*(-0.063514416964065 - 716.87225802312*o[16]))*o[2] + g.pi*(-2.48050170161934e-16
               + o[17]*(-0.000053011597376224 - 1.63576738230104*o[18]) + g.pi*(o[
              11]*(6.3034783618570e-10 - 460.94350902879*o[19]) + g.pi*(
              1.42629932175034e-6*o[15] + g.pi*(o[10]*(9.3662686891566e-18 + (-9.2112723863361e-12
               - 9.0163614415599e-8*o[10])*o[20]) + o[23]*(o[13]*(-1.94118980752764e-8
               + 25.6632765105816*o[24]) + o[21]*(-103.006486756963*o[26] + o[21]*(
              o[27]*(3.3890621235060e-22 + (1.16391404129682e-10 -
              0.00159609377253190*o[15])*o[28]) + g.pi*(-2.48035324679684e-23*o[24]
               + g.pi*(0.00174760497974171*o[29] + g.pi*(-6.4609161209486e-13*o[30]
               + o[31]*(4.0344361048474e-26 + o[18]*(3.05889228736295e-14 -
              0.00052092078397148*o[32]))*g.pi)))))))))))) + tau2*(-9.4616771471240e-9
               + (1.53488614227420e-7 + o[44])*tau2)))))/o[21];

            g.gtau := (0.0280439559151000 + g.tau*(-0.285810955258200 + g.tau*(
              1.22131494717840 + g.tau*(-2.84816394288800 + g.tau*(4.3839511194500
               + o[33]*(10.0866556801800 + (-0.56817265215440 + 0.063805390599210*g.tau)
              *g.tau))))))/(o[33]*o[34]) + g.pi*(-0.0178348622923580 + o[49] + g.pi
              *(-0.000033032641670203 + (-0.00037897975032630 + o[1]*(-0.0157571108973420
               + (-0.306581069554011 - 0.00096028372490713*o[13])*o[2]))*tau2 + g.pi
              *(4.3870667284435e-7 + o[1]*(-0.000096833031715710 + (-0.0090203547252888
               - 1.42338887469272*o[13])*o[2]) + g.pi*(-7.8847309559367e-10 + g.pi*
              (0.0000160454534363627*o[20] + g.pi*(o[1]*(-5.0144299353183e-11 + o[
              15]*(-0.033874355714168 - 836.35096769364*o[16])) + g.pi*((-0.0000138839897890111
               - 0.97367106089347*o[18])*o[50] + g.pi*(o[14]*(9.0049690883672e-11
               - 296.320827232793*o[19]) + g.pi*(2.57526266427144e-7*o[51] + g.pi*(
              o[2]*(4.1627860840696e-19 + (-1.02347470959290e-12 -
              1.40254511313154e-8*o[10])*o[20]) + o[23]*(o[19]*(-2.34560435076256e-9
               + 5.3465159397045*o[24]) + o[21]*(-19.1874828272775*o[52] + o[21]*(o[
              16]*(1.78371690710842e-23 + (1.07202609066812e-11 -
              0.000201611844951398*o[15])*o[28]) + g.pi*(-1.24017662339842e-24*o[27]
               + g.pi*(0.000200482822351322*o[53] + g.pi*(-4.9797574845256e-14*o[54]
               + (1.90027787547159e-27 + o[18]*(2.21658861403112e-15 -
              0.000054734430199902*o[32]))*o[55]*g.pi)))))))))))) + (
              2.55814357045700e-8 + 1.44676118155521e-6*tau2)*tau2))));

            g.gtautau := (-0.168263735490600 + g.tau*(1.42905477629100 + g.tau*(-4.8852597887136
               + g.tau*(8.5444918286640 + g.tau*(-8.7679022389000 + o[33]*(-0.56817265215440
               + 0.127610781198420*g.tau)*g.tau)))))/(o[33]*o[34]*g.tau) + g.pi*(-0.091992027392730
               + (-0.34548755450059 - 1.50975836183790*o[2])*tau2 + g.pi*(-0.00037897975032630
               + o[1]*(-0.047271332692026 + (-1.83948641732407 - 0.033609930371750*
              o[13])*o[2]) + g.pi*((-0.000193666063431420 + (-0.045101773626444 -
              48.395221739552*o[13])*o[2])*tau2 + g.pi*(2.55814357045700e-8 +
              2.89352236311042e-6*tau2 + g.pi*(0.000096272720618176*o[10]*tau2 + g.pi
              *((-1.00288598706366e-10 + o[15]*(-0.50811533571252 -
              28435.9329015838*o[16]))*tau2 + g.pi*(o[11]*(-0.000138839897890111 -
              23.3681054614434*o[18])*tau2 + g.pi*((6.3034783618570e-10 -
              10371.2289531477*o[19])*o[20] + g.pi*(3.09031519712573e-6*o[17] + g.pi
              *(o[1]*(1.24883582522088e-18 + (-9.2112723863361e-12 -
              1.82330864707100e-7*o[10])*o[20]) + o[23]*(o[1]*o[11]*o[12]*(-6.5676921821352e-8
               + 261.979281045521*o[24])*tau2 + o[21]*(-1074.49903832754*o[1]*o[10]
              *o[12]*o[25]*tau2 + o[21]*((3.3890621235060e-22 + (
              3.6448887082716e-10 - 0.0094757567127157*o[15])*o[28])*o[32] + g.pi*(
              -2.48035324679684e-23*o[16] + g.pi*(0.0104251067622687*o[1]*o[12]*o[
              25]*tau2 + g.pi*(o[11]*o[12]*(4.7506946886790e-26 + o[18]*(
              8.6446955947214e-14 - 0.00311986252139440*o[32]))*g.pi -
              1.89230784411972e-12*o[10]*o[25]*tau2))))))))))))))));

            g.gtaupi := -0.0178348622923580 + o[49] + g.pi*(-0.000066065283340406
               + (-0.00075795950065260 + o[1]*(-0.0315142217946840 + (-0.61316213910802
               - 0.00192056744981426*o[13])*o[2]))*tau2 + g.pi*(1.31612001853305e-6
               + o[1]*(-0.000290499095147130 + (-0.0270610641758664 -
              4.2701666240781*o[13])*o[2]) + g.pi*(-3.15389238237468e-9 + g.pi*(
              0.000080227267181813*o[20] + g.pi*(o[1]*(-3.00865796119098e-10 + o[15]
              *(-0.203246134285008 - 5018.1058061618*o[16])) + g.pi*((-0.000097187928523078
               - 6.8156974262543*o[18])*o[50] + g.pi*(o[14]*(7.2039752706938e-10 -
              2370.56661786234*o[19]) + g.pi*(2.31773639784430e-6*o[51] + g.pi*(o[2]
              *(4.1627860840696e-18 + (-1.02347470959290e-11 - 1.40254511313154e-7*
              o[10])*o[20]) + o[23]*(o[19]*(-3.7529669612201e-8 + 85.544255035272*o[
              24]) + o[21]*(-345.37469089099*o[52] + o[21]*(o[16]*(
              3.5674338142168e-22 + (2.14405218133624e-10 - 0.0040322368990280*o[15])
              *o[28]) + g.pi*(-2.60437090913668e-23*o[27] + g.pi*(
              0.0044106220917291*o[53] + g.pi*(-1.14534422144089e-12*o[54] + (
              4.5606669011318e-26 + o[18]*(5.3198126736747e-14 -
              0.00131362632479764*o[32]))*o[55]*g.pi)))))))))))) + (
              1.02325742818280e-7 + o[44])*tau2)));
          end g2;

          function g2metastable
            "Gibbs function for metastable part of region 2: g(p,T)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          protected
            Real pi "Dimensionless pressure";
            Real tau "Dimensionless temperature";
            Real tau2 "Dimensionless temperature";
            Real[27] o "Vector of auxiliary variables";
          algorithm
            assert(p > 0.0,
              "IF97 medium function g2metastable called with too low pressure\n" +
              "p = " + String(p) + " Pa <=  0.0 Pa");
            assert(p <= 100.0e6,
              "IF97 medium function g2metastable: the input pressure (= " + String(
              p) + " Pa) is higher than 100 Mpa");
            assert(T >= 273.15,
              "IF97 medium function g2metastable: the temperature (= " + String(T)
               + " K) is lower than 273.15 K!");
            assert(T <= 1073.15,
              "IF97 medium function g2metastable: the input temperature (= " +
              String(T) + " K) is higher than the limit of 1073.15 K");
            g.p := p;
            g.T := T;
            g.R := data.RH2O;
            g.pi := p/data.PSTAR2;
            g.tau := data.TSTAR2/T;
            tau2 := -0.5 + g.tau;
            o[1] := tau2*tau2;
            o[2] := o[1]*tau2;
            o[3] := o[1]*o[1];
            o[4] := o[1]*o[3];
            o[5] := -0.0040813178534455*o[4];
            o[6] := -0.072334555213245 + o[5];
            o[7] := o[2]*o[6];
            o[8] := -0.088223831943146 + o[7];
            o[9] := o[1]*o[8];
            o[10] := o[3]*o[3];
            o[11] := o[10]*tau2;
            o[12] := o[10]*o[3];
            o[13] := o[1]*o[3]*tau2;
            o[14] := g.tau*g.tau;
            o[15] := o[14]*o[14];
            o[16] := -0.015238081817394*o[11];
            o[17] := -0.106091843797284 + o[16];
            o[18] := o[17]*o[4];
            o[19] := 0.0040195606760414 + o[18];
            o[20] := o[19]*tau2;
            o[21] := g.pi*g.pi;
            o[22] := -0.0448944963879005*o[4];
            o[23] := -0.361672776066225 + o[22];
            o[24] := o[2]*o[23];
            o[25] := -0.176447663886292 + o[24];
            o[26] := o[25]*tau2;
            o[27] := o[3]*tau2;

            g.g := g.pi*(-0.0073362260186506 + o[9] + g.pi*(g.pi*((-0.0063498037657313
               - 0.086043093028588*o[12])*o[3] + g.pi*(o[13]*(0.007532158152277 -
              0.0079238375446139*o[2]) + o[11]*g.pi*(-0.00022888160778447 -
              0.002645650148281*tau2))) + (0.0020097803380207 + (-0.053045921898642
               - 0.007619040908697*o[11])*o[4])*tau2)) + (-0.00560879118302 + g.tau
              *(0.07145273881455 + g.tau*(-0.4071049823928 + g.tau*(1.424081971444
               + g.tau*(-4.38395111945 + g.tau*(-9.6937268393049 + g.tau*(
              10.087275970006 + (-0.2840863260772 + 0.02126846353307*g.tau)*g.tau)
               + Modelica.Math.log(g.pi)))))))/(o[15]*g.tau);

            g.gpi := (1.0 + g.pi*(-0.0073362260186506 + o[9] + g.pi*(o[20] + g.pi*(
              (-0.0190494112971939 - 0.258129279085764*o[12])*o[3] + g.pi*(o[13]*(
              0.030128632609108 - 0.0316953501784556*o[2]) + o[11]*g.pi*(-0.00114440803892235
               - 0.013228250741405*tau2))))))/g.pi;

            g.gpipi := (-1. + o[21]*(o[20] + g.pi*((-0.0380988225943878 -
              0.516258558171528*o[12])*o[3] + g.pi*(o[13]*(0.090385897827324 -
              0.0950860505353668*o[2]) + o[11]*g.pi*(-0.0045776321556894 -
              0.05291300296562*tau2)))))/o[21];

            g.gtau := (0.0280439559151 + g.tau*(-0.2858109552582 + g.tau*(
              1.2213149471784 + g.tau*(-2.848163942888 + g.tau*(4.38395111945 + o[
              14]*(10.087275970006 + (-0.5681726521544 + 0.06380539059921*g.tau)*g.tau))))))
              /(o[14]*o[15]) + g.pi*(o[26] + g.pi*(0.0020097803380207 + (-0.371321453290494
               - 0.121904654539152*o[11])*o[4] + g.pi*((-0.0253992150629252 -
              1.37668948845741*o[12])*o[2] + g.pi*((0.052725107065939 -
              0.079238375446139*o[2])*o[4] + o[10]*g.pi*(-0.00205993447006023 -
              0.02645650148281*tau2)))));

            g.gtautau := (-0.1682637354906 + g.tau*(1.429054776291 + g.tau*(-4.8852597887136
               + g.tau*(8.544491828664 + g.tau*(-8.7679022389 + o[14]*(-0.5681726521544
               + 0.12761078119842*g.tau)*g.tau)))))/(o[14]*o[15]*g.tau) + g.pi*(-0.176447663886292
               + o[2]*(-1.4466911042649 - 0.448944963879005*o[4]) + g.pi*((-2.22792871974296
               - 1.82856981808728*o[11])*o[27] + g.pi*(o[1]*(-0.0761976451887756 -
              20.6503423268611*o[12]) + g.pi*((0.316350642395634 -
              0.713145379015251*o[2])*o[27] + o[13]*g.pi*(-0.0164794757604818 -
              0.23810851334529*tau2)))));

            g.gtaupi := o[26] + g.pi*(0.0040195606760414 + (-0.742642906580988 -
              0.243809309078304*o[11])*o[4] + g.pi*((-0.0761976451887756 -
              4.13006846537222*o[12])*o[2] + g.pi*((0.210900428263756 -
              0.316953501784556*o[2])*o[4] + o[10]*g.pi*(-0.0102996723503012 -
              0.13228250741405*tau2))));
          end g2metastable;

          function f3 "Helmholtz function for region 3: f(d,T)"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          protected
            Real[40] o "Vector of auxiliary variables";
          algorithm
            f.T := T;
            f.d := d;
            f.R := data.RH2O;
            f.tau := data.TCRIT/T;
            f.delta := if (d == data.DCRIT and T == data.TCRIT) then 1 - Modelica.Constants.eps
               else abs(d/data.DCRIT);
            o[1] := f.tau*f.tau;
            o[2] := o[1]*o[1];
            o[3] := o[2]*f.tau;
            o[4] := o[1]*f.tau;
            o[5] := o[2]*o[2];
            o[6] := o[1]*o[5]*f.tau;
            o[7] := o[5]*f.tau;
            o[8] := -0.64207765181607*o[1];
            o[9] := 0.88521043984318 + o[8];
            o[10] := o[7]*o[9];
            o[11] := -1.15244078066810 + o[10];
            o[12] := o[11]*o[2];
            o[13] := -1.26543154777140 + o[12];
            o[14] := o[1]*o[13];
            o[15] := o[1]*o[2]*o[5]*f.tau;
            o[16] := o[2]*o[5];
            o[17] := o[1]*o[5];
            o[18] := o[5]*o[5];
            o[19] := o[1]*o[18]*o[2];
            o[20] := o[1]*o[18]*o[2]*f.tau;
            o[21] := o[18]*o[5];
            o[22] := o[1]*o[18]*o[5];
            o[23] := 0.251168168486160*o[2];
            o[24] := 0.078841073758308 + o[23];
            o[25] := o[15]*o[24];
            o[26] := -6.1005234513930 + o[25];
            o[27] := o[26]*f.tau;
            o[28] := 9.7944563083754 + o[27];
            o[29] := o[2]*o[28];
            o[30] := -1.70429417648412 + o[29];
            o[31] := o[1]*o[30];
            o[32] := f.delta*f.delta;
            o[33] := -10.9153200808732*o[1];
            o[34] := 13.2781565976477 + o[33];
            o[35] := o[34]*o[7];
            o[36] := -6.9146446840086 + o[35];
            o[37] := o[2]*o[36];
            o[38] := -2.53086309554280 + o[37];
            o[39] := o[38]*f.tau;
            o[40] := o[18]*o[5]*f.tau;

            f.f := -15.7328452902390 + f.tau*(20.9443969743070 + (-7.6867707878716
               + o[3]*(2.61859477879540 + o[4]*(-2.80807811486200 + o[1]*(
              1.20533696965170 - 0.0084566812812502*o[6]))))*f.tau) + f.delta*(o[14]
               + f.delta*(0.38493460186671 + o[1]*(-0.85214708824206 + o[2]*(
              4.8972281541877 + (-3.05026172569650 + o[15]*(0.039420536879154 +
              0.125584084243080*o[2]))*f.tau)) + f.delta*(-0.279993296987100 + o[1]
              *(1.38997995694600 + o[1]*(-2.01899150235700 + o[16]*(-0.0082147637173963
               - 0.47596035734923*o[17]))) + f.delta*(0.043984074473500 + o[1]*(-0.44476435428739
               + o[1]*(0.90572070719733 + 0.70522450087967*o[19])) + f.delta*(f.delta
              *(-0.0221754008730960 + o[1]*(0.094260751665092 + 0.164362784479610*o[
              21]) + f.delta*(-0.0135033722413480*o[1] + f.delta*(-0.0148343453524720
              *o[22] + f.delta*(o[1]*(0.00057922953628084 + 0.0032308904703711*o[21])
               + f.delta*(0.000080964802996215 - 0.000044923899061815*f.delta*o[22]
               - 0.000165576797950370*f.tau))))) + (0.107705126263320 + o[1]*(-0.32913623258954
               - 0.50871062041158*o[20]))*f.tau))))) + 1.06580700285130*
              Modelica.Math.log(f.delta);

            f.fdelta := (1.06580700285130 + f.delta*(o[14] + f.delta*(
              0.76986920373342 + o[31] + f.delta*(-0.83997989096130 + o[1]*(
              4.1699398708380 + o[1]*(-6.0569745070710 + o[16]*(-0.0246442911521889
               - 1.42788107204769*o[17]))) + f.delta*(0.175936297894000 + o[1]*(-1.77905741714956
               + o[1]*(3.6228828287893 + 2.82089800351868*o[19])) + f.delta*(f.delta
              *(-0.133052405238576 + o[1]*(0.56556450999055 + 0.98617670687766*o[21])
               + f.delta*(-0.094523605689436*o[1] + f.delta*(-0.118674762819776*o[
              22] + f.delta*(o[1]*(0.0052130658265276 + 0.0290780142333399*o[21])
               + f.delta*(0.00080964802996215 - 0.00049416288967996*f.delta*o[22]
               - 0.00165576797950370*f.tau))))) + (0.53852563131660 + o[1]*(-1.64568116294770
               - 2.54355310205790*o[20]))*f.tau))))))/f.delta;

            f.fdeltadelta := (-1.06580700285130 + o[32]*(0.76986920373342 + o[31]
               + f.delta*(-1.67995978192260 + o[1]*(8.3398797416760 + o[1]*(-12.1139490141420
               + o[16]*(-0.049288582304378 - 2.85576214409538*o[17]))) + f.delta*(
              0.52780889368200 + o[1]*(-5.3371722514487 + o[1]*(10.8686484863680 +
              8.4626940105560*o[19])) + f.delta*(f.delta*(-0.66526202619288 + o[1]*
              (2.82782254995276 + 4.9308835343883*o[21]) + f.delta*(-0.56714163413662
              *o[1] + f.delta*(-0.83072333973843*o[22] + f.delta*(o[1]*(
              0.041704526612220 + 0.232624113866719*o[21]) + f.delta*(
              0.0072868322696594 - 0.0049416288967996*f.delta*o[22] -
              0.0149019118155333*f.tau))))) + (2.15410252526640 + o[1]*(-6.5827246517908
               - 10.1742124082316*o[20]))*f.tau)))))/o[32];

            f.ftau := 20.9443969743070 + (-15.3735415757432 + o[3]*(
              18.3301634515678 + o[4]*(-28.0807811486200 + o[1]*(14.4640436358204
               - 0.194503669468755*o[6]))))*f.tau + f.delta*(o[39] + f.delta*(f.tau
              *(-1.70429417648412 + o[2]*(29.3833689251262 + (-21.3518320798755 + o[
              15]*(0.86725181134139 + 3.2651861903201*o[2]))*f.tau)) + f.delta*((
              2.77995991389200 + o[1]*(-8.0759660094280 + o[16]*(-0.131436219478341
               - 12.3749692910800*o[17])))*f.tau + f.delta*((-0.88952870857478 + o[
              1]*(3.6228828287893 + 18.3358370228714*o[19]))*f.tau + f.delta*(
              0.107705126263320 + o[1]*(-0.98740869776862 - 13.2264761307011*o[20])
               + f.delta*((0.188521503330184 + 4.2734323964699*o[21])*f.tau + f.delta
              *(-0.0270067444826960*f.tau + f.delta*(-0.38569297916427*o[40] + f.delta
              *(f.delta*(-0.000165576797950370 - 0.00116802137560719*f.delta*o[40])
               + (0.00115845907256168 + 0.084003152229649*o[21])*f.tau)))))))));

            f.ftautau := -15.3735415757432 + o[3]*(109.980980709407 + o[4]*(-252.727030337580
               + o[1]*(159.104479994024 - 4.2790807283126*o[6]))) + f.delta*(-2.53086309554280
               + o[2]*(-34.573223420043 + (185.894192367068 - 174.645121293971*o[1])
              *o[7]) + f.delta*(-1.70429417648412 + o[2]*(146.916844625631 + (-128.110992479253
               + o[15]*(18.2122880381691 + 81.629654758002*o[2]))*f.tau) + f.delta*
              (2.77995991389200 + o[1]*(-24.2278980282840 + o[16]*(-1.97154329217511
               - 309.374232277000*o[17])) + f.delta*(-0.88952870857478 + o[1]*(
              10.8686484863680 + 458.39592557179*o[19]) + f.delta*(f.delta*(
              0.188521503330184 + 106.835809911747*o[21] + f.delta*(-0.0270067444826960
               + f.delta*(-9.6423244791068*o[21] + f.delta*(0.00115845907256168 +
              2.10007880574121*o[21] - 0.0292005343901797*o[21]*o[32])))) + (-1.97481739553724
               - 330.66190326753*o[20])*f.tau)))));

            f.fdeltatau := o[39] + f.delta*(f.tau*(-3.4085883529682 + o[2]*(
              58.766737850252 + (-42.703664159751 + o[15]*(1.73450362268278 +
              6.5303723806402*o[2]))*f.tau)) + f.delta*((8.3398797416760 + o[1]*(-24.2278980282840
               + o[16]*(-0.39430865843502 - 37.124907873240*o[17])))*f.tau + f.delta
              *((-3.5581148342991 + o[1]*(14.4915313151573 + 73.343348091486*o[19]))
              *f.tau + f.delta*(0.53852563131660 + o[1]*(-4.9370434888431 -
              66.132380653505*o[20]) + f.delta*((1.13112901998110 +
              25.6405943788192*o[21])*f.tau + f.delta*(-0.189047211378872*f.tau + f.delta
              *(-3.08554383331418*o[40] + f.delta*(f.delta*(-0.00165576797950370 -
              0.0128482351316791*f.delta*o[40]) + (0.0104261316530551 +
              0.75602837006684*o[21])*f.tau))))))));
          end f3;

          function g5 "Base function for region 5: g(p,T)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          protected
            Real[11] o "Vector of auxiliary variables";
          algorithm
            assert(p > 0.0,
              "IF97 medium function g5 called with too low pressure\n" + "p = " +
              String(p) + " Pa <=  0.0 Pa");
            assert(p <= data.PLIMIT5, "IF97 medium function g5: input pressure (= "
               + String(p) + " Pa) is higher than 10 Mpa in region 5");
            assert(T <= 2273.15, "IF97 medium function g5: input temperature (= "
               + String(T) + " K) is higher than limit of 2273.15K in region 5");
            g.p := p;
            g.T := T;
            g.R := data.RH2O;
            g.pi := p/data.PSTAR5;
            g.tau := data.TSTAR5/T;
            o[1] := g.tau*g.tau;
            o[2] := -0.0045942820899910*o[1];
            o[3] := 0.00217746787145710 + o[2];
            o[4] := o[3]*g.tau;
            o[5] := o[1]*g.tau;
            o[6] := o[1]*o[1];
            o[7] := o[6]*o[6];
            o[8] := o[7]*g.tau;
            o[9] := -7.9449656719138e-6*o[8];
            o[10] := g.pi*g.pi;
            o[11] := -0.0137828462699730*o[1];

            g.g := g.pi*(-0.000125631835895920 + o[4] + g.pi*(-3.9724828359569e-6*o[
              8] + 1.29192282897840e-7*o[5]*g.pi)) + (-0.0248051489334660 + g.tau*(
              0.36901534980333 + g.tau*(-3.11613182139250 + g.tau*(-13.1799836742010
               + (6.8540841634434 - 0.32961626538917*g.tau)*g.tau +
              Modelica.Math.log(g.pi)))))/o[5];

            g.gpi := (1.0 + g.pi*(-0.000125631835895920 + o[4] + g.pi*(o[9] +
              3.8757684869352e-7*o[5]*g.pi)))/g.pi;

            g.gpipi := (-1.00000000000000 + o[10]*(o[9] + 7.7515369738704e-7*o[5]*g.pi))
              /o[10];

            g.gtau := g.pi*(0.00217746787145710 + o[11] + g.pi*(-0.000035752345523612
              *o[7] + 3.8757684869352e-7*o[1]*g.pi)) + (0.074415446800398 + g.tau*(
              -0.73803069960666 + (3.11613182139250 + o[1]*(6.8540841634434 -
              0.65923253077834*g.tau))*g.tau))/o[6];

            g.gtautau := (-0.297661787201592 + g.tau*(2.21409209881998 + (-6.2322636427850
               - 0.65923253077834*o[5])*g.tau))/(o[6]*g.tau) + g.pi*(-0.0275656925399460
              *g.tau + g.pi*(-0.000286018764188897*o[1]*o[6]*g.tau +
              7.7515369738704e-7*g.pi*g.tau));

            g.gtaupi := 0.00217746787145710 + o[11] + g.pi*(-0.000071504691047224*o[
              7] + 1.16273054608056e-6*o[1]*g.pi);
          end g5;

          function gibbs "Gibbs function for region 1, 2 or 5: g(p,T,region)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            input Integer region "IF97 region, 1, 2 or 5";
            output Real g "Dimensionless Gibbs function";
          protected
            myMedia.Common.GibbsDerivs gibbs "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          algorithm
            assert(region == 1 or region == 2 or region == 5,
              "IF97 medium function gibbs called with wrong region (= " + String(
              region) + ").\n" + "Only regions 1, 2 or 5 are possible");
            if region == 1 then
              gibbs := g1(p, T);
            elseif region == 2 then
              gibbs := g2(p, T);
            else
              gibbs := g5(p, T);
            end if;
            g := gibbs.g;
          end gibbs;

          function g1pitau "Derivative of g w.r.t. pi and tau"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output Real pi "Dimensionless pressure";
            output Real tau "Dimensionless temperature";
            output Real gpi "Dimensionless derivative of Gibbs function w.r.t. pi";
            output Real gtau
              "Dimensionless derivative of Gibbs function w.r.t. tau";
          protected
            Real pi1 "Dimensionless pressure";
            Real tau1 "Dimensionless temperature";
            Real[28] o "Vector of auxiliary variables";
          algorithm
            assert(p > triple.ptriple,
              "IF97 medium function g1pitau called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            assert(p <= 100.0e6,
              "IF97 medium function g1pitau: the input pressure (= " + String(p) +
              " Pa) is higher than 100 Mpa");
            assert(T >= 273.15, "IF97 medium function g1pitau: the temperature (= "
               + String(T) + " K) is lower than 273.15 K!");
            pi := p/data.PSTAR1;
            tau := data.TSTAR1/T;
            pi1 := 7.1 - pi;
            tau1 := -1.222 + tau;
            o[1] := tau1*tau1;
            o[2] := o[1]*tau1;
            o[3] := 1/o[2];
            o[4] := o[1]*o[1];
            o[5] := o[4]*o[4];
            o[6] := o[1]*o[5];
            o[7] := o[1]*o[4];
            o[8] := 1/o[4];
            o[9] := o[1]*o[4]*o[5];
            o[10] := o[4]*tau1;
            o[11] := 1/o[10];
            o[12] := o[4]*o[5];
            o[13] := o[5]*tau1;
            o[14] := 1/o[13];
            o[15] := pi1*pi1;
            o[16] := o[15]*pi1;
            o[17] := o[15]*o[15];
            o[18] := o[17]*o[17];
            o[19] := o[17]*o[18]*pi1;
            o[20] := o[15]*o[17];
            o[21] := o[5]*o[5];
            o[22] := o[21]*o[21];
            o[23] := o[22]*o[5]*tau1;
            o[24] := 1/o[23];
            o[25] := o[22]*o[5];
            o[26] := 1/o[25];
            o[27] := o[1]*o[22]*o[4]*tau1;
            o[28] := 1/o[27];
            gtau := pi1*((-0.00254871721114236 + o[1]*(0.00424944110961118 + (
              0.018990068218419 + (-0.021841717175414 - 0.00015851507390979*o[1])*o[
              1])*o[7]))/o[6] + pi1*(o[8]*(0.00141552963219801 + o[4]*(
              0.000047661393906987 + o[1]*(-0.0000132425535992538 -
              1.2358149370591e-14*o[9]))) + pi1*(o[11]*(0.000126718579380216 -
              5.11230768720618e-9*o[6]) + pi1*((0.000011212640954 + (
              1.30342445791202e-6 - 1.4341729937924e-12*o[12])*o[2])/o[7] + pi1*(
              3.24135974880936e-6*o[14] + o[16]*((1.40077319158051e-8 +
              1.04549227383804e-9*o[10])/o[12] + o[19]*(1.9941018075704e-17/(o[1]*o[
              21]*o[4]*o[5]) + o[15]*(-4.48827542684151e-19/o[22] + o[20]*(-1.00075970318621e-21
              *o[28] + pi1*(4.65957282962769e-22*o[26] + pi1*(-7.2912378325616e-23*
              o[24] + (3.83502057899078e-24*pi1)/(o[1]*o[22]*o[5])))))))))))) + o[3]
              *(-0.29265942426334 + tau1*(0.84548187169114 + o[1]*(3.3855169168385
               + tau1*(-1.91583926775744 + tau1*(0.47316115539684 + (-0.066465668798004
               + 0.0040607314991784*tau1)*tau1)))));
            gpi := pi1*(pi1*((0.000095038934535162 + o[4]*(8.4812393955936e-6 +
              2.55615384360309e-9*o[7]))*o[8] + pi1*(o[11]*(8.9701127632e-6 + (
              2.60684891582404e-6 + 5.7366919751696e-13*o[12])*o[2]) + pi1*(
              2.02584984300585e-6/o[5] + o[16]*(o[19]*(o[15]*(o[20]*(-7.63737668221055e-22
              /(o[1]*o[22]*o[4]) + pi1*(3.5842867920213e-22*o[28] + pi1*(-5.65070932023524e-23
              *o[26] + 2.99318679335866e-24*o[24]*pi1))) - 3.33001080055983e-19/(o[
              1]*o[21]*o[4]*o[5]*tau1)) + 1.44400475720615e-17/(o[21]*o[4]*o[5]*
              tau1)) + (1.01874413933128e-8 + 1.39398969845072e-9*o[10])/(o[1]*o[5]
              *tau1))))) + o[3]*(0.00094368642146534 + o[2]*(0.00060003561586052 +
              (-0.000095322787813974 + o[1]*(8.8283690661692e-6 +
              1.45389992595188e-15*o[9]))*tau1))) + o[14]*(-0.00028319080123804 + o[
              1]*(0.00060706301565874 + o[7]*(0.018990068218419 + tau1*(
              0.032529748770505 + (0.021841717175414 + 0.00005283835796993*o[1])*
              tau1))));
          end g1pitau;

          function g2pitau "Derivative of g w.r.t. pi and tau"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output Real pi "Dimensionless pressure";
            output Real tau "Dimensionless temperature";
            output Real gpi "Dimensionless derivative of Gibbs function w.r.t. pi";
            output Real gtau
              "Dimensionless derivative of Gibbs function w.r.t. tau";
          protected
            Real tau2 "Dimensionless temperature";
            Real[22] o "Vector of auxiliary variables";
          algorithm
            assert(p > 0.0,
              "IF97 medium function g2pitau called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            assert(p <= 100.0e6,
              "IF97 medium function g2pitau: the input pressure (= " + String(p) +
              " Pa) is higher than 100 Mpa");
            assert(T >= 273.15, "IF97 medium function g2pitau: the temperature (= "
               + String(T) + " K) is lower than 273.15 K!");
            assert(T <= 1073.15,
              "IF97 medium function g2pitau: the input temperature (= " + String(T)
               + " K) is higher than the limit of 1073.15 K");
            pi := p/data.PSTAR2;
            tau := data.TSTAR2/T;
            tau2 := -0.5 + tau;
            o[1] := tau*tau;
            o[2] := o[1]*o[1];
            o[3] := tau2*tau2;
            o[4] := o[3]*tau2;
            o[5] := o[3]*o[3];
            o[6] := o[5]*o[5];
            o[7] := o[6]*o[6];
            o[8] := o[5]*o[6]*o[7]*tau2;
            o[9] := o[3]*o[5];
            o[10] := o[5]*o[6]*tau2;
            o[11] := o[3]*o[7]*tau2;
            o[12] := o[3]*o[5]*o[6];
            o[13] := o[3]*o[5]*tau2;
            o[14] := o[5]*o[6]*o[7];
            o[15] := pi*pi;
            o[16] := o[15]*o[15];
            o[17] := o[15]*o[16];
            o[18] := o[5]*o[7]*tau2;
            o[19] := o[7]*o[7];
            o[20] := o[3]*o[5]*o[6]*tau2;
            o[21] := o[5]*o[7];
            o[22] := o[3]*o[7];
            gtau := (0.0280439559151 + tau*(-0.2858109552582 + tau*(1.2213149471784
               + tau*(-2.848163942888 + tau*(4.38395111945 + o[1]*(10.08665568018
               + (-0.5681726521544 + 0.06380539059921*tau)*tau))))))/(o[1]*o[2]) +
              pi*(-0.017834862292358 + tau2*(-0.09199202739273 + (-0.172743777250296
               - 0.30195167236758*o[4])*tau2) + pi*(-0.000033032641670203 + (-0.0003789797503263
               + o[3]*(-0.015757110897342 + o[4]*(-0.306581069554011 -
              0.000960283724907132*o[8])))*tau2 + pi*(4.3870667284435e-7 + o[3]*(-0.00009683303171571
               + o[4]*(-0.0090203547252888 - 1.42338887469272*o[8])) + pi*(-7.8847309559367e-10
               + (2.558143570457e-8 + 1.44676118155521e-6*tau2)*tau2 + pi*(
              0.0000160454534363627*o[9] + pi*((-5.0144299353183e-11 + o[10]*(-0.033874355714168
               - 836.35096769364*o[11]))*o[3] + pi*((-0.0000138839897890111 -
              0.973671060893475*o[12])*o[3]*o[6] + pi*(o[13]*(9.0049690883672e-11
               - 296.320827232793*o[14]) + pi*(2.57526266427144e-7*o[5]*o[6] + pi*(
              o[4]*(4.1627860840696e-19 + (-1.0234747095929e-12 -
              1.40254511313154e-8*o[5])*o[9]) + o[17]*(o[14]*(-2.34560435076256e-9
               + 5.3465159397045*o[18]) + o[15]*(-19.1874828272775*o[19]*o[6]*o[7]
               + o[15]*(o[11]*(1.78371690710842e-23 + (1.07202609066812e-11 -
              0.000201611844951398*o[10])*o[20]) + pi*(-1.24017662339842e-24*o[21]
               + pi*(0.000200482822351322*o[19]*o[5]*o[7] + pi*(-4.97975748452559e-14
              *o[19]*o[3]*o[5] + (1.90027787547159e-27 + o[12]*(
              2.21658861403112e-15 - 0.0000547344301999018*o[22]))*o[6]*o[7]*pi*
              tau2))))))))))))))));
            gpi := (1. + pi*(-0.0017731742473213 + tau2*(-0.017834862292358 + tau2*
              (-0.045996013696365 + (-0.057581259083432 - 0.05032527872793*o[4])*
              tau2)) + pi*(tau2*(-0.000066065283340406 + (-0.0003789797503263 + o[3]
              *(-0.007878555448671 + o[4]*(-0.087594591301146 -
              0.000053349095828174*o[8])))*tau2) + pi*(6.1445213076927e-8 + (
              1.31612001853305e-6 + o[3]*(-0.00009683303171571 + o[4]*(-0.0045101773626444
               - 0.122004760687947*o[8])))*tau2 + pi*(tau2*(-3.15389238237468e-9 +
              (5.116287140914e-8 + 1.92901490874028e-6*tau2)*tau2) + pi*(
              0.0000114610381688305*o[13] + pi*((-1.00288598706366e-10 + o[10]*(-0.012702883392813
               - 143.374451604624*o[11]))*o[4] + pi*(-4.1341695026989e-17 + (-8.8352662293707e-6
               - 0.272627897050173*o[12])*o[3]*o[6]*tau2 + pi*((9.0049690883672e-11
               - 65.8490727183984*o[14])*o[6] + pi*(1.78287415218792e-7*o[10] + pi*
              (o[5]*(1.0406965210174e-18 + (-1.0234747095929e-12 -
              1.0018179379511e-8*o[5])*o[9]) + o[17]*((-1.29412653835176e-9 +
              1.71088510070544*o[18])*o[8] + o[15]*(-6.05920510335078*o[19]*o[6]*o[
              7]*tau2 + o[15]*((1.78371690710842e-23 + (6.1258633752464e-12 -
              0.000084004935396416*o[10])*o[20])*o[21] + pi*(-1.24017662339842e-24*
              o[18] + pi*(0.0000832192847496054*o[19]*o[5]*o[7]*tau2 + pi*((
              1.75410265428146e-27 + o[12]*(1.32995316841867e-15 -
              0.0000226487297378904*o[22]))*o[3]*o[6]*o[7]*pi -
              2.93678005497663e-14*o[19]*o[3]*o[5]*tau2)))))))))))))))))/pi;
          end g2pitau;

          function g5pitau "Derivative of g w.r.t. pi and tau"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output Real pi "Dimensionless pressure";
            output Real tau "Dimensionless temperature";
            output Real gpi "Dimensionless derivative of Gibbs function w.r.t. pi";
            output Real gtau
              "Dimensionless derivative of Gibbs function w.r.t. tau";
          protected
            Real[3] o "Vector of auxiliary variables";
          algorithm
            assert(p > 0.0,
              "IF97 medium function g5pitau called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            assert(p <= data.PLIMIT5,
              "IF97 medium function g5pitau: input pressure (= " + String(p) +
              " Pa) is higher than 10 Mpa in region 5");
            assert(T <= 2273.15,
              "IF97 medium function g5pitau: input temperature (= " + String(T) +
              " K) is higher than limit of 2273.15 K in region 5");
            pi := p/data.PSTAR5;
            tau := data.TSTAR5/T;
            o[1] := tau*tau;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            gtau := pi*(0.0021774678714571 - 0.013782846269973*o[1] + pi*(-0.0000357523455236121
              *o[3] + 3.8757684869352e-7*o[1]*pi)) + (0.074415446800398 + tau*(-0.73803069960666
               + (3.1161318213925 + o[1]*(6.8540841634434 - 0.65923253077834*tau))*
              tau))/o[2];
            gpi := (1.0 + pi*(-0.00012563183589592 + (0.0021774678714571 -
              0.004594282089991*o[1])*tau + pi*(-7.9449656719138e-6*o[3]*tau +
              3.8757684869352e-7*o[1]*pi*tau)))/pi;
          end g5pitau;

          function f3deltatau "1st derivatives of f w.r.t. delta and tau"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            output Real delta "Dimensionless density";
            output Real tau "Dimensionless temperature";
            output Real fdelta
              "Dimensionless derivative of Helmholtz function w.r.t. delta";
            output Real ftau
              "Dimensionless derivative of Helmholtz function w.r.t. tau";
          protected
            Real[13] o "Vector of auxiliary variables";
          algorithm
            tau := data.TCRIT/T;
            delta := if (d == data.DCRIT and T == data.TCRIT) then 1 + Modelica.Constants.eps
               else d/data.DCRIT;
            o[1] := tau*tau;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[3]*tau;
            o[5] := o[1]*o[2]*o[3]*tau;
            o[6] := o[2]*o[3];
            o[7] := o[1]*o[3];
            o[8] := o[3]*o[3];
            o[9] := o[1]*o[2]*o[8];
            o[10] := o[1]*o[2]*o[8]*tau;
            o[11] := o[3]*o[8];
            o[12] := o[1]*o[3]*o[8];
            o[13] := o[3]*o[8]*tau;
            fdelta := (1.0658070028513 + delta*(o[1]*(-1.2654315477714 + o[2]*(-1.1524407806681
               + (0.88521043984318 - 0.64207765181607*o[1])*o[4])) + delta*(
              0.76986920373342 + o[1]*(-1.70429417648412 + o[2]*(9.7944563083754 +
              (-6.100523451393 + (0.078841073758308 + 0.25116816848616*o[2])*o[5])*
              tau)) + delta*(-0.8399798909613 + o[1]*(4.169939870838 + o[1]*(-6.056974507071
               + o[6]*(-0.0246442911521889 - 1.42788107204769*o[7]))) + delta*(
              0.175936297894 + o[1]*(-1.77905741714956 + o[1]*(3.62288282878932 +
              2.82089800351868*o[9])) + delta*(delta*(-0.133052405238576 + o[1]*(
              0.565564509990552 + 0.98617670687766*o[11]) + delta*(-0.094523605689436
              *o[1] + delta*(-0.118674762819776*o[12] + delta*(o[1]*(
              0.00521306582652756 + 0.0290780142333399*o[11]) + delta*(
              0.00080964802996215 - 0.000494162889679965*delta*o[12] -
              0.0016557679795037*tau))))) + (0.5385256313166 + o[1]*(-1.6456811629477
               - 2.5435531020579*o[10]))*tau))))))/delta;
            ftau := 20.944396974307 + tau*(-15.3735415757432 + o[2]*tau*(
              18.3301634515678 + o[1]*tau*(-28.08078114862 + o[1]*(14.4640436358204
               - 0.194503669468755*o[1]*o[3]*tau)))) + delta*((-2.5308630955428 + o[
              2]*(-6.9146446840086 + (13.2781565976477 - 10.9153200808732*o[1])*o[4]))
              *tau + delta*(tau*(-1.70429417648412 + o[2]*(29.3833689251262 + (-21.3518320798755
               + (0.867251811341388 + 3.26518619032008*o[2])*o[5])*tau)) + delta*((
              2.779959913892 + o[1]*(-8.075966009428 + o[6]*(-0.131436219478341 -
              12.37496929108*o[7])))*tau + delta*((-0.88952870857478 + o[1]*(
              3.62288282878932 + 18.3358370228714*o[9]))*tau + delta*(
              0.10770512626332 + o[1]*(-0.98740869776862 - 13.2264761307011*o[10])
               + delta*((0.188521503330184 + 4.27343239646986*o[11])*tau + delta*(-0.027006744482696
              *tau + delta*(-0.385692979164272*o[13] + delta*(delta*(-0.00016557679795037
               - 0.00116802137560719*delta*o[13]) + (0.00115845907256168 +
              0.0840031522296486*o[11])*tau)))))))));
          end f3deltatau;

          function tph1 "Inverse function for region 1: T(p,h)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.Temperature T "Temperature (K)";
          protected
            Real pi "Dimensionless pressure";
            Real eta1 "Dimensionless specific enthalpy";
            Real[3] o "Vector of auxiliary variables";
          algorithm
            assert(p > triple.ptriple,
              "IF97 medium function tph1 called with too low pressure\n" + "p = "
               + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            pi := p/data.PSTAR2;
            eta1 := h/data.HSTAR1 + 1.0;
            o[1] := eta1*eta1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            T := -238.724899245210 - 13.3917448726020*pi + eta1*(404.21188637945 +
              43.211039183559*pi + eta1*(113.497468817180 - 54.010067170506*pi +
              eta1*(30.5358922039160*pi + eta1*(-6.5964749423638*pi + o[1]*(-5.8457616048039
               + o[2]*(pi*(0.0093965400878363 + (-0.0000258586412820730 +
              6.6456186191635e-8*pi)*pi) + o[2]*o[3]*(-0.000152854824131400 + o[1]*
              o[3]*(-1.08667076953770e-6 + pi*(1.15736475053400e-7 + pi*(-4.0644363084799e-9
               + pi*(8.0670734103027e-11 + pi*(-9.3477771213947e-13 + (
              5.8265442020601e-15 - 1.50201859535030e-17*pi)*pi))))))))))));
          end tph1;

          function tps1 "Inverse function for region 1: T(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Temperature T "Temperature (K)";
          protected
            constant SI.Pressure pstar=1.0e6;
            constant SI.SpecificEntropy sstar=1.0e3;
            Real pi "Dimensionless pressure";
            Real sigma1 "Dimensionless specific entropy";
            Real[6] o "Vector of auxiliary variables";
          algorithm
            pi := p/pstar;
            assert(p > triple.ptriple,
              "IF97 medium function tps1 called with too low pressure\n" + "p = "
               + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");

            sigma1 := s/sstar + 2.0;
            o[1] := sigma1*sigma1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[3]*o[3];
            o[5] := o[4]*o[4];
            o[6] := o[1]*o[2]*o[4];

            T := 174.782680583070 + sigma1*(34.806930892873 + sigma1*(
              6.5292584978455 + (0.33039981775489 + o[3]*(-1.92813829231960e-7 -
              2.49091972445730e-23*o[2]*o[4]))*sigma1)) + pi*(-0.261076364893320 +
              pi*(0.00056608900654837 + pi*(o[1]*o[3]*(2.64004413606890e-13 +
              7.8124600459723e-29*o[6]) - 3.07321999036680e-31*o[5]*pi) + sigma1*(-0.00032635483139717
               + sigma1*(0.000044778286690632 + o[1]*o[2]*(-5.1322156908507e-10 -
              4.2522657042207e-26*o[6])*sigma1))) + sigma1*(0.225929659815860 +
              sigma1*(-0.064256463395226 + sigma1*(0.0078876289270526 + o[3]*sigma1
              *(3.5672110607366e-10 + 1.73324969948950e-24*o[1]*o[4]*sigma1)))));
          end tps1;

          function tph2 "Reverse function for region 2: T(p,h)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.Temperature T "Temperature (K)";
          protected
            Real pi "Dimensionless pressure";
            Real pi2b "Dimensionless pressure";
            Real pi2c "Dimensionless pressure";
            Real eta "Dimensionless specific enthalpy";
            Real etabc "Dimensionless specific enthalpy";
            Real eta2a "Dimensionless specific enthalpy";
            Real eta2b "Dimensionless specific enthalpy";
            Real eta2c "Dimensionless specific enthalpy";
            Real[8] o "Vector of auxiliary variables";
          algorithm
            pi := p*data.IPSTAR;
            eta := h*data.IHSTAR;
            etabc := h*1.0e-3;
            if (pi < 4.0) then
              eta2a := eta - 2.1;
              o[1] := eta2a*eta2a;
              o[2] := o[1]*o[1];
              o[3] := pi*pi;
              o[4] := o[3]*o[3];
              o[5] := o[3]*pi;
              T := 1089.89523182880 + (1.84457493557900 - 0.0061707422868339*pi)*pi
                 + eta2a*(849.51654495535 - 4.1792700549624*pi + eta2a*(-107.817480918260
                 + (6.2478196935812 - 0.310780466295830*pi)*pi + eta2a*(
                33.153654801263 - 17.3445631081140*pi + o[2]*(-7.4232016790248 + pi
                *(-200.581768620960 + 11.6708730771070*pi) + o[1]*(271.960654737960
                *pi + o[1]*(-455.11318285818*pi + eta2a*(1.38657242832260*o[4] + o[
                1]*o[2]*(3091.96886047550*pi + o[1]*(11.7650487243560 + o[2]*(-13551.3342407750
                *o[5] + o[2]*(-62.459855192507*o[3]*o[4]*pi + o[2]*(o[4]*(
                235988.325565140 + 7399.9835474766*pi) + o[1]*(19127.7292396600*o[3]
                *o[4] + o[1]*(o[3]*(1.28127984040460e8 - 551966.97030060*o[5]) + o[
                1]*(-9.8554909623276e8*o[3] + o[1]*(2.82245469730020e9*o[3] + o[1]*
                (o[3]*(-3.5948971410703e9 + 3.7154085996233e6*o[5]) + o[1]*pi*(
                252266.403578720 + pi*(1.72273499131970e9 + pi*(1.28487346646500e7
                 + (-1.31052365450540e7 - 415351.64835634*o[3])*pi))))))))))))))))))));
            elseif (pi < (0.12809002730136e-03*etabc - 0.67955786399241)*etabc +
                0.90584278514723e3) then
              eta2b := eta - 2.6;
              pi2b := pi - 2.0;
              o[1] := pi2b*pi2b;
              o[2] := o[1]*pi2b;
              o[3] := o[1]*o[1];
              o[4] := eta2b*eta2b;
              o[5] := o[4]*o[4];
              o[6] := o[4]*o[5];
              o[7] := o[5]*o[5];
              T := 1489.50410795160 + 0.93747147377932*pi2b + eta2b*(
                743.07798314034 + o[2]*(0.000110328317899990 - 1.75652339694070e-18
                *o[1]*o[3]) + eta2b*(-97.708318797837 + pi2b*(3.3593118604916 +
                pi2b*(-0.0218107553247610 + pi2b*(0.000189552483879020 + (
                2.86402374774560e-7 - 8.1456365207833e-14*o[2])*pi2b))) + o[5]*(
                3.3809355601454*pi2b + o[4]*(-0.108297844036770*o[1] + o[5]*(
                2.47424647056740 + (0.168445396719040 + o[1]*(0.00308915411605370
                 - 0.0000107798573575120*pi2b))*pi2b + o[6]*(-0.63281320016026 +
                pi2b*(0.73875745236695 + (-0.046333324635812 + o[1]*(-0.000076462712454814
                 + 2.82172816350400e-7*pi2b))*pi2b) + o[6]*(1.13859521296580 + pi2b
                *(-0.47128737436186 + o[1]*(0.00135555045549490 + (
                0.0000140523928183160 + 1.27049022719450e-6*pi2b)*pi2b)) + o[5]*(-0.47811863648625
                 + (0.150202731397070 + o[2]*(-0.0000310838143314340 + o[1]*(-1.10301392389090e-8
                 - 2.51805456829620e-11*pi2b)))*pi2b + o[5]*o[7]*(
                0.0085208123431544 + pi2b*(-0.00217641142197500 + pi2b*(
                0.000071280351959551 + o[1]*(-1.03027382121030e-6 + (
                7.3803353468292e-8 + 8.6934156344163e-15*o[3])*pi2b))))))))))));
            else
              eta2c := eta - 1.8;
              pi2c := pi + 25.0;
              o[1] := pi2c*pi2c;
              o[2] := o[1]*o[1];
              o[3] := o[1]*o[2]*pi2c;
              o[4] := 1/o[3];
              o[5] := o[1]*o[2];
              o[6] := eta2c*eta2c;
              o[7] := o[2]*o[2];
              o[8] := o[6]*o[6];
              T := eta2c*((859777.22535580 + o[1]*(482.19755109255 +
                1.12615974072300e-12*o[5]))/o[1] + eta2c*((-5.8340131851590e11 + (
                2.08255445631710e10 + 31081.0884227140*o[2])*pi2c)/o[5] + o[6]*(o[8]
                *(o[6]*(1.23245796908320e-7*o[5] + o[6]*(-1.16069211309840e-6*o[5]
                 + o[8]*(0.0000278463670885540*o[5] + (-0.00059270038474176*o[5] +
                0.00129185829918780*o[5]*o[6])*o[8]))) - 10.8429848800770*pi2c) + o[
                4]*(7.3263350902181e12 + o[7]*(3.7966001272486 + (-0.045364172676660
                 - 1.78049822406860e-11*o[2])*pi2c))))) + o[4]*(-3.2368398555242e12
                 + pi2c*(3.5825089945447e11 + pi2c*(-1.07830682174700e10 + o[1]*
                pi2c*(610747.83564516 + pi2c*(-25745.7236041700 + (1208.23158659360
                 + 1.45591156586980e-13*o[5])*pi2c)))));
            end if;
          end tph2;

          function tps2a "Reverse function for region 2a: T(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Temperature T "Temperature (K)";
          protected
            Real[12] o "Vector of auxiliary variables";
            constant Real IPSTAR=1.0e-6 "Scaling variable";
            constant Real ISSTAR2A=1/2000.0 "Scaling variable";
            Real pi "Dimensionless pressure";
            Real sigma2a "Dimensionless specific entropy";
          algorithm
            pi := p*IPSTAR;
            sigma2a := s*ISSTAR2A - 2.0;
            o[1] := pi^0.5;
            o[2] := sigma2a*sigma2a;
            o[3] := o[2]*o[2];
            o[4] := o[3]*o[3];
            o[5] := o[4]*o[4];
            o[6] := pi^0.25;
            o[7] := o[2]*o[4]*o[5];
            o[8] := 1/o[7];
            o[9] := o[3]*sigma2a;
            o[10] := o[2]*o[3]*sigma2a;
            o[11] := o[3]*o[4]*sigma2a;
            o[12] := o[2]*sigma2a;
            T := ((-392359.83861984 + (515265.73827270 + o[3]*(40482.443161048 + o[
              2]*o[3]*(-321.93790923902 + o[2]*(96.961424218694 - 22.8678463717730*
              sigma2a))))*sigma2a)/(o[4]*o[5]) + o[6]*((-449429.14124357 + o[3]*(-5011.8336020166
               + 0.35684463560015*o[4]*sigma2a))/(o[2]*o[5]*sigma2a) + o[6]*(o[8]*(
              44235.335848190 + o[9]*(-13673.3888117080 + o[3]*(421632.60207864 + (
              22516.9258374750 + o[10]*(474.42144865646 - 149.311307976470*sigma2a))
              *sigma2a))) + o[6]*((-197811.263204520 - 23554.3994707600*sigma2a)/(o[
              2]*o[3]*o[4]*sigma2a) + o[6]*((-19070.6163020760 + o[11]*(
              55375.669883164 + (3829.3691437363 - 603.91860580567*o[2])*o[3]))*o[8]
               + o[6]*((1936.31026203310 + o[2]*(4266.0643698610 + o[2]*o[3]*o[4]*(
              -5978.0638872718 - 704.01463926862*o[9])))/(o[2]*o[4]*o[5]*sigma2a)
               + o[1]*((338.36784107553 + o[12]*(20.8627866351870 + (
              0.033834172656196 - 0.000043124428414893*o[12])*o[3]))*sigma2a + o[6]
              *(166.537913564120 + sigma2a*(-139.862920558980 + o[3]*(-0.78849547999872
               + (0.072132411753872 + o[3]*(-0.0059754839398283 + (-0.0000121413589539040
               + 2.32270967338710e-7*o[2])*o[3]))*sigma2a)) + o[6]*(-10.5384635661940
               + o[3]*(2.07189254965020 + (-0.072193155260427 + 2.07498870811200e-7
              *o[4])*o[9]) + o[6]*(o[6]*(o[12]*(0.210375278936190 +
              0.000256812397299990*o[3]*o[4]) + (-0.0127990029337810 -
              8.2198102652018e-6*o[11])*o[6]*o[9]) + o[10]*(-0.0183406579113790 +
              2.90362723486960e-7*o[2]*o[4]*sigma2a)))))))))))/(o[1]*pi);
          end tps2a;

          function tps2b "Reverse function for region 2b: T(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Temperature T "Temperature (K)";
          protected
            Real[8] o "Vector of auxiliary variables";
            constant Real IPSTAR=1.0e-6 "Scaling variable";
            constant Real ISSTAR2B=1/785.3 "Scaling variable";
            Real pi "Dimensionless pressure";
            Real sigma2b "Dimensionless specific entropy";
          algorithm
            pi := p*IPSTAR;
            sigma2b := 10.0 - s*ISSTAR2B;
            o[1] := pi*pi;
            o[2] := o[1]*o[1];
            o[3] := sigma2b*sigma2b;
            o[4] := o[3]*o[3];
            o[5] := o[4]*o[4];
            o[6] := o[3]*o[5]*sigma2b;
            o[7] := o[3]*o[5];
            o[8] := o[3]*sigma2b;
            T := (316876.65083497 + 20.8641758818580*o[6] + pi*(-398593.99803599 -
              21.8160585188770*o[6] + pi*(223697.851942420 + (-2784.17034458170 +
              9.9207436071480*o[7])*sigma2b + pi*(-75197.512299157 + (
              2970.86059511580 + o[7]*(-3.4406878548526 + 0.38815564249115*sigma2b))
              *sigma2b + pi*(17511.2950857500 + sigma2b*(-1423.71128544490 + (
              1.09438033641670 + 0.89971619308495*o[4])*o[4]*sigma2b) + pi*(-3375.9740098958
               + (471.62885818355 + o[4]*(-1.91882419936790 + o[8]*(
              0.41078580492196 - 0.33465378172097*sigma2b)))*sigma2b + pi*(
              1387.00347775050 + sigma2b*(-406.63326195838 + sigma2b*(
              41.727347159610 + o[3]*(2.19325494345320 + sigma2b*(-1.03200500090770
               + (0.35882943516703 + 0.0052511453726066*o[8])*sigma2b)))) + pi*(
              12.8389164507050 + sigma2b*(-2.86424372193810 + sigma2b*(
              0.56912683664855 + (-0.099962954584931 + o[4]*(-0.0032632037778459 +
              0.000233209225767230*sigma2b))*sigma2b)) + pi*(-0.153348098574500 + (
              0.0290722882399020 + 0.00037534702741167*o[4])*sigma2b + pi*(
              0.00172966917024110 + (-0.00038556050844504 - 0.000035017712292608*o[
              3])*sigma2b + pi*(-0.0000145663936314920 + 5.6420857267269e-6*sigma2b
               + pi*(4.1286150074605e-8 + (-2.06846711188240e-8 +
              1.64093936747250e-9*sigma2b)*sigma2b))))))))))))/(o[1]*o[2]);
          end tps2b;

          function tps2c "Reverse function for region 2c: T(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Temperature T "Temperature (K)";
          protected
            constant Real IPSTAR=1.0e-6 "Scaling variable";
            constant Real ISSTAR2C=1/2925.1 "Scaling variable";
            Real pi "Dimensionless pressure";
            Real sigma2c "Dimensionless specific entropy";
            Real[3] o "Vector of auxiliary variables";
          algorithm
            pi := p*IPSTAR;
            sigma2c := 2.0 - s*ISSTAR2C;
            o[1] := pi*pi;
            o[2] := sigma2c*sigma2c;
            o[3] := o[2]*o[2];
            T := (909.68501005365 + 2404.56670884200*sigma2c + pi*(-591.62326387130
               + pi*(541.45404128074 + sigma2c*(-270.983084111920 + (
              979.76525097926 - 469.66772959435*sigma2c)*sigma2c) + pi*(
              14.3992746047230 + (-19.1042042304290 + o[2]*(5.3299167111971 -
              21.2529753759340*sigma2c))*sigma2c + pi*(-0.311473344137600 + (
              0.60334840894623 - 0.042764839702509*sigma2c)*sigma2c + pi*(
              0.0058185597255259 + (-0.0145970082847530 + 0.0056631175631027*o[3])*
              sigma2c + pi*(-0.000076155864584577 + sigma2c*(0.000224403429193320
               - 0.0000125610950134130*o[2]*sigma2c) + pi*(6.3323132660934e-7 + (-2.05419896753750e-6
               + 3.6405370390082e-8*sigma2c)*sigma2c + pi*(-2.97598977892150e-9 +
              1.01366185297630e-8*sigma2c + pi*(5.9925719692351e-12 + sigma2c*(-2.06778701051640e-11
               + o[2]*(-2.08742781818860e-11 + (1.01621668250890e-10 -
              1.64298282813470e-10*sigma2c)*sigma2c))))))))))))/o[1];
          end tps2c;

          function tps2 "Reverse function for region 2: T(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Temperature T "Temperature (K)";
          protected
            Real pi "Dimensionless pressure";
            constant SI.SpecificEntropy SLIMIT=5.85e3
              "Subregion boundary specific entropy between regions 2a and 2b";
          algorithm
            if p < 4.0e6 then
              T := tps2a(p, s);
            elseif s > SLIMIT then
              T := tps2b(p, s);
            else
              T := tps2c(p, s);
            end if;
          end tps2;

          function tsat "Region 4 saturation temperature as a function of pressure"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.Temperature t_sat "Temperature";
          protected
            Real pi "Dimensionless pressure";
            Real[20] o "Vector of auxiliary variables";
          algorithm
            assert(p > triple.ptriple,
              "IF97 medium function tsat called with too low pressure\n" + "p = "
               + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            //  assert(p <= data.PCRIT,
            //    "tsat: input pressure is higher than the critical point pressure");
            pi := min(p, data.PCRIT)*data.IPSTAR;
            o[1] := pi^0.25;
            o[2] := -3.2325550322333e6*o[1];
            o[3] := pi^0.5;
            o[4] := -724213.16703206*o[3];
            o[5] := 405113.40542057 + o[2] + o[4];
            o[6] := -17.0738469400920*o[1];
            o[7] := 14.9151086135300 + o[3] + o[6];
            o[8] := -4.0*o[5]*o[7];
            o[9] := 12020.8247024700*o[1];
            o[10] := 1167.05214527670*o[3];
            o[11] := -4823.2657361591 + o[10] + o[9];
            o[12] := o[11]*o[11];
            o[13] := o[12] + o[8];
            o[14] := o[13]^0.5;
            o[15] := -o[14];
            o[16] := -12020.8247024700*o[1];
            o[17] := -1167.05214527670*o[3];
            o[18] := 4823.2657361591 + o[15] + o[16] + o[17];
            o[19] := 1/o[18];
            o[20] := 2.0*o[19]*o[5];

            t_sat := 0.5*(650.17534844798 + o[20] - (-4.0*(-0.238555575678490 +
              1300.35069689596*o[19]*o[5]) + (650.17534844798 + o[20])^2.0)^0.5);
            annotation (derivative=tsat_der);
          end tsat;

          function dtsatofp "Derivative of saturation temperature w.r.t. pressure"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output Real dtsat(unit="K/Pa") "Derivative of T w.r.t. p";
          protected
            Real pi "Dimensionless pressure";
            Real[49] o "Vector of auxiliary variables";
          algorithm
            pi := max(Modelica.Constants.small, p*data.IPSTAR);
            o[1] := pi^0.75;
            o[2] := 1/o[1];
            o[3] := -4.268461735023*o[2];
            o[4] := sqrt(pi);
            o[5] := 1/o[4];
            o[6] := 0.5*o[5];
            o[7] := o[3] + o[6];
            o[8] := pi^0.25;
            o[9] := -3.2325550322333e6*o[8];
            o[10] := -724213.16703206*o[4];
            o[11] := 405113.40542057 + o[10] + o[9];
            o[12] := -4*o[11]*o[7];
            o[13] := -808138.758058325*o[2];
            o[14] := -362106.58351603*o[5];
            o[15] := o[13] + o[14];
            o[16] := -17.073846940092*o[8];
            o[17] := 14.91510861353 + o[16] + o[4];
            o[18] := -4*o[15]*o[17];
            o[19] := 3005.2061756175*o[2];
            o[20] := 583.52607263835*o[5];
            o[21] := o[19] + o[20];
            o[22] := 12020.82470247*o[8];
            o[23] := 1167.0521452767*o[4];
            o[24] := -4823.2657361591 + o[22] + o[23];
            o[25] := 2.0*o[21]*o[24];
            o[26] := o[12] + o[18] + o[25];
            o[27] := -4.0*o[11]*o[17];
            o[28] := o[24]*o[24];
            o[29] := o[27] + o[28];
            o[30] := sqrt(o[29]);
            o[31] := 1/o[30];
            o[32] := (-o[30]);
            o[33] := -12020.82470247*o[8];
            o[34] := -1167.0521452767*o[4];
            o[35] := 4823.2657361591 + o[32] + o[33] + o[34];
            o[36] := o[30];
            o[37] := -4823.2657361591 + o[22] + o[23] + o[36];
            o[38] := o[37]*o[37];
            o[39] := 1/o[38];
            o[40] := -1.72207339365771*o[30];
            o[41] := 21592.2055343628*o[8];
            o[42] := o[30]*o[8];
            o[43] := -8192.87114842946*o[4];
            o[44] := -0.510632954559659*o[30]*o[4];
            o[45] := -3100.02526152368*o[1];
            o[46] := pi;
            o[47] := 1295.95640782102*o[46];
            o[48] := 2862.09212505088 + o[40] + o[41] + o[42] + o[43] + o[44] + o[
              45] + o[47];
            o[49] := 1/(o[35]*o[35]);
            dtsat := data.IPSTAR*0.5*((2.0*o[15])/o[35] - 2.*o[11]*(-3005.2061756175
              *o[2] - 0.5*o[26]*o[31] - 583.52607263835*o[5])*o[49] - (
              20953.46356643991*(o[39]*(1295.95640782102 + 5398.05138359071*o[2] +
              0.25*o[2]*o[30] - 0.861036696828853*o[26]*o[31] - 0.255316477279829*o[
              26]*o[31]*o[4] - 4096.43557421473*o[5] - 0.255316477279829*o[30]*o[5]
               - 2325.01894614276/o[8] + 0.5*o[26]*o[31]*o[8]) - 2.0*(o[19] + o[20]
               + 0.5*o[26]*o[31])*o[48]*o[37]^(-3)))/sqrt(o[39]*o[48]));
          end dtsatofp;

          function tsat_der "Derivative function for tsat"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input Real der_p(unit="Pa/s") "Pressure derivative";
            output Real der_tsat(unit="K/s") "Temperature derivative";
          protected
            Real dtp;
          algorithm
            dtp := dtsatofp(p);
            der_tsat := dtp*der_p;
          end tsat_der;

          function psat "Region 4 saturation pressure as a function of temperature"

            extends Modelica.Icons.Function;
            input SI.Temperature T "Temperature (K)";
            output SI.Pressure p_sat "Pressure";
          protected
            Real[8] o "Vector of auxiliary variables";
            Real Tlim=min(T, data.TCRIT);
          algorithm
            assert(T >= 273.16, "IF97 medium function psat: input temperature (= "
               + String(triple.Ttriple) + " K).\n" +
              "lower than the triple point temperature 273.16 K");
            o[1] := -650.17534844798 + Tlim;
            o[2] := 1/o[1];
            o[3] := -0.238555575678490*o[2];
            o[4] := o[3] + Tlim;
            o[5] := -4823.2657361591*o[4];
            o[6] := o[4]*o[4];
            o[7] := 14.9151086135300*o[6];
            o[8] := 405113.40542057 + o[5] + o[7];
            p_sat := 16.0e6*o[8]*o[8]*o[8]*o[8]*1/(3.2325550322333e6 -
              12020.8247024700*o[4] + 17.0738469400920*o[6] + (-4.0*(-724213.16703206
               + 1167.05214527670*o[4] + o[6])*o[8] + (-3.2325550322333e6 +
              12020.8247024700*o[4] - 17.0738469400920*o[6])^2.0)^0.5)^4.0;
            annotation (derivative=psat_der);
          end psat;

          function dptofT
            "Derivative of pressure w.r.t. temperature along the saturation pressure curve"

            extends Modelica.Icons.Function;
            input SI.Temperature T "Temperature (K)";
            output Real dpt(unit="Pa/K") "Temperature derivative of pressure";
          protected
            Real[31] o "Vector of auxiliary variables";
            Real Tlim "Temperature limited to TCRIT";
          algorithm
            Tlim := min(T, data.TCRIT);
            o[1] := -650.17534844798 + Tlim;
            o[2] := 1/o[1];
            o[3] := -0.238555575678490*o[2];
            o[4] := o[3] + Tlim;
            o[5] := -4823.2657361591*o[4];
            o[6] := o[4]*o[4];
            o[7] := 14.9151086135300*o[6];
            o[8] := 405113.40542057 + o[5] + o[7];
            o[9] := o[8]*o[8];
            o[10] := o[9]*o[9];
            o[11] := o[1]*o[1];
            o[12] := 1/o[11];
            o[13] := 0.238555575678490*o[12];
            o[14] := 1.00000000000000 + o[13];
            o[15] := 12020.8247024700*o[4];
            o[16] := -17.0738469400920*o[6];
            o[17] := -3.2325550322333e6 + o[15] + o[16];
            o[18] := -4823.2657361591*o[14];
            o[19] := 29.8302172270600*o[14]*o[4];
            o[20] := o[18] + o[19];
            o[21] := 1167.05214527670*o[4];
            o[22] := -724213.16703206 + o[21] + o[6];
            o[23] := o[17]*o[17];
            o[24] := -4.0000000000000*o[22]*o[8];
            o[25] := o[23] + o[24];
            o[26] := sqrt(o[25]);
            o[27] := -12020.8247024700*o[4];
            o[28] := 17.0738469400920*o[6];
            o[29] := 3.2325550322333e6 + o[26] + o[27] + o[28];
            o[30] := o[29]*o[29];
            o[31] := o[30]*o[30];
            dpt := 1e6*((-64.0*o[10]*(-12020.8247024700*o[14] + 34.147693880184*o[
              14]*o[4] + (0.5*(-4.0*o[20]*o[22] + 2.00000000000000*o[17]*(
              12020.8247024700*o[14] - 34.147693880184*o[14]*o[4]) - 4.0*(
              1167.05214527670*o[14] + 2.0*o[14]*o[4])*o[8]))/o[26]))/(o[29]*o[31])
               + (64.*o[20]*o[8]*o[9])/o[31]);
          end dptofT;

          function psat_der "Derivative function for psat"
            extends Modelica.Icons.Function;
            input SI.Temperature T "Temperature (K)";
            input Real der_T(unit="K/s") "Temperature derivative";
            output Real der_psat(unit="Pa/s") "Pressure";
          protected
            Real dpt;
          algorithm
            dpt := dptofT(T);
            der_psat := dpt*der_T;
          end psat_der;

          // Inverses p_hs from the 2001 addition to IAPWS97
          function p1_hs
            "Pressure as a function of enthalpy and entropy in region 1"
            extends Modelica.Icons.Function;
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Pressure p "Pressure";
            constant Real[:] n={-0.691997014660582,-0.183612548787560e2,-0.928332409297335e1,
                0.659639569909906e2,-0.162060388912024e2,0.450620017338667e3,
                0.854680678224170e3,0.607523214001162e4,0.326487682621856e2,-0.269408844582931e2,
                -0.319947848334300e3,-0.928354307043320e3,0.303634537455249e2,-0.650540422444146e2,
                -0.430991316516130e4,-0.747512324096068e3,0.730000345529245e3,
                0.114284032569021e4,-0.436407041874559e3};
            constant Real[:] I={0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,4,4,5};
            constant Real[:] J={0,1,2,4,5,6,8,14,0,1,4,6,0,1,10,4,1,4,0};
            constant SI.SpecificEnthalpy hstar=3400e3 "Normalization enthalpy";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=7.6e3 "Normalization entropy";
          protected
            Real eta=h/hstar "Normalized specific enthalpy";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            p := sum(n[i]*(eta + 0.05)^I[i]*(sigma + 0.05)^J[i] for i in 1:19)*
              pstar;
            annotation (Documentation(info="<html>
<p>
  Equation number 1 from:<br>
  The International Association for the Properties of Water and Steam<br>
  Gaithersburg, Maryland, USA<br>
  September 2001<br>
  Supplementary Release on&nbsp; Backward Equations for Pressure as a
  Function of Enthalpy and Entropy p(h,s) to the IAPWS Industrial
  Formulation 1997 for the Thermodynamic Properties of Water and Steam<br>
</p>
  </html>"));
          end p1_hs;

          function h2ab_s "Boundary between regions 2a and 2b"
            extends Modelica.Icons.Function;
            output SI.SpecificEnthalpy h "Enthalpy";
            input SI.SpecificEntropy s "Entropy";
          protected
            constant Real[:] n={-0.349898083432139e4,0.257560716905876e4,-0.421073558227969e3,
                0.276349063799944e2};
            constant SI.SpecificEnthalpy hstar=1e3 "Normalization enthalpy";
            constant SI.SpecificEntropy sstar=1e3 "Normalization entropy";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            h := (n[1] + n[2]*sigma + n[3]*sigma^2 + n[4]*sigma^3)*hstar;
            annotation (Documentation(info="<html>
  <p>
  Equation number 2 from:<br>
  The International Association for the Properties of Water and Steam<br>
  Gaithersburg, Maryland, USA<br>
  September 2001<br>
  Supplementary Release on&nbsp; Backward Equations for Pressure as a
  Function of Enthalpy and Entropy p(h,s) to the IAPWS Industrial
  Formulation 1997 for the Thermodynamic Properties of Water and Steam<br>
</p>
  </html>"));
          end h2ab_s;

          function p2a_hs
            "Pressure as a function of enthalpy and entropy in subregion 2a"
            extends Modelica.Icons.Function;
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Pressure p "Pressure";
            constant Real[:] n={-0.182575361923032e-1,-0.125229548799536,
                0.592290437320145,0.604769706185122e1,0.238624965444474e3,-0.298639090222922e3,
                0.512250813040750e-1,-0.437266515606486,0.413336902999504,-0.516468254574773e1,
                -0.557014838445711e1,0.128555037824478e2,0.114144108953290e2,-0.119504225652714e3,
                -0.284777985961560e4,0.431757846408006e4,0.112894040802650e1,
                0.197409186206319e4,0.151612444706087e4,0.141324451421235e-1,
                0.585501282219601,-0.297258075863012e1,0.594567314847319e1,-0.623656565798905e4,
                0.965986235133332e4,0.681500934948134e1,-0.633207286824489e4,-0.558919224465760e1,
                0.400645798472063e-1};
            constant Real[:] I={0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,5,
                5,6,7};
            constant Real[:] J={1,3,6,16,20,22,0,1,2,3,5,6,10,16,20,22,3,16,20,0,2,
                3,6,16,16,3,16,3,1};
            constant SI.SpecificEnthalpy hstar=4200e3 "Normalization enthalpy";
            constant SI.Pressure pstar=4e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=12e3 "Normalization entropy";
          protected
            Real eta=h/hstar "Normalized specific enthalpy";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            p := sum(n[i]*(eta - 0.5)^I[i]*(sigma - 1.2)^J[i] for i in 1:29)^4*
              pstar;
            annotation (Documentation(info="<html>
  <p>
  Equation number 3 from:<br>
  The International Association for the Properties of Water and Steam<br>
  Gaithersburg, Maryland, USA<br>
  September 2001<br>
  Supplementary Release on&nbsp; Backward Equations for Pressure as a
  Function of Enthalpy and Entropy p(h,s) to the IAPWS Industrial
  Formulation 1997 for the Thermodynamic Properties of Water and Steam<br>
</p>
  </html>"));
          end p2a_hs;

          function p2b_hs
            "Pressure as a function of enthalpy and entropy in subregion 2a"
            extends Modelica.Icons.Function;
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Pressure p "Pressure";
            constant Real[:] n={0.801496989929495e-1,-0.543862807146111,
                0.337455597421283,0.890555451157450e1,0.313840736431485e3,
                0.797367065977789,-0.121616973556240e1,0.872803386937477e1,-0.169769781757602e2,
                -0.186552827328416e3,0.951159274344237e5,-0.189168510120494e2,-0.433407037194840e4,
                0.543212633012715e9,0.144793408386013,0.128024559637516e3,-0.672309534071268e5,
                0.336972380095287e8,-0.586634196762720e3,-0.221403224769889e11,
                0.171606668708389e4,-0.570817595806302e9,-0.312109693178482e4,-0.207841384633010e7,
                0.305605946157786e13,0.322157004314333e4,0.326810259797295e12,-0.144104158934487e4,
                0.410694867802691e3,0.109077066873024e12,-0.247964654258893e14,
                0.188801906865134e10,-0.123651009018773e15};
            constant Real[:] I={0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,4,4,5,5,6,6,6,7,
                7,8,8,8,8,12,14};
            constant Real[:] J={0,1,2,4,8,0,1,2,3,5,12,1,6,18,0,1,7,12,1,16,1,12,1,
                8,18,1,16,1,3,14,18,10,16};
            constant SI.SpecificEnthalpy hstar=4100e3 "Normalization enthalpy";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=7.9e3 "Normalization entropy";
          protected
            Real eta=h/hstar "Normalized specific enthalpy";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            p := sum(n[i]*(eta - 0.6)^I[i]*(sigma - 1.01)^J[i] for i in 1:33)^4*
              pstar;
            annotation (Documentation(info="<html>
<p>
Equation number 4 from:<br>
The International Association for the Properties of Water and Steam<br>
Gaithersburg, Maryland, USA<br>
September 2001<br>
Supplementary Release on&nbsp; Backward Equations for Pressure as a
Function of Enthalpy and Entropy p(h,s) to the IAPWS Industrial
Formulation 1997 for the Thermodynamic Properties of Water and Steam<br>
</p>
      </html>"));
          end p2b_hs;

          function p2c_hs
            "Pressure as a function of enthalpy and entropy in subregion 2c"
            extends Modelica.Icons.Function;
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Pressure p "Pressure";
            constant Real[:] n={0.112225607199012,-0.339005953606712e1,-0.320503911730094e2,
                -0.197597305104900e3,-0.407693861553446e3,0.132943775222331e5,
                0.170846839774007e1,0.373694198142245e2,0.358144365815434e4,
                0.423014446424664e6,-0.751071025760063e9,0.523446127607898e2,-0.228351290812417e3,
                -0.960652417056937e6,-0.807059292526074e8,0.162698017225669e13,
                0.772465073604171,0.463929973837746e5,-0.137317885134128e8,
                0.170470392630512e13,-0.251104628187308e14,0.317748830835520e14,
                0.538685623675312e2,-0.553089094625169e5,-0.102861522421405e7,
                0.204249418756234e13,0.273918446626977e9,-0.263963146312685e16,-0.107890854108088e10,
                -0.296492620980124e11,-0.111754907323424e16};
            constant Real[:] I={0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,5,5,5,5,
                6,6,10,12,16};
            constant Real[:] J={0,1,2,3,4,8,0,2,5,8,14,2,3,7,10,18,0,5,8,16,18,18,1,
                4,6,14,8,18,7,7,10};
            constant SI.SpecificEnthalpy hstar=3500e3 "Normalization enthalpy";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=5.9e3 "Normalization entropy";
          protected
            Real eta=h/hstar "Normalized specific enthalpy";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            p := sum(n[i]*(eta - 0.7)^I[i]*(sigma - 1.1)^J[i] for i in 1:31)^4*
              pstar;
            annotation (Documentation(info="<html>
      <p>
      Equation number 5 from:<br>
      The International Association for the Properties of Water and Steam<br>
      Gaithersburg, Maryland, USA<br>
      September 2001<br>
      Supplementary Release on&nbsp; Backward Equations for Pressure as a
      Function of Enthalpy and Entropy p(h,s) to the IAPWS Industrial
      Formulation 1997 for the Thermodynamic Properties of Water and Steam<br>
   </p>
      </html>"));
          end p2c_hs;

          // Inverses from the 2003 additions to IF97
          function h3ab_p "Region 3 a b boundary for pressure/enthalpy"
            extends Modelica.Icons.Function;
            output SI.SpecificEnthalpy h "Enthalpy";
            input SI.Pressure p "Pressure";
          protected
            constant Real[:] n={0.201464004206875e4,0.374696550136983e1,-0.219921901054187e-1,
                0.875131686009950e-4};
            constant SI.SpecificEnthalpy hstar=1000 "Normalization enthalpy";
            constant SI.Pressure pstar=1e6 "Normalization pressure";
            Real pi=p/pstar "Normalized specific pressure";

          algorithm
            h := (n[1] + n[2]*pi + n[3]*pi^2 + n[4]*pi^3)*hstar;
            annotation (Documentation(info="<html>
      <p>
      &nbsp;Equation number 1 from:
      </p>
      <div style=\"text-align: center;\">&nbsp;[1] The international Association
      for the Properties of Water and Steam<br>
      &nbsp;Vejle, Denmark<br>
      &nbsp;August 2003<br>
      &nbsp;Supplementary Release on Backward Equations for the Functions
      T(p,h), v(p,h) and T(p,s),<br>
      &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
      the Thermodynamic Properties of<br>
      &nbsp;Water and Steam</div>
      </html>"));
          end h3ab_p;

          function T3a_ph "Region 3 a: inverse function T(p,h)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.Temp_K T "Temperature";
          protected
            constant Real[:] n={-0.133645667811215e-6,0.455912656802978e-5,-0.146294640700979e-4,
                0.639341312970080e-2,0.372783927268847e3,-0.718654377460447e4,
                0.573494752103400e6,-0.267569329111439e7,-0.334066283302614e-4,-0.245479214069597e-1,
                0.478087847764996e2,0.764664131818904e-5,0.128350627676972e-2,
                0.171219081377331e-1,-0.851007304583213e1,-0.136513461629781e-1,-0.384460997596657e-5,
                0.337423807911655e-2,-0.551624873066791,0.729202277107470,-0.992522757376041e-2,
                -0.119308831407288,0.793929190615421,0.454270731799386,
                0.209998591259910,-0.642109823904738e-2,-0.235155868604540e-1,
                0.252233108341612e-2,-0.764885133368119e-2,0.136176427574291e-1,-0.133027883575669e-1};
            constant Real[:] I={-12,-12,-12,-12,-12,-12,-12,-12,-10,-10,-10,-8,-8,-8,
                -8,-5,-3,-2,-2,-2,-1,-1,0,0,1,3,3,4,4,10,12};
            constant Real[:] J={0,1,2,6,14,16,20,22,1,5,12,0,2,4,10,2,0,1,3,4,0,2,0,
                1,1,0,1,0,3,4,5};
            constant SI.SpecificEnthalpy hstar=2300e3 "Normalization enthalpy";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.Temp_K Tstar=760 "Normalization temperature";
            Real pi=p/pstar "Normalized specific pressure";
            Real eta=h/hstar "Normalized specific enthalpy";
          algorithm
            T := sum(n[i]*(pi + 0.240)^I[i]*(eta - 0.615)^J[i] for i in 1:31)*Tstar;
            annotation (Documentation(info="<html>
<p>
 &nbsp;Equation number 2 from:
</p>
 <div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
 </html>"));
          end T3a_ph;

          function T3b_ph "Region 3 b: inverse function T(p,h)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.Temp_K T "Temperature";
          protected
            constant Real[:] n={0.323254573644920e-4,-0.127575556587181e-3,-0.475851877356068e-3,
                0.156183014181602e-2,0.105724860113781,-0.858514221132534e2,
                0.724140095480911e3,0.296475810273257e-2,-0.592721983365988e-2,-0.126305422818666e-1,
                -0.115716196364853,0.849000969739595e2,-0.108602260086615e-1,
                0.154304475328851e-1,0.750455441524466e-1,0.252520973612982e-1,-0.602507901232996e-1,
                -0.307622221350501e1,-0.574011959864879e-1,0.503471360939849e1,-0.925081888584834,
                0.391733882917546e1,-0.773146007130190e2,0.949308762098587e4,-0.141043719679409e7,
                0.849166230819026e7,0.861095729446704,0.323346442811720,
                0.873281936020439,-0.436653048526683,0.286596714529479,-0.131778331276228,
                0.676682064330275e-2};
            constant Real[:] I={-12,-12,-10,-10,-10,-10,-10,-8,-8,-8,-8,-8,-6,-6,-6,
                -4,-4,-3,-2,-2,-1,-1,-1,-1,-1,-1,0,0,1,3,5,6,8};
            constant Real[:] J={0,1,0,1,5,10,12,0,1,2,4,10,0,1,2,0,1,5,0,4,2,4,6,10,
                14,16,0,2,1,1,1,1,1};
            constant SI.Temp_K Tstar=860 "Normalization temperature";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEnthalpy hstar=2800e3 "Normalization enthalpy";
            Real pi=p/pstar "Normalized specific pressure";
            Real eta=h/hstar "Normalized specific enthalpy";
          algorithm
            T := sum(n[i]*(pi + 0.298)^I[i]*(eta - 0.720)^J[i] for i in 1:33)*Tstar;
            annotation (Documentation(info="<html>
 <p>
 &nbsp;Equation number 3 from:
</p>
 <div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
 </html>"));
          end T3b_ph;

          function v3a_ph "Region 3 a: inverse function v(p,h)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.SpecificVolume v "Specific volume";
          protected
            constant Real[:] n={0.529944062966028e-2,-0.170099690234461,
                0.111323814312927e2,-0.217898123145125e4,-0.506061827980875e-3,
                0.556495239685324,-0.943672726094016e1,-0.297856807561527,
                0.939353943717186e2,0.192944939465981e-1,0.421740664704763,-0.368914126282330e7,
                -0.737566847600639e-2,-0.354753242424366,-0.199768169338727e1,
                0.115456297059049e1,0.568366875815960e4,0.808169540124668e-2,
                0.172416341519307,0.104270175292927e1,-0.297691372792847,
                0.560394465163593,0.275234661176914,-0.148347894866012,-0.651142513478515e-1,
                -0.292468715386302e1,0.664876096952665e-1,0.352335014263844e1,-0.146340792313332e-1,
                -0.224503486668184e1,0.110533464706142e1,-0.408757344495612e-1};
            constant Real[:] I={-12,-12,-12,-12,-10,-10,-10,-8,-8,-6,-6,-6,-4,-4,-3,
                -2,-2,-1,-1,-1,-1,0,0,1,1,1,2,2,3,4,5,8};
            constant Real[:] J={6,8,12,18,4,7,10,5,12,3,4,22,2,3,7,3,16,0,1,2,3,0,1,
                0,1,2,0,2,0,2,2,2};
            constant SI.Volume vstar=0.0028 "Normalization temperature";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEnthalpy hstar=2100e3 "Normalization enthalpy";
            Real pi=p/pstar "Normalized specific pressure";
            Real eta=h/hstar "Normalized specific enthalpy";
          algorithm
            v := sum(n[i]*(pi + 0.128)^I[i]*(eta - 0.727)^J[i] for i in 1:32)*vstar;
            annotation (Documentation(info="<html>
<p>
&nbsp;Equation number 4 from:
</p>
 <div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
 </html>"));
          end v3a_ph;

          function v3b_ph "Region 3 b: inverse function v(p,h)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.SpecificVolume v "Specific volume";
          protected
            constant Real[:] n={-0.225196934336318e-8,0.140674363313486e-7,
                0.233784085280560e-5,-0.331833715229001e-4,0.107956778514318e-2,-0.271382067378863,
                0.107202262490333e1,-0.853821329075382,-0.215214194340526e-4,
                0.769656088222730e-3,-0.431136580433864e-2,0.453342167309331,-0.507749535873652,
                -0.100475154528389e3,-0.219201924648793,-0.321087965668917e1,
                0.607567815637771e3,0.557686450685932e-3,0.187499040029550,
                0.905368030448107e-2,0.285417173048685,0.329924030996098e-1,
                0.239897419685483,0.482754995951394e1,-0.118035753702231e2,
                0.169490044091791,-0.179967222507787e-1,0.371810116332674e-1,-0.536288335065096e-1,
                0.160697101092520e1};
            constant Real[:] I={-12,-12,-8,-8,-8,-8,-8,-8,-6,-6,-6,-6,-6,-6,-4,-4,-4,
                -3,-3,-2,-2,-1,-1,-1,-1,0,1,1,2,2};
            constant Real[:] J={0,1,0,1,3,6,7,8,0,1,2,5,6,10,3,6,10,0,2,1,2,0,1,4,5,
                0,0,1,2,6};
            constant SI.Volume vstar=0.0088 "Normalization temperature";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEnthalpy hstar=2800e3 "Normalization enthalpy";
            Real pi=p/pstar "Normalized specific pressure";
            Real eta=h/hstar "Normalized specific enthalpy";
          algorithm
            v := sum(n[i]*(pi + 0.0661)^I[i]*(eta - 0.720)^J[i] for i in 1:30)*
              vstar;
            annotation (Documentation(info="<html>
<p>
 &nbsp;Equation number 5 from:
</p>
 <div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
 </html>"));
          end v3b_ph;

          function T3a_ps "Region 3 a: inverse function T(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Temp_K T "Temperature";
          protected
            constant Real[:] n={0.150042008263875e10,-0.159397258480424e12,
                0.502181140217975e-3,-0.672057767855466e2,0.145058545404456e4,-0.823889534888890e4,
                -0.154852214233853,0.112305046746695e2,-0.297000213482822e2,
                0.438565132635495e11,0.137837838635464e-2,-0.297478527157462e1,
                0.971777947349413e13,-0.571527767052398e-4,0.288307949778420e5,-0.744428289262703e14,
                0.128017324848921e2,-0.368275545889071e3,0.664768904779177e16,
                0.449359251958880e-1,-0.422897836099655e1,-0.240614376434179,-0.474341365254924e1,
                0.724093999126110,0.923874349695897,0.399043655281015e1,
                0.384066651868009e-1,-0.359344365571848e-2,-0.735196448821653,
                0.188367048396131,0.141064266818704e-3,-0.257418501496337e-2,
                0.123220024851555e-2};
            constant Real[:] I={-12,-12,-10,-10,-10,-10,-8,-8,-8,-8,-6,-6,-6,-5,-5,
                -5,-4,-4,-4,-2,-2,-1,-1,0,0,0,1,2,2,3,8,8,10};
            constant Real[:] J={28,32,4,10,12,14,5,7,8,28,2,6,32,0,14,32,6,10,36,1,
                4,1,6,0,1,4,0,0,3,2,0,1,2};
            constant SI.Temp_K Tstar=760 "Normalization temperature";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=4.4e3 "Normalization entropy";
            Real pi=p/pstar "Normalized specific pressure";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            T := sum(n[i]*(pi + 0.240)^I[i]*(sigma - 0.703)^J[i] for i in 1:33)*
              Tstar;
            annotation (Documentation(info="<html>
<p>
 &nbsp;Equation number 6 from:
</p>
 <div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
 </html>"));
          end T3a_ps;

          function T3b_ps "Region 3 b: inverse function T(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.Temp_K T "Temperature";
          protected
            constant Real[:] n={0.527111701601660,-0.401317830052742e2,
                0.153020073134484e3,-0.224799398218827e4,-0.193993484669048,-0.140467557893768e1,
                0.426799878114024e2,0.752810643416743,0.226657238616417e2,-0.622873556909932e3,
                -0.660823667935396,0.841267087271658,-0.253717501764397e2,
                0.485708963532948e3,0.880531517490555e3,0.265015592794626e7,-0.359287150025783,
                -0.656991567673753e3,0.241768149185367e1,0.856873461222588,
                0.655143675313458,-0.213535213206406,0.562974957606348e-2,-0.316955725450471e15,
                -0.699997000152457e-3,0.119845803210767e-1,0.193848122022095e-4,-0.215095749182309e-4};
            constant Real[:] I={-12,-12,-12,-12,-8,-8,-8,-6,-6,-6,-5,-5,-5,-5,-5,-4,
                -3,-3,-2,0,2,3,4,5,6,8,12,14};
            constant Real[:] J={1,3,4,7,0,1,3,0,2,4,0,1,2,4,6,12,1,6,2,0,1,1,0,24,0,
                3,1,2};
            constant SI.Temp_K Tstar=860 "Normalization temperature";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=5.3e3 "Normalization entropy";
            Real pi=p/pstar "Normalized specific pressure";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            T := sum(n[i]*(pi + 0.760)^I[i]*(sigma - 0.818)^J[i] for i in 1:28)*
              Tstar;
            annotation (Documentation(info="<html>
<p>
 &nbsp;Equation number 7 from:
</p>
 <div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
</html>"));
          end T3b_ps;

          function v3a_ps "Region 3 a: inverse function v(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.SpecificVolume v "Specific volume";
          protected
            constant Real[:] n={0.795544074093975e2,-0.238261242984590e4,
                0.176813100617787e5,-0.110524727080379e-2,-0.153213833655326e2,
                0.297544599376982e3,-0.350315206871242e8,0.277513761062119,-0.523964271036888,
                -0.148011182995403e6,0.160014899374266e7,0.170802322663427e13,
                0.246866996006494e-3,0.165326084797980e1,-0.118008384666987,
                0.253798642355900e1,0.965127704669424,-0.282172420532826e2,
                0.203224612353823,0.110648186063513e1,0.526127948451280,
                0.277000018736321,0.108153340501132e1,-0.744127885357893e-1,
                0.164094443541384e-1,-0.680468275301065e-1,0.257988576101640e-1,-0.145749861944416e-3};
            constant Real[:] I={-12,-12,-12,-10,-10,-10,-10,-8,-8,-8,-8,-6,-5,-4,-3,
                -3,-2,-2,-1,-1,0,0,0,1,2,4,5,6};
            constant Real[:] J={10,12,14,4,8,10,20,5,6,14,16,28,1,5,2,4,3,8,1,2,0,1,
                3,0,0,2,2,0};
            constant SI.Volume vstar=0.0028 "Normalization temperature";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=4.4e3 "Normalization entropy";
            Real pi=p/pstar "Normalized specific pressure";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            v := sum(n[i]*(pi + 0.187)^I[i]*(sigma - 0.755)^J[i] for i in 1:28)*
              vstar;
            annotation (Documentation(info="<html>
<p>
 &nbsp;Equation number 8 from:
</p>
 <div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
</html>"));
          end v3a_ps;

          function v3b_ps "Region 3 b: inverse function v(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.SpecificVolume v "Specific volume";
          protected
            constant Real[:] n={0.591599780322238e-4,-0.185465997137856e-2,
                0.104190510480013e-1,0.598647302038590e-2,-0.771391189901699,
                0.172549765557036e1,-0.467076079846526e-3,0.134533823384439e-1,-0.808094336805495e-1,
                0.508139374365767,0.128584643361683e-2,-0.163899353915435e1,
                0.586938199318063e1,-0.292466667918613e1,-0.614076301499537e-2,
                0.576199014049172e1,-0.121613320606788e2,0.167637540957944e1,-0.744135838773463e1,
                0.378168091437659e-1,0.401432203027688e1,0.160279837479185e2,
                0.317848779347728e1,-0.358362310304853e1,-0.115995260446827e7,
                0.199256573577909,-0.122270624794624,-0.191449143716586e2,-0.150448002905284e-1,
                0.146407900162154e2,-0.327477787188230e1};
            constant Real[:] I={-12,-12,-12,-12,-12,-12,-10,-10,-10,-10,-8,-5,-5,-5,
                -4,-4,-4,-4,-3,-2,-2,-2,-2,-2,-2,0,0,0,1,1,2};
            constant Real[:] J={0,1,2,3,5,6,0,1,2,4,0,1,2,3,0,1,2,3,1,0,1,2,3,4,12,
                0,1,2,0,2,2};
            constant SI.Volume vstar=0.0088 "Normalization temperature";
            constant SI.Pressure pstar=100e6 "Normalization pressure";
            constant SI.SpecificEntropy sstar=5.3e3 "Normalization entropy";
            Real pi=p/pstar "Normalized specific pressure";
            Real sigma=s/sstar "Normalized specific entropy";
          algorithm
            v := sum(n[i]*(pi + 0.298)^I[i]*(sigma - 0.816)^J[i] for i in 1:31)*
              vstar;
            annotation (Documentation(info="<html>
<p>
 &nbsp;Equation number 9 from:
</p>
<div style=\"text-align: center;\">&nbsp;[1] The international Association
 for the Properties of Water and Steam<br>
 &nbsp;Vejle, Denmark<br>
 &nbsp;August 2003<br>
 &nbsp;Supplementary Release on Backward Equations for the Functions
 T(p,h), v(p,h) and T(p,s),<br>
 &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
 the Thermodynamic Properties of<br>
 &nbsp;Water and Steam</div>
</html>"));
          end v3b_ps;

          annotation (Documentation(info="<html><h4>Package description</h4>
          <p>Package BaseIF97/Basic computes the fundamental functions for the 5 regions of the steam tables
          as described in the standards document <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a>. The code of these
          functions has been generated using <strong><em>Mathematica</em></strong> and the add-on packages \"Format\" and \"Optimize\"
          to generate highly efficient, expression-optimized C-code from a symbolic representation of the thermodynamic
          functions. The C-code has than been transformed into Modelica code. An important feature of this optimization was to
          simultaneously optimize the functions and the directional derivatives because they share many common subexpressions.</p>
          <h4>Package contents</h4>
          <ul>
          <li>Function <strong>g1</strong> computes the dimensionless Gibbs function for region 1 and all derivatives up
          to order 2 w.r.t. pi and tau. Inputs: p and T.</li>
          <li>Function <strong>g2</strong> computes the dimensionless Gibbs function  for region 2 and all derivatives up
          to order 2 w.r.t. pi and tau. Inputs: p and T.</li>
          <li>Function <strong>g2metastable</strong> computes the dimensionless Gibbs function for metastable vapour
          (adjacent to region 2 but 2-phase at equilibrium) and all derivatives up
          to order 2 w.r.t. pi and tau. Inputs: p and T.</li>
          <li>Function <strong>f3</strong> computes the dimensionless Helmholtz function  for region 3 and all derivatives up
          to order 2 w.r.t. delta and tau. Inputs: d and T.</li>
          <li>Function <strong>g5</strong>computes the dimensionless Gibbs function for region 5 and all derivatives up
          to order 2 w.r.t. pi and tau. Inputs: p and T.</li>
          <li>Function <strong>tph1</strong> computes the inverse function T(p,h) in region 1.</li>
          <li>Function <strong>tph2</strong> computes the inverse function T(p,h) in region 2.</li>
          <li>Function <strong>tps2a</strong> computes the inverse function T(p,s) in region 2a.</li>
          <li>Function <strong>tps2b</strong> computes the inverse function T(p,s) in region 2b.</li>
          <li>Function <strong>tps2c</strong> computes the inverse function T(p,s) in region 2c.</li>
          <li>Function <strong>tps2</strong> computes the inverse function T(p,s) in region 2.</li>
          <li>Function <strong>tsat</strong> computes the saturation temperature as a function of pressure.</li>
          <li>Function <strong>dtsatofp</strong> computes the derivative of the saturation temperature w.r.t. pressure as
          a function of pressure.</li>
          <li>Function <strong>tsat_der</strong> computes the Modelica derivative function of tsat.</li>
          <li>Function <strong>psat</strong> computes the saturation pressure as a function of temperature.</li>
          <li>Function <strong>dptofT</strong>  computes the derivative of the saturation pressure w.r.t. temperature as
          a function of temperature.</li>
          <li>Function <strong>psat_der</strong> computes the Modelica derivative function of psat.</li>
          </ul>
          <h4>Version Info and Revision history
          </h4>
          <ul>
          <li>First implemented: <em>July, 2000</em>
          by Hubertus Tummescheit
          </li>
          </ul>
          <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
          </address>
          <ul>
          <li>Initial version: July 2000</li>
          <li>Documentation added: December 2002</li>
          </ul>
       <p>
       Equation from:
       </p>
       <div style=\"text-align: center;\">&nbsp;[1] The international Association
       for the Properties of Water and Steam<br>
       &nbsp;Vejle, Denmark<br>
       &nbsp;August 2003<br>
       &nbsp;Supplementary Release on Backward Equations for the Functions
       T(p,h), v(p,h) and T(p,s),<br>
       &nbsp;v(p,s) for Region 3 of the IAPWS Industrial Formulation 1997 for
       the Thermodynamic Properties of<br>
       &nbsp;Water and Steam</div>
       </html>"));
        end Basic;

        package IceBoundaries
          "The melting line and sublimation line curves from IAPWS"
          extends Modelica.Icons.FunctionsPackage;
          function pmIceI_T
            "Melting pressure of ice I (temperature range from 273.16 to 251.165 K)"
            extends Modelica.Icons.Function;
            input SI.Temp_K T "Temperature";
            output SI.Pressure pm
              "Melting pressure of iceI(for T from 273.16 to 251.165 K)";
          protected
            constant SI.Temp_K Tn=273.16 "Normalization temperature";
            constant SI.Pressure pn=611.657 "Normalization pressure";
            Real sigma=T/Tn "Normalized temperature";
          algorithm
            pm := (1 - 0.626000e6*(1 - sigma^(-3)) + 0.197135e6*(1 - sigma^(21.2)))
              *pn;
            annotation (Documentation(info="<html>
  <p>
  Equation 1 from:<br>
  The International Association for the Properties of Water and Steam<br>
  Milan, Italy<br>
  September 1993<br>
  Release on the Pressure along the Melting and the Sublimation Curves of
  Ordinary Water Substance<br>
</p>
  </html>"));
          end pmIceI_T;

          function pmIceIII_T
            "Melting pressure of ice III (temperature range from 251.165 to 256.164 K)"
            extends Modelica.Icons.Function;
            input SI.Temp_K T "Temperature";
            output SI.Pressure pm
              "Melting pressure of iceIII(for T from 251.165 to 256.164 K)";
          protected
            constant SI.Temp_K Tn=251.165 "Normalization temperature";
            constant SI.Pressure pn=209.9e6 "Normalization pressure";
            Real sigma=T/Tn "Normalized temperature";
          algorithm
            pm := (1 - 0.295252*(1 - sigma^60))*pn;
            annotation (Documentation(info="<html>
  <p>
  Equation 2 from:<br>
  The International Association for the Properties of Water and Steam<br>
  Milan, Italy<br>
  September 1993<br>
  Release on the Pressure along the Melting and the Sublimation Curves of
  Ordinary Water Substance<br>
</p>
  </html>"));
          end pmIceIII_T;

          function pmIceV_T
            "Melting pressure of ice V (temperature range from 256.164 to 273.31 K)"
            extends Modelica.Icons.Function;
            input SI.Temp_K T "Temperature";
            output SI.Pressure pm
              "Melting pressure of iceV(for T from 256.164 to 273.31 K)";
          protected
            constant SI.Temp_K Tn=256.164 "Normalization temperature";
            constant SI.Pressure pn=350.1e6 "Normalization pressure";
            Real sigma=T/Tn "Normalized temperature";

          algorithm
            pm := (1 - 1.18721*(1 - sigma^8))*pn;
            annotation (Documentation(info="<html>
  <p>
  Equation 3 from:<br>
  The International Association for the Properties of Water and Steam<br>
  Milan, Italy<br>
  September 1993<br>
  Release on the Pressure along the Melting and the Sublimation Curves of
  Ordinary Water Substance<br>
</p>
  </html>"));
          end pmIceV_T;

          function sublimationPressure_T
            "Sublimation pressure, valid from 190 to 273.16 K"
            extends Modelica.Icons.Function;
            input SI.Temp_K T "Temperature";
            output SI.Pressure psubl
              "Sublimation pressure (for T from 190 to 273.16)";
          protected
            constant SI.Temp_K Tn=273.16 "Normalization temperature";
            constant SI.Pressure pn=611.657 "Normalization pressure";
            constant Real[2] a={-13.9281690,34.7078238} "Constant values";
            Real sigma=T/Tn "Normalized temperature";
          algorithm
            psubl := Modelica.Math.exp(a[1]*(1 - sigma^(-1.5)) + a[2]*(1 - sigma^(-1.25)))
              *pn;
            annotation (Documentation(info="<html>
  <p>
  Equation 6 from:<br>
  The International Association for the Properties of Water and Steam<br>
  Milan, Italy<br>
  September 1993<br>
  Release on the Pressure along the Melting and the Sublimation Curves of
  Ordinary Water Substance<br>
</p>
  </html>"));
          end sublimationPressure_T;

          annotation (Documentation(info="<html>
<p>
The International Association for the Properties of Water and Steam<br>
Milan, Italy<br>
September 1993<br>
Release on the Pressure along the Melting and the Sublimation Curves of
Ordinary Water Substance<br>
</p>
</html>"));
        end IceBoundaries;

        package Transport "Transport properties for water according to IAPWS/IF97"

          extends Modelica.Icons.FunctionsPackage;

          function visc_dTp "Dynamic viscosity eta(d,T,p), industrial formulation"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            input SI.Pressure p "Pressure (only needed for region of validity)";
            input Integer phase=0
              "2 for two-phase, 1 for one-phase, 0 if not known";
            output SI.DynamicViscosity eta "Dynamic viscosity";
          protected
            constant Real n0=1.0 "Viscosity coefficient";
            constant Real n1=0.978197 "Viscosity coefficient";
            constant Real n2=0.579829 "Viscosity coefficient";
            constant Real n3=-0.202354 "Viscosity coefficient";
            constant Real[42] nn=array(
                      0.5132047,
                      0.3205656,
                      0.0,
                      0.0,
                      -0.7782567,
                      0.1885447,
                      0.2151778,
                      0.7317883,
                      1.241044,
                      1.476783,
                      0.0,
                      0.0,
                      -0.2818107,
                      -1.070786,
                      -1.263184,
                      0.0,
                      0.0,
                      0.0,
                      0.1778064,
                      0.460504,
                      0.2340379,
                      -0.4924179,
                      0.0,
                      0.0,
                      -0.0417661,
                      0.0,
                      0.0,
                      0.1600435,
                      0.0,
                      0.0,
                      0.0,
                      -0.01578386,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      0.0,
                      -0.003629481,
                      0.0,
                      0.0) "Viscosity coefficients";
            constant SI.Density rhostar=317.763 "Scaling density";
            constant SI.DynamicViscosity etastar=55.071e-6 "Scaling viscosity";
            constant SI.Temperature tstar=647.226 "Scaling temperature";
            Integer i "Auxiliary variable";
            Integer j "Auxiliary variable";
            Real delta "Dimensionless density";
            Real deltam1 "Dimensionless density";
            Real tau "Dimensionless temperature";
            Real taum1 "Dimensionless temperature";
            Real Psi0 "Auxiliary variable";
            Real Psi1 "Auxiliary variable";
            Real tfun "Auxiliary variable";
            Real rhofun "Auxiliary variable";
            Real Tc=T - 273.15 "Celsius temperature for region check";
            //      Integer region "Region of IF97";
          algorithm
            //      if phase == 0 then
            //        region := BaseIF97.Regions.region_dT(d,T,0);
            //      end if;
            //      if phase == 2 then
            //        region := 4;
            //      end if;
            // assert(phase <> 2, "Viscosity can not be computed for two-phase states");
            delta := d/rhostar;
            assert(d > triple.dvtriple,
              "IF97 medium function visc_dTp for viscosity called with too low density\n"
               + "d = " + String(d) + " <= " + String(triple.dvtriple) +
              " (triple point density)");
            assert((p <= 500e6 and (Tc >= 0.0 and Tc <= 150)) or (p <= 350e6 and (
              Tc > 150.0 and Tc <= 600)) or (p <= 300e6 and (Tc > 600.0 and Tc <=
              900)),
              "IF97 medium function visc_dTp: viscosity computed outside the range\n"
               + "of validity of the IF97 formulation: p = " + String(p) +
              " Pa, Tc = " + String(Tc) + " K");
            deltam1 := delta - 1.0;
            tau := tstar/T;
            taum1 := tau - 1.0;
            Psi0 := 1/(n0 + (n1 + (n2 + n3*tau)*tau)*tau)/(tau^0.5);
            Psi1 := 0.0;
            tfun := 1.0;
            for i in 1:6 loop
              if (i <> 1) then
                tfun := tfun*taum1;
              end if;
              rhofun := 1.;
              for j in 0:6 loop
                if (j <> 0) then
                  rhofun := rhofun*deltam1;
                end if;
                Psi1 := Psi1 + nn[i + j*6]*tfun*rhofun;
              end for;
            end for;
            eta := etastar*Psi0*Modelica.Math.exp(delta*Psi1);
          end visc_dTp;

          function cond_dTp
            "Thermal conductivity lam(d,T,p) (industrial use version) only in one-phase region"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            input SI.Pressure p "Pressure";
            input Integer phase=0
              "2 for two-phase, 1 for one-phase, 0 if not known";
            input Boolean industrialMethod=true
              "If true, the industrial method is used, otherwise the scientific one";
            output SI.ThermalConductivity lambda "Thermal conductivity";
          protected
            Integer region(min=1, max=5) "IF97 region, valid values:1,2,3, and 5";
            constant Real n0=1.0 "Conductivity coefficient";
            constant Real n1=6.978267 "Conductivity coefficient";
            constant Real n2=2.599096 "Conductivity coefficient";
            constant Real n3=-0.998254 "Conductivity coefficient";
            constant Real[30] nn=array(
                      1.3293046,
                      1.7018363,
                      5.2246158,
                      8.7127675,
                      -1.8525999,
                      -0.40452437,
                      -2.2156845,
                      -10.124111,
                      -9.5000611,
                      0.9340469,
                      0.2440949,
                      1.6511057,
                      4.9874687,
                      4.3786606,
                      0.0,
                      0.018660751,
                      -0.76736002,
                      -0.27297694,
                      -0.91783782,
                      0.0,
                      -0.12961068,
                      0.37283344,
                      -0.43083393,
                      0.0,
                      0.0,
                      0.044809953,
                      -0.1120316,
                      0.13333849,
                      0.0,
                      0.0) "Conductivity coefficient";
            constant SI.ThermalConductivity lamstar=0.4945 "Scaling conductivity";
            constant SI.Density rhostar=317.763 "Scaling density";
            constant SI.Temperature tstar=647.226 "Scaling temperature";
            constant SI.Pressure pstar=22.115e6 "Scaling pressure";
            constant SI.DynamicViscosity etastar=55.071e-6 "Scaling viscosity";
            Integer i "Auxiliary variable";
            Integer j "Auxiliary variable";
            Real delta "Dimensionless density";
            Real tau "Dimensionless temperature";
            Real deltam1 "Dimensionless density";
            Real taum1 "Dimensionless temperature";
            Real Lam0 "Part of thermal conductivity";
            Real Lam1 "Part of thermal conductivity";
            Real Lam2 "Part of thermal conductivity";
            Real tfun "Auxiliary variable";
            Real rhofun "Auxiliary variable";
            Real dpitau "Auxiliary variable";
            Real ddelpi "Auxiliary variable";
            Real d2 "Auxiliary variable";
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            Real Tc=T - 273.15 "Celsius temperature for region check";
            Real Chi "Symmetrized compressibility";
            // slightly different variables for industrial use
            constant SI.Density rhostar2=317.7 "Reference density";
            constant SI.Temperature Tstar2=647.25 "Reference temperature";
            constant SI.ThermalConductivity lambdastar=1
              "Reference thermal conductivity";
            Real TREL=T/Tstar2 "Relative temperature";
            Real rhoREL=d/rhostar2 "Relative density";
            Real lambdaREL "Relative thermal conductivity";
            Real deltaTREL "Relative temperature increment";
            constant Real[:] C={0.642857,-4.11717,-6.17937,0.00308976,0.0822994,
                10.0932};
            constant Real[:] dpar={0.0701309,0.0118520,0.00169937,-1.0200};
            constant Real[:] b={-0.397070,0.400302,1.060000};
            constant Real[:] B={-0.171587,2.392190};
            constant Real[:] a={0.0102811,0.0299621,0.0156146,-0.00422464};
            Real Q;
            Real S;
            Real lambdaREL2
              "Function, part of the interpolating equation of the thermal conductivity";
            Real lambdaREL1
              "Function, part of the interpolating equation of the thermal conductivity";
            Real lambdaREL0
              "Function, part of the interpolating equation of the thermal conductivity";
          algorithm
            // region := BaseIF97.Regions.region_dT(d,T,phase);
            // simplified region check, assuming that calling arguments are legal
            //  assert(phase <> 2,
            //   "ThermalConductivity can not be called with 2-phase inputs!");
            assert(d > triple.dvtriple,
              "IF97 medium function cond_dTp called with too low density\n" +
              "d = " + String(d) + " <= " + String(triple.dvtriple) +
              " (triple point density)");
            assert((p <= 100e6 and (Tc >= 0.0 and Tc <= 500)) or (p <= 70e6 and (Tc
               > 500.0 and Tc <= 650)) or (p <= 40e6 and (Tc > 650.0 and Tc <= 800)),
              "IF97 medium function cond_dTp: thermal conductivity computed outside the range\n"
               + "of validity of the IF97 formulation: p = " + String(p) +
              " Pa, Tc = " + String(Tc) + " K");
            if industrialMethod == true then
              deltaTREL := abs(TREL - 1) + C[4];
              Q := 2 + C[5]/deltaTREL^(3/5);
              if TREL >= 1 then
                S := 1/deltaTREL;
              else
                S := C[6]/deltaTREL^(3/5);
              end if;
              lambdaREL2 := (dpar[1]/TREL^10 + dpar[2])*rhoREL^(9/5)*
                Modelica.Math.exp(C[1]*(1 - rhoREL^(14/5))) + dpar[3]*S*rhoREL^Q*
                Modelica.Math.exp((Q/(1 + Q))*(1 - rhoREL^(1 + Q))) + dpar[4]*
                Modelica.Math.exp(C[2]*TREL^(3/2) + C[3]/rhoREL^5);
              lambdaREL1 := b[1] + b[2]*rhoREL + b[3]*Modelica.Math.exp(B[1]*(
                rhoREL + B[2])^2);
              lambdaREL0 := TREL^(1/2)*sum(a[i]*TREL^(i - 1) for i in 1:4);
              lambdaREL := lambdaREL0 + lambdaREL1 + lambdaREL2;
              lambda := lambdaREL*lambdastar;
            else
              if p < data.PLIMIT4A then
                //regions are 1 or 2,
                if d > data.DCRIT then
                  region := 1;
                else
                  region := 2;
                end if;
              else
                //region is 3, or illegal
                assert(false,
                  "The scientific method works only for temperature up to 623.15 K");
              end if;
              tau := tstar/T;
              delta := d/rhostar;
              deltam1 := delta - 1.0;
              taum1 := tau - 1.0;
              Lam0 := 1/(n0 + (n1 + (n2 + n3*tau)*tau)*tau)/(tau^0.5);
              Lam1 := 0.0;
              tfun := 1.0;
              for i in 1:5 loop
                if (i <> 1) then
                  tfun := tfun*taum1;
                end if;
                rhofun := 1.0;
                for j in 0:5 loop
                  if (j <> 0) then
                    rhofun := rhofun*deltam1;
                  end if;
                  Lam1 := Lam1 + nn[i + j*5]*tfun*rhofun;
                end for;
              end for;
              if (region == 1) then
                g := Basic.g1(p, T);
                // dp/dT @ cont d = -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
                dpitau := -tstar/pstar*(data.PSTAR1*(g.gpi - data.TSTAR1/T*g.gtaupi)
                  /g.gpipi/T);
                ddelpi := -pstar/rhostar*data.RH2O/data.PSTAR1/data.PSTAR1*T*d*d*g.gpipi;
                Chi := delta*ddelpi;
              elseif (region == 2) then
                g := Basic.g2(p, T);
                dpitau := -tstar/pstar*(data.PSTAR2*(g.gpi - data.TSTAR2/T*g.gtaupi)
                  /g.gpipi/T);
                ddelpi := -pstar/rhostar*data.RH2O/data.PSTAR2/data.PSTAR2*T*d*d*g.gpipi;
                Chi := delta*ddelpi;
                //         elseif (region == 3) then
                //           f := Basic.f3(T, d);
                //            dpitau := tstar/pstar*(f.R*f.d*f.delta*(f.fdelta - f.tau*f.fdeltatau));
                //           ddelpi := pstar*d*d/(rhostar*p*p)/(f.R*f.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta));
                //    Chi := delta*ddelpi;
              else
                assert(false,
                  "Thermal conductivity can only be called in the one-phase regions below 623.15 K\n"
                   + "(p = " + String(p) + " Pa, T = " + String(T) +
                  " K, region = " + String(region) + ")");
              end if;
              taum1 := 1/tau - 1;
              d2 := deltam1*deltam1;
              Lam2 := 0.0013848*etastar/visc_dTp(
                      d,
                      T,
                      p)/(tau*tau*delta*delta)*dpitau*dpitau*max(Chi, Modelica.Constants.small)
                ^0.4678*(delta)^0.5*Modelica.Math.exp(-18.66*taum1*taum1 - d2*d2);
              lambda := lamstar*(Lam0*Modelica.Math.exp(delta*Lam1) + Lam2);
            end if;
          end cond_dTp;

          function surfaceTension
            "Surface tension in region 4 between steam and water"
            extends Modelica.Icons.Function;
            input SI.Temperature T "Temperature (K)";
            output SI.SurfaceTension sigma "Surface tension in SI units";
          protected
            Real Theta "Dimensionless temperature";
          algorithm
            Theta := min(1.0, T/data.TCRIT);
            sigma := 235.8e-3*(1 - Theta)^1.256*(1 - 0.625*(1 - Theta));
          end surfaceTension;

          annotation (Documentation(info="<html><h4>Package description</h4>
          <h4>Package contents</h4>
          <ul>
          <li>Function <strong>visc_dTp</strong> implements a function to compute the industrial formulation of the
          dynamic viscosity of water as a function of density and temperature.
          The details are described in the document <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/visc.pdf\">visc.pdf</a>.</li>
          <li>Function <strong>cond_dTp</strong> implements a function to compute  the industrial formulation of the thermal conductivity of water as
          a function of density, temperature and pressure. <strong>Important note</strong>: Obviously only two of the three
          inputs are really needed, but using three inputs speeds up the computation and the three variables are known in most models anyways.
          The inputs d,T and p have to be consistent.
          The details are described in the document <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/surf.pdf\">surf.pdf</a>.</li>
          <li>Function <strong>surfaceTension</strong> implements a function to compute the surface tension between vapour
          and liquid water as a function of temperature.
          The details are described in the document <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/thcond.pdf\">thcond.pdf</a>.</li>
          </ul>
          <h4>Version Info and Revision history
          </h4>
          <ul>
          <li>First implemented: <em>October, 2002</em>
          by Hubertus Tummescheit
          </li>
          </ul>
          <address>Authors: Hubertus Tummescheit and Jonas Eborn<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
          </address>
          <ul>
          <li>Initial version: October 2002</li>
          </ul>
          </html>"));
        end Transport;

        package Isentropic
          "Functions for calculating the isentropic enthalpy from pressure p and specific entropy s"

          extends Modelica.Icons.FunctionsPackage;

          function hofpT1
            "Intermediate function for isentropic specific enthalpy in region 1"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real[13] o "Vector of auxiliary variables";
            Real pi1 "Dimensionless pressure";
            Real tau "Dimensionless temperature";
            Real tau1 "Dimensionless temperature";
          algorithm
            tau := data.TSTAR1/T;
            pi1 := 7.1 - p/data.PSTAR1;
            assert(p > triple.ptriple,
              "IF97 medium function hofpT1 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            tau1 := -1.222 + tau;
            o[1] := tau1*tau1;
            o[2] := o[1]*tau1;
            o[3] := o[1]*o[1];
            o[4] := o[3]*o[3];
            o[5] := o[1]*o[4];
            o[6] := o[1]*o[3];
            o[7] := o[3]*tau1;
            o[8] := o[3]*o[4];
            o[9] := pi1*pi1;
            o[10] := o[9]*o[9];
            o[11] := o[10]*o[10];
            o[12] := o[4]*o[4];
            o[13] := o[12]*o[12];

            h := data.RH2O*T*tau*(pi1*((-0.00254871721114236 + o[1]*(
              0.00424944110961118 + (0.018990068218419 + (-0.021841717175414 -
              0.00015851507390979*o[1])*o[1])*o[6]))/o[5] + pi1*((
              0.00141552963219801 + o[3]*(0.000047661393906987 + o[1]*(-0.0000132425535992538
               - 1.2358149370591e-14*o[1]*o[3]*o[4])))/o[3] + pi1*((
              0.000126718579380216 - 5.11230768720618e-9*o[5])/o[7] + pi1*((
              0.000011212640954 + o[2]*(1.30342445791202e-6 - 1.4341729937924e-12*o[
              8]))/o[6] + pi1*(o[9]*pi1*((1.40077319158051e-8 + 1.04549227383804e-9
              *o[7])/o[8] + o[10]*o[11]*pi1*(1.9941018075704e-17/(o[1]*o[12]*o[3]*o[
              4]) + o[9]*(-4.48827542684151e-19/o[13] + o[10]*o[9]*(pi1*(
              4.65957282962769e-22/(o[13]*o[4]) + pi1*((3.83502057899078e-24*pi1)/(
              o[1]*o[13]*o[4]) - 7.2912378325616e-23/(o[13]*o[4]*tau1))) -
              1.00075970318621e-21/(o[1]*o[13]*o[3]*tau1))))) + 3.24135974880936e-6
              /(o[4]*tau1)))))) + (-0.29265942426334 + tau1*(0.84548187169114 + o[1]
              *(3.3855169168385 + tau1*(-1.91583926775744 + tau1*(0.47316115539684
               + (-0.066465668798004 + 0.0040607314991784*tau1)*tau1)))))/o[2]);
          end hofpT1;

          function handsofpT1
            "Special function for specific enthalpy and specific entropy in region 1"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real[28] o "Vector of auxiliary variables";
            Real pi1 "Dimensionless pressure";
            Real tau "Dimensionless temperature";
            Real tau1 "Dimensionless temperature";
            Real g "Dimensionless Gibbs energy";
            Real gtau "Derivative of dimensionless Gibbs energy w.r.t. tau";
          algorithm
            assert(p > triple.ptriple,
              "IF97 medium function handsofpT1 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            tau := data.TSTAR1/T;
            pi1 := 7.1 - p/data.PSTAR1;
            tau1 := -1.222 + tau;
            o[1] := tau1*tau1;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[3]*tau1;
            o[5] := 1/o[4];
            o[6] := o[1]*o[2];
            o[7] := o[1]*tau1;
            o[8] := 1/o[7];
            o[9] := o[1]*o[2]*o[3];
            o[10] := 1/o[2];
            o[11] := o[2]*tau1;
            o[12] := 1/o[11];
            o[13] := o[2]*o[3];
            o[14] := pi1*pi1;
            o[15] := o[14]*pi1;
            o[16] := o[14]*o[14];
            o[17] := o[16]*o[16];
            o[18] := o[16]*o[17]*pi1;
            o[19] := o[14]*o[16];
            o[20] := o[3]*o[3];
            o[21] := o[20]*o[20];
            o[22] := o[21]*o[3]*tau1;
            o[23] := 1/o[22];
            o[24] := o[21]*o[3];
            o[25] := 1/o[24];
            o[26] := o[1]*o[2]*o[21]*tau1;
            o[27] := 1/o[26];
            o[28] := o[1]*o[3];

            g := pi1*(pi1*(pi1*(o[10]*(-0.000031679644845054 + o[2]*(-2.8270797985312e-6
               - 8.5205128120103e-10*o[6])) + pi1*(o[12]*(-2.2425281908e-6 + (-6.5171222895601e-7
               - 1.4341729937924e-13*o[13])*o[7]) + pi1*(-4.0516996860117e-7/o[3]
               + o[15]*(o[18]*(o[14]*(o[19]*(2.6335781662795e-23/(o[1]*o[2]*o[21])
               + pi1*(-1.1947622640071e-23*o[27] + pi1*(1.8228094581404e-24*o[25]
               - 9.3537087292458e-26*o[23]*pi1))) + 1.4478307828521e-20/(o[1]*o[2]*
              o[20]*o[3]*tau1)) - 6.8762131295531e-19/(o[2]*o[20]*o[3]*tau1)) + (-1.2734301741641e-9
               - 1.7424871230634e-10*o[11])/(o[1]*o[3]*tau1))))) + o[8]*(-0.00047184321073267
               + o[7]*(-0.00030001780793026 + (0.000047661393906987 + o[1]*(-4.4141845330846e-6
               - 7.2694996297594e-16*o[9]))*tau1))) + o[5]*(0.00028319080123804 + o[
              1]*(-0.00060706301565874 + o[6]*(-0.018990068218419 + tau1*(-0.032529748770505
               + (-0.021841717175414 - 0.00005283835796993*o[1])*tau1))))) + (
              0.14632971213167 + tau1*(-0.84548187169114 + tau1*(-3.756360367204 +
              tau1*(3.3855169168385 + tau1*(-0.95791963387872 + tau1*(
              0.15772038513228 + (-0.016616417199501 + 0.00081214629983568*tau1)*
              tau1))))))/o[1];

            gtau := pi1*((-0.00254871721114236 + o[1]*(0.00424944110961118 + (
              0.018990068218419 + (-0.021841717175414 - 0.00015851507390979*o[1])*o[
              1])*o[6]))/o[28] + pi1*(o[10]*(0.00141552963219801 + o[2]*(
              0.000047661393906987 + o[1]*(-0.0000132425535992538 -
              1.2358149370591e-14*o[9]))) + pi1*(o[12]*(0.000126718579380216 -
              5.11230768720618e-9*o[28]) + pi1*((0.000011212640954 + (
              1.30342445791202e-6 - 1.4341729937924e-12*o[13])*o[7])/o[6] + pi1*(
              3.24135974880936e-6*o[5] + o[15]*((1.40077319158051e-8 +
              1.04549227383804e-9*o[11])/o[13] + o[18]*(1.9941018075704e-17/(o[1]*o[
              2]*o[20]*o[3]) + o[14]*(-4.48827542684151e-19/o[21] + o[19]*(-1.00075970318621e-21
              *o[27] + pi1*(4.65957282962769e-22*o[25] + pi1*(-7.2912378325616e-23*
              o[23] + (3.83502057899078e-24*pi1)/(o[1]*o[21]*o[3])))))))))))) + o[8]
              *(-0.29265942426334 + tau1*(0.84548187169114 + o[1]*(3.3855169168385
               + tau1*(-1.91583926775744 + tau1*(0.47316115539684 + (-0.066465668798004
               + 0.0040607314991784*tau1)*tau1)))));

            h := data.RH2O*T*tau*gtau;
            s := data.RH2O*(tau*gtau - g);
          end handsofpT1;

          function hofps1 "Function for isentropic specific enthalpy in region 1"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            SI.Temperature T "Temperature (K)";
          algorithm
            T := Basic.tps1(p, s);
            h := hofpT1(p, T);
          end hofps1;

          // for isentropic specific enthalpy get T(p,s), then use this
          function hofpT2
            "Intermediate function for isentropic specific enthalpy in region 2"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real[16] o "Vector of auxiliary variables";
            Real pi "Dimensionless pressure";
            Real tau "Dimensionless temperature";
            Real tau2 "Dimensionless temperature";
          algorithm
            assert(p > triple.ptriple,
              "IF97 medium function hofpT2 called with too low pressure\n" + "p = "
               + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            pi := p/data.PSTAR2;
            tau := data.TSTAR2/T;
            tau2 := -0.5 + tau;
            o[1] := tau*tau;
            o[2] := o[1]*o[1];
            o[3] := tau2*tau2;
            o[4] := o[3]*tau2;
            o[5] := o[3]*o[3];
            o[6] := o[5]*o[5];
            o[7] := o[6]*o[6];
            o[8] := o[5]*o[6]*o[7]*tau2;
            o[9] := o[3]*o[5];
            o[10] := o[5]*o[6]*tau2;
            o[11] := o[3]*o[7]*tau2;
            o[12] := o[3]*o[5]*o[6];
            o[13] := o[5]*o[6]*o[7];
            o[14] := pi*pi;
            o[15] := o[14]*o[14];
            o[16] := o[7]*o[7];

            h := data.RH2O*T*tau*((0.0280439559151 + tau*(-0.2858109552582 + tau*(
              1.2213149471784 + tau*(-2.848163942888 + tau*(4.38395111945 + o[1]*(
              10.08665568018 + (-0.5681726521544 + 0.06380539059921*tau)*tau))))))/
              (o[1]*o[2]) + pi*(-0.017834862292358 + tau2*(-0.09199202739273 + (-0.172743777250296
               - 0.30195167236758*o[4])*tau2) + pi*(-0.000033032641670203 + (-0.0003789797503263
               + o[3]*(-0.015757110897342 + o[4]*(-0.306581069554011 -
              0.000960283724907132*o[8])))*tau2 + pi*(4.3870667284435e-7 + o[3]*(-0.00009683303171571
               + o[4]*(-0.0090203547252888 - 1.42338887469272*o[8])) + pi*(-7.8847309559367e-10
               + (2.558143570457e-8 + 1.44676118155521e-6*tau2)*tau2 + pi*(
              0.0000160454534363627*o[9] + pi*((-5.0144299353183e-11 + o[10]*(-0.033874355714168
               - 836.35096769364*o[11]))*o[3] + pi*((-0.0000138839897890111 -
              0.973671060893475*o[12])*o[3]*o[6] + pi*((9.0049690883672e-11 -
              296.320827232793*o[13])*o[3]*o[5]*tau2 + pi*(2.57526266427144e-7*o[5]
              *o[6] + pi*(o[4]*(4.1627860840696e-19 + (-1.0234747095929e-12 -
              1.40254511313154e-8*o[5])*o[9]) + o[14]*o[15]*(o[13]*(-2.34560435076256e-9
               + 5.3465159397045*o[5]*o[7]*tau2) + o[14]*(-19.1874828272775*o[16]*o[
              6]*o[7] + o[14]*(o[11]*(1.78371690710842e-23 + (1.07202609066812e-11
               - 0.000201611844951398*o[10])*o[3]*o[5]*o[6]*tau2) + pi*(-1.24017662339842e-24
              *o[5]*o[7] + pi*(0.000200482822351322*o[16]*o[5]*o[7] + pi*(-4.97975748452559e-14
              *o[16]*o[3]*o[5] + o[6]*o[7]*(1.90027787547159e-27 + o[12]*(
              2.21658861403112e-15 - 0.0000547344301999018*o[3]*o[7]))*pi*tau2)))))))))))))))));
          end hofpT2;

          function handsofpT2
            "Function for isentropic specific enthalpy and specific entropy in region 2"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output SI.SpecificEnthalpy h "Specific enthalpy";
            output SI.SpecificEntropy s "Specific entropy";
          protected
            Real[22] o "Vector of auxiliary variables";
            Real pi "Dimensionless pressure";
            Real tau "Dimensionless temperature";
            Real tau2 "Dimensionless temperature";
            Real g "Dimensionless Gibbs energy";
            Real gtau "Derivative of dimensionless Gibbs energy w.r.t. tau";
          algorithm
            assert(p > triple.ptriple,
              "IF97 medium function handsofpT2 called with too low pressure\n" +
              "p = " + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            tau := data.TSTAR2/T;
            pi := p/data.PSTAR2;
            tau2 := tau - 0.5;
            o[1] := tau2*tau2;
            o[2] := o[1]*tau2;
            o[3] := o[1]*o[1];
            o[4] := o[3]*o[3];
            o[5] := o[4]*o[4];
            o[6] := o[3]*o[4]*o[5]*tau2;
            o[7] := o[1]*o[3]*tau2;
            o[8] := o[3]*o[4]*tau2;
            o[9] := o[1]*o[5]*tau2;
            o[10] := o[1]*o[3]*o[4];
            o[11] := o[3]*o[4]*o[5];
            o[12] := o[1]*o[3];
            o[13] := pi*pi;
            o[14] := o[13]*o[13];
            o[15] := o[13]*o[14];
            o[16] := o[3]*o[5]*tau2;
            o[17] := o[5]*o[5];
            o[18] := o[3]*o[5];
            o[19] := o[1]*o[3]*o[4]*tau2;
            o[20] := o[1]*o[5];
            o[21] := tau*tau;
            o[22] := o[21]*o[21];

            g := pi*(-0.0017731742473213 + tau2*(-0.017834862292358 + tau2*(-0.045996013696365
               + (-0.057581259083432 - 0.05032527872793*o[2])*tau2)) + pi*(tau2*(-0.000033032641670203
               + (-0.00018948987516315 + o[1]*(-0.0039392777243355 + o[2]*(-0.043797295650573
               - 0.000026674547914087*o[6])))*tau2) + pi*(2.0481737692309e-8 + (
              4.3870667284435e-7 + o[1]*(-0.00003227767723857 + o[2]*(-0.0015033924542148
               - 0.040668253562649*o[6])))*tau2 + pi*(tau2*(-7.8847309559367e-10 +
              (1.2790717852285e-8 + 4.8225372718507e-7*tau2)*tau2) + pi*(
              2.2922076337661e-6*o[7] + pi*(o[2]*(-1.6714766451061e-11 + o[8]*(-0.0021171472321355
               - 23.895741934104*o[9])) + pi*(-5.905956432427e-18 + o[1]*(-1.2621808899101e-6
               - 0.038946842435739*o[10])*o[4]*tau2 + pi*((1.1256211360459e-11 -
              8.2311340897998*o[11])*o[4] + pi*(1.9809712802088e-8*o[8] + pi*((
              1.0406965210174e-19 + o[12]*(-1.0234747095929e-13 -
              1.0018179379511e-9*o[3]))*o[3] + o[15]*((-8.0882908646985e-11 +
              0.10693031879409*o[16])*o[6] + o[13]*(-0.33662250574171*o[17]*o[4]*o[
              5]*tau2 + o[13]*(o[18]*(8.9185845355421e-25 + o[19]*(
              3.0629316876232e-13 - 4.2002467698208e-6*o[8])) + pi*(-5.9056029685639e-26
              *o[16] + pi*(3.7826947613457e-6*o[17]*o[3]*o[5]*tau2 + pi*(o[1]*(
              7.3087610595061e-29 + o[10]*(5.5414715350778e-17 - 9.436970724121e-7*
              o[20]))*o[4]*o[5]*pi - 1.2768608934681e-15*o[1]*o[17]*o[3]*tau2))))))))))))))))
               + (-0.00560879118302 + tau*(0.07145273881455 + tau*(-0.4071049823928
               + tau*(1.424081971444 + tau*(-4.38395111945 + tau*(-9.692768600217
               + tau*(10.08665568018 + (-0.2840863260772 + 0.02126846353307*tau)*
              tau) + Modelica.Math.log(pi)))))))/(o[22]*tau);

            gtau := (0.0280439559151 + tau*(-0.2858109552582 + tau*(1.2213149471784
               + tau*(-2.848163942888 + tau*(4.38395111945 + o[21]*(10.08665568018
               + (-0.5681726521544 + 0.06380539059921*tau)*tau))))))/(o[21]*o[22])
               + pi*(-0.017834862292358 + tau2*(-0.09199202739273 + (-0.172743777250296
               - 0.30195167236758*o[2])*tau2) + pi*(-0.000033032641670203 + (-0.0003789797503263
               + o[1]*(-0.015757110897342 + o[2]*(-0.306581069554011 -
              0.000960283724907132*o[6])))*tau2 + pi*(4.3870667284435e-7 + o[1]*(-0.00009683303171571
               + o[2]*(-0.0090203547252888 - 1.42338887469272*o[6])) + pi*(-7.8847309559367e-10
               + (2.558143570457e-8 + 1.44676118155521e-6*tau2)*tau2 + pi*(
              0.0000160454534363627*o[12] + pi*(o[1]*(-5.0144299353183e-11 + o[8]*(
              -0.033874355714168 - 836.35096769364*o[9])) + pi*(o[1]*(-0.0000138839897890111
               - 0.973671060893475*o[10])*o[4] + pi*((9.0049690883672e-11 -
              296.320827232793*o[11])*o[7] + pi*(2.57526266427144e-7*o[3]*o[4] + pi
              *(o[2]*(4.1627860840696e-19 + o[12]*(-1.0234747095929e-12 -
              1.40254511313154e-8*o[3])) + o[15]*(o[11]*(-2.34560435076256e-9 +
              5.3465159397045*o[16]) + o[13]*(-19.1874828272775*o[17]*o[4]*o[5] + o[
              13]*((1.78371690710842e-23 + o[19]*(1.07202609066812e-11 -
              0.000201611844951398*o[8]))*o[9] + pi*(-1.24017662339842e-24*o[18] +
              pi*(0.000200482822351322*o[17]*o[3]*o[5] + pi*(-4.97975748452559e-14*
              o[1]*o[17]*o[3] + (1.90027787547159e-27 + o[10]*(2.21658861403112e-15
               - 0.0000547344301999018*o[20]))*o[4]*o[5]*pi*tau2))))))))))))))));

            h := data.RH2O*T*tau*gtau;
            s := data.RH2O*(tau*gtau - g);
          end handsofpT2;

          function hofps2 "Function for isentropic specific enthalpy in region 2"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            SI.Temperature T "Temperature (K)";
          algorithm
            T := Basic.tps2(p, s);
            h := hofpT2(p, T);
          end hofps2;
          // region 3 extra functions

          // for isentropic specific enthalpy get (d,T) = f(p,s), then use this
          // which needs a bloody iteration, ...
          // this is one thing that needs to be done somehow, ...

          function hofdT3 "Function for isentropic specific enthalpy in region 3"

            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real delta;
            Real tau "Dimensionless temperature";
            Real[13] o "Vector of auxiliary variables";
            Real ftau "Derivative of dimensionless Helmholtz energy w.r.t. tau";
            Real fdelta "Derivative of dimensionless Helmholtz energy w.r.t. delta";
          algorithm
            tau := data.TCRIT/T;
            delta := d/data.DCRIT;
            o[1] := tau*tau;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            o[4] := o[3]*tau;
            o[5] := o[1]*o[2]*o[3]*tau;
            o[6] := o[2]*o[3];
            o[7] := o[1]*o[3];
            o[8] := o[3]*o[3];
            o[9] := o[1]*o[2]*o[8];
            o[10] := o[1]*o[2]*o[8]*tau;
            o[11] := o[3]*o[8];
            o[12] := o[3]*o[8]*tau;
            o[13] := o[1]*o[3]*o[8];

            ftau := 20.944396974307 + tau*(-15.3735415757432 + o[2]*tau*(
              18.3301634515678 + o[1]*tau*(-28.08078114862 + o[1]*(14.4640436358204
               - 0.194503669468755*o[1]*o[3]*tau)))) + delta*((-2.5308630955428 + o[
              2]*(-6.9146446840086 + (13.2781565976477 - 10.9153200808732*o[1])*o[4]))
              *tau + delta*(tau*(-1.70429417648412 + o[2]*(29.3833689251262 + (-21.3518320798755
               + (0.867251811341388 + 3.26518619032008*o[2])*o[5])*tau)) + delta*((
              2.779959913892 + o[1]*(-8.075966009428 + o[6]*(-0.131436219478341 -
              12.37496929108*o[7])))*tau + delta*((-0.88952870857478 + o[1]*(
              3.62288282878932 + 18.3358370228714*o[9]))*tau + delta*(
              0.10770512626332 + o[1]*(-0.98740869776862 - 13.2264761307011*o[10])
               + delta*((0.188521503330184 + 4.27343239646986*o[11])*tau + delta*(-0.027006744482696
              *tau + delta*(-0.385692979164272*o[12] + delta*(delta*(-0.00016557679795037
               - 0.00116802137560719*delta*o[12]) + (0.00115845907256168 +
              0.0840031522296486*o[11])*tau)))))))));

            fdelta := (1.0658070028513 + delta*(o[1]*(-1.2654315477714 + o[2]*(-1.1524407806681
               + (0.88521043984318 - 0.64207765181607*o[1])*o[4])) + delta*(
              0.76986920373342 + o[1]*(-1.70429417648412 + o[2]*(9.7944563083754 +
              (-6.100523451393 + (0.078841073758308 + 0.25116816848616*o[2])*o[5])*
              tau)) + delta*(-0.8399798909613 + o[1]*(4.169939870838 + o[1]*(-6.056974507071
               + o[6]*(-0.0246442911521889 - 1.42788107204769*o[7]))) + delta*(
              0.175936297894 + o[1]*(-1.77905741714956 + o[1]*(3.62288282878932 +
              2.82089800351868*o[9])) + delta*(delta*(-0.133052405238576 + o[1]*(
              0.565564509990552 + 0.98617670687766*o[11]) + delta*(-0.094523605689436
              *o[1] + delta*(-0.118674762819776*o[13] + delta*(o[1]*(
              0.00521306582652756 + 0.0290780142333399*o[11]) + delta*(
              0.00080964802996215 - 0.000494162889679965*delta*o[13] -
              0.0016557679795037*tau))))) + (0.5385256313166 + o[1]*(-1.6456811629477
               - 2.5435531020579*o[10]))*tau))))))/delta;

            h := data.RH2O*T*(tau*ftau + delta*fdelta);
          end hofdT3;

          function hofps3 "Isentropic specific enthalpy in region 3 h(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            SI.Density d "Density";
            SI.Temperature T "Temperature (K)";
            SI.Pressure delp=IterationData.DELP "Iteration accuracy";
            SI.SpecificEntropy dels=IterationData.DELS "Iteration accuracy";
            Integer error "Error if not 0";
          algorithm
            (d,T,error) := Inverses.dtofps3(
                    p=p,
                    s=s,
                    delp=delp,
                    dels=dels);
            h := hofdT3(d, T);
          end hofps3;

          function hofpsdt3
            "Isentropic specific enthalpy in region 3 h(p,s) with given good guess in d and T"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input SI.Density dguess
              "Good guess density, e.g., from adjacent volume";
            input SI.Temperature Tguess
              "Good guess temperature, e.g., from adjacent volume";
            input SI.Pressure delp=IterationData.DELP "Relative error in p";
            input SI.SpecificEntropy dels=IterationData.DELS "Relative error in s";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            SI.Density d "Density";
            SI.Temperature T "Temperature (K)";
            Integer error "Error flag";
          algorithm
            (d,T,error) := Inverses.dtofpsdt3(
                    p=p,
                    s=s,
                    dguess=dguess,
                    Tguess=Tguess,
                    delp=delp,
                    dels=dels);
            h := hofdT3(d, T);
          end hofpsdt3;

          function hofps4 "Isentropic specific enthalpy in region 4 h(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            SI.Temp_K Tsat "Saturation temperature";
            SI.MassFraction x "Dryness fraction";
            SI.SpecificEntropy sl "Saturated liquid specific entropy";
            SI.SpecificEntropy sv "Saturated vapour specific entropy";
            SI.SpecificEnthalpy hl "Saturated liquid specific enthalpy";
            SI.SpecificEnthalpy hv "Saturated vapour specific enthalpy";
          algorithm
            if (p <= data.PLIMIT4A) then
              Tsat := Basic.tsat(p);
              (hl,sl) := handsofpT1(p, Tsat);
              (hv,sv) := handsofpT2(p, Tsat);
            elseif (p < data.PCRIT) then
              sl := Regions.sl_p_R4b(p);
              sv := Regions.sv_p_R4b(p);
              hl := Regions.hl_p_R4b(p);
              hv := Regions.hv_p_R4b(p);
            else
              sl := Regions.sl_p_R4b(data.PCRIT);
              sv := Regions.sv_p_R4b(data.PCRIT);
              hl := Regions.hl_p_R4b(data.PCRIT);
              hv := Regions.hv_p_R4b(data.PCRIT);
            end if;
            x := max(min(if sl <> sv then (s - sl)/(sv - sl) else 1.0, 1.0), 0.0);
            h := hl + x*(hv - hl);
          end hofps4;

          function hofpT5 "Specific enthalpy in region 5 h(p,T)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            Real[4] o "Vector of auxiliary variables";
            Real tau "Dimensionless temperature";
            Real pi "Dimensionless pressure";
          algorithm
            tau := data.TSTAR5/T;
            pi := p/data.PSTAR5;
            assert(p > triple.ptriple,
              "IF97 medium function hofpT5 called with too low pressure\n" + "p = "
               + String(p) + " Pa <= " + String(triple.ptriple) +
              " Pa (triple point pressure)");
            o[1] := tau*tau;
            o[2] := o[1]*o[1];
            o[3] := pi*pi;
            o[4] := o[2]*o[2];
            h := data.RH2O*T*tau*(6.8540841634434 + 3.1161318213925/o[1] +
              0.074415446800398/o[2] - 0.0000357523455236121*o[3]*o[4] +
              0.0021774678714571*pi - 0.013782846269973*o[1]*pi +
              3.8757684869352e-7*o[1]*o[3]*pi - 0.73803069960666/(o[1]*tau) -
              0.65923253077834*tau);
          end hofpT5;

          function water_hisentropic
            "Isentropic specific enthalpy from p,s (preferably use water_hisentropic_dyn in dynamic simulation!)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input Integer phase=0
              "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            myMedia.Common.GibbsDerivs g "Derivatives of dimensionless Gibbs-function w.r.t. dimensionless pi and tau";
            myMedia.Common.HelmholtzDerivs f "Derivatives of dimensionless Helmholtz-function w.r.t. dimensionless delta and tau";
            Integer region(min=1, max=5) "IF97 region";
            Integer error "Error if not 0";
            SI.Temperature T "Temperature";
            SI.Density d "Density";
          algorithm
            region := Regions.region_ps(
                    p=p,
                    s=s,
                    phase=phase);
            if (region == 1) then
              h := hofps1(p, s);
            elseif (region == 2) then
              h := hofps2(p, s);
            elseif (region == 3) then
              (d,T,error) := Inverses.dtofps3(
                      p=p,
                      s=s,
                      delp=IterationData.DELP,
                      dels=IterationData.DELS);
              h := hofdT3(d, T);
            elseif (region == 4) then
              h := hofps4(p, s);
            elseif (region == 5) then
              (T,error) := Inverses.tofps5(
                      p=p,
                      s=s,
                      relds=IterationData.DELS);
              h := hofpT5(p, T);
            end if;
          end water_hisentropic;

          function water_hisentropic_dyn
            "Isentropic specific enthalpy from p,s and good guesses of d and T"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input SI.Density dguess
              "Good guess density, e.g., from adjacent volume";
            input SI.Temperature Tguess
              "Good guess temperature, e.g., from adjacent volume";
            input Integer phase "1 for one phase, 2 for two phase";
            output SI.SpecificEnthalpy h "Specific enthalpy";
          protected
            myMedia.Common.GibbsDerivs g "Derivatives of dimensionless Gibbs-function w.r.t. dimensionless pi and tau";
            myMedia.Common.HelmholtzDerivs f "Derivatives of dimensionless Helmholtz-function w.r.t. dimensionless delta and tau";
            Integer region(min=1, max=5) "IF97 region";
            Integer error "Error if not 0";
            SI.Temperature T "Temperature";
            SI.Density d "Density";
          algorithm
            region := Regions.region_ps(
                    p=p,
                    s=s,
                    phase=phase);
            if (region == 1) then
              h := hofps1(p, s);
            elseif (region == 2) then
              h := hofps2(p, s);
            elseif (region == 3) then
              h := hofpsdt3(
                      p=p,
                      s=s,
                      dguess=dguess,
                      Tguess=Tguess,
                      delp=IterationData.DELP,
                      dels=IterationData.DELS);
            elseif (region == 4) then
              h := hofps4(p, s);
            elseif (region == 5) then
              (T,error) := Inverses.tofpst5(
                      p=p,
                      s=s,
                      Tguess=Tguess,
                      relds=IterationData.DELS);
              h := hofpT5(p, T);
            end if;
          end water_hisentropic_dyn;

          annotation (Documentation(info="<html><h4>Package description</h4>
          <h4>Package contents</h4>
          <ul>
          <li>Function <strong>hofpT1</strong> computes h(p,T) in region 1.</li>
          <li>Function <strong>handsofpT1</strong> computes (s,h)=f(p,T) in region 1, needed for two-phase properties.</li>
          <li>Function <strong>hofps1</strong> computes h(p,s) in region 1.</li>
          <li>Function <strong>hofpT2</strong> computes h(p,T) in region 2.</li>
          <li>Function <strong>handsofpT2</strong> computes (s,h)=f(p,T) in region 2, needed for two-phase properties.</li>
          <li>Function <strong>hofps2</strong> computes h(p,s) in region 2.</li>
          <li>Function <strong>hofdT3</strong> computes h(d,T) in region 3.</li>
          <li>Function <strong>hofpsdt3</strong> computes h(p,s,dguess,Tguess) in region 3, where dguess and Tguess are initial guess
          values for the density and temperature consistent with p and s.</li>
          <li>Function <strong>hofps4</strong> computes h(p,s) in region 4.</li>
          <li>Function <strong>hofpT5</strong> computes h(p,T) in region 5.</li>
          <li>Function <strong>water_hisentropic</strong> computes h(p,s,phase) in all regions.
          The phase input is needed due to discontinuous derivatives at the phase boundary.</li>
          <li>Function <strong>water_hisentropic_dyn</strong> computes h(p,s,dguess,Tguess,phase) in all regions.
          The phase input is needed due to discontinuous derivatives at the phase boundary. Tguess and dguess are initial guess
          values for the density and temperature consistent with p and s. This function should be preferred in
          dynamic simulations where good guesses are often available.</li>
          </ul>
          <h4>Version Info and Revision history
          </h4>
          <ul>
          <li>First implemented: <em>July, 2000</em>
          by Hubertus Tummescheit
          </li>
          </ul>
          <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
          </address>
          <ul>
          <li>Initial version: July 2000</li>
          <li>Documentation added: December 2002</li>
          </ul>
          </html>"));
        end Isentropic;
        //work needed: (Pr,lam,eta) = f(d,T,p, region?)
        package Inverses "Efficient inverses for selected pairs of variables"

          extends Modelica.Icons.FunctionsPackage;

          //===================================================================
          //            Iterative version for some pairs/regions

          //===================================================================
          function fixdT "Region limits for inverse iteration in region 3"

            extends Modelica.Icons.Function;
            input SI.Density din "Density";
            input SI.Temperature Tin "Temperature";
            output SI.Density dout "Density";
            output SI.Temperature Tout "Temperature";
          protected
            SI.Temperature Tmin "Approximation of minimum temperature";
            SI.Temperature Tmax "Approximation of maximum temperature";
          algorithm
            if (din > 765.0) then
              dout := 765.0;
            elseif (din < 110.0) then
              dout := 110.0;
            else
              dout := din;
            end if;
            if (dout < 390.0) then
              Tmax := 554.3557377 + dout*0.809344262;
            else
              Tmax := 1116.85 - dout*0.632948717;
            end if;
            if (dout < data.DCRIT) then
              Tmin := data.TCRIT*(1.0 - (dout - data.DCRIT)*(dout - data.DCRIT)/
                1.0e6);
            else
              Tmin := data.TCRIT*(1.0 - (dout - data.DCRIT)*(dout - data.DCRIT)/
                1.44e6);
            end if;
            if (Tin < Tmin) then
              Tout := Tmin;
            elseif (Tin > Tmax) then
              Tout := Tmax;
            else
              Tout := Tin;
            end if;
          end fixdT;

          function dofp13 "Density at the boundary between regions 1 and 3"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.Density d "Density";
          protected
            Real p2 "Auxiliary variable";
            Real[3] o "Vector of auxiliary variables";
          algorithm
            p2 := 7.1 - 6.04960677555959e-8*p;
            o[1] := p2*p2;
            o[2] := o[1]*o[1];
            o[3] := o[2]*o[2];
            d := 57.4756752485113/(0.0737412153522555 + p2*(0.00145092247736023 +
              p2*(0.000102697173772229 + p2*(0.0000114683182476084 + p2*(
              1.99080616601101e-6 + o[1]*p2*(1.13217858826367e-8 + o[2]*o[3]*p2*(
              1.35549330686006e-17 + o[1]*(-3.11228834832975e-19 + o[1]*o[2]*(-7.02987180039442e-22
               + p2*(3.29199117056433e-22 + (-5.17859076694812e-23 +
              2.73712834080283e-24*p2)*p2))))))))));

          end dofp13;

          function dofp23 "Density at the boundary between regions 2 and 3"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output SI.Density d "Density";
          protected
            SI.Temperature T;
            Real[13] o "Vector of auxiliary variables";
            Real taug "Auxiliary variable";
            Real pi "Dimensionless pressure";
            Real gpi23
              "Derivative of g w.r.t. pi on the boundary between regions 2 and 3";
          algorithm
            pi := p/data.PSTAR2;
            T := 572.54459862746 + 31.3220101646784*(-13.91883977887 + pi)^0.5;
            o[1] := (-13.91883977887 + pi)^0.5;
            taug := -0.5 + 540.0/(572.54459862746 + 31.3220101646784*o[1]);
            o[2] := taug*taug;
            o[3] := o[2]*taug;
            o[4] := o[2]*o[2];
            o[5] := o[4]*o[4];
            o[6] := o[5]*o[5];
            o[7] := o[4]*o[5]*o[6]*taug;
            o[8] := o[4]*o[5]*taug;
            o[9] := o[2]*o[4]*o[5];
            o[10] := pi*pi;
            o[11] := o[10]*o[10];
            o[12] := o[4]*o[6]*taug;
            o[13] := o[6]*o[6];

            gpi23 := (1.0 + pi*(-0.0017731742473213 + taug*(-0.017834862292358 +
              taug*(-0.045996013696365 + (-0.057581259083432 - 0.05032527872793*o[3])
              *taug)) + pi*(taug*(-0.000066065283340406 + (-0.0003789797503263 + o[
              2]*(-0.007878555448671 + o[3]*(-0.087594591301146 -
              0.000053349095828174*o[7])))*taug) + pi*(6.1445213076927e-8 + (
              1.31612001853305e-6 + o[2]*(-0.00009683303171571 + o[3]*(-0.0045101773626444
               - 0.122004760687947*o[7])))*taug + pi*(taug*(-3.15389238237468e-9 +
              (5.116287140914e-8 + 1.92901490874028e-6*taug)*taug) + pi*(
              0.0000114610381688305*o[2]*o[4]*taug + pi*(o[3]*(-1.00288598706366e-10
               + o[8]*(-0.012702883392813 - 143.374451604624*o[2]*o[6]*taug)) + pi*
              (-4.1341695026989e-17 + o[2]*o[5]*(-8.8352662293707e-6 -
              0.272627897050173*o[9])*taug + pi*(o[5]*(9.0049690883672e-11 -
              65.8490727183984*o[4]*o[5]*o[6]) + pi*(1.78287415218792e-7*o[8] + pi*
              (o[4]*(1.0406965210174e-18 + o[2]*(-1.0234747095929e-12 -
              1.0018179379511e-8*o[4])*o[4]) + o[10]*o[11]*((-1.29412653835176e-9
               + 1.71088510070544*o[12])*o[7] + o[10]*(-6.05920510335078*o[13]*o[5]
              *o[6]*taug + o[10]*(o[4]*o[6]*(1.78371690710842e-23 + o[2]*o[4]*o[5]*
              (6.1258633752464e-12 - 0.000084004935396416*o[8])*taug) + pi*(-1.24017662339842e-24
              *o[12] + pi*(0.0000832192847496054*o[13]*o[4]*o[6]*taug + pi*(o[2]*o[
              5]*o[6]*(1.75410265428146e-27 + (1.32995316841867e-15 -
              0.0000226487297378904*o[2]*o[6])*o[9])*pi - 2.93678005497663e-14*o[13]
              *o[2]*o[4]*taug)))))))))))))))))/pi;
            d := p/(data.RH2O*T*pi*gpi23);
          end dofp23;

          function dofpt3 "Inverse iteration in region 3: (d) = f(p,T)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            input SI.Pressure delp "Iteration converged if (p-pre(p) < delp)";
            output SI.Density d "Density";
            output Integer error=0
              "Error flag: iteration failed if different from 0";
          protected
            SI.Density dguess "Guess density";
            Integer i=0 "Loop counter";
            Real dp "Pressure difference";
            SI.Density deld "Density step";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.NewtonDerivatives_pT nDerivs "Derivatives needed in Newton iteration";
            Boolean found=false "Flag for iteration success";
            Boolean supercritical "Flag, true for supercritical states";
            Boolean liquid "Flag, true for liquid states";
            SI.Density dmin "Lower density limit";
            SI.Density dmax "Upper density limit";
            SI.Temperature Tmax "Maximum temperature";
            Real damping "Damping factor";
          algorithm
            found := false;
            assert(p >= data.PLIMIT4A,
              "BaseIF97.dofpt3: function called outside of region 3! p too low\n"
               + "p = " + String(p) + " Pa < " + String(data.PLIMIT4A) + " Pa");
            assert(T >= data.TLIMIT1,
              "BaseIF97.dofpt3: function called outside of region 3! T too low\n"
               + "T = " + String(T) + " K < " + String(data.TLIMIT1) + " K");
            assert(p >= Regions.boundary23ofT(T),
              "BaseIF97.dofpt3: function called outside of region 3! T too high\n"
               + "p = " + String(p) + " Pa, T = " + String(T) + " K");
            supercritical := p > data.PCRIT;
            damping := if supercritical then 1.0 else 1.0;
            Tmax := Regions.boundary23ofp(p);
            if supercritical then
              dmax := dofp13(p);
              dmin := dofp23(p);
              dguess := dmax - (T - data.TLIMIT1)/(data.TLIMIT1 - Tmax)*(dmax -
                dmin);
              //this may need even further improvement!!
            else
              liquid := T < Basic.tsat(p);
              if liquid then
                dmax := dofp13(p);
                dmin := Regions.rhol_p_R4b(p);
                dguess := 1.1*Regions.rhol_T(T)
                  "Guess: 10 percent more than on the phase boundary for same T";
                //      dguess := 0.5*(dmax + dmin);
              else
                dmax := Regions.rhov_p_R4b(p);
                dmin := dofp23(p);
                dguess := 0.9*Regions.rhov_T(T)
                  "Guess: 10% less than on the phase boundary for same T";
                //      dguess := 0.5*(dmax + dmin);
              end if;
            end if;
            while ((i < IterationData.IMAX) and not found) loop
              d := dguess;
              f := Basic.f3(d, T);
              nDerivs := myMedia.Common.Helmholtz_pT(f);
              dp := nDerivs.p - p;
              if (abs(dp/p) <= delp) then
                found := true;
              end if;
              deld := dp/nDerivs.pd*damping;
              // Can be used for debugging in Dymola: not a standard function
              //          LogVariable(deld);
              d := d - deld;
              if d > dmin and d < dmax then
                dguess := d;
              else
                if d > dmax then
                  dguess := dmax - sqrt(Modelica.Constants.eps);
                  // put it on the correct spot just inside the boundary here instead
                else
                  dguess := dmin + sqrt(Modelica.Constants.eps);
                end if;
              end if;
              i := i + 1;
            end while;
            if not found then
              error := 1;
            end if;
            assert(error <> 1, "Error in inverse function dofpt3: iteration failed");
          end dofpt3;

          // for all iteration functions: project to boundaries possible
          // if p is input. Step 1 get dofpt_efficient(p,T) at boundary
          // for T, use boundary itself if off limits, for d a bit inside

          function dtofph3 "Inverse iteration in region 3: (d,T) = f(p,h)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input SI.Pressure delp "Iteration accuracy";
            input SI.SpecificEnthalpy delh "Iteration accuracy";
            output SI.Density d "Density";
            output SI.Temperature T "Temperature (K)";
            output Integer error "Error flag: iteration failed if different from 0";
          protected
            SI.Temperature Tguess "Initial temperature";
            SI.Density dguess "Initial density";
            Integer i "Iteration counter";
            Real dh "Newton-error in h-direction";
            Real dp "Newton-error in p-direction";
            Real det "Determinant of directional derivatives";
            Real deld "Newton-step in d-direction";
            Real delt "Newton-step in T-direction";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.NewtonDerivatives_ph nDerivs "Derivatives needed in Newton iteration";
            Boolean found=false "Flag for iteration success";
            Integer subregion "1 for subregion 3a, 2 for subregion 3b";
          algorithm
            if p < data.PCRIT then
              // allow a 10 J margin inside the (well approximated) phase boundary
              subregion := if h < (Regions.hl_p(p) + 10.0) then 1 else if h > (
                Regions.hv_p(p) - 10.0) then 2 else 0;
              assert(subregion <> 0,
                "Inverse iteration of dt from ph called in 2 phase region: this can not work");
            else
              //supercritical
              subregion := if h < Basic.h3ab_p(p) then 1 else 2;
            end if;
            T := if subregion == 1 then Basic.T3a_ph(p, h) else Basic.T3b_ph(p, h);
            d := if subregion == 1 then 1/Basic.v3a_ph(p, h) else 1/Basic.v3b_ph(p,
              h);
            i := 0;
            error := 0;
            while ((i < IterationData.IMAX) and not found) loop
              f := Basic.f3(d, T);
              nDerivs := myMedia.Common.Helmholtz_ph(f);
              dh := nDerivs.h - h;
              dp := nDerivs.p - p;
              if ((abs(dh/h) <= delh) and (abs(dp/p) <= delp)) then
                found := true;
              end if;
              det := nDerivs.ht*nDerivs.pd - nDerivs.pt*nDerivs.hd;
              delt := (nDerivs.pd*dh - nDerivs.hd*dp)/det;
              deld := (nDerivs.ht*dp - nDerivs.pt*dh)/det;
              T := T - delt;
              d := d - deld;
              dguess := d;
              Tguess := T;
              i := i + 1;
              (d,T) := fixdT(dguess, Tguess);
            end while;
            if not found then
              error := 1;
            end if;
            assert(error <> 1,
              "Error in inverse function dtofph3: iteration failed");
          end dtofph3;

          function dtofps3 "Inverse iteration in region 3: (d,T) = f(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input SI.Pressure delp "Iteration accuracy";
            input SI.SpecificEntropy dels "Iteration accuracy";
            output SI.Density d "Density";
            output SI.Temperature T "Temperature (K)";
            output Integer error "Error flag: iteration failed if different from 0";
          protected
            SI.Temperature Tguess "Initial temperature";
            SI.Density dguess "Initial density";
            Integer i "Iteration counter";
            Real ds "Newton-error in s-direction";
            Real dp "Newton-error in p-direction";
            Real det "Determinant of directional derivatives";
            Real deld "Newton-step in d-direction";
            Real delt "Newton-step in T-direction";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.NewtonDerivatives_ps nDerivs "Derivatives needed in Newton iteration";
            Boolean found "Flag for iteration success";
            Integer subregion "1 for subregion 3a, 2 for subregion 3b";
          algorithm
            i := 0;
            error := 0;
            found := false;
            if p < data.PCRIT then
              // allow a 1 J/K margin inside the (well approximated) phase boundary
              subregion := if s < (Regions.sl_p(p) + 10.0) then 1 else if s > (
                Regions.sv_p(p) - 10.0) then 2 else 0;
              assert(subregion <> 0,
                "Inverse iteration of dt from ps called in 2 phase region: this is illegal!");
            else
              subregion := if s < data.SCRIT then 1 else 2;
            end if;
            T := if subregion == 1 then Basic.T3a_ps(p, s) else Basic.T3b_ps(p, s);
            d := if subregion == 1 then 1/Basic.v3a_ps(p, s) else 1/Basic.v3b_ps(p,
              s);
            while ((i < IterationData.IMAX) and not found) loop
              f := Basic.f3(d, T);
              nDerivs := myMedia.Common.Helmholtz_ps(f);
              ds := nDerivs.s - s;
              dp := nDerivs.p - p;
              if ((abs(ds/s) <= dels) and (abs(dp/p) <= delp)) then
                found := true;
              end if;
              det := nDerivs.st*nDerivs.pd - nDerivs.pt*nDerivs.sd;
              delt := (nDerivs.pd*ds - nDerivs.sd*dp)/det;
              deld := (nDerivs.st*dp - nDerivs.pt*ds)/det;
              T := T - delt;
              d := d - deld;
              dguess := d;
              Tguess := T;
              i := i + 1;
              (d,T) := fixdT(dguess, Tguess);
            end while;
            if not found then
              error := 1;
            end if;
            assert(error <> 1,
              "Error in inverse function dtofps3: iteration failed");
          end dtofps3;

          function dtofpsdt3 "Inverse iteration in region 3: (d,T) = f(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input SI.Density dguess "Guess density, e.g., from adjacent volume";
            input SI.Temperature Tguess
              "Guess temperature, e.g., from adjacent volume";
            input SI.Pressure delp "Iteration accuracy";
            input SI.SpecificEntropy dels "Iteration accuracy";
            output SI.Density d "Density";
            output SI.Temperature T "Temperature (K)";
            output Integer error "Error flag: iteration failed if different from 0";
          protected
            Integer i "Iteration counter";
            Real ds "Newton-error in s-direction";
            Real dp "Newton-error in p-direction";
            Real det "Determinant of directional derivatives";
            Real deld "Newton-step in d-direction";
            Real delt "Newton-step in T-direction";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.NewtonDerivatives_ps nDerivs "Derivatives needed in Newton iteration";
            Boolean found "Flag for iteration success";
            SI.Density diter "Density";
            SI.Temperature Titer "Temperature (K)";
          algorithm
            i := 0;
            error := 0;
            found := false;
            (diter,Titer) := fixdT(dguess, Tguess);
            while ((i < IterationData.IMAX) and not found) loop
              (d,T) := fixdT(diter, Titer);
              f := Basic.f3(d, T);
              nDerivs := myMedia.Common.Helmholtz_ps(f);
              ds := nDerivs.s - s;
              dp := nDerivs.p - p;
              if ((abs(ds/s) <= dels) and (abs(dp/p) <= delp)) then
                found := true;
              end if;
              det := nDerivs.st*nDerivs.pd - nDerivs.pt*nDerivs.sd;
              delt := (nDerivs.pd*ds - nDerivs.sd*dp)/det;
              deld := (nDerivs.st*dp - nDerivs.pt*ds)/det;
              T := T - delt;
              d := d - deld;
              diter := d;
              Titer := T;
              i := i + 1;
            end while;
            if not found then
              error := 1;
            end if;
            assert(error <> 1,
              "Error in inverse function dtofpsdt3: iteration failed");
          end dtofpsdt3;

          function pofdt125 "Inverse iteration in region 1,2 and 5: p = g(d,T)"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            input SI.Pressure reldd "Relative iteration accuracy of density";
            input Integer region
              "Region in IAPWS/IF97 in which inverse should be calculated";
            output SI.Pressure p "Pressure";
            output Integer error "Error flag: iteration failed if different from 0";
          protected
            Integer i "Counter for while-loop";
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            Boolean found "Flag if iteration has been successful";
            Real dd
              "Difference between density for guessed p and the current density";
            Real delp "Step in p in Newton-iteration";
            Real relerr "Relative error in d";
            SI.Pressure pguess1=1.0e6 "Initial pressure guess in region 1";
            SI.Pressure pguess2 "Initial pressure guess in region 2";
            constant SI.Pressure pguess5=0.5e6 "Initial pressure guess in region 5";
          algorithm
            i := 0;
            error := 0;
            pguess2 := 42800*d;
            found := false;
            if region == 1 then
              p := pguess1;
            elseif region == 2 then
              p := pguess2;
            else
              p := pguess5;
            end if;
            while ((i < IterationData.IMAX) and not found) loop
              if region == 1 then
                g := Basic.g1(p, T);
              elseif region == 2 then
                g := Basic.g2(p, T);
              else
                g := Basic.g5(p, T);
              end if;
              dd := p/(data.RH2O*T*g.pi*g.gpi) - d;
              relerr := dd/d;
              if (abs(relerr) < reldd) then
                found := true;
              end if;
              delp := dd*(-p*p/(d*d*data.RH2O*T*g.pi*g.pi*g.gpipi));
              p := p - delp;
              i := i + 1;
              if not found then
                if p < triple.ptriple then
                  p := 2.0*triple.ptriple;
                end if;
                if p > data.PLIMIT1 then
                  p := 0.95*data.PLIMIT1;
                end if;
              end if;
            end while;

            // print("i = " + i2s(i) + ", p = " + r2s(p/1.0e5) + ", delp = " + r2s(delp*1.0e-5) + "\n");
            if not found then
              error := 1;
            end if;
            assert(error <> 1,
              "Error in inverse function pofdt125: iteration failed");
          end pofdt125;

          function tofph5 "Inverse iteration in region 5: (p,T) = f(p,h)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            input SI.SpecificEnthalpy reldh "Iteration accuracy";
            output SI.Temperature T "Temperature (K)";
            output Integer error "Error flag: iteration failed if different from 0";

          protected
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            SI.SpecificEnthalpy proh "H for current guess in T";
            constant SI.Temperature Tguess=1500 "Initial temperature";
            Integer i "Iteration counter";
            Real relerr "Relative error in h";
            Real dh "Newton-error in h-direction";
            Real dT "Newton-step in T-direction";
            Boolean found "Flag for iteration success";
          algorithm
            i := 0;
            error := 0;
            T := Tguess;
            found := false;
            while ((i < IterationData.IMAX) and not found) loop
              g := Basic.g5(p, T);
              proh := data.RH2O*T*g.tau*g.gtau;
              dh := proh - h;
              relerr := dh/h;
              if (abs(relerr) < reldh) then
                found := true;
              end if;
              dT := dh/(-data.RH2O*g.tau*g.tau*g.gtautau);
              T := T - dT;
              i := i + 1;
            end while;
            if not found then
              error := 1;
            end if;
            assert(error <> 1, "Error in inverse function tofph5: iteration failed");
          end tofph5;

          function tofps5 "Inverse iteration in region 5: (p,T) = f(p,s)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input SI.SpecificEnthalpy relds "Iteration accuracy";
            output SI.Temperature T "Temperature (K)";
            output Integer error "Error flag: iteration failed if different from 0";

          protected
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            SI.SpecificEntropy pros "S for current guess in T";
            parameter SI.Temperature Tguess=1500 "Initial temperature";
            Integer i "Iteration counter";
            Real relerr "Relative error in s";
            Real ds "Newton-error in s-direction";
            Real dT "Newton-step in T-direction";
            Boolean found "Flag for iteration success";
          algorithm
            i := 0;
            error := 0;
            T := Tguess;
            found := false;
            while ((i < IterationData.IMAX) and not found) loop
              g := Basic.g5(p, T);
              pros := data.RH2O*(g.tau*g.gtau - g.g);
              ds := pros - s;
              relerr := ds/s;
              if (abs(relerr) < relds) then
                found := true;
              end if;
              dT := ds*T/(-data.RH2O*g.tau*g.tau*g.gtautau);
              T := T - dT;
              i := i + 1;
            end while;
            if not found then
              error := 1;
            end if;
            assert(error <> 1, "Error in inverse function tofps5: iteration failed");
          end tofps5;

          function tofpst5 "Inverse iteration in region 5: (p,T) = f(p,s)"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEntropy s "Specific entropy";
            input SI.Temperature Tguess
              "Guess temperature, e.g., from adjacent volume";
            input SI.SpecificEntropy relds "Iteration accuracy";
            output SI.Temperature T "Temperature (K)";
            output Integer error "Error flag: iteration failed if different from 0";

          protected
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            SI.SpecificEntropy pros "S for current guess in T";
            Integer i "Iteration counter";
            Real relerr "Relative error in s";
            Real ds "Newton-error in s-direction";
            Real dT "Newton-step in T-direction";
            Boolean found "Flag for iteration success";
          algorithm
            i := 0;
            error := 0;
            T := Tguess;
            found := false;
            while ((i < IterationData.IMAX) and not found) loop
              g := Basic.g5(p, T);
              pros := data.RH2O*(g.tau*g.gtau - g.g);
              ds := pros - s;
              relerr := ds/s;
              if (abs(relerr) < relds) then
                found := true;
              end if;
              dT := ds*T/(-data.RH2O*g.tau*g.tau*g.gtautau);
              T := T - dT;
              i := i + 1;
            end while;
            if not found then
              error := 1;
            end if;
            assert(error <> 1,
              "Error in inverse function tofpst5: iteration failed");
          end tofpst5;

          annotation (Documentation(info="<html><h4>Package description</h4>
          <h4>Package contents</h4>
          <ul>
          <li>Function <strong>fixdT</strong> constrains density and temperature to allowed region</li>
          <li>Function <strong>dofp13</strong> computes d as a function of p at boundary between regions 1 and 3</li>
          <li>Function <strong>dofp23</strong> computes d as a function of p at boundary between regions 2 and 3</li>
          <li>Function <strong>dofpt3</strong> iteration to compute d as a function of p and T in region 3</li>
          <li>Function <strong>dtofph3</strong> iteration to compute d and T as a function of p and h in region 3</li>
          <li>Function <strong>dtofps3</strong> iteration to compute d and T as a function of p and s in region 3</li>
          <li>Function <strong>dtofpsdt3</strong> iteration to compute d and T as a function of p and s in region 3,
          with initial guesses</li>
          <li>Function <strong>pofdt125</strong> iteration to compute p as a function of p and T in regions 1, 2 and 5</li>
          <li>Function <strong>tofph5</strong> iteration to compute T as a function of p and h in region 5</li>
          <li>Function <strong>tofps5</strong> iteration to compute T as a function of p and s in region 5</li>
          <li>Function <strong>tofpst5</strong> iteration to compute T as a function of p and s in region 5, with initial guess in T</li>
          </ul>
          <h4>Version Info and Revision history
          </h4>
          <ul>
          <li>First implemented: <em>July, 2000</em>
          by Hubertus Tummescheit
          </li>
          </ul>
          <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
          </address>
          <ul>
          <li>Initial version: July 2000</li>
          <li>Documentation added: December 2002</li>
          </ul>
          </html>"));
        end Inverses;

        package ByRegion "Simple explicit functions for one region only"

          extends Modelica.Icons.FunctionsPackage;
          function waterR1_pT "Standard properties for region 1, (p,T) as inputs"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_pT pro "Thermodynamic property collection";

          protected
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          algorithm
            g := Basic.g1(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_pT(g);
          end waterR1_pT;

          function waterR2_pT "Standard properties for region 2, (p,T) as inputs"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_pT pro "Thermodynamic property collection";
          protected
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          algorithm
            g := Basic.g2(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_pT(g);
          end waterR2_pT;

          function waterR3_dT "Standard properties for region 3, (d,T) as inputs"
            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature (K)";
            output Common.ThermoFluidSpecial.ThermoProperties_dT pro
              "Thermodynamic property collection";
          protected
            Common.HelmholtzDerivs f
              "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          algorithm
            f := Basic.f3(d, T);
            pro := myMedia.Common.ThermoFluidSpecial.helmholtzToProps_dT(f);
            assert(pro.p <= 100.0e6,
              "IF97 medium function waterR3_dT: the input pressure (= " + String(
              pro.p) + " Pa) is higher than 100 Mpa");
          end waterR3_dT;

          function waterR5_pT "Standard properties for region 5, (p,T) as inputs"
            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.Temperature T "Temperature (K)";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_pT pro "Thermodynamic property collection";
          protected
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          algorithm
            g := Basic.g5(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_pT(g);
          end waterR5_pT;
          annotation (Documentation(info="<html><h4>Package description</h4>
          <p>Package ByRegion provides fast forward calls for dynamic property calculation records for all
          one phase regions of IAPWS/IF97
          </p>
          <h4>Package contents</h4>
          <ul>
          <li>Function <strong>waterR1_pT</strong> computes dynamic properties for region 1 using  (p,T) as inputs</li>
          <li>Function <strong>waterR2_pT</strong> computes dynamic properties for region 2 using  (p,T) as inputs</li>
          <li>Function <strong>waterR3_dT</strong> computes dynamic properties for region 3 using  (d,T) as inputs</li>
          <li>Function <strong>waterR5_pT</strong> computes dynamic properties for region 5 using  (p,T) as inputs</li>
          </ul>
          <h4>Version Info and Revision history
          </h4>
          <ul>
          <li>First implemented: <em>July, 2000</em>
          by Hubertus Tummescheit
          </li>
          </ul>
          <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
          </address>
          <ul>
          <li>Initial version: July 2000</li>
          <li>Documented and re-organized: January 2003</li>
          </ul>
          </html>"));
        end ByRegion;

        package TwoPhase
          "Steam properties in the two-phase region and on the phase boundaries"

          extends Modelica.Icons.FunctionsPackage;

          function waterLiq_p "Properties on the liquid phase boundary of region 4"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output myMedia.Common.PhaseBoundaryProperties liq "Liquid thermodynamic property collection";
          protected
            SI.Temperature Tsat "Saturation temperature";
            Real dpT "Derivative of saturation pressure w.r.t. temperature";
            SI.Density dl "Liquid density";
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          algorithm
            Tsat := Basic.tsat(p);
            dpT := Basic.dptofT(Tsat);
            if p < data.PLIMIT4A then
              g := Basic.g1(p, Tsat);
              liq := myMedia.Common.gibbsToBoundaryProps(g);
            else
              dl := Regions.rhol_p_R4b(p);
              f := Basic.f3(dl, Tsat);
              liq := myMedia.Common.helmholtzToBoundaryProps(f);
            end if;
          end waterLiq_p;

          function waterVap_p "Properties on the vapour phase boundary of region 4"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            output myMedia.Common.PhaseBoundaryProperties vap "Vapour thermodynamic property collection";
          protected
            SI.Temperature Tsat "Saturation temperature";
            Real dpT "Derivative of saturation pressure w.r.t. temperature";
            SI.Density dv "Vapour density";
            myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          algorithm
            Tsat := Basic.tsat(p);
            dpT := Basic.dptofT(Tsat);
            if p < data.PLIMIT4A then
              g := Basic.g2(p, Tsat);
              vap := myMedia.Common.gibbsToBoundaryProps(g);
            else
              dv := Regions.rhov_p_R4b(p);
              f := Basic.f3(dv, Tsat);
              vap := myMedia.Common.helmholtzToBoundaryProps(f);
            end if;
          end waterVap_p;

          function waterSat_ph
            "Water saturation properties in the 2-phase region (4) as f(p,h)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output myMedia.Common.SaturationProperties pro "Thermodynamic property collection";
          protected
            SI.Density dl "Liquid density";
            SI.Density dv "Vapour density";
            myMedia.Common.GibbsDerivs gl "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.GibbsDerivs gv "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.HelmholtzDerivs fl "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.HelmholtzDerivs fv "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          algorithm
            pro.h := h;
            pro.p := p;
            pro.T := Basic.tsat(p);
            pro.dpT := Basic.dptofT(pro.T);
            if p < data.PLIMIT4A then
              gl := Basic.g1(p, pro.T);
              gv := Basic.g2(p, pro.T);
              pro.liq := myMedia.Common.gibbsToBoundaryProps(gl);
              pro.vap := myMedia.Common.gibbsToBoundaryProps(gv);
            else
              dl := Regions.rhol_p_R4b(p);
              dv := Regions.rhov_p_R4b(p);
              fl := Basic.f3(dl, pro.T);
              fv := Basic.f3(dv, pro.T);
              pro.liq := myMedia.Common.helmholtzToBoundaryProps(fl);
              pro.vap := myMedia.Common.helmholtzToBoundaryProps(fv);
            end if;
            pro.x := if (h < pro.liq.h) then 0.0 else if (pro.vap.h <> pro.liq.h)
               then (h - pro.liq.h)/(pro.vap.h - pro.liq.h) else 1.0;
            pro.d := pro.liq.d*pro.vap.d/(pro.vap.d + pro.x*(pro.liq.d - pro.vap.d));
            pro.u := pro.x*pro.vap.u + (1 - pro.x)*pro.liq.u;
            pro.s := pro.x*pro.vap.s + (1 - pro.x)*pro.liq.s;
            pro.cp := Modelica.Constants.inf;
            pro.cv := myMedia.Common.cv2Phase(
                        pro.liq,
                        pro.vap,
                        pro.x,
                        pro.T,
                        p);
            pro.kappa := 1/(pro.d*p)*pro.dpT*pro.dpT*pro.T/pro.cv;
            pro.R := data.RH2O;
          end waterSat_ph;

          function waterR4_ph
            "Water/Steam properties in region 4 of IAPWS/IF97 (two-phase)"

            extends Modelica.Icons.Function;
            input SI.Pressure p "Pressure";
            input SI.SpecificEnthalpy h "Specific enthalpy";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_ph pro "Thermodynamic property collection";
          protected
            SI.Density dl "Liquid density";
            SI.Density dv "Vapour density";
            myMedia.Common.PhaseBoundaryProperties liq "Phase boundary property record";
            myMedia.Common.PhaseBoundaryProperties vap "Phase boundary property record";
            myMedia.Common.GibbsDerivs gl "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.GibbsDerivs gv "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.HelmholtzDerivs fl "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.HelmholtzDerivs fv "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            Real x "Dryness fraction";
            Real dpT "Derivative of saturation curve";
          algorithm
            pro.T := Basic.tsat(p);
            dpT := Basic.dptofT(pro.T);
            dl := Regions.rhol_p_R4b(p);
            dv := Regions.rhov_p_R4b(p);
            if p < data.PLIMIT4A then
              gl := Basic.g1(p, pro.T);
              gv := Basic.g2(p, pro.T);
              liq := myMedia.Common.gibbsToBoundaryProps(gl);
              vap := myMedia.Common.gibbsToBoundaryProps(gv);
            else
              fl := Basic.f3(dl, pro.T);
              fv := Basic.f3(dv, pro.T);
              liq := myMedia.Common.helmholtzToBoundaryProps(fl);
              vap := myMedia.Common.helmholtzToBoundaryProps(fv);
            end if;
            x := if (vap.h <> liq.h) then (h - liq.h)/(vap.h - liq.h) else 1.0;
            pro.d := liq.d*vap.d/(vap.d + x*(liq.d - vap.d));
            pro.u := x*vap.u + (1 - x)*liq.u;
            pro.s := x*vap.s + (1 - x)*liq.s;
            pro.cp := Modelica.Constants.inf;
            pro.cv := myMedia.Common.cv2Phase(
                        liq,
                        vap,
                        x,
                        pro.T,
                        p);
            pro.kappa := 1/(pro.d*p)*dpT*dpT*pro.T/pro.cv;
            pro.a := Modelica.Constants.inf;
            pro.R := data.RH2O;
            pro.ddph := pro.d*(pro.d*pro.cv/dpT + 1.0)/(dpT*pro.T);
            pro.ddhp := -pro.d*pro.d/(dpT*pro.T);
          end waterR4_ph;

          function waterR4_dT "Water properties in region 4 as function of d and T"

            extends Modelica.Icons.Function;
            input SI.Density d "Density";
            input SI.Temperature T "Temperature";
            output myMedia.Common.ThermoFluidSpecial.ThermoProperties_dT pro "Thermodynamic property collection";
          protected
            SI.Density dl "Liquid density";
            SI.Density dv "Vapour density";
            myMedia.Common.PhaseBoundaryProperties liq "Phase boundary property record";
            myMedia.Common.PhaseBoundaryProperties vap "Phase boundary property record";
            myMedia.Common.GibbsDerivs gl "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.GibbsDerivs gv "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
            myMedia.Common.HelmholtzDerivs fl "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            myMedia.Common.HelmholtzDerivs fv "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
            Real x "Dryness fraction";
            Real dpT "Derivative of saturation curve";
          algorithm
            pro.p := Basic.psat(T);
            dpT := Basic.dptofT(T);
            dl := Regions.rhol_p_R4b(pro.p);
            dv := Regions.rhov_p_R4b(pro.p);
            if pro.p < data.PLIMIT4A then
              gl := Basic.g1(pro.p, T);
              gv := Basic.g2(pro.p, T);
              liq := myMedia.Common.gibbsToBoundaryProps(gl);
              vap := myMedia.Common.gibbsToBoundaryProps(gv);
            else
              fl := Basic.f3(dl, T);
              fv := Basic.f3(dv, T);
              liq := myMedia.Common.helmholtzToBoundaryProps(fl);
              vap := myMedia.Common.helmholtzToBoundaryProps(fv);
            end if;
            x := if (vap.d <> liq.d) then (1/d - 1/liq.d)/(1/vap.d - 1/liq.d) else
              1.0;
            pro.u := x*vap.u + (1 - x)*liq.u;
            pro.h := x*vap.h + (1 - x)*liq.h;
            pro.cp := Modelica.Constants.inf;
            pro.cv := myMedia.Common.cv2Phase(
                        liq,
                        vap,
                        x,
                        T,
                        pro.p);
            pro.kappa := 1/(d*pro.p)*dpT*dpT*T/pro.cv;
            pro.a := Modelica.Constants.inf;
            pro.R := data.RH2O;
            pro.dudT := (pro.p - T*dpT)/(d*d);
          end waterR4_dT;
          annotation (Documentation(info="<html><h4>Package description</h4>
          <p>Package TwoPhase provides functions to compute the steam properties
          in the two-phase region and on the phase boundaries</p>
          <h4>Package contents</h4>
          <ul>
          <li>Function <strong>WaterLiq_p</strong> computes properties on the boiling boundary as a function of p</li>
          <li>Function <strong>WaterVap_p</strong> computes properties on the dew line boundary as a function of p</li>
          <li>Function <strong>WaterSat_ph</strong> computes properties on both phase boundaries and in the two
          phase region as a function of p</li>
          <li>Function <strong>WaterR4_ph</strong> computes dynamic simulation properties in region 4 with (p,h) as inputs</li>
          <li>Function <strong>WaterR4_dT</strong> computes dynamic simulation properties in region 4 with (d,T) as inputs</li>
          </ul>
          <h4>Version Info and Revision history
          </h4>
          <ul>
          <li>First implemented: <em>July, 2000</em>
          by Hubertus Tummescheit
          </li>
          </ul>
          <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
          </address>
          <ul>
          <li>Initial version: July 2000</li>
          <li>Documented and re-organized: January 2003</li>
          </ul>
          </html>"));
        end TwoPhase;

        function extraDerivs_ph
          "Function to calculate some extra thermophysical properties in regions 1, 2, 3 and 5 as f(p,h)"

          extends Modelica.Icons.Function;
          input SI.Pressure p "Pressure";
          input SI.SpecificEnthalpy h "Specific enthalpy";
          input Integer phase=0
            "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
          output myMedia.Common.ExtraDerivatives dpro "Thermodynamic property collection";
        protected
          SI.Density d "Density";
          SI.Temperature T "Temperature";
          Integer region "IF97 region";
          Integer error "Error flag";
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        algorithm
          assert(phase == 1,
            "ExtraDerivs_ph: properties are not implemented in 2 phase region");
          region := Regions.region_ph(
                p=p,
                h=h,
                phase=phase);
          if region == 1 then
            T := Basic.tph1(p, h);
            g := Basic.g1(p, T);
            dpro := myMedia.Common.gibbsToExtraDerivs(g);
          elseif region == 2 then
            T := Basic.tph2(p, h);
            g := Basic.g2(p, T);
            dpro := myMedia.Common.gibbsToExtraDerivs(g);
          elseif region == 3 then
            (d,T,error) := Inverses.dtofph3(
                  p=p,
                  h=h,
                  delp=1.0e-7,
                  delh=1.0e-6);
            f := Basic.f3(d, T);
            dpro := myMedia.Common.helmholtzToExtraDerivs(f);
          elseif region == 5 then
            // region assumed to be 5
            (T,error) := Inverses.tofph5(
                  p=p,
                  h=h,
                  reldh=1.0e-7);
            g := Basic.g5(p, T);
            dpro := myMedia.Common.gibbsToExtraDerivs(g);
          end if;
        end extraDerivs_ph;

        function extraDerivs_pT
          "Function to calculate some extra thermophysical properties in regions 1, 2, 3 and 5 as f(p,T)"

          extends Modelica.Icons.Function;
          input SI.Pressure p "Pressure";
          input SI.Temperature T "Temperature";
          output myMedia.Common.ExtraDerivatives dpro "Thermodynamic property collection";
        protected
          SI.Density d "Density";
          Integer region "IF97 region";
          Integer error "Error flag";
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        algorithm
          region := Regions.region_pT(p=p, T=T);
          if region == 1 then
            g := Basic.g1(p, T);
            dpro := myMedia.Common.gibbsToExtraDerivs(g);
          elseif region == 2 then
            g := Basic.g2(p, T);
            dpro := myMedia.Common.gibbsToExtraDerivs(g);
          elseif region == 3 then
            (d,error) := Inverses.dofpt3(
                  p=p,
                  T=T,
                  delp=1.0e-7);
            f := Basic.f3(d, T);
            dpro := myMedia.Common.helmholtzToExtraDerivs(f);
          elseif region == 5 then
            // region assumed to be 5
            g := Basic.g5(p, T);
            dpro := myMedia.Common.gibbsToExtraDerivs(g);
          end if;
        end extraDerivs_pT;

        annotation (Documentation(info="<html>
<style type=\"text/css\">
.nobr
{
white-space:nowrap;
}
</style>
    <h4>Version Info and Revision history</h4>
        <ul>
        <li>First implemented: <em>July, 2000</em>
        by Hubertus Tummescheit
        for the ThermoFluid Library with help from Jonas Eborn and Falko Jens Wagner
        </li>
      <li>Code reorganization, enhanced documentation, additional functions:   <em>December, 2002</em>
      by <a href=\"mailto:Hubertus.Tummescheit@modelon.se\">Hubertus Tummescheit</a> and moved to Modelica
      properties library.</li>
        </ul>
      <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
      </address>
        <p>In September 1997, the International Association for the Properties
        of Water and Steam (<a href=\"http://www.iapws.org\">IAPWS</a>) adopted a
        new formulation for the thermodynamic properties of water and steam for
        industrial use. This new industrial standard is called \"IAPWS Industrial
        Formulation for the Thermodynamic Properties of Water and Steam\" (IAPWS-IF97).
        The formulation IAPWS-IF97 replaces the previous industrial standard IFC-67.</p>
        <p>Based on this new formulation, a new steam table, titled \"<a href=\"http://www.springer.de/cgi-bin/search_book.pl?isbn=3-540-64339-7\">Properties of Water and Steam</a>\" by W. Wagner and A. Kruse, was published by
        the Springer-Verlag, Berlin - New-York - Tokyo in April 1998. This
        steam table, ref. <a href=\"#steamprop\">[1]</a> is bilingual (English /
        German) and contains a complete description of the equations of
        IAPWS-IF97. This reference is the authoritative source of information
        for this implementation. A mostly identical version has been published by the International
        Association for the Properties
        of Water and Steam (<a href=\"http://www.iapws.org\">IAPWS</a>) with permission granted to re-publish the
        information if credit is given to IAPWS. This document is distributed with this library as
        <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a>.
        In addition, the equations published by <a href=\"http://www.iapws.org\">IAPWS</a> for
        the transport properties dynamic viscosity (standards document: <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/visc.pdf\">visc.pdf</a>)
        and thermal conductivity (standards document: <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/thcond.pdf\">thcond.pdf</a>)
        and equations for the surface tension (standards document: <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/surf.pdf\">surf.pdf</a>)
        are also implemented in this library and included for reference.</p>
        <p>
        The functions in BaseIF97.mo are low level functions which should
        only be used in those exceptions when the standard user level
        functions in Water.mo do not contain the wanted properties.
     </p>
<p>Based on IAPWS-IF97, Modelica functions are available for calculating
the most common thermophysical properties (thermodynamic and transport
properties). The implementation requires part of the common medium
property infrastructure of the Modelica.Thermal.Properties library in the file
Common.mo. There are a few extensions from the version of IF97 as
documented in <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a> in order to improve performance for
dynamic simulations. Input variables for calculating the properties are
only implemented for a limited number of variable pairs which make sense as dynamic states: (p,h), (p,T), (p,s) and (d,T).
</p>
<hr size=3 width=\"70%\">
<h4><a name=\"regions\">1. Structure and Regions of IAPWS-IF97</a></h4>
<p>The IAPWS Industrial Formulation 1997 consists of
a set of equations for different regions which cover the following range
of validity:</p>
<table border=0 cellpadding=4>
<tr>
<td>273,15 K &lt; <em>T</em> &lt; 1073,15 K</td>
<td><em>p</em> &lt; 100 MPa</td>
</tr>
<tr>
<td>1073,15 K &lt; <em>T</em> &lt; 2273,15 K</td>
<td><em>p</em> &lt; 10 MPa</td>
</tr>
</table>
<p>
Figure 1 shows the 5 regions into which the entire range of validity of
IAPWS-IF97 is divided. The boundaries of the regions can be directly taken
from Fig. 1 except for the boundary between regions 2 and 3; this boundary,
which corresponds approximately to the isentropic line <span class=\"nobr\"><em>s</em> = 5.047 kJ kg
<sup>-1</sup>K<sup>-1</sup></span>, is defined
by a corresponding auxiliary equation. Both regions 1 and 2 are individually
covered by a fundamental equation for the specific Gibbs free energy <span class=\"nobr\"><em>g</em>( <em>p</em>,<em>T</em> )</span>, region 3 by a fundamental equation for the specific Helmholtz
free energy <span class=\"nobr\"><em>f </em>(<em> <font face=\"symbol\">r</font></em>,<em>T
</em>)</span>, and the saturation curve, corresponding to region 4, by a saturation-pressure
equation <span><em>p</em><sub>s</sub>( <em>T</em> )</span>. The high-temperature
region 5 is also covered by a <span class=\"nobr\"><em>g</em>( <em>p</em>,<em>T</em> )</span> equation. These
5 equations, shown in rectangular boxes in Fig. 1, form the so-called <em>basic
equations</em>.
</p>
<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
  <caption align=\"bottom\">Figure 1: Regions and equations of IAPWS-IF97</caption>
  <tr>
    <td>
    <img src=\"modelica://Modelica/Resources/Images/Media/Water/if97.png\" alt=\"Regions and equations of IAPWS-IF97\">
    </td>
  </tr>
</table>
<p>
In addition to these basic equations, so-called <em>backward
equations</em> are provided for regions 1, 2, and 4 in form of
<span class=\"nobr\"><em>T</em>( <em>p</em>,<em>h</em> )</span> and <span class=\"nobr\"><em>T</em>( <em>
p</em>,<em>s</em> )</span> for regions 1 and 2, and <span class=\"nobr\"><em>T</em><sub>s</sub>( <em>p</em> )</span> for region 4. These
backward equations, marked in grey in Fig. 1, were developed in such a
way that they are numerically very consistent with the corresponding
basic equation. Thus, properties as functions of&nbsp; <em>p</em>,<em>h
</em>and of&nbsp;<em> p</em>,<em>s </em>for regions 1 and 2, and of
<em>p</em> for region 4 can be calculated without any iteration. As a
result of this special concept for the development of the new
industrial standard IAPWS-IF97, the most important properties can be
calculated extremely quickly. All Modelica functions are optimized
with regard to short computing times.
</p>
<p>
The complete description of the individual equations of the new industrial
formulation IAPWS-IF97 is given in <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a>. Comprehensive information on
IAPWS-IF97 (requirements, concept, accuracy, consistency along region boundaries,
and the increase of computing speed in comparison with IFC-67, etc.) can
be taken from <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a> or [2].
</p>
<p>
<a name=\"steamprop\">[1]<em>Wagner, W., Kruse, A.</em> Properties of Water
and Steam / Zustandsgr&ouml;&szlig;en von Wasser und Wasserdampf / IAPWS-IF97.
Springer-Verlag, Berlin, 1998.</a>
</p>
<p>
[2] <em>Wagner, W., Cooper, J. R., Dittmann, A., Kijima,
J., Kretzschmar, H.-J., Kruse, A., Mare&#353; R., Oguchi, K., Sato, H., St&ouml;cker,
I., &#352;ifner, O., Takaishi, Y., Tanishita, I., Tr&uuml;benbach, J., and Willkommen,
Th.</em> The IAPWS Industrial Formulation 1997 for the Thermodynamic Properties
of Water and Steam. ASME Journal of Engineering for Gas Turbines and Power 122 (2000), 150 - 182.
</p>
<hr size=3 width=\"90%\">
<h4>2. Calculable Properties      </h4>
<table border=\"1\" cellpadding=\"2\" cellspacing=\"0\">
       <tbody>
       <tr>
       <td bgcolor=\"#cccccc\"><br>
      </td>
      <td bgcolor=\"#cccccc\"><strong>Common name</strong><br>
       </td>
       <td bgcolor=\"#cccccc\"><strong>Abbreviation</strong><br>
       </td>
       <td bgcolor=\"#cccccc\"><strong>Unit</strong><br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;1<br>
      </td>
      <td>Pressure</td>
       <td>p<br>
        </td>
       <td>Pa<br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;2<br>
      </td>
      <td>Temperature</td>
       <td>T<br>
       </td>
       <td>K<br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;3<br>
      </td>
      <td>Density</td>
        <td>d<br>
        </td>
       <td>kg/m<sup>3</sup><br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;4<br>
      </td>
      <td>Specific volume</td>
        <td>v<br>
        </td>
       <td>m<sup>3</sup>/kg<br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;5<br>
      </td>
      <td>Specific enthalpy</td>
       <td>h<br>
       </td>
       <td>J/kg<br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;6<br>
      </td>
      <td>Specific entropy</td>
       <td>s<br>
       </td>
       <td>J/(kg K)<br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;7<br>
      </td>
      <td>Specific internal energy<br>
       </td>
       <td>u<br>
       </td>
       <td>J/kg<br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;8<br>
      </td>
      <td>Specific isobaric heat capacity</td>
       <td>c<sub>p</sub><br>
       </td>
       <td>J/(kg K)<br>
       </td>
       </tr>
       <tr>
       <td>&nbsp;9<br>
      </td>
      <td>Specific isochoric heat capacity</td>
       <td>c<sub>v</sub><br>
       </td>
       <td>J/(kg K)<br>
       </td>
       </tr>
       <tr>
       <td>10<br>
      </td>
      <td>Isentropic exponent, kappa<span class=\"nobr\">=<font face=\"Symbol\">-</font>(v/p)
(dp/dv)<sub>s</sub></span></td>
     <td>kappa (<font face=\"Symbol\">k</font>)<br>
     </td>
     <td>1<br>
     </td>
     </tr>
     <tr>
     <td>11<br>
      </td>
      <td>Speed of sound<br>
     </td>
     <td>a<br>
     </td>
     <td>m/s<br>
     </td>
     </tr>
     <tr>
     <td>12<br>
      </td>
      <td>Dryness fraction<br>
     </td>
     <td>x<br>
     </td>
     <td>kg/kg<br>
     </td>
     </tr>
     <tr>
     <td>13<br>
      </td>
      <td>Specific Helmholtz free energy,     f = u - Ts</td>
     <td>f<br>
     </td>
     <td>J/kg<br>
     </td>
     </tr>
     <tr>
     <td>14<br>
      </td>
      <td>Specific Gibbs free energy,     g = h - Ts</td>
     <td>g<br>
     </td>
     <td>J/kg<br>
     </td>
     </tr>
     <tr>
     <td>15<br>
      </td>
      <td>Isenthalpic exponent, <span class=\"nobr\"> theta = -(v/p)(dp/dv)<sub>h</sub></span></td>
     <td>theta (<font face=\"Symbol\">q</font>)<br>
     </td>
     <td>1<br>
     </td>
     </tr>
     <tr>
     <td>16<br>
      </td>
      <td>Isobaric volume expansion coefficient, alpha = v<sup>-1</sup>       (dv/dT)<sub>p</sub></td>
     <td>alpha  (<font face=\"Symbol\">a</font>)<br>
     </td>
       <td>1/K<br>
     </td>
     </tr>
     <tr>
     <td>17<br>
      </td>
      <td>Isochoric pressure coefficient,     <span class=\"nobr\">beta = p<sup><font face=\"Symbol\">-</font>1</sup>(dp/dT)<sub>v</sub></span></td>
     <td>beta (<font face=\"Symbol\">b</font>)<br>
     </td>
     <td>1/K<br>
     </td>
     </tr>
     <tr>
     <td>18<br>
     </td>
     <td>Isothermal compressibility, <span class=\"nobr\">gamma = <font
 face=\"Symbol\">-</font>v<sup><font face=\"Symbol\">-</font>1</sup>(dv/dp)<sub>T</sub></span></td>
     <td>gamma (<font face=\"Symbol\">g</font>)<br>
     </td>
     <td>1/Pa<br>
     </td>
     </tr>
     <!-- <tr><td>f</td><td>Fugacity</td></tr> --> <tr>
     <td>19<br>
      </td>
      <td>Dynamic viscosity</td>
     <td>eta (<font face=\"Symbol\">h</font>)<br>
     </td>
     <td>Pa s<br>
     </td>
     </tr>
     <tr>
     <td>20<br>
      </td>
      <td>Kinematic viscosity</td>
     <td>nu (<font face=\"Symbol\">n</font>)<br>
     </td>
     <td>m<sup>2</sup>/s<br>
     </td>
     </tr>
     <!-- <tr><td>Pr</td><td>Prandtl number</td></tr> --> <tr>
     <td>21<br>
      </td>
      <td>Thermal conductivity</td>
     <td>lambda (<font face=\"Symbol\">l</font>)<br>
     </td>
     <td>W/(m K)<br>
     </td>
     </tr>
     <tr>
     <td>22<br>
      </td>
      <td>Surface tension</td>
     <td>sigma (<font face=\"Symbol\">s</font>)<br>
     </td>
     <td>N/m<br>
     </td>
     </tr>
  </tbody>
</table>
        <p>The properties 1-11 are calculated by default with the functions for dynamic
        simulation, 2 of these variables are the dynamic states and are the inputs
        to calculate all other properties. In addition to these properties
        of general interest, the entries to the thermodynamic Jacobian matrix which render
        the mass- and energy balances explicit in the input variables to the property calculation are also calculated.
        For an explanatory example using pressure and specific enthalpy as states, see the Examples sub-package.</p>
        <p>The high-level calls to steam properties are grouped into records comprising both the properties of general interest
        and the entries to the thermodynamic Jacobian. If additional properties are
        needed the low level functions in BaseIF97 provide more choice.</p>
        <hr size=3 width=\"90%\">
        <h4>Additional functions</h4>
        <ul>
        <li>Function <strong>boundaryvals_p</strong> computes the temperature and the specific enthalpy and
        entropy on both phase boundaries as a function of p</li>
        <li>Function <strong>boundaryderivs_p</strong> is the Modelica derivative function of <strong>boundaryvals_p</strong></li>
        <li>Function <strong>extraDerivs_ph</strong> computes all entries to Bridgmans tables for all
        one-phase regions of IF97 using inputs (p,h). All 336 directional derivatives of the
        thermodynamic surface can be computed as a ratio of two entries in the return data, see package Common
        for details.</li>
        <li>Function <strong>extraDerivs_pT</strong> computes all entries to Bridgmans tables for all
        one-phase regions of IF97 using inputs (p,T).</li>
        </ul>
        </html>"));
      end BaseIF97;
      replaceable record iter = BaseIF97.IterationData;
      function waterBaseProp_ph "Intermediate property record for water"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0
          "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
        input Integer region=0
          "If 0, do region computation, otherwise assume the region is this input";
        output Common.IF97BaseTwoPhase aux "Auxiliary record";
      protected
        Common.GibbsDerivs g
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        Common.HelmholtzDerivs f
          "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        Integer error "Error flag for inverse iterations";
        SI.SpecificEnthalpy h_liq "Liquid specific enthalpy";
        SI.Density d_liq "Liquid density";
        SI.SpecificEnthalpy h_vap "Vapour specific enthalpy";
        SI.Density d_vap "Vapour density";
        Common.PhaseBoundaryProperties liq "Phase boundary property record";
        Common.PhaseBoundaryProperties vap "Phase boundary property record";
        Common.GibbsDerivs gl
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        Common.GibbsDerivs gv
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        myMedia.Common.HelmholtzDerivs fl "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        myMedia.Common.HelmholtzDerivs fv "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        SI.Temperature t1
          "Temperature at phase boundary, using inverse from region 1";
        SI.Temperature t2
          "Temperature at phase boundary, using inverse from region 2";
      algorithm
        aux.region := if region == 0 then (if phase == 2 then 4 else
          BaseIF97.Regions.region_ph(
            p=p,
            h=h,
            phase=phase)) else region;
        aux.phase := if phase <> 0 then phase else if aux.region == 4 then 2 else 1;
        aux.p := max(p, 611.657);
        aux.h := max(h, 1e3);
        aux.R := BaseIF97.data.RH2O;
        aux.vt := 0.0 "initialized in case it is not needed";
        aux.vp := 0.0 "initialized in case it is not needed";
        if (aux.region == 1) then
          aux.T := BaseIF97.Basic.tph1(aux.p, aux.h);
          g := BaseIF97.Basic.g1(p, aux.T);
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := p/(aux.R*aux.T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.vp := aux.R*aux.T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 0.0;
          aux.dpT := -aux.vt/aux.vp;
        elseif (aux.region == 2) then
          aux.T := BaseIF97.Basic.tph2(aux.p, aux.h);
          g := BaseIF97.Basic.g2(p, aux.T);
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := p/(aux.R*aux.T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*aux.T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 1.0;
          aux.dpT := -aux.vt/aux.vp;
        elseif (aux.region == 3) then
          (aux.rho,aux.T,error) := BaseIF97.Inverses.dtofph3(
              p=aux.p,
              h=aux.h,
              delp=1.0e-7,
              delh=1.0e-6);
          f := BaseIF97.Basic.f3(aux.rho, aux.T);
          aux.h := aux.R*aux.T*(f.tau*f.ftau + f.delta*f.fdelta);
          aux.s := aux.R*(f.tau*f.ftau - f.f);
          aux.pd := aux.R*aux.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*aux.rho*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := abs(aux.R*(-f.tau*f.tau*f.ftautau))
            "Can be close to neg. infinity near critical point";
          aux.cp := (aux.rho*aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt)/(aux.rho*
            aux.rho*aux.pd);
          aux.x := 0.0;
          aux.dpT := aux.pt;
          /*safety against div-by-0 in initialization*/
        elseif (aux.region == 4) then
          h_liq := hl_p(p);
          h_vap := hv_p(p);
          aux.x := if (h_vap <> h_liq) then (h - h_liq)/(h_vap - h_liq) else 1.0;
          if p < BaseIF97.data.PLIMIT4A then
            t1 := BaseIF97.Basic.tph1(aux.p, h_liq);
            t2 := BaseIF97.Basic.tph2(aux.p, h_vap);
            gl := BaseIF97.Basic.g1(aux.p, t1);
            gv := BaseIF97.Basic.g2(aux.p, t2);
            liq := Common.gibbsToBoundaryProps(gl);
            vap := Common.gibbsToBoundaryProps(gv);
            aux.T := t1 + aux.x*(t2 - t1);
          else
            aux.T := BaseIF97.Basic.tsat(aux.p);
            // how to avoid ?
            d_liq := rhol_T(aux.T);
            d_vap := rhov_T(aux.T);
            fl := BaseIF97.Basic.f3(d_liq, aux.T);
            fv := BaseIF97.Basic.f3(d_vap, aux.T);
            liq := Common.helmholtzToBoundaryProps(fl);
            vap := Common.helmholtzToBoundaryProps(fv);
            //  aux.dpT := BaseIF97.Basic.dptofT(aux.T);
          end if;
          aux.dpT := if (liq.d <> vap.d) then (vap.s - liq.s)*liq.d*vap.d/(liq.d -
            vap.d) else BaseIF97.Basic.dptofT(aux.T);
          aux.s := liq.s + aux.x*(vap.s - liq.s);
          aux.rho := liq.d*vap.d/(vap.d + aux.x*(liq.d - vap.d));
          aux.cv := Common.cv2Phase(
              liq,
              vap,
              aux.x,
              aux.T,
              p);
          aux.cp := liq.cp + aux.x*(vap.cp - liq.cp);
          aux.pt := liq.pt + aux.x*(vap.pt - liq.pt);
          aux.pd := liq.pd + aux.x*(vap.pd - liq.pd);
        elseif (aux.region == 5) then
          (aux.T,error) := BaseIF97.Inverses.tofph5(
              p=aux.p,
              h=aux.h,
              reldh=1.0e-7);
          assert(error == 0, "Error in inverse iteration of steam tables");
          g := BaseIF97.Basic.g5(aux.p, aux.T);
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := p/(aux.R*aux.T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*aux.T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.dpT := -aux.vt/aux.vp;
        else
          assert(false, "Error in region computation of IF97 steam tables" +
            "(p = " + String(p) + ", h = " + String(h) + ")");
        end if;
      end waterBaseProp_ph;

      function waterBaseProp_ps "Intermediate property record for water"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Integer phase=0
          "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
        input Integer region=0
          "If 0, do region computation, otherwise assume the region is this input";
        output Common.IF97BaseTwoPhase aux "Auxiliary record";
      protected
        Common.GibbsDerivs g
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        Common.HelmholtzDerivs f
          "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        Integer error "Error flag for inverse iterations";
        SI.SpecificEntropy s_liq "Liquid specific entropy";
        SI.Density d_liq "Liquid density";
        SI.SpecificEntropy s_vap "Vapour specific entropy";
        SI.Density d_vap "Vapour density";
        Common.PhaseBoundaryProperties liq "Phase boundary property record";
        Common.PhaseBoundaryProperties vap "Phase boundary property record";
        Common.GibbsDerivs gl
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        Common.GibbsDerivs gv
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        myMedia.Common.HelmholtzDerivs fl "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        myMedia.Common.HelmholtzDerivs fv "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        SI.Temperature t1
          "Temperature at phase boundary, using inverse from region 1";
        SI.Temperature t2
          "Temperature at phase boundary, using inverse from region 2";
      algorithm
        aux.region := if region == 0 then (if phase == 2 then 4 else
          BaseIF97.Regions.region_ps(
            p=p,
            s=s,
            phase=phase)) else region;
        aux.phase := if phase <> 0 then phase else if aux.region == 4 then 2 else 1;
        aux.p := p;
        aux.s := s;
        aux.R := BaseIF97.data.RH2O;
        aux.vt := 0.0 "initialized in case it is not needed";
        aux.vp := 0.0 "initialized in case it is not needed";
        if (aux.region == 1) then
          aux.T := BaseIF97.Basic.tps1(p, s);
          g := BaseIF97.Basic.g1(p, aux.T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.rho := p/(aux.R*aux.T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*aux.T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 0.0;
          aux.dpT := -aux.vt/aux.vp;
        elseif (aux.region == 2) then
          aux.T := BaseIF97.Basic.tps2(p, s);
          g := BaseIF97.Basic.g2(p, aux.T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.rho := p/(aux.R*aux.T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*aux.T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 1.0;
          aux.dpT := -aux.vt/aux.vp;
        elseif (aux.region == 3) then
          (aux.rho,aux.T,error) := BaseIF97.Inverses.dtofps3(
              p=p,
              s=s,
              delp=1.0e-7,
              dels=1.0e-6);
          f := BaseIF97.Basic.f3(aux.rho, aux.T);
          aux.h := aux.R*aux.T*(f.tau*f.ftau + f.delta*f.fdelta);
          aux.s := aux.R*(f.tau*f.ftau - f.f);
          aux.pd := aux.R*aux.T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*aux.rho*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := aux.R*(-f.tau*f.tau*f.ftautau);
          aux.cp := (aux.rho*aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt)/(aux.rho*
            aux.rho*aux.pd);
          aux.x := 0.0;
          aux.dpT := aux.pt;
          /*safety against div-by-0 in initialization*/
        elseif (aux.region == 4) then
          s_liq := BaseIF97.Regions.sl_p(p);
          s_vap := BaseIF97.Regions.sv_p(p);
          aux.x := if (s_vap <> s_liq) then (s - s_liq)/(s_vap - s_liq) else 1.0;
          if p < BaseIF97.data.PLIMIT4A then
            t1 := BaseIF97.Basic.tps1(p, s_liq);
            t2 := BaseIF97.Basic.tps2(p, s_vap);
            gl := BaseIF97.Basic.g1(p, t1);
            gv := BaseIF97.Basic.g2(p, t2);
            liq := Common.gibbsToBoundaryProps(gl);
            vap := Common.gibbsToBoundaryProps(gv);
            aux.T := t1 + aux.x*(t2 - t1);
          else
            aux.T := BaseIF97.Basic.tsat(p);
            d_liq := rhol_T(aux.T);
            d_vap := rhov_T(aux.T);
            fl := BaseIF97.Basic.f3(d_liq, aux.T);
            fv := BaseIF97.Basic.f3(d_vap, aux.T);
            liq := Common.helmholtzToBoundaryProps(fl);
            vap := Common.helmholtzToBoundaryProps(fv);
          end if;
          aux.dpT := if (liq.d <> vap.d) then (vap.s - liq.s)*liq.d*vap.d/(liq.d -
            vap.d) else BaseIF97.Basic.dptofT(aux.T);
          aux.h := liq.h + aux.x*(vap.h - liq.h);
          aux.rho := liq.d*vap.d/(vap.d + aux.x*(liq.d - vap.d));
          aux.cv := Common.cv2Phase(
              liq,
              vap,
              aux.x,
              aux.T,
              p);
          aux.cp := liq.cp + aux.x*(vap.cp - liq.cp);
          aux.pt := liq.pt + aux.x*(vap.pt - liq.pt);
          aux.pd := liq.pd + aux.x*(vap.pd - liq.pd);
        elseif (aux.region == 5) then
          (aux.T,error) := BaseIF97.Inverses.tofps5(
              p=p,
              s=s,
              relds=1.0e-7);
          assert(error == 0, "Error in inverse iteration of steam tables");
          g := BaseIF97.Basic.g5(p, aux.T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.rho := p/(aux.R*aux.T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*aux.T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.dpT := -aux.vt/aux.vp;
          aux.x := 1.0;
        else
          assert(false, "Error in region computation of IF97 steam tables" +
            "(p = " + String(p) + ", s = " + String(s) + ")");
        end if;
      end waterBaseProp_ps;

      function rho_props_ps "Density as function of pressure and specific entropy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        output SI.Density rho "Density";
      algorithm
        rho := properties.rho;
        annotation (Inline=false, LateInline=true);
      end rho_props_ps;

      function rho_ps "Density as function of pressure and specific entropy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Density rho "Density";
      algorithm
        rho := rho_props_ps(
            p,
            s,
            waterBaseProp_ps(
              p,
              s,
              phase,
              region));
        annotation (Inline=true);
      end rho_ps;

      function T_props_ps
        "Temperature as function of pressure and specific entropy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        output SI.Temperature T "Temperature";
      algorithm
        T := properties.T;
        annotation (Inline=false, LateInline=true);
      end T_props_ps;

      function T_ps "Temperature as function of pressure and specific entropy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Temperature T "Temperature";
      algorithm
        T := T_props_ps(
            p,
            s,
            waterBaseProp_ps(
              p,
              s,
              phase,
              region));
        annotation (Inline=true);
      end T_ps;

      function h_props_ps
        "Specific enthalpy as function or pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := aux.h;
        annotation (Inline=false, LateInline=true);
      end h_props_ps;

      function h_ps "Specific enthalpy as function or pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := h_props_ps(
            p,
            s,
            waterBaseProp_ps(
              p,
              s,
              phase,
              region));
        annotation (Inline=true);
      end h_ps;

      function phase_ps "Phase as a function of pressure and specific entropy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        output Integer phase "True if in liquid or gas or supercritical region";
      algorithm
        phase := if ((s < sl_p(p) or s > sv_p(p)) or p > BaseIF97.data.PCRIT) then
          1 else 2;
        annotation (Inline=true);
      end phase_ps;

      function phase_ph "Phase as a function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        output Integer phase "True if in liquid or gas or supercritical region";
      algorithm
        phase := if ((h < hl_p(p) or h > hv_p(p)) or p > BaseIF97.data.PCRIT) then
          1 else 2;
        annotation (Inline=true);
      end phase_ph;

      function phase_dT "Phase as a function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Density rho "Density";
        input SI.Temperature T "Temperature";
        output Integer phase "True if in liquid or gas or supercritical region";
      algorithm
        phase := if not ((rho < rhol_T(T) and rho > rhov_T(T)) and T < BaseIF97.data.TCRIT)
           then 1 else 2;
        annotation (Inline=true);
      end phase_dT;

      function rho_props_ph "Density as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        output SI.Density rho "Density";
      algorithm
        rho := properties.rho;
        annotation (
          derivative(noDerivative=properties) = rho_ph_der,
          Inline=false,
          LateInline=true);
      end rho_props_ph;

      function rho_ph "Density as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Density rho "Density";
      algorithm
        rho := rho_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end rho_ph;

      function rho_ph_der "Derivative function of rho_ph"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        input Real p_der "Derivative of pressure";
        input Real h_der "Derivative of specific enthalpy";
        output Real rho_der "Derivative of density";
      algorithm
        if (properties.region == 4) then
          rho_der := (properties.rho*(properties.rho*properties.cv/properties.dpT + 1.0)/(properties.dpT*properties.T))*p_der
             + (-properties.rho*properties.rho/(properties.dpT*properties.T))*h_der;
        elseif (properties.region == 3) then
          rho_der := ((properties.rho*(properties.cv*properties.rho + properties.pt))/(properties.rho*properties.rho*properties.pd*
            properties.cv + properties.T*properties.pt*properties.pt))*p_der + (-properties.rho*properties.rho*properties.pt/(properties.rho
            *properties.rho*properties.pd*properties.cv + properties.T*properties.pt*properties.pt))*h_der;
        else
          //regions 1,2,5
          rho_der := (-properties.rho*properties.rho*(properties.vp*properties.cp - properties.vt/properties.rho + properties.T*properties.vt
            *properties.vt)/properties.cp)*p_der + (-properties.rho*properties.rho*properties.vt/(properties.cp))*h_der;
        end if;
      end rho_ph_der;

      function T_props_ph
        "Temperature as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        output SI.Temperature T "Temperature";
      algorithm
        T := properties.T;
        annotation (
          derivative(noDerivative=properties) = T_ph_der,
          Inline=false,
          LateInline=true);
      end T_props_ph;

      function T_ph "Temperature as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Temperature T "Temperature";
      algorithm
        T := T_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end T_ph;

      function T_ph_der "Derivative function of T_ph"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        input Real p_der "Derivative of pressure";
        input Real h_der "Derivative of specific enthalpy";
        output Real T_der "Derivative of temperature";
      algorithm
        if (properties.region == 4) then
          T_der := 1/properties.dpT*p_der;
        elseif (properties.region == 3) then
          T_der := ((-properties.rho*properties.pd + properties.T*properties.pt)/(properties.rho*properties.rho*properties.pd*properties.cv
             + properties.T*properties.pt*properties.pt))*p_der + ((properties.rho*properties.rho*properties.pd)/(properties.rho*properties.rho
            *properties.pd*properties.cv + properties.T*properties.pt*properties.pt))*h_der;
        else
          //regions 1,2 or 5
          T_der := ((-1/properties.rho + properties.T*properties.vt)/properties.cp)*p_der + (1/properties.cp)*h_der;
        end if;
      end T_ph_der;

      function s_props_ph
        "Specific entropy as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        output SI.SpecificEntropy s "Specific entropy";
      algorithm
        s := properties.s;
        annotation (
          derivative(noDerivative=properties) = s_ph_der,
          Inline=false,
          LateInline=true);
      end s_props_ph;

      function s_ph
        "Specific entropy as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificEntropy s "Specific entropy";
      algorithm
        s := s_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end s_ph;

      function s_ph_der
        "Specific entropy as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase properties "Auxiliary record";
        input Real p_der "Derivative of pressure";
        input Real h_der "Derivative of specific enthalpy";
        output Real s_der "Derivative of entropy";
      algorithm
        s_der := -1/(properties.rho*properties.T)*p_der + 1/properties.T*h_der;
        annotation (Inline=true);
      end s_ph_der;

      function cv_props_ph
        "Specific heat capacity at constant volume as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificHeatCapacity cv "Specific heat capacity";
      algorithm
        cv := aux.cv;
        annotation (Inline=false, LateInline=true);
      end cv_props_ph;

      function cv_ph
        "Specific heat capacity at constant volume as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificHeatCapacity cv "Specific heat capacity";
      algorithm
        cv := cv_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end cv_ph;

      function regionAssertReal "Assert function for inlining"
        extends Modelica.Icons.Function;
        input Boolean check "Condition to check";
        output Real dummy "Dummy output";
      algorithm
        assert(check, "This function can not be called with two-phase inputs!");
      end regionAssertReal;

      function cp_props_ph
        "Specific heat capacity at constant pressure as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificHeatCapacity cp "Specific heat capacity";
      algorithm
        cp := aux.cp;
        annotation (Inline=false, LateInline=true);
      end cp_props_ph;

      function cp_ph
        "Specific heat capacity at constant pressure as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificHeatCapacity cp "Specific heat capacity";
      algorithm
        cp := cp_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end cp_ph;

      function beta_props_ph
        "Isobaric expansion coefficient as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.RelativePressureCoefficient beta "Isobaric expansion coefficient";
      algorithm
        beta := if aux.region == 3 or aux.region == 4 then aux.pt/(aux.rho*aux.pd)
           else aux.vt*aux.rho;
        annotation (Inline=false, LateInline=true);
      end beta_props_ph;

      function beta_ph
        "Isobaric expansion coefficient as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.RelativePressureCoefficient beta "Isobaric expansion coefficient";
      algorithm
        beta := beta_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end beta_ph;

      function kappa_props_ph
        "Isothermal compressibility factor as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.IsothermalCompressibility kappa
          "Isothermal compressibility factor";
      algorithm
        kappa := if aux.region == 3 or aux.region == 4 then 1/(aux.rho*aux.pd)
           else -aux.vp*aux.rho;
        annotation (Inline=false, LateInline=true);
      end kappa_props_ph;

      function kappa_ph
        "Isothermal compressibility factor as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.IsothermalCompressibility kappa
          "Isothermal compressibility factor";
      algorithm
        kappa := kappa_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end kappa_ph;

      function velocityOfSound_props_ph
        "Speed of sound as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.Velocity v_sound "Speed of sound";
      algorithm
        // dp/drho at constant s
        v_sound := if aux.region == 3 then sqrt(max(0, (aux.pd*aux.rho*aux.rho*aux.cv
           + aux.pt*aux.pt*aux.T)/(aux.rho*aux.rho*aux.cv))) else if aux.region ==
          4 then sqrt(max(0, 1/((aux.rho*(aux.rho*aux.cv/aux.dpT + 1.0)/(aux.dpT*
          aux.T)) - 1/aux.rho*aux.rho*aux.rho/(aux.dpT*aux.T)))) else sqrt(max(0, -
          aux.cp/(aux.rho*aux.rho*(aux.vp*aux.cp + aux.vt*aux.vt*aux.T))));
        annotation (Inline=false, LateInline=true);
      end velocityOfSound_props_ph;

      function velocityOfSound_ph
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Velocity v_sound "Speed of sound";
      algorithm
        v_sound := velocityOfSound_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end velocityOfSound_ph;

      function isentropicExponent_props_ph
        "Isentropic exponent as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output Real gamma "Isentropic exponent";
      algorithm
        gamma := if aux.region == 3 then 1/(aux.rho*p)*((aux.pd*aux.cv*aux.rho*aux.rho
           + aux.pt*aux.pt*aux.T)/(aux.cv)) else if aux.region == 4 then 1/(aux.rho
          *p)*aux.dpT*aux.dpT*aux.T/aux.cv else -1/(aux.rho*aux.p)*aux.cp/(aux.vp*
          aux.cp + aux.vt*aux.vt*aux.T);
        annotation (Inline=false, LateInline=true);
      end isentropicExponent_props_ph;

      function isentropicExponent_ph
        "Isentropic exponent as function of pressure and specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output Real gamma "Isentropic exponent";
      algorithm
        gamma := isentropicExponent_props_ph(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=false, LateInline=true);
      end isentropicExponent_ph;

      function ddph_props "Density derivative by pressure"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.DerDensityByPressure ddph "Density derivative by pressure";
      algorithm
        ddph := if aux.region == 3 then ((aux.rho*(aux.cv*aux.rho + aux.pt))/(aux.rho
          *aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt)) else if aux.region == 4
           then (aux.rho*(aux.rho*aux.cv/aux.dpT + 1.0)/(aux.dpT*aux.T)) else (-aux.rho
          *aux.rho*(aux.vp*aux.cp - aux.vt/aux.rho + aux.T*aux.vt*aux.vt)/aux.cp);
        annotation (Inline=false, LateInline=true);
      end ddph_props;

      function ddph "Density derivative by pressure"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.DerDensityByPressure ddph "Density derivative by pressure";
      algorithm
        ddph := ddph_props(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end ddph;

      function ddhp_props "Density derivative by specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.DerDensityByEnthalpy ddhp
          "Density derivative by specific enthalpy";
      algorithm
        ddhp := if aux.region == 3 then -aux.rho*aux.rho*aux.pt/(aux.rho*aux.rho*
          aux.pd*aux.cv + aux.T*aux.pt*aux.pt) else if aux.region == 4 then -aux.rho
          *aux.rho/(aux.dpT*aux.T) else -aux.rho*aux.rho*aux.vt/(aux.cp);
        annotation (Inline=false, LateInline=true);
      end ddhp_props;

      function ddhp "Density derivative by specific enthalpy"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEnthalpy h "Specific enthalpy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.DerDensityByEnthalpy ddhp
          "Density derivative by specific enthalpy";
      algorithm
        ddhp := ddhp_props(
            p,
            h,
            waterBaseProp_ph(
              p,
              h,
              phase,
              region));
        annotation (Inline=true);
      end ddhp;

      function waterBaseProp_pT
        "Intermediate property record for water (p and T preferred states)"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, do region computation, otherwise assume the region is this input";
        output Common.IF97BaseTwoPhase aux "Auxiliary record";
      protected
        Common.GibbsDerivs g
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        Common.HelmholtzDerivs f
          "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        Integer error "Error flag for inverse iterations";
      algorithm
        aux.phase := 1;
        aux.region := if region == 0 then BaseIF97.Regions.region_pT(p=p, T=T)
           else region;
        aux.R := BaseIF97.data.RH2O;
        aux.p := p;
        aux.T := T;
        aux.vt := 0.0 "initialized in case it is not needed";
        aux.vp := 0.0 "initialized in case it is not needed";
        if (aux.region == 1) then
          g := BaseIF97.Basic.g1(p, T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := p/(aux.R*T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 0.0;
          aux.dpT := -aux.vt/aux.vp;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
        elseif (aux.region == 2) then
          g := BaseIF97.Basic.g2(p, T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := p/(aux.R*T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 1.0;
          aux.dpT := -aux.vt/aux.vp;
        elseif (aux.region == 3) then
          (aux.rho,error) := BaseIF97.Inverses.dofpt3(
              p=p,
              T=T,
              delp=1.0e-7);
          f := BaseIF97.Basic.f3(aux.rho, T);
          aux.h := aux.R*T*(f.tau*f.ftau + f.delta*f.fdelta);
          aux.s := aux.R*(f.tau*f.ftau - f.f);
          aux.pd := aux.R*T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*aux.rho*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := aux.R*(-f.tau*f.tau*f.ftautau);
          aux.x := 0.0;
          aux.dpT := aux.pt;
          /*safety against div-by-0 in initialization*/
        elseif (aux.region == 5) then
          g := BaseIF97.Basic.g5(p, T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := p/(aux.R*T*g.pi*g.gpi);
          aux.vt := aux.R/p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*T/(p*p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 1.0;
          aux.dpT := -aux.vt/aux.vp;
        else
          assert(false, "Error in region computation of IF97 steam tables" +
            "(p = " + String(p) + ", T = " + String(T) + ")");
        end if;
      end waterBaseProp_pT;

      function rho_props_pT "Density as function or pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.Density rho "Density";
      algorithm
        rho := aux.rho;
        annotation (
          derivative(noDerivative=aux) = rho_pT_der,
          Inline=false,
          LateInline=true);
      end rho_props_pT;

      function rho_pT "Density as function or pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Density rho "Density";
      algorithm
        rho := rho_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end rho_pT;

      function h_props_pT
        "Specific enthalpy as function or pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := aux.h;
        annotation (
          derivative(noDerivative=aux) = h_pT_der,
          Inline=false,
          LateInline=true);
      end h_props_pT;

      function h_pT "Specific enthalpy as function or pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := h_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end h_pT;

      function h_pT_der "Derivative function of h_pT"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        input Real p_der "Derivative of pressure";
        input Real T_der "Derivative of temperature";
        output Real h_der "Derivative of specific enthalpy";
      algorithm
        if (aux.region == 3) then
          h_der := ((-aux.rho*aux.pd + T*aux.pt)/(aux.rho*aux.rho*aux.pd))*p_der +
            ((aux.rho*aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt)/(aux.rho*aux.rho
            *aux.pd))*T_der;
        else
          //regions 1,2 or 5
          h_der := (1/aux.rho - aux.T*aux.vt)*p_der + aux.cp*T_der;
        end if;
      end h_pT_der;

      function rho_pT_der "Derivative function of rho_pT"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        input Real p_der "Derivative of pressure";
        input Real T_der "Derivative of temperature";
        output Real rho_der "Derivative of density";
      algorithm
        if (aux.region == 3) then
          rho_der := (1/aux.pd)*p_der - (aux.pt/aux.pd)*T_der;
        else
          //regions 1,2 or 5
          rho_der := (-aux.rho*aux.rho*aux.vp)*p_der + (-aux.rho*aux.rho*aux.vt)*
            T_der;
        end if;
      end rho_pT_der;

      function s_props_pT
        "Specific entropy as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificEntropy s "Specific entropy";
      algorithm
        s := aux.s;
        annotation (Inline=false, LateInline=true);
      end s_props_pT;

      function s_pT "Temperature as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificEntropy s "Specific entropy";
      algorithm
        s := s_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end s_pT;

      function cv_props_pT
        "Specific heat capacity at constant volume as function of pressure and temperature"

        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificHeatCapacity cv "Specific heat capacity";
      algorithm
        cv := aux.cv;
        annotation (Inline=false, LateInline=true);
      end cv_props_pT;

      function cv_pT
        "Specific heat capacity at constant volume as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificHeatCapacity cv "Specific heat capacity";
      algorithm
        cv := cv_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end cv_pT;

      function cp_props_pT
        "Specific heat capacity at constant pressure as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificHeatCapacity cp "Specific heat capacity";
      algorithm
        cp := if aux.region == 3 then (aux.rho*aux.rho*aux.pd*aux.cv + aux.T*aux.pt
          *aux.pt)/(aux.rho*aux.rho*aux.pd) else aux.cp;
        annotation (Inline=false, LateInline=true);
      end cp_props_pT;

      function cp_pT
        "Specific heat capacity at constant pressure as function of pressure and temperature"

        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificHeatCapacity cp "Specific heat capacity";
      algorithm
        cp := cp_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end cp_pT;

      function beta_props_pT
        "Isobaric expansion coefficient as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.RelativePressureCoefficient beta "Isobaric expansion coefficient";
      algorithm
        beta := if aux.region == 3 then aux.pt/(aux.rho*aux.pd) else aux.vt*aux.rho;
        annotation (Inline=false, LateInline=true);
      end beta_props_pT;

      function beta_pT
        "Isobaric expansion coefficient as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.RelativePressureCoefficient beta "Isobaric expansion coefficient";
      algorithm
        beta := beta_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end beta_pT;

      function kappa_props_pT
        "Isothermal compressibility factor as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.IsothermalCompressibility kappa
          "Isothermal compressibility factor";
      algorithm
        kappa := if aux.region == 3 then 1/(aux.rho*aux.pd) else -aux.vp*aux.rho;
        annotation (Inline=false, LateInline=true);
      end kappa_props_pT;

      function kappa_pT
        "Isothermal compressibility factor as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.IsothermalCompressibility kappa
          "Isothermal compressibility factor";
      algorithm
        kappa := kappa_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end kappa_pT;

      function velocityOfSound_props_pT
        "Speed of sound as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.Velocity v_sound "Speed of sound";
      algorithm
        // dp/drho at constant s
        v_sound := if aux.region == 3 then sqrt(max(0, (aux.pd*aux.rho*aux.rho*aux.cv
           + aux.pt*aux.pt*aux.T)/(aux.rho*aux.rho*aux.cv))) else sqrt(max(0, -aux.cp
          /(aux.rho*aux.rho*(aux.vp*aux.cp + aux.vt*aux.vt*aux.T))));
        annotation (Inline=false, LateInline=true);
      end velocityOfSound_props_pT;

      function velocityOfSound_pT
        "Speed of sound as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Velocity v_sound "Speed of sound";
      algorithm
        v_sound := velocityOfSound_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=true);
      end velocityOfSound_pT;

      function isentropicExponent_props_pT
        "Isentropic exponent as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output Real gamma "Isentropic exponent";
      algorithm
        gamma := if aux.region == 3 then 1/(aux.rho*p)*((aux.pd*aux.cv*aux.rho*aux.rho
           + aux.pt*aux.pt*aux.T)/(aux.cv)) else -1/(aux.rho*aux.p)*aux.cp/(aux.vp*
          aux.cp + aux.vt*aux.vt*aux.T);
        annotation (Inline=false, LateInline=true);
      end isentropicExponent_props_pT;

      function isentropicExponent_pT
        "Isentropic exponent as function of pressure and temperature"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.Temperature T "Temperature";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output Real gamma "Isentropic exponent";
      algorithm
        gamma := isentropicExponent_props_pT(
            p,
            T,
            waterBaseProp_pT(
              p,
              T,
              region));
        annotation (Inline=false, LateInline=true);
      end isentropicExponent_pT;

      function waterBaseProp_dT
        "Intermediate property record for water (d and T preferred states)"
        extends Modelica.Icons.Function;
        input SI.Density rho "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0
          "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
        input Integer region=0
          "If 0, do region computation, otherwise assume the region is this input";
        output Common.IF97BaseTwoPhase aux "Auxiliary record";
      protected
        SI.SpecificEnthalpy h_liq "Liquid specific enthalpy";
        SI.Density d_liq "Liquid density";
        SI.SpecificEnthalpy h_vap "Vapour specific enthalpy";
        SI.Density d_vap "Vapour density";
        Common.GibbsDerivs g
          "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        Common.HelmholtzDerivs f
          "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        myMedia.Common.PhaseBoundaryProperties liq "Phase boundary property record";
        myMedia.Common.PhaseBoundaryProperties vap "Phase boundary property record";
        myMedia.Common.GibbsDerivs gl "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        myMedia.Common.GibbsDerivs gv "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
        myMedia.Common.HelmholtzDerivs fl "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        myMedia.Common.HelmholtzDerivs fv "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
        Integer error "Error flag for inverse iterations";
      algorithm
        aux.region := if region == 0 then (if phase == 2 then 4 else
          BaseIF97.Regions.region_dT(
            d=rho,
            T=T,
            phase=phase)) else region;
        aux.phase := if aux.region == 4 then 2 else 1;
        aux.R := BaseIF97.data.RH2O;
        aux.rho := rho;
        aux.T := T;
        aux.vt := 0.0 "initialized in case it is not needed";
        aux.vp := 0.0 "initialized in case it is not needed";
        if (aux.region == 1) then
          (aux.p,error) := BaseIF97.Inverses.pofdt125(
              d=rho,
              T=T,
              reldd=1.0e-8,
              region=1);
          g := BaseIF97.Basic.g1(aux.p, T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := aux.p/(aux.R*T*g.pi*g.gpi);
          aux.vt := aux.R/aux.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*T/(aux.p*aux.p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 0.0;
        elseif (aux.region == 2) then
          (aux.p,error) := BaseIF97.Inverses.pofdt125(
              d=rho,
              T=T,
              reldd=1.0e-8,
              region=2);
          g := BaseIF97.Basic.g2(aux.p, T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := aux.p/(aux.R*T*g.pi*g.gpi);
          aux.vt := aux.R/aux.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*T/(aux.p*aux.p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
          aux.x := 1.0;
        elseif (aux.region == 3) then
          f := BaseIF97.Basic.f3(rho, T);
          aux.p := aux.R*rho*T*f.delta*f.fdelta;
          aux.h := aux.R*T*(f.tau*f.ftau + f.delta*f.fdelta);
          aux.s := aux.R*(f.tau*f.ftau - f.f);
          aux.pd := aux.R*T*f.delta*(2.0*f.fdelta + f.delta*f.fdeltadelta);
          aux.pt := aux.R*rho*f.delta*(f.fdelta - f.tau*f.fdeltatau);
          aux.cv := aux.R*(-f.tau*f.tau*f.ftautau);
          aux.cp := (aux.rho*aux.rho*aux.pd*aux.cv + aux.T*aux.pt*aux.pt)/(aux.rho*
            aux.rho*aux.pd);
          aux.x := 0.0;
        elseif (aux.region == 4) then
          aux.p := BaseIF97.Basic.psat(T);
          d_liq := rhol_T(T);
          d_vap := rhov_T(T);
          h_liq := hl_p(aux.p);
          h_vap := hv_p(aux.p);
          aux.x := if (d_vap <> d_liq) then (1/rho - 1/d_liq)/(1/d_vap - 1/d_liq)
             else 1.0;
          aux.h := h_liq + aux.x*(h_vap - h_liq);
          if T < BaseIF97.data.TLIMIT1 then
            gl := BaseIF97.Basic.g1(aux.p, T);
            gv := BaseIF97.Basic.g2(aux.p, T);
            liq := Common.gibbsToBoundaryProps(gl);
            vap := Common.gibbsToBoundaryProps(gv);
          else
            fl := BaseIF97.Basic.f3(d_liq, T);
            fv := BaseIF97.Basic.f3(d_vap, T);
            liq := Common.helmholtzToBoundaryProps(fl);
            vap := Common.helmholtzToBoundaryProps(fv);
          end if;
          aux.dpT := if (liq.d <> vap.d) then (vap.s - liq.s)*liq.d*vap.d/(liq.d -
            vap.d) else BaseIF97.Basic.dptofT(aux.T);
          aux.s := liq.s + aux.x*(vap.s - liq.s);
          aux.cv := Common.cv2Phase(
              liq,
              vap,
              aux.x,
              aux.T,
              aux.p);
          aux.cp := liq.cp + aux.x*(vap.cp - liq.cp);
          aux.pt := liq.pt + aux.x*(vap.pt - liq.pt);
          aux.pd := liq.pd + aux.x*(vap.pd - liq.pd);
        elseif (aux.region == 5) then
          (aux.p,error) := BaseIF97.Inverses.pofdt125(
              d=rho,
              T=T,
              reldd=1.0e-8,
              region=5);
          g := BaseIF97.Basic.g2(aux.p, T);
          aux.h := aux.R*aux.T*g.tau*g.gtau;
          aux.s := aux.R*(g.tau*g.gtau - g.g);
          aux.rho := aux.p/(aux.R*T*g.pi*g.gpi);
          aux.vt := aux.R/aux.p*(g.pi*g.gpi - g.tau*g.pi*g.gtaupi);
          aux.vp := aux.R*T/(aux.p*aux.p)*g.pi*g.pi*g.gpipi;
          aux.pt := -g.p/g.T*(g.gpi - g.tau*g.gtaupi)/(g.gpipi*g.pi);
          aux.pd := -g.R*g.T*g.gpi*g.gpi/(g.gpipi);
          aux.cp := -aux.R*g.tau*g.tau*g.gtautau;
          aux.cv := aux.R*(-g.tau*g.tau*g.gtautau + ((g.gpi - g.tau*g.gtaupi)*(g.gpi
             - g.tau*g.gtaupi)/g.gpipi));
        else
          assert(false, "Error in region computation of IF97 steam tables" +
            "(rho = " + String(rho) + ", T = " + String(T) + ")");
        end if;
      end waterBaseProp_dT;

      function h_props_dT
        "Specific enthalpy as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := aux.h;
        annotation (
          derivative(noDerivative=aux) = h_dT_der,
          Inline=false,
          LateInline=true);
      end h_props_dT;

      function h_dT "Specific enthalpy as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := h_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end h_dT;

      function h_dT_der "Derivative function of h_dT"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        input Real d_der "Derivative of density";
        input Real T_der "Derivative of temperature";
        output Real h_der "Derivative of specific enthalpy";
      algorithm
        if (aux.region == 3) then
          h_der := ((-d*aux.pd + T*aux.pt)/(d*d))*d_der + ((aux.cv*d + aux.pt)/d)*
            T_der;
        elseif (aux.region == 4) then
          h_der := T*aux.dpT/(d*d)*d_der + ((aux.cv*d + aux.dpT)/d)*T_der;
        else
          //regions 1,2 or 5
          h_der := (-(-1/d + T*aux.vt)/(d*d*aux.vp))*d_der + ((aux.vp*aux.cp - aux.vt
            /d + T*aux.vt*aux.vt)/aux.vp)*T_der;
        end if;
      end h_dT_der;

      function p_props_dT "Pressure as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.Pressure p "Pressure";
      algorithm
        p := aux.p;
        annotation (
          derivative(noDerivative=aux) = p_dT_der,
          Inline=false,
          LateInline=true);
      end p_props_dT;

      function p_dT "Pressure as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Pressure p "Pressure";
      algorithm
        p := p_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end p_dT;

      function p_dT_der "Derivative function of p_dT"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        input Real d_der "Derivative of density";
        input Real T_der "Derivative of temperature";
        output Real p_der "Derivative of pressure";
      algorithm
        if (aux.region == 3) then
          p_der := aux.pd*d_der + aux.pt*T_der;
        elseif (aux.region == 4) then
          p_der := aux.dpT*T_der;
          /*density derivative is 0.0*/
        else
          //regions 1,2 or 5
          p_der := (-1/(d*d*aux.vp))*d_der + (-aux.vt/aux.vp)*T_der;
        end if;
      end p_dT_der;

      function s_props_dT "Specific entropy as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificEntropy s "Specific entropy";
      algorithm
        s := aux.s;
        annotation (Inline=false, LateInline=true);
      end s_props_dT;

      function s_dT "Temperature as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificEntropy s "Specific entropy";
      algorithm
        s := s_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end s_dT;

      function cv_props_dT
        "Specific heat capacity at constant volume as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificHeatCapacity cv "Specific heat capacity";
      algorithm
        cv := aux.cv;
        annotation (Inline=false, LateInline=true);
      end cv_props_dT;

      function cv_dT
        "Specific heat capacity at constant volume as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificHeatCapacity cv "Specific heat capacity";
      algorithm
        cv := cv_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end cv_dT;

      function cp_props_dT
        "Specific heat capacity at constant pressure as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificHeatCapacity cp "Specific heat capacity";
      algorithm
        cp := aux.cp;
        annotation (Inline=false, LateInline=true);
      end cp_props_dT;

      function cp_dT
        "Specific heat capacity at constant pressure as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificHeatCapacity cp "Specific heat capacity";
      algorithm
        cp := cp_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end cp_dT;

      function beta_props_dT
        "Isobaric expansion coefficient as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.RelativePressureCoefficient beta "Isobaric expansion coefficient";
      algorithm
        beta := if aux.region == 3 or aux.region == 4 then aux.pt/(aux.rho*aux.pd)
           else aux.vt*aux.rho;
        annotation (Inline=false, LateInline=true);
      end beta_props_dT;

      function beta_dT
        "Isobaric expansion coefficient as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.RelativePressureCoefficient beta "Isobaric expansion coefficient";
      algorithm
        beta := beta_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end beta_dT;

      function kappa_props_dT
        "Isothermal compressibility factor as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.IsothermalCompressibility kappa
          "Isothermal compressibility factor";
      algorithm
        kappa := if aux.region == 3 or aux.region == 4 then 1/(aux.rho*aux.pd)
           else -aux.vp*aux.rho;
        annotation (Inline=false, LateInline=true);
      end kappa_props_dT;

      function kappa_dT
        "Isothermal compressibility factor as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.IsothermalCompressibility kappa
          "Isothermal compressibility factor";
      algorithm
        kappa := kappa_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end kappa_dT;

      function velocityOfSound_props_dT
        "Speed of sound as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.Velocity v_sound "Speed of sound";
      algorithm
        // dp/drho at constant s
        v_sound := if aux.region == 3 then sqrt(max(0, ((aux.pd*aux.rho*aux.rho*aux.cv
           + aux.pt*aux.pt*aux.T)/(aux.rho*aux.rho*aux.cv)))) else if aux.region
           == 4 then sqrt(max(0, 1/((aux.rho*(aux.rho*aux.cv/aux.dpT + 1.0)/(aux.dpT
          *aux.T)) - 1/aux.rho*aux.rho*aux.rho/(aux.dpT*aux.T)))) else sqrt(max(0,
          -aux.cp/(aux.rho*aux.rho*(aux.vp*aux.cp + aux.vt*aux.vt*aux.T))));
        annotation (Inline=false, LateInline=true);
      end velocityOfSound_props_dT;

      function velocityOfSound_dT
        "Speed of sound as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.Velocity v_sound "Speed of sound";
      algorithm
        v_sound := velocityOfSound_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=true);
      end velocityOfSound_dT;

      function isentropicExponent_props_dT
        "Isentropic exponent as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output Real gamma "Isentropic exponent";
      algorithm
        gamma := if aux.region == 3 then 1/(aux.rho*aux.p)*((aux.pd*aux.cv*aux.rho*
          aux.rho + aux.pt*aux.pt*aux.T)/(aux.cv)) else if aux.region == 4 then 1/(
          aux.rho*aux.p)*aux.dpT*aux.dpT*aux.T/aux.cv else -1/(aux.rho*aux.p)*aux.cp
          /(aux.vp*aux.cp + aux.vt*aux.vt*aux.T);
        annotation (Inline=false, LateInline=true);
      end isentropicExponent_props_dT;

      function isentropicExponent_dT
        "Isentropic exponent as function of density and temperature"
        extends Modelica.Icons.Function;
        input SI.Density d "Density";
        input SI.Temperature T "Temperature";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output Real gamma "Isentropic exponent";
      algorithm
        gamma := isentropicExponent_props_dT(
            d,
            T,
            waterBaseProp_dT(
              d,
              T,
              phase,
              region));
        annotation (Inline=false, LateInline=true);
      end isentropicExponent_dT;

    protected
      package ThermoFluidSpecial
        extends Modelica.Icons.FunctionsPackage;
        function water_ph
          "Calculate the property record for dynamic simulation properties using p,h as states"
          extends Modelica.Icons.Function;
          input SI.Pressure p "Pressure";
          input SI.SpecificEnthalpy h "Specific enthalpy";
          input Integer phase=0
            "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
          output myMedia.Common.ThermoFluidSpecial.ThermoProperties_ph pro "Property record for dynamic simulation";
        protected
          myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          Integer region(min=1, max=5) "IF97 region";
          Integer error "Error flag";
          SI.Temperature T "Temperature";
          SI.Density d "Density";
        algorithm
          region := BaseIF97.Regions.region_ph(
                p,
                h,
                phase);
          if (region == 1) then
            T := BaseIF97.Basic.tph1(p, h);
            g := BaseIF97.Basic.g1(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_ph(g);
          elseif (region == 2) then
            T := BaseIF97.Basic.tph2(p, h);
            g := BaseIF97.Basic.g2(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_ph(g);
          elseif (region == 3) then
            (d,T,error) := BaseIF97.Inverses.dtofph3(
                  p=p,
                  h=h,
                  delp=1.0e-7,
                  delh=1.0e-6);
            f := BaseIF97.Basic.f3(d, T);
            pro := myMedia.Common.ThermoFluidSpecial.helmholtzToProps_ph(f);
          elseif (region == 4) then
            pro := BaseIF97.TwoPhase.waterR4_ph(p=p, h=h);
          elseif (region == 5) then
            (T,error) := BaseIF97.Inverses.tofph5(
                  p=p,
                  h=h,
                  reldh=1.0e-7);
            g := BaseIF97.Basic.g5(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_ph(g);
          end if;
        end water_ph;

        function water_dT
          "Calculate property record for dynamic simulation properties using d and T as dynamic states"
          extends Modelica.Icons.Function;
          input SI.Density d "Density";
          input SI.Temperature T "Temperature";
          input Integer phase=0
            "Phase: 2 for two-phase, 1 for one phase, 0 if unknown";
          output myMedia.Common.ThermoFluidSpecial.ThermoProperties_dT pro "Property record for dynamic simulation";
        protected
          SI.Pressure p "Pressure";
          Integer region(min=1, max=5) "IF97 region";
          myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          Integer error "Error flag";
        algorithm
          region := BaseIF97.Regions.region_dT(
                d,
                T,
                phase);
          if (region == 1) then
            (p,error) := BaseIF97.Inverses.pofdt125(
                  d=d,
                  T=T,
                  reldd=iter.DELD,
                  region=1);
            g := BaseIF97.Basic.g1(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_dT(g);
          elseif (region == 2) then
            (p,error) := BaseIF97.Inverses.pofdt125(
                  d=d,
                  T=T,
                  reldd=iter.DELD,
                  region=2);
            g := BaseIF97.Basic.g2(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_dT(g);
          elseif (region == 3) then
            f := BaseIF97.Basic.f3(d, T);
            pro := myMedia.Common.ThermoFluidSpecial.helmholtzToProps_dT(f);
          elseif (region == 4) then
            pro := BaseIF97.TwoPhase.waterR4_dT(d=d, T=T);
          elseif (region == 5) then
            (p,error) := BaseIF97.Inverses.pofdt125(
                  d=d,
                  T=T,
                  reldd=iter.DELD,
                  region=5);
            g := BaseIF97.Basic.g5(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_dT(g);
          end if;
        end water_dT;

        function water_pT
          "Calculate property record for dynamic simulation properties using p and T as dynamic states"

          extends Modelica.Icons.Function;
          input SI.Pressure p "Pressure";
          input SI.Temperature T "Temperature";
          output myMedia.Common.ThermoFluidSpecial.ThermoProperties_pT pro "Property record for dynamic simulation";
        protected
          SI.Density d "Density";
          Integer region(min=1, max=5) "IF97 region";
          myMedia.Common.GibbsDerivs g "Dimensionless Gibbs function and derivatives w.r.t. pi and tau";
          myMedia.Common.HelmholtzDerivs f "Dimensionless Helmholtz function and derivatives w.r.t. delta and tau";
          Integer error "Error flag";
        algorithm
          region := BaseIF97.Regions.region_pT(p, T);
          if (region == 1) then
            g := BaseIF97.Basic.g1(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_pT(g);
          elseif (region == 2) then
            g := BaseIF97.Basic.g2(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_pT(g);
          elseif (region == 3) then
            (d,error) := BaseIF97.Inverses.dofpt3(
                  p=p,
                  T=T,
                  delp=iter.DELP);
            f := BaseIF97.Basic.f3(d, T);
            pro := myMedia.Common.ThermoFluidSpecial.helmholtzToProps_pT(f);
          elseif (region == 5) then
            g := BaseIF97.Basic.g5(p, T);
            pro := myMedia.Common.ThermoFluidSpecial.gibbsToProps_pT(g);
          end if;
        end water_pT;
      end ThermoFluidSpecial;

    public
      function hl_p = BaseIF97.Regions.hl_p
        "Compute the saturated liquid specific h(p)";
      function hv_p = BaseIF97.Regions.hv_p
        "Compute the saturated vapour specific h(p)";
      function sl_p = BaseIF97.Regions.sl_p
        "Compute the saturated liquid specific s(p)";
      function sv_p = BaseIF97.Regions.sv_p
        "Compute the saturated vapour specific s(p)";
      function rhol_T = BaseIF97.Regions.rhol_T "Compute the saturated liquid d(T)";
      function rhov_T = BaseIF97.Regions.rhov_T "Compute the saturated vapour d(T)";
      function rhol_p = BaseIF97.Regions.rhol_p "Compute the saturated liquid d(p)";
      function rhov_p = BaseIF97.Regions.rhov_p "Compute the saturated vapour d(p)";
      function dynamicViscosity = BaseIF97.Transport.visc_dTp
        "Compute eta(d,T) in the one-phase region";
      function thermalConductivity = BaseIF97.Transport.cond_dTp
        "Compute lambda(d,T,p) in the one-phase region";
      function surfaceTension = BaseIF97.Transport.surfaceTension
        "Compute sigma(T) at saturation T";
      //   function isentropicEnthalpy
      //     "Isentropic specific enthalpy from p,s (preferably use dynamicIsentropicEnthalpy in dynamic simulation!)"
      //     extends Modelica.Icons.Function;
      //     input SI.Pressure p "Pressure";
      //     input SI.SpecificEntropy s "Specific entropy";
      //     input Integer phase = 0 "2 for two-phase, 1 for one-phase, 0 if not known";
      //     output SI.SpecificEnthalpy h "Specific enthalpy";
      //   algorithm
      //    h := BaseIF97.Isentropic.water_hisentropic(p,s,phase);
      //   end isentropicEnthalpy;

      function isentropicEnthalpy
        "Isentropic specific enthalpy from p,s (preferably use dynamicIsentropicEnthalpy in dynamic simulation!)"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        input Integer region=0
          "If 0, region is unknown, otherwise known and this input";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := isentropicEnthalpy_props(
            p,
            s,
            waterBaseProp_ps(
              p,
              s,
              phase,
              region));
        annotation (Inline=true);
      end isentropicEnthalpy;

      function isentropicEnthalpy_props
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        output SI.SpecificEnthalpy h "Isentropic enthalpy";
      algorithm
        h := aux.h;
        annotation (
          derivative(noDerivative=aux) = isentropicEnthalpy_der,
          Inline=false,
          LateInline=true);
      end isentropicEnthalpy_props;

      function isentropicEnthalpy_der
        "Derivative of isentropic specific enthalpy from p,s"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input Common.IF97BaseTwoPhase aux "Auxiliary record";
        input Real p_der "Pressure derivative";
        input Real s_der "Entropy derivative";
        output Real h_der "Specific enthalpy derivative";
      algorithm
        h_der := 1/aux.rho*p_der + aux.T*s_der;
        annotation (Inline=true);
      end isentropicEnthalpy_der;

      function dynamicIsentropicEnthalpy
        "Isentropic specific enthalpy from p,s and good guesses of d and T"
        extends Modelica.Icons.Function;
        input SI.Pressure p "Pressure";
        input SI.SpecificEntropy s "Specific entropy";
        input SI.Density dguess "Good guess density, e.g., from adjacent volume";
        input SI.Temperature Tguess
          "Good guess temperature, e.g., from adjacent volume";
        input Integer phase=0 "2 for two-phase, 1 for one-phase, 0 if not known";
        output SI.SpecificEnthalpy h "Specific enthalpy";
      algorithm
        h := BaseIF97.Isentropic.water_hisentropic_dyn(
            p,
            s,
            dguess,
            Tguess,
            0);
        annotation (Inline=true);
      end dynamicIsentropicEnthalpy;
      annotation (Documentation(info="<html>
      <h4>Package description:</h4>
      <p>This package provides high accuracy physical properties for water according
      to the IAPWS/IF97 standard. It has been part of the ThermoFluid Modelica library and been extended,
      reorganized and documented to become part of the Modelica Standard library.</p>
      <p>An important feature that distinguishes this implementation of the IF97 steam property standard
      is that this implementation has been explicitly designed to work well in dynamic simulations. Computational
      performance has been of high importance. This means that there often exist several ways to get the same result
      from different functions if one of the functions is called often but can be optimized for that purpose.
      </p>
      <p>
      The original documentation of the IAPWS/IF97 steam properties can freely be distributed with computer
      implementations, so for curious minds the complete standard documentation is provided with the Modelica
      properties library. The following documents are included
      (in directory Modelica/Resources/Documentation/Media/Water/IF97documentation):
      </p>
      <ul>
      <li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a> The standards document for the main part of the IF97.</li>
      <li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/Back3.pdf\">Back3.pdf</a> The backwards equations for region 3.</li>
      <li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/crits.pdf\">crits.pdf</a> The critical point data.</li>
      <li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/meltsub.pdf\">meltsub.pdf</a> The melting- and sublimation line formulation (in IF97_Utilities.BaseIF97.IceBoundaries)</li>
      <li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/surf.pdf\">surf.pdf</a> The surface tension standard definition</li>
      <li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/thcond.pdf\">thcond.pdf</a> The thermal conductivity standard definition</li>
      <li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/visc.pdf\">visc.pdf</a> The viscosity standard definition</li>
      </ul>
      <h4>Package contents
      </h4>
      <ul>
      <li>Package <strong>BaseIF97</strong> contains the implementation of the IAPWS-IF97 as described in
      <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a>. The explicit backwards equations for region 3 from
      <a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/Back3.pdf\">Back3.pdf</a> are implemented as initial values for an inverse iteration of the exact
      function in IF97 for the input pairs (p,h) and (p,s).
      The low-level functions in BaseIF97 are not needed for standard simulation usage,
      but can be useful for experts and some special purposes.</li>
      <li>Function <strong>water_ph</strong> returns all properties needed for a dynamic control volume model and properties of general
      interest using pressure p and specific entropy enthalpy h as dynamic states in the record ThermoProperties_ph.</li>
      <li>Function <strong>water_ps</strong> returns all properties needed for a dynamic control volume model and properties of general
      interest using pressure p and specific entropy s as dynamic states in the record ThermoProperties_ps.</li>
      <li>Function <strong>water_dT</strong> returns all properties needed for a dynamic control volume model and properties of general
      interest using density d and temperature T as dynamic states in the record ThermoProperties_dT.</li>
      <li>Function <strong>water_pT</strong> returns all properties needed for a dynamic control volume model and properties of general
      interest using pressure p and temperature T as dynamic states in the record ThermoProperties_pT. Due to the coupling of
      pressure and temperature in the two-phase region, this model can obviously
      only be used for one-phase models or models treating both phases independently.</li>
      <li>Function <strong>hl_p</strong> computes the liquid specific enthalpy as a function of pressure. For overcritical pressures,
      the critical specific enthalpy is returned</li>
      <li>Function <strong>hv_p</strong> computes the vapour specific enthalpy as a function of pressure. For overcritical pressures,
      the critical specific enthalpy is returned</li>
      <li>Function <strong>sl_p</strong> computes the liquid specific entropy as a function of pressure. For overcritical pressures,
      the critical  specific entropy is returned</li>
      <li>Function <strong>sv_p</strong> computes the vapour  specific entropy as a function of pressure. For overcritical pressures,
      the critical  specific entropy is returned</li>
      <li>Function <strong>rhol_T</strong> computes the liquid density as a function of temperature. For overcritical temperatures,
      the critical density is returned</li>
      <li>Function <strong>rhol_T</strong> computes the vapour density as a function of temperature. For overcritical temperatures,
      the critical density is returned</li>
      <li>Function <strong>dynamicViscosity</strong> computes the dynamic viscosity as a function of density and temperature.</li>
      <li>Function <strong>thermalConductivity</strong> computes the thermal conductivity as a function of density, temperature and pressure.
      <strong>Important note</strong>: Obviously only two of the three
      inputs are really needed, but using three inputs speeds up the computation and the three variables
      are known in most models anyways. The inputs d,T and p have to be consistent.</li>
      <li>Function <strong>surfaceTension</strong> computes the surface tension between vapour
          and liquid water as a function of temperature.</li>
      <li>Function <strong>isentropicEnthalpy</strong> computes the specific enthalpy h(p,s,phase) in all regions.
          The phase input is needed due to discontinuous derivatives at the phase boundary.</li>
      <li>Function <strong>dynamicIsentropicEnthalpy</strong> computes the specific enthalpy h(p,s,,dguess,Tguess,phase) in all regions.
          The phase input is needed due to discontinuous derivatives at the phase boundary. Tguess and dguess are initial guess
          values for the density and temperature consistent with p and s. This function should be preferred in
          dynamic simulations where good guesses are often available.</li>
      </ul>
      <h4>Version Info and Revision history
      </h4>
      <ul>
      <li>First implemented: <em>July, 2000</em>
      by Hubertus Tummescheit for the ThermoFluid Library with help from Jonas Eborn and Falko Jens Wagner
      </li>
      <li>Code reorganization, enhanced documentation, additional functions:   <em>December, 2002</em>
      by <a href=\"mailto:Hubertus.Tummescheit@modelon.se\">Hubertus Tummescheit</a> and moved to Modelica
      properties library.</li>
      </ul>
      <address>Author: Hubertus Tummescheit,<br>
      Modelon AB<br>
      Ideon Science Park<br>
      SE-22370 Lund, Sweden<br>
      email: hubertus@modelon.se
      </address>
      </html>",     revisions="<h4>Intermediate release notes during development</h4>
<p>Currently the Events/noEvents switch is only implemented for p-h states. Only after testing that implementation, it will be extended to dT.</p>"));
    end IF97_Utilities;
  annotation (Documentation(info="<html>
<p>This package contains different medium models for water:</p>
<ul>
<li><strong>ConstantPropertyLiquidWater</strong><br>
    Simple liquid water medium (incompressible, constant data).</li>
<li><strong>IdealSteam</strong><br>
    Steam water medium as ideal gas from Media.IdealGases.SingleGases.H2O</li>
<li><strong>WaterIF97 derived models</strong><br>
    High precision water model according to the IAPWS/IF97 standard
    (liquid, steam, two phase region). Models with different independent
    variables are provided as well as models valid only
    for particular regions. The <strong>WaterIF97_ph</strong> model is valid
    in all regions and is the recommended one to use.</li>
</ul>
<h4>Overview of WaterIF97 derived water models</h4>
<p>
The WaterIF97 models calculate medium properties
for water in the <strong>liquid</strong>, <strong>gas</strong> and <strong>two phase</strong> regions
according to the IAPWS/IF97 standard, i.e., the accepted industrial standard
and best compromise between accuracy and computation time.
It has been part of the ThermoFluid Modelica library and been extended,
reorganized and documented to become part of the Modelica Standard library.</p>
<p>An important feature that distinguishes this implementation of the IF97 steam property standard
is that this implementation has been explicitly designed to work well in dynamic simulations. Computational
performance has been of high importance. This means that there often exist several ways to get the same result
from different functions if one of the functions is called often but can be optimized for that purpose.
</p>
<p>Three variable pairs can be the independent variables of the model:
</p>
<ol>
<li>Pressure <strong>p</strong> and specific enthalpy <strong>h</strong> are
    the most natural choice for general applications.
    This is the recommended choice for most general purpose
    applications, in particular for power plants.</li>
<li>Pressure <strong>p</strong> and temperature <strong>T</strong> are the most natural
    choice for applications where water is always in the same phase,
    both for liquid water and steam.</li>
<li>Density <strong>d</strong> and temperature <strong>T</strong> are explicit
    variables of the Helmholtz function in the near-critical
    region and can be the best choice for applications with
    super-critical or near-critical states.</li>
</ol>
<p>
The following quantities are always computed in Medium.BaseProperties:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Variable</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>T</td>
      <td>K</td>
      <td>temperature</td></tr>
  <tr><td>u</td>
      <td>J/kg</td>
      <td>specific internal energy</td></tr>
  <tr><td>d</td>
      <td>kg/m^3</td>
      <td>density</td></tr>
  <tr><td>p</td>
      <td>Pa</td>
      <td>pressure</td></tr>
  <tr><td>h</td>
      <td>J/kg</td>
      <td>specific enthalpy</td></tr>
</table>
<p>
In some cases additional medium properties are needed.
A component that needs these optional properties has to call
one of the following functions:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Function call</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>Medium.dynamicViscosity(medium.state)</td>
      <td>Pa.s</td>
      <td>dynamic viscosity</td></tr>
  <tr><td>Medium.thermalConductivity(medium.state)</td>
      <td>W/(m.K)</td>
      <td>thermal conductivity</td></tr>
  <tr><td>Medium.prandtlNumber(medium.state)</td>
      <td>1</td>
      <td>Prandtl number</td></tr>
  <tr><td>Medium.specificEntropy(medium.state)</td>
      <td>J/(kg.K)</td>
      <td>specific entropy</td></tr>
  <tr><td>Medium.heatCapacity_cp(medium.state)</td>
      <td>J/(kg.K)</td>
      <td>specific heat capacity at constant pressure</td></tr>
  <tr><td>Medium.heatCapacity_cv(medium.state)</td>
      <td>J/(kg.K)</td>
      <td>specific heat capacity at constant density</td></tr>
  <tr><td>Medium.isentropicExponent(medium.state)</td>
      <td>1</td>
      <td>isentropic exponent</td></tr>
  <tr><td>Medium.isentropicEnthalpy(pressure, medium.state)</td>
      <td>J/kg</td>
      <td>isentropic enthalpy</td></tr>
  <tr><td>Medium.velocityOfSound(medium.state)</td>
      <td>m/s</td>
      <td>velocity of sound</td></tr>
  <tr><td>Medium.isobaricExpansionCoefficient(medium.state)</td>
      <td>1/K</td>
      <td>isobaric expansion coefficient</td></tr>
  <tr><td>Medium.isothermalCompressibility(medium.state)</td>
      <td>1/Pa</td>
      <td>isothermal compressibility</td></tr>
  <tr><td>Medium.density_derp_h(medium.state)</td>
      <td>kg/(m3.Pa)</td>
      <td>derivative of density by pressure at constant enthalpy</td></tr>
  <tr><td>Medium.density_derh_p(medium.state)</td>
      <td>kg2/(m3.J)</td>
      <td>derivative of density by enthalpy at constant pressure</td></tr>
  <tr><td>Medium.density_derp_T(medium.state)</td>
      <td>kg/(m3.Pa)</td>
      <td>derivative of density by pressure at constant temperature</td></tr>
  <tr><td>Medium.density_derT_p(medium.state)</td>
      <td>kg/(m3.K)</td>
      <td>derivative of density by temperature at constant pressure</td></tr>
  <tr><td>Medium.density_derX(medium.state)</td>
      <td>kg/m3</td>
      <td>derivative of density by mass fraction</td></tr>
  <tr><td>Medium.molarMass(medium.state)</td>
      <td>kg/mol</td>
      <td>molar mass</td></tr>
</table>
<p>More details are given in
<a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.OptionalProperties\">
Modelica.Media.UsersGuide.MediumUsage.OptionalProperties</a>.

Many additional optional functions are defined to compute properties of
saturated media, either liquid (bubble point) or vapour (dew point).
The argument to such functions is a SaturationProperties record, which can be
set starting from either the saturation pressure or the saturation temperature.
With reference to a model defining a pressure p, a temperature T, and a
SaturationProperties record sat, the following functions are provided:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>Function call</strong></td>
      <td><strong>Unit</strong></td>
      <td><strong>Description</strong></td></tr>
  <tr><td>Medium.saturationPressure(T)</td>
      <td>Pa</td>
      <td>Saturation pressure at temperature T</td></tr>
  <tr><td>Medium.saturationTemperature(p)</td>
      <td>K</td>
      <td>Saturation temperature at pressure p</td></tr>
  <tr><td>Medium.saturationTemperature_derp(p)</td>
      <td>K/Pa</td>
      <td>Derivative of saturation temperature with respect to pressure</td></tr>
  <tr><td>Medium.bubbleEnthalpy(sat)</td>
      <td>J/kg</td>
      <td>Specific enthalpy at bubble point</td></tr>
  <tr><td>Medium.dewEnthalpy(sat)</td>
      <td>J/kg</td>
      <td>Specific enthalpy at dew point</td></tr>
  <tr><td>Medium.bubbleEntropy(sat)</td>
      <td>J/(kg.K)</td>
      <td>Specific entropy at bubble point</td></tr>
  <tr><td>Medium.dewEntropy(sat)</td>
      <td>J/(kg.K)</td>
      <td>Specific entropy at dew point</td></tr>
  <tr><td>Medium.bubbleDensity(sat)</td>
      <td>kg/m3</td>
      <td>Density at bubble point</td></tr>
  <tr><td>Medium.dewDensity(sat)</td>
      <td>kg/m3</td>
      <td>Density at dew point</td></tr>
  <tr><td>Medium.dBubbleDensity_dPressure(sat)</td>
      <td>kg/(m3.Pa)</td>
      <td>Derivative of density at bubble point with respect to pressure</td></tr>
  <tr><td>Medium.dDewDensity_dPressure(sat)</td>
      <td>kg/(m3.Pa)</td>
      <td>Derivative of density at dew point with respect to pressure</td></tr>
  <tr><td>Medium.dBubbleEnthalpy_dPressure(sat)</td>
      <td>J/(kg.Pa)</td>
      <td>Derivative of specific enthalpy at bubble point with respect to pressure</td></tr>
  <tr><td>Medium.dDewEnthalpy_dPressure(sat)</td>
      <td>J/(kg.Pa)</td>
      <td>Derivative of specific enthalpy at dew point with respect to pressure</td></tr>
  <tr><td>Medium.surfaceTension(sat)</td>
      <td>N/m</td>
      <td>Surface tension between liquid and vapour phase</td></tr>
</table>
<p>Details on usage and some examples are given in:
<a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage.TwoPhase\">
Modelica.Media.UsersGuide.MediumUsage.TwoPhase</a>.
</p>
<p>Many further properties can be computed. Using the well-known Bridgman's Tables,
all first partial derivatives of the standard thermodynamic variables can be computed easily.
</p>
<p>
The documentation of the IAPWS/IF97 steam properties can be freely
distributed with computer implementations and are included here
(in directory Modelica/Resources/Documentation/Media/Water/IF97documentation):
</p>
<ul>
<li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/IF97.pdf\">IF97.pdf</a> The standards document for the main part of the IF97.</li>
<li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/Back3.pdf\">Back3.pdf</a> The backwards equations for region 3.</li>
<li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/crits.pdf\">crits.pdf</a> The critical point data.</li>
<li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/meltsub.pdf\">meltsub.pdf</a> The melting- and sublimation line formulation (not implemented)</li>
<li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/surf.pdf\">surf.pdf</a> The surface tension standard definition</li>
<li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/thcond.pdf\">thcond.pdf</a> The thermal conductivity standard definition</li>
<li><a href=\"modelica://Modelica/Resources/Documentation/Media/Water/IF97documentation/visc.pdf\">visc.pdf</a> The viscosity standard definition</li>
</ul>
</html>"));
  end Water;
annotation (preferredView="info",Documentation(info="<html>
<p><br><b><span style=\"color: #aa0000;\">This is a temporary copy of the MSL Media library because the original version had an information-incomplete interface that needed fixing. </span></b></p>
<p><br><b><span style=\"color: #aa0000;\">This local copy will be removed once, the main MSL media has been fixed.</span></b></p>
<p><br>This library contains <a href=\"modelica://Modelica.Media.Interfaces\">interface</a> definitions for media and the following <b>property</b> models for single and multiple substance fluids with one and multiple phases: </p>
<ul>
<li><a href=\"modelica://Modelica.Media.IdealGases\">Ideal gases:</a><br>1241 high precision gas models based on the NASA Glenn coefficients, plus ideal gas mixture models based on the same data.</li>
<li><a href=\"modelica://Modelica.Media.Water\">Water models:</a><br>ConstantPropertyLiquidWater, WaterIF97 (high precision water model according to the IAPWS/IF97 standard)</li>
<li><a href=\"modelica://Modelica.Media.Air\">Air models:</a><br>SimpleAir, DryAirNasa, ReferenceAir, MoistAir, ReferenceMoistAir.</li>
<li><a href=\"modelica://Modelica.Media.Incompressible\">Incompressible media:</a><br>TableBased incompressible fluid models (properties are defined by tables rho(T), HeatCapacity_cp(T), etc.)</li>
<li><a href=\"modelica://Modelica.Media.CompressibleLiquids\">Compressible liquids:</a><br>Simple liquid models with linear compressibility</li>
<li><a href=\"modelica://Modelica.Media.R134a\">Refrigerant Tetrafluoroethane (R134a)</a>.</li>
</ul>
<p>The following parts are useful, when newly starting with this library:</p>
<ul>
<li><a href=\"modelica://Modelica.Media.UsersGuide\">Modelica.Media.UsersGuide</a>.</li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumUsage\">Modelica.Media.UsersGuide.MediumUsage</a> describes how to use a medium model in a component model.</li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.MediumDefinition\">Modelica.Media.UsersGuide.MediumDefinition</a> describes how a new fluid medium model has to be implemented.</li>
<li><a href=\"modelica://Modelica.Media.UsersGuide.ReleaseNotes\">Modelica.Media.UsersGuide.ReleaseNotes</a> summarizes the changes of the library releases.</li>
<li><a href=\"modelica://Modelica.Media.Examples\">Modelica.Media.Examples</a> contains examples that demonstrate the usage of this library.</li>
</ul>
<p>Copyright &copy; 1998-2019, Modelica Association and contributors </p>
</html>", revisions="<html>
<ul>
<li><em>February 01, 2017</em> by Thomas Beutlich:<br/>
    Fixed data errors of the NASA Glenn coefficients in some ideal gases (CH2, CH3, CH3OOH, C2CL2, C2CL4, C2CL6, C2HCL, C2HCL3, CH2CO_ketene, O_CH_2O, HO_CO_2OH, CH2BrminusCOOH, C2H3CL, CH2CLminusCOOH, HO2, HO2minus, OD, ODminus), see <a href=\"https://github.com/modelica/ModelicaStandardLibrary/issues/1922\">#1922</a></li>
<li><em>May 16, 2013</em> by Stefan Wischhusen (XRG Simulation):<br/>
    Added new media models Air.ReferenceMoistAir, Air.ReferenceAir, R134a.</li>
<li><em>May 25, 2011</em> by Francesco Casella:<br/>Added min/max attributes to Water, TableBased, MixtureGasNasa, SimpleAir and MoistAir local types.</li>
<li><em>May 25, 2011</em> by Stefan Wischhusen:<br/>Added individual settings for polynomial fittings of properties.</li>
</ul>
</html>"),
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
        graphics={
        Line(
          points = {{-76,-80},{-62,-30},{-32,40},{4,66},{48,66},{73,45},{62,-8},{48,-50},{38,-80}},
          color={64,64,64},
          smooth=Smooth.Bezier),
        Line(
          points={{-40,20},{68,20}},
          color={175,175,175}),
        Line(
          points={{-40,20},{-44,88},{-44,88}},
          color={175,175,175}),
        Line(
          points={{68,20},{86,-58}},
          color={175,175,175}),
        Line(
          points={{-60,-28},{56,-28}},
          color={175,175,175}),
        Line(
          points={{-60,-28},{-74,84},{-74,84}},
          color={175,175,175}),
        Line(
          points={{56,-28},{70,-80}},
          color={175,175,175}),
        Line(
          points={{-76,-80},{38,-80}},
          color={175,175,175}),
        Line(
          points={{-76,-80},{-94,-16},{-94,-16}},
          color={175,175,175})}));
end myMedia;
